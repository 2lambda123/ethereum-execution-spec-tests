"""
Test Exponentiation opcode
"""

from ethereum_test_tools import (
    Account,
    Environment,
    StateTest,
    TestAddress,
    Transaction,
    Yul,
    test_from,
    to_address,
    to_hash,
)


@test_from("istanbul")
def test_exp_opcode(fork):
    """
    Test Exp Opcode.
    Port from ethereum/tests:
      - GeneralStateTestsFiller/VMTests/vmTest/expFiller.yml
      - Original test by Ori Pomerantz qbzzt1@gmail.com
    """
    env = Environment()
    pre = {TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE)}
    txs = []
    post = {}

    code_exp = Yul(
        """
        {
            let calladdr := calldataload(0)
            {
            switch calladdr
                case 0x100 {
                    sstore(0, exp(2, 2))
                }
                case 0x101 { // -1**-2
                    sstore(0, exp(sub(0, 1), sub(0, 2)))
                }
                case 0x102 { // just a big number to the power of itself
                    sstore(0, exp(2147483647, 2147483647))
                }
                case 0x103 { // 0 to the power of a big number
                    sstore(0, exp(0, 2147483647))
                }
                case 0x104 { // big number to the power of 0
                    sstore(0, exp(2147483647, 0))
                }
                case 0x105 { // 257**1
                    sstore(0, exp(257, 1))
                }
                case 0x106 { // 1**257
                    sstore(0, exp(1, 257))
                }
                case 0x107 { // 2**257 (zero mod 2**256)
                    sstore(0, exp(2, 257))
                }
                case 0x108 { // 0**0 (1 in evm)
                    sstore(0, exp(0, 0))
                }
                case 0x109 { // 2**big = 0
                    sstore(0, exp(2, 0x0100000000000f))
                }
                case 0x10a { // 2**15 = 0x8000
                    sstore(0, exp(2, 15))
                }
            }
        }
        """
    )

    total_tests = 11
    solutions = {
        to_address(0x100): 0x04,
        to_address(0x101): 0x01,
        to_address(
            0x102
        ): 0xBC8CCCCCCCC888888880000000AAAAAAB00000000FFFFFFFFFFFFFFF7FFFFFFF,
        to_address(0x103): 0x00,
        to_address(0x104): 0x01,
        to_address(0x105): 0x0101,
        to_address(0x106): 0x01,
        to_address(0x107): 0x00,
        to_address(0x108): 0x01,
        to_address(0x109): 0x00,
        to_address(0x10A): 0x8000,
    }

    for i in range(0, total_tests):
        account = to_address(0x100 + i)
        pre[account] = Account(code=code_exp)

        tx = Transaction(
            nonce=i,
            data=to_hash(0x100 + i),
            to=account,
            gas_limit=500000,
            gas_price=10,
        )

        txs.append(tx)
        post[account] = Account(storage={0: solutions[account]})

    yield StateTest(env=env, pre=pre, post=post, txs=txs)


@test_from("istanbul")
def test_exp_power_2(fork):
    """
    Test Exp Opcode for 2^(2^(n)), 2^(2^(n-1)), 2^(2^(n+1)).
    Port from ethereum/tests:
      - GeneralStateTestsFiller/VMTests/vmTest/expPower2Filler.yml
      - Original test by Ori Pomerantz qbzzt1@gmail.com
    """
    env = Environment()

    pre = {
        to_address(0x100): Account(
            balance=0x0BA1A9CE0BA1A9CE,
            code=Yul(
                """
                {
                    let n := 1
                    for { } lt(n, 9) { }
                    {
                        sstore(mul(0x10, n), exp(2, exp(2, n)))
                        sstore(add(mul(0x10, n), 1), exp(2, sub(exp(2, n), 1)))
                        sstore(add(mul(0x10, n), 2), exp(2, add(exp(2, n), 1)))
                        n := add(n, 1)
                    }
                }
                """
            ),
        ),
        TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE),
    }

    tx = Transaction(
        nonce=0,
        to=to_address(0x100),
        gas_limit=5000000,
        gas_price=10,
    )

    post = {
        to_address(0x100): Account(
            storage={
                # 0x10*n:   2^(2^(n))
                # 0x10*n+1: 2^(2^(n-1))
                # 0x10*n+2: 2^(2^(n+1))
                # 2^2
                0x10: 0x04,
                0x11: 0x02,
                0x12: 0x08,
                0x20: 0x10,
                0x21: 0x08,
                0x22: 0x20,
                0x30: 0x0100,
                0x31: 0x0080,
                0x32: 0x0200,
                0x40: 0x010000,
                0x41: 0x008000,
                0x42: 0x020000,
                0x50: 0x0100000000,
                0x51: 0x0080000000,
                0x52: 0x0200000000,
                0x60: 0x010000000000000000,
                0x61: 0x008000000000000000,
                0x62: 0x020000000000000000,
                0x70: 0x0100000000000000000000000000000000,
                0x71: 0x0080000000000000000000000000000000,
                0x72: 0x0200000000000000000000000000000000,
                # 2^256 = 0 in evm math
                0x81: 0x8000000000000000000000000000000000000000000000000000000000000000,
            }
        )
    }

    yield StateTest(env=env, pre=pre, post=post, txs=[tx])


@test_from("istanbul")
def test_exp_power_256_of_256(fork):
    """
    Test Exp Opcode for (255 to 257)**((255 to 257)**n).
    Port from ethereum/tests:
      - GeneralStateTestsFiller/VMTests/vmTest/expPower256of256Filler.yml
      - Original test by Ori Pomerantz qbzzt1@gmail.com
    """
    env = Environment()

    pre = {
        to_address(0x100): Account(
            balance=0x0BA1A9CE0BA1A9CE,
            code=Yul(
                """
                {
                    let n := 0
                    for { } lt(n, 34) { }
                    {
                        sstore(mul(0x10, n), exp(256, exp(256, n)))
                        sstore(add(mul(0x10, n), 1), exp(256, exp(255, n)))
                        sstore(add(mul(0x10, n), 2), exp(256, exp(257, n)))

                        sstore(add(mul(0x10, n), 3), exp(255, exp(256, n)))
                        sstore(add(mul(0x10, n), 4), exp(255, exp(255, n)))
                        sstore(add(mul(0x10, n), 5), exp(255, exp(257, n)))

                        sstore(add(mul(0x10, n), 6), exp(257, exp(256, n)))
                        sstore(add(mul(0x10, n), 7), exp(257, exp(255, n)))
                        sstore(add(mul(0x10, n), 8), exp(257, exp(257, n)))

                        n := add(n, 1)
                    }
                }
                """
            ),
        ),
        TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE),
    }

    tx = Transaction(
        nonce=0,
        to=to_address(0x100),
        gas_limit=5000000000,
        gas_price=10,
    )

    post = {
        to_address(0x100): Account(
            storage={
                # 0x10*n:   256^(256^n)
                # 0x10*n+1: 256^(255^n)
                # 0x10*n+2: 256^(257^n)
                # 0x10*n+3: 255^(256^n)
                # 0x10*n+4: 255^(255^n)
                # 0x10*n+5: 255^(257^n)
                # 0x10*n+6: 257^(256^n)
                # 0x10*n+7: 257^(255^n)
                # 0x10*n+8: 257^(257^n)
                0x00: 0x0100,
                0x01: 0x0100,
                0x02: 0x0100,
                0x03: 0xFF,
                0x04: 0xFF,
                0x05: 0xFF,
                0x06: 0x0101,
                0x07: 0x0101,
                0x08: 0x0101,
                0x13: 0x06C3ACD330B959AD6EFABCE6D2D2125E73A88A65A9880D203DDDF5957F7F0001,
                0x14: 0x8F965A06DA0AC41DCB3A34F1D8AB7D8FEE620A94FAA42C395997756B007FFEFF,
                0x15: 0xBCE9265D88A053C18BC229EBFF404C1534E1DB43DE85131DA0179FE9FF8100FF,
                0x16: 0x02B5E9D7A094C19F5EBDD4F2E618F859ED15E4F1F0351F286BF849EB7F810001,
                0x17: 0xC73B7A6F68385C653A24993BB72EEA0E4BA17470816EC658CF9C5BEDFD81FF01,
                0x18: 0xB89FC178355660FE1C92C7D8FF11524702FAD6E2255447946442356B00810101,
                0x23: 0x4EE4CEEAAC565C81F55A87C43F82F7C889EF4FC7C679671E28D594FF7F000001,
                0x24: 0x82F46A1B4E34D66712910615D2571D75606CEAC51FA8CA8C58CF6CA881FE00FF,
                0x25: 0x81C9FCEFA5DE158AE2007F25D35C0D11CD735342A48905955A5A6852800200FF,
                0x26: 0x666AC362902470ED850709E2A29969D10CBA09DEBC03C38D172AEAFF81000001,
                0x27: 0xEB30A3C678A01BDE914548F98F3366DC0FFE9F85384EBF1111D03DAD7FFE0101,
                0x28: 0x72D0A7939B6303CE1D46E6E3F1B8BE303BFDB2B00F41AD8076B0975782020101,
                0x33: 0x109A00E1370D2D2922BF892E85BECB54297354B2E5C75388D514FF7F00000001,
                0x34: 0x54A792F15E9ABA7E4AD9E716BC169EEA3A6E2E9C49BF9B335874613C8081FEFF,
                0x35: 0x5D24A14D8E5E039372CD0F6A0F31E9ED6B75ADBA9F16B1C5B3EDD5BA818300FF,
                0x36: 0x298E2F316B4CCDED5EBF515998D9EC20DF69404B04A441782A6AFF8100000001,
                0x37: 0x4335694E98F372183C62A2339FA4AD161E9B4C42240BDC9452ABFFD07783FF01,
                0x38: 0xF0F0820797315ACD063056BBA76F6A9C3E281CDB5197A233967CA94684830101,
                0x43: 0xE6540CE46EAF70DA9D644015A661E0E245B13F307CB3885514FF7F0000000001,
                0x44: 0x6526B38B05A6325B80E1C84AB41DC934FD70F33F1BD0EAB3D1F61A4707FC00FF,
                0x45: 0xE959516CD27E5D8FD487B72DB2989B3EC2BA9FB7EAD41554526FE5A3040400FF,
                0x46: 0xE7498A48C6CE2530BBE814EE3440C8C44FFFAB7AD8A277AA6AFF810000000001,
                0x47: 0x2DFFA3E901E5A392D15B79F4193D2168147D2AA7C55870B46C3A905D03FC0101,
                0x48: 0xE16EA721C96539EDB4F7FB82DE0DAD8CCCB1E7A6966A6777635F6FB908040101,
                0x53: 0xB581AC185AAD71DB2D177C286929C4C22809E5DCB3085514FF7F000000000001,
                0x54: 0x75789EB2A64BC971389FBD11A1E6D7ABBF95AD25E23FB9AA25E73A0BFC83FEFF,
                0x55: 0xFC403FA42CEB6A0D0D3321BD9B2D8AF25B1B667F87A04F496C78168D078500FF,
                0x56: 0xCEC5EC213B9CB5811F6AE00428FD7B6EF5A1AF39A1F7AA6AFF81000000000001,
                0x57: 0x70AB32233202B98D382D17713FA0BE391EAF74F85BA1740C9C3238C4ED85FF01,
                0x58: 0xB622672A213FAA79B32185FF93A7B27A8499E48F7B032CDB4D1A70300C850101,
                0x63: 0x1948059DE1DEF03C4EC35FC22C2BB8F2BF45DC33085514FF7F00000000000001,
                0x64: 0x41F818A8E24EB6D7BB7B193B4F2B5FDCF4BD0D453F2AC3499D8830D391FA00FF,
                0x65: 0xEDE6FE4A943DFB5D967A2B85D6728759D40D2EF0AE4BC28BBB1867F98C0600FF,
                0x66: 0x083C936CBAAD5DE592BADC2E142FE4EBD6103921F7AA6AFF8100000000000001,
                0x67: 0x57385019FE4E0939CA3F35C37CADFAF52FBA5B1CDFB02DEF3866E8068BFA0101,
                0x68: 0x810AC878BD98428F6BE8C6426BA9F9DA09E3E33BF4FE10BFA3F8B12C92060101,
                0x73: 0x8BB02654111AD8C60AD8AF132283A81F455C33085514FF7F0000000000000001,
                0x74: 0xA8F75C129DBB8466D6703A2A0B8212131B3248D70E2478862AC40FE17485FEFF,
                0x75: 0x5FD4D2DE580383EE59F5E800DDB3F1717CEAE03AEDE19D3DEC5E5A69918700FF,
                0x76: 0xC8624230B524B85D6340DA48A5DB20370FB921F7AA6AFF810000000000000001,
                0x77: 0x287B58A5A13CD7F454468CA616C181712F5ED25433A7D5A894B6CED35F87FF01,
                0x78: 0x09930D11AC2804FA977BF951593C8DFF8498779CC0CDC5812A4FBA2F98870101,
                0x83: 0x230041A0E7602D6E459609ED39081EC55C33085514FF7F000000000000000001,
                0x84: 0xC407D8A413EF9079EAD457ED686A05AC81039C0CAE0A7F6AFD01E8461FF800FF,
                0x85: 0x67A397E0692385E4CD83853AABCE220A94D449E885FA867E96D3EF5E180800FF,
                0x86: 0x70ADD926E753655D6D0EBE9C0F81368FB921F7AA6AFF81000000000000000001,
                0x87: 0x0BDCE80B8378E43F13D454B9D0A4C83CF311B8EAA45D5122CFD544A217F80101,
                0x88: 0x629C25790E1488998877A9ECDF0FB69637E77D8A4BDC1B46270093BA20080101,
                0x93: 0x53017D8EB210DB2C8CD4A299079EC55C33085514FF7F00000000000000000001,
                0x94: 0x48BE09B6C6AE2AA660F1972125CECBB1038B5D236ECF766BA786E2C4E887FEFF,
                0x95: 0x2E350D847BA73DC2099F83F532951C47269D9FD7E411B50BAE00A9581F8900FF,
                0x96: 0x013AB9E1F0DF89A184B4D07080B68FB921F7AA6AFF8100000000000000000001,
                0x97: 0xF387ED41C1050F9DA667F429A3E8FB30B61A55EDE97D7B8ACD797A03CD89FF01,
                0x98: 0x525696C22BB3CE00FD2E3F6BBB9B4EA1046A5E31FCFF2FEDF8F8C74D28890101,
                0xA3: 0xFE0F60957DC223578A0298879EC55C33085514FF7F0000000000000000000001,
                0xA4: 0xC1EA45F348B5D351C4D8FE5C77DA979CADC33D866ACC42E981278896B1F600FF,
                0xA5: 0x56DDB29BCA94FB986AC0A40188B3B53F3216B3559BD8324A77EA8BD8A80A00FF,
                0xA6: 0x2D49FF6B0BBE177AE9317000B68FB921F7AA6AFF810000000000000000000001,
                0xA7: 0x185FA9EAB94CFE3016B69657E83B23FD24CC6960218254231C3DB627A7F60101,
                0xA8: 0xA7A0223829F26D6C635368034320563DF4AA5EB62EFC87A42BB35F69B20A0101,
                0xB3: 0xE1440264B8EE0CEA0218879EC55C33085514FF7F000000000000000000000001,
                0xB4: 0x29575FDCE377B23043E489E358581474BC863187FA85F9945473A2BE5889FEFF,
                0xB5: 0x3DF8C030EC521FB109C4D887DBBC14C7C9C9921B27058E3503971B60B18B00FF,
                0xB6: 0x67799740340DAF4A30F000B68FB921F7AA6AFF81000000000000000000000001,
                0xB7: 0x540A4E4635B40585E09FF10B63FFE310DD717FCA5C0A51570091E25E378BFF01,
                0xB8: 0xDBBAEF5C49FFEE61B08CDE6EBC8DBA6E9A62D56C2355D1980CB9E790BC8B0101,
                0xC3: 0xB0E95B83A36CE98218879EC55C33085514FF7F00000000000000000000000001,
                0xC4: 0xC482AB56EC19186DC48C88F30861A850B2253B1EA6DC021589E569BD47F400FF,
                0xC5: 0xCF45C7F9AF4BBE4A83055B55B97777AD5E0A3F08B129C9AE208C5D713C0C00FF,
                0xC6: 0xA5CBB62A421049B0F000B68FB921F7AA6AFF8100000000000000000000000001,
                0xC7: 0x3BDE6CA66DFFE1BF5D727C3EDEA74C7A4AF43B3912E6256D37705C8F3BF40101,
                0xC8: 0x3F49A1E40C5213AA4FFED57EB4C1AD2D181B2AAA289E9D59C2256C43480C0101,
                0xD3: 0xE02639036C698218879EC55C33085514FF7F0000000000000000000000000001,
                0xD4: 0x8BE664BDE946D939CE551B948B503787942D2A7734509288C1B62FD5C48BFEFF,
                0xD5: 0xA923A28E7A75AEF26C51580FFC686879E4A0B404B089BDBCD751D88B478D00FF,
                0xD6: 0x41AC5EA30FC9B0F000B68FB921F7AA6AFF810000000000000000000000000001,
                0xD7: 0x0DAA3A177EC975CB69BB4ACF4A6E1BE7BCC1AD33D1FFAD97510F9FEA9D8DFF01,
                0xD8: 0x19E6822BEB889BE28310060F4FB9741BFD50A31FA81EC65DE21F7B02548D0101,
                0xE3: 0xDB9902EC698218879EC55C33085514FF7F000000000000000000000000000001,
                0xE4: 0x83FAB06C6C8FEF761EBBB9534C06AC2A9D61820623008069062FF3B1E1F200FF,
                0xE5: 0x3F791DD183ED5B963BD86E0DBA1A9DD5B8CEEB078F15C73062F1942FD40E00FF,
                0xE6: 0xE0BFA28FC9B0F000B68FB921F7AA6AFF81000000000000000000000000000001,
                0xE7: 0x8133B760DFAE27560EB490F235DDFA301F058DEE4F01F3FE4B3567D0D3F20101,
                0xE8: 0xCD4CD0124E983AF71620FB5F98275965C6A8BEBC4B8ADC288B63224EE20E0101,
                0xF3: 0x9882EC698218879EC55C33085514FF7F00000000000000000000000000000001,
                0xF4: 0x75C4915E18B96704209738F5CA765568BB4DC4113D56683977825A132C8DFEFF,
                0xF5: 0x5C76839BF5A80B1DA705DBDF43E4DD6770CD7501AF11FF2DAB7918DFE18F00FF,
                0xF6: 0xBF228FC9B0F000B68FB921F7AA6AFF8100000000000000000000000000000001,
                0xF7: 0xC6A29131E7594004BC2AA79F0D2C402A1409C57C77D284C14B1A3AB0FF8FFF01,
                0xF8: 0xE6B3E5CF6EC90E532FEF7D08455EBF92A03E9E3F6E224EA0FEBDF1A9F08F0101,
                0x0103: 0x82EC698218879EC55C33085514FF7F0000000000000000000000000000000001,
                0x0104: 0x3122F4BCDF6DD8B265CD18EB6AF28C879AED44A35E0BF59273E39E6C7FF000FF,
                0x0105: 0x6A2B3BC87A02C29B9D27757DF43047ECD0F15485270FCA27417A701C701000FF,
                0x0106: 0x228FC9B0F000B68FB921F7AA6AFF810000000000000000000000000000000001,
                0x0107: 0x88E1259502EEF93D46060AACC9E2FF506C734DADE0B6714AB12D17E46FF00101,
                0x0108: 0x4A103813C12C12169B218296BB0A9EAE80CF8D2B158AA70EB990F99480100101,
                0x0113: 0xEC698218879EC55C33085514FF7F000000000000000000000000000000000001,
                0x0114: 0x722AD218EB1995A2D257C4C06D8DE993C203CFC8E3512DF7D633E17E908FFEFF,
                0x0115: 0x8AC9B5EC08D74612CB29F941481D274B51721AF2296207C0DA8D24667F9100FF,
                0x0116: 0x8FC9B0F000B68FB921F7AA6AFF81000000000000000000000000000000000001,
                0x0117: 0x81D5FF63680841482299F3EAB616446DCD336F537C0C565AA4112AB95D91FF01,
                0x0118: 0x9C6CA90DAC4E97DEA02AC969E8649EE9E6232E0C3F4797411151CB8F90910101,
                0x0123: 0x698218879EC55C33085514FF7F00000000000000000000000000000000000001,
                0x0124: 0x8A2CBD9F40794E2205B13306F2AA0A43C60823C64B95D8601FA4F1E521EE00FF,
                0x0125: 0xC1B5A1E3A81DA51B10D84E880F0113FF67B863DDAD3FAF1F4ECF413F101200FF,
                0x0126: 0xC9B0F000B68FB921F7AA6AFF8100000000000000000000000000000000000001,
                0x0127: 0x410BE68E49452A1FBCD863BF6E8D637F8EAE4979C34C88D552AFBCC20FEE0101,
                0x0128: 0xF540CB714754B5B1EB0373833833BD7FB0EE925CE8B92962500B7A1C22120101,
                0x0133: 0x8218879EC55C33085514FF7F0000000000000000000000000000000000000001,
                0x0134: 0xB795AD7AC24CFBB7435CF53BD3584F3D4B2709935635C3CEB66E761FF091FEFF,
                0x0135: 0x1F0BB7BE91A0CCD0CCA93D75CF03DE3E6B56FE8F1C54242617665327219300FF,
                0x0136: 0xB0F000B68FB921F7AA6AFF810000000000000000000000000000000000000001,
                0x0137: 0xAD571756ECBFF1BFDEF064861E5E92C5D897A9CC380E54BDBAABD80BB793FF01,
                0x0138: 0xD8B5B531989E689F700DCDB43AB90E79A49DFBBB5A13DBF751DF98BB34930101,
                0x0143: 0x18879EC55C33085514FF7F000000000000000000000000000000000000000001,
                0x0144: 0x67E4797DC21F02CE4A7C52218C7DBEA5D212E6C244E24F0BA4C08613C7EC00FF,
                0x0145: 0xA1CE1A085F258785846939CC1D2E8725AC94AD4DFF8913234E00679FB41400FF,
                0x0146: 0xF000B68FB921F7AA6AFF81000000000000000000000000000000000000000001,
                0x0147: 0xCCE501857A1CB45473915A28082AF950E0F78F7E2DE68CE748ADB661B3EC0101,
                0x0148: 0x3B2E28D274A16C08B58A23BAD63BBA6D7B09685769D1F68CA3873BEDC8140101,
                0x0153: 0x879EC55C33085514FF7F00000000000000000000000000000000000000000001,
                0x0154: 0x7FD07055FF50CDFE4B4BD9A15133D72D3607D92EB7AC81BAC93DB7FF4C93FEFF,
                0x0155: 0x665AC5C769E87F61D5993ABC26522FBFCA2734D76A63216B2D550D29C79500FF,
                0x0156: 0xB68FB921F7AA6AFF8100000000000000000000000000000000000000000001,
                0x0157: 0x1C93DB67C9884BC694686D69A25A5D7ED089841D5CE147FDD7199AB00D95FF01,
                0x0158: 0x485053D8FF66BE52036597520344FAC87B6A305426A9E49221D3F934DC950101,
                0x0163: 0x9EC55C33085514FF7F0000000000000000000000000000000000000000000001,
                0x0164: 0xEC447E662AC08957D7E290A421DBF54C0AAF43AADC9CC465AD0B02F071EA00FF,
                0x0165: 0xDC9178D3BAB470096F01477C859B5F4173986640B659426412A653465C1600FF,
                0x0166: 0xB68FB921F7AA6AFF810000000000000000000000000000000000000000000001,
                0x0167: 0xDCF0A770777610503596AE0311AF46C171151ED45107D7E7BB8F74BB5BEA0101,
                0x0168: 0x4D65773387993928C95C861274232D3FB6F6B7FE1B22E4E61A30E71172160101,
                0x0173: 0xC55C33085514FF7F000000000000000000000000000000000000000000000001,
                0x0174: 0x537CA0F03F974303005F1E6693B55B72315A166841732E42B8353724A495FEFF,
                0x0175: 0x86418797EC60058DE6CCA47DFDBEE79923AC49D7801E01840041CA76719700FF,
                0x0176: 0x8FB921F7AA6AFF81000000000000000000000000000000000000000000000001,
                0x0177: 0x56A55341AB8D4318F1CFB55D5F21E2BA35D7E070A72BAC6B2B21BAAE5F97FF01,
                0x0178: 0x55DDD0EC77909DE6D8311116CF520398E816F928B06FDD90EC239D0488970101,
                0x0183: 0x5C33085514FF7F00000000000000000000000000000000000000000000000001,
                0x0184: 0xD542E526003539EAD104274AFF2D78332366E29D328C2161F0C120731FE800FF,
                0x0185: 0xC706CB25E8384CE9BB5C9CB48415238BA03E16C448E292C0A101843B081800FF,
                0x0186: 0xB921F7AA6AFF8100000000000000000000000000000000000000000000000001,
                0x0187: 0x4CA55F89202C524CB0F1CB3195D13C8D94A9F7A05C59E1D4031577C707E80101,
                0x0188: 0x8C4B0574E9156B80035F3ECDCF1FE79D273ED7559747A4322BCD338F20180101,
                0x0193: 0x33085514FF7F0000000000000000000000000000000000000000000000000001,
                0x0194: 0x7F510DD7198CAC0A92FF7EA80451838C0DFA12114C41A0EF05907397F897FEFF,
                0x0195: 0x1275E752B6AEE228ECBA5E9B57EF1111DEFF3C651E2CFBF2CCCD13151F9900FF,
                0x0196: 0x21F7AA6AFF810000000000000000000000000000000000000000000000000001,
                0x0197: 0x6646340AD51A03BB710CAF05756B685B33C7DAD62AE68D369243700EAD99FF01,
                0x0198: 0x29D80E8060EF2221929BB18215586C742686D6860E028CA0456B443238990101,
                0x01A3: 0x085514FF7F000000000000000000000000000000000000000000000000000001,
                0x01A4: 0x1D164DB738EB6893868B361AD2803F97BE35764456E82A837667A693D1E600FF,
                0x01A5: 0x8B92C24ABEBF376A5AAB5FF4DFD3538A03D38A10BCED2AAE8E1A8A85B81A00FF,
                0x01A6: 0xF7AA6AFF81000000000000000000000000000000000000000000000000000001,
                0x01A7: 0x6931BDA98C70E860A1F6A5224940F1EC7E6734CD9456C95806384F7CB7E60101,
                0x01A8: 0x3402A9DB66492DFC2A220715E76243469462F24EDC56903BA1D8E96ED21A0101,
                0x01B3: 0x5514FF7F00000000000000000000000000000000000000000000000000000001,
                0x01B4: 0x178918FFBCB401D4EFD2F7DFB4D01A897172267F0F491121AC52DD614899FEFF,
                0x01B5: 0x38ECFF71480CA0B422F2ED6F780D5FEAD2AE234A49104B10A86F7F0DD19B00FF,
                0x01B6: 0xAA6AFF8100000000000000000000000000000000000000000000000000000001,
                0x01B7: 0xD02811CB5DC1D80567E810532B235B7672F5C78CD6E89BB511D5E2D8F79BFF01,
                0x01B8: 0x1B4E6404F474C18055D30BB8987672F59E97980D6F9DE1764C0FBEC5EC9B0101,
                0x01C3: 0x14FF7F0000000000000000000000000000000000000000000000000000000001,
                0x01C4: 0xFFD368E44B3F85CB81AE394C9809CA9FA2DB46A83D7880A912AB6D4A87E400FF,
                0x01C5: 0x0981AD53C19B15A94BCF0BF20235DD0DA9DF25F46AE635029FE2062E6C1C00FF,
                0x01C6: 0x6AFF810000000000000000000000000000000000000000000000000000000001,
                0x01C7: 0x19DF06FFA28250867006726405FBC05D43DC2F9D2F025006DB089BD46BE40101,
                0x01C8: 0x243FFFE3A4F2982F45055C08F379648AB886DA8027A7401117A8E0B8881C0101,
                0x01D3: 0xFF7F000000000000000000000000000000000000000000000000000000000001,
                0x01D4: 0x41E065D46E0349CFE624C4E8A2034AEA1F7EDFFF80E511CD8067D488949BFEFF,
                0x01D5: 0xA84162CA6675A22C4C79DFC4EA15F760DB5A04DBF04246764199B668879D00FF,
                0x01D6: 0xFF81000000000000000000000000000000000000000000000000000000000001,
                0x01D7: 0x1226984FAA6B05EBDBD45D8477FA4FD5B55BFD5061DE03C319282B153D9DFF01,
                0x01D8: 0x5CC9E6B0B749FD94541AD00364BDEC2FCA7816981CA3E38F485DECC7A49D0101,
                0x01E3: 0x7F00000000000000000000000000000000000000000000000000000000000001,
                0x01E4: 0xE9772778F50FA0A69CD10FA019AC56D72AC7A7D7AF26C4BA28415C8F41E200FF,
                0x01E5: 0x33F0385EF73FEEBDB952E5ADB643DD0FA178FD9271578219AD50A73D241E00FF,
                0x01E6: 0x8100000000000000000000000000000000000000000000000000000000000001,
                0x01E7: 0xFD405CCE8F73DFFC04A6F0FF6FFC6BF7961876D09C5B4933A68F0CC623E20101,
                0x01E8: 0xC5A8F4566FD2E96E4CE3A8B3EC0863E7B20BC3B2F3DC5261BA8A0174421E0101,
                0x01F3: 0x01,
                0x01F4: 0xF9CB87F5B1AB58602F52A1E9D392E5675B86A59A53943A8D4EC2A915DC9DFEFF,
                0x01F5: 0x893D729A64E318860EC5047E70E598DA163EB41E71E74B04DFD4712D419F00FF,
                0x01F6: 0x01,
                0x01F7: 0xEE5F2839C1B4F6CA05E6FDB04E2FB49C0F860B3765C27DC781A150CB7F9FFF01,
                0x01F8: 0xB4C358E3C6BCDDFB509EA487D733DF0E1854F29C3B6BFD4A8CAABE3F609F0101,
                0x0200: 0x01,
                0x0203: 0x01,
                0x0204: 0xB8247842BB5CE75C08D0C251669ED5870FA24A22952E5DB3A7C66C59FFE000FF,
                0x0205: 0xEE526E5A06F2A990B2BF6C951E5FEABF0E07EE16877296E1BE872DB9E02000FF,
                0x0206: 0x01,
                0x0207: 0xEDA7D024B6DE40A9D3B966E71F10A4667EDC5B71CAB07AEABCAC6249DFE00101,
                0x0208: 0x512ECFAEEB11205F0833E1054DCB1300488E0954BE5AF77A49E143AA00200101,
                0x0210: 0x01,
                0x0213: 0x01,
                0x0214: 0x8DCB65B5494EBA78CD6756A6F9851F6E26D0F2BB9ECD7E9ABD7E9B11209FFEFF,
                0x0215: 0x6694BB31B20CD625F3756897DAE6D738F2E64467B5B6F10FA3E07763FFA100FF,
                0x0216: 0x01,
                0x0217: 0xE678999AEFFD1F1F45081F64DE7F80AB083DD7DF04721ED64EE04C03BDA1FF01,
                0x0218: 0x39B68FB9898DD7568ABD178397251CE8226A25C1D305A4E79573333520A10101,
            }
        )
    }

    yield StateTest(env=env, pre=pre, post=post, txs=[tx])


@test_from("istanbul")
def test_exp_power_256(fork):
    """
    Test Exp Opcode for 255-257**n.
    Port from ethereum/tests:
      - GeneralStateTestsFiller/VMTests/vmTest/expPower256Filler.yml
      - Original test by Ori Pomerantz qbzzt1@gmail.com
    """
    env = Environment()

    pre = {
        to_address(0x100): Account(
            balance=0x0BA1A9CE0BA1A9CE,
            code=Yul(
                """
                {
                    let n := 0
                    for { } lt(n, 34) { }
                    {
                        sstore(mul(0x10, n), exp(256, n))
                        sstore(add(mul(0x10, n), 1), exp(255, n))
                        sstore(add(mul(0x10, n), 2), exp(257, n))
                        n := add(n, 1)
                    }
                }
                """
            ),
        ),
        TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE),
    }

    tx = Transaction(
        nonce=0,
        to=to_address(0x100),
        gas_limit=5000000,
        gas_price=10,
    )

    post = {
        to_address(0x100): Account(
            storage={
                # 0x10*n:   256^n
                # 0x10*n+1: 255^n
                # 0x10*n+2: 257^n
                0x00: 0x01,
                0x01: 0x01,
                0x02: 0x01,
                0x10: 0x0100,
                0x11: 0xFF,
                0x12: 0x0101,
                0x20: 0x010000,
                0x21: 0xFE01,
                0x22: 0x010201,
                0x30: 0x01000000,
                0x31: 0xFD02FF,
                0x32: 0x01030301,
                0x40: 0x0100000000,
                0x41: 0xFC05FC01,
                0x42: 0x0104060401,
                0x50: 0x010000000000,
                0x51: 0xFB09F604FF,
                0x52: 0x01050A0A0501,
                0x60: 0x01000000000000,
                0x61: 0xFA0EEC0EFA01,
                0x62: 0x01060F140F0601,
                0x70: 0x0100000000000000,
                0x71: 0xF914DD22EB06FF,
                0x72: 0x0107152323150701,
                0x80: 0x010000000000000000,
                0x81: 0xF81BC845C81BF801,
                0x82: 0x01081C3846381C0801,
                0x90: 0x01000000000000000000,
                0x91: 0xF723AC7D8253DC08FF,
                0x92: 0x010924547E7E54240901,
                0xA0: 0x0100000000000000000000,
                0xA1: 0xF62C88D104D1882CF601,
                0xA2: 0x010A2D78D2FCD2782D0A01,
                0xB0: 0x010000000000000000000000,
                0xB1: 0xF5365C4833CCB6A4C90AFF,
                0xB2: 0x010B37A64BCFCF4AA5370B01,
                0xC0: 0x01000000000000000000000000,
                0xC1: 0xF44125EBEB98E9EE2441F401,
                0xC2: 0x010C42DDF21B9F19EFDC420C01,
                0xD0: 0x0100000000000000000000000000,
                0xD1: 0xF34CE4C5FFAD5104361DB20CFF,
                0xD2: 0x010D4F20D00DBAB909CC1E4E0D01,
                0xE0: 0x010000000000000000000000000000,
                0xE1: 0xF25997E139ADA3B331E7945AF201,
                0xE2: 0x010E5C6FF0DDC873C2D5EA6C5B0E01,
                0xF0: 0x01000000000000000000000000000000,
                0xF1: 0xF1673E495873F60F7EB5ACC6970EFF,
                0xF2: 0x010F6ACC60CEA63C3698C056C7690F01,
                0x0100: 0x0100000000000000000000000000000000,
                0x0101: 0xF075D70B0F1B82196F36F719D077F001,
                0x0102: 0x01107A372D2F74E272CF59171E30781001,
                0x0110: 0x010000000000000000000000000000000000,
                0x0111: 0xEF856134040C669755C7C022B6A77810FF,
                0x0112: 0x01118AB1645CA45755422870354EA8881101,
                0x0120: 0x01000000000000000000000000000000000000,
                0x0121: 0xEE95DBD2D0085A30BE71F86293F0D098EE01,
                0x0122: 0x01129C3C15C100FBAC976A98A583F730991201,
                0x0130: 0x0100000000000000000000000000000000000000,
                0x0131: 0xEDA745F6FD3851D68DB3866A315CDFC85512FF,
                0x0132: 0x0113AED851D6C1FCA84402033E297B27C9AB1301,
                0x0140: 0x010000000000000000000000000000000000000000,
                0x0141: 0xECB99EB1063B1984B725D2E3C72B82E88CBDEC01,
                0x0142: 0x0114C2872A2898BEA4EC46054167A4A2F174BE1401,
                0x0150: 0x01000000000000000000000000000000000000000000,
                0x0151: 0xEBCCE5125534DE6B326EAD10E3645765A4312E14FF,
                0x0152: 0x0115D749B152C1576391324B46A90C47946632D21501,
                0x0160: 0x0100000000000000000000000000000000000000000000,
                0x0161: 0xEAE1182D42DFA98CC73C3E63D280F30E3E8CFCE6EA01,
                0x0162: 0x0116ED20FB041418BAF4C37D91EFB553DBFA9904E71601,
                0x0170: 0x010000000000000000000000000000000000000000000000,
                0x0171: 0xE9F63715159CC9E33A7502256EAE721B304E6FEA0316FF,
                0x0172: 0x0118040E1BFF182CD3AFB8410F81A5092FD6939DEBFD1701,
                0x0180: 0x01000000000000000000000000000000000000000000000000,
                0x0181: 0xE90C40DE00872D19573A8D23493FC3A9151E217A1913E801,
                0x0182: 0x01191C122A1B1745008367F9509126AE39066A3189E9141801,
                0x0190: 0x0100000000000000000000000000000000000000000000000000,
                0x0191: 0xE823349D2286A5EC3DE3529625F683E56C0903589EFAD418FF,
                0x0192: 0x011A352E3C45325C4583EB6149E1B7D4E73F709BBB72FD2C1901,
                0x01A0: 0x010000000000000000000000000000000000000000000000000000,
                0x01A1: 0xE73B116885641F4651A56F438FD08D61869CFA55465BD944E601,
                0x01A2: 0x011B4F636A81778EA1C96F4CAB2B998CBC26B00C572E7029451A01,
                0x01B0: 0x01000000000000000000000000000000000000000000000000000000,
                0x01B1: 0xE653D6571CDEBB270B53C9D44C40BCD425165D5AF1157D6BA11AFF,
                0x01B2: 0x011C6AB2CDEBF906306B38BBF7D6C52648E2D6BC63859E996E5F1B01,
                0x01C0: 0x0100000000000000000000000000000000000000000000000000000000,
                0x01C1: 0xE56D8280C5C1DC6BE448760A77F47C1750F146FD962467EE3579E401,
                0x01C2: 0x011D871D80B9E4FF369BA3F4B3CE9BEB6F2BB9931FE9243807CD7A1C01,
                0x01D0: 0x010000000000000000000000000000000000000000000000000000000000,
                0x01D1: 0xE48814FE44FC1A8F78642D946D7C879B39A055B6988E438647446A1CFF,
                0x01D2: 0x011EA4A49E3A9EE435D23F98A8826A875A9AE54CB3090D5C3FD547961D01,
                0x01E0: 0x01000000000000000000000000000000000000000000000000000000000000,
                0x01E1: 0xE3A38CE946B71E74E8EBC966D90F0B139E66B560E1F5B542C0FD25B2E201,
                0x01E2: 0x011FC34942D8D9831A0811D8412AECF1E1F58031FFBC16699C151CDDB31E01,
                0x01F0: 0x0100000000000000000000000000000000000000000000000000000000000000,
                0x01F1: 0xE2BFE95C5D7067567402DD9D7235FC088AC84EAB8113BF8D7E3C288D2F1EFF,
                0x01F2: 0x0120E30C8C1BB25C9D2219EA196C17DED3D775B231BBD28005B131FA90D11F01,
                0x0200: 0x0000000000000000000000000000000000000000000000000000000000000000,
                0x0201: 0xE1DD29730112F6EF1D8EDABFD4C3C60C823D865CD592ABCDF0BDEC64A1EFE001,
                0x0202: 0x2203EF98A7CE0EF9BF3C04038583F6B2AB4D27E3ED8E5285B6E32C8B61F02001,
                0x0210: 0x0000000000000000000000000000000000000000000000000000000000000000,
                0x0211: 0xFB4C498E11E3F82E714BE514EF024675BB48D678BD192222CD2E783D4DF020FF,
                0x0212: 0x25F3884075DD08B8FB400789097AA95DF8750BD17BE0D83C9A0FB7ED52102101,
            }
        )
    }

    yield StateTest(env=env, pre=pre, post=post, txs=[tx])
