"""
Fixture collector class used to collect, sort and combine the different types of generated
fixtures.
"""

import json
import os
import re
from pathlib import Path
from typing import Any, Dict, Literal, Optional, Tuple

import pytest

from evm_transition_tool import FixtureFormats, TransitionTool

from .base.base_test import BaseFixture


def strip_test_prefix(name: str) -> str:
    """
    Removes the test prefix from a test case name.
    """
    TEST_PREFIX = "test_"
    if name.startswith(TEST_PREFIX):
        return name[len(TEST_PREFIX) :]
    return name


def convert_test_id_to_test_name_and_parameters(name: str) -> Tuple[str, str]:
    """
    Converts a test name to a tuple containing the test name and test parameters.

    Example:
    test_push0_key_sstore[fork_Shanghai] -> test_push0_key_sstore, fork_Shanghai
    """
    test_name, parameters = name.split("[")
    return test_name, re.sub(r"[\[\-]", "_", parameters).replace("]", "")


def get_module_relative_output_dir(test_module: Path, filler_path: Path) -> Path:
    """
    Return a directory name for the provided test_module (relative to the
    base ./tests directory) that can be used for output (within the
    configured fixtures output path or the base_dump_dir directory).

    Example:
    tests/shanghai/eip3855_push0/test_push0.py -> shanghai/eip3855_push0/test_push0
    """
    basename = test_module.with_suffix("").absolute()
    basename_relative = basename.relative_to(filler_path.absolute())
    module_path = basename_relative.parent / basename_relative.stem
    return module_path


def get_dump_dir_path(
    base_dump_dir: Path,
    filler_path: Path,
    node: pytest.Item,
    level: Literal["test_module", "test_function", "test_parameter"] = "test_parameter",
) -> Optional[Path]:
    """
    The path to dump the debug output as defined by the level to dump at.
    """
    if not base_dump_dir:
        return None
    test_module_relative_dir = get_module_relative_output_dir(Path(node.path), filler_path)
    if level == "test_module":
        return Path(base_dump_dir) / Path(str(test_module_relative_dir).replace(os.sep, "__"))
    test_name, test_parameter_string = convert_test_id_to_test_name_and_parameters(node.name)
    flat_path = f"{str(test_module_relative_dir).replace(os.sep, '__')}__{test_name}"
    if level == "test_function":
        return Path(base_dump_dir) / flat_path
    elif level == "test_parameter":
        return Path(base_dump_dir) / flat_path / test_parameter_string
    raise Exception("Unexpected level.")


class FixtureCollector:
    """
    Collects all fixtures generated by the test cases.
    """

    all_fixtures: Dict[Path, Dict[str, Any]]
    output_dir: str
    flat_output: bool
    json_path_to_fixture_type: Dict[Path, FixtureFormats]
    json_path_to_test_item: Dict[Path, pytest.Item]

    def __init__(
        self,
        output_dir: str,
        flat_output: bool,
    ) -> None:
        self.all_fixtures = {}
        self.output_dir = output_dir
        self.flat_output = flat_output
        self.json_path_to_fixture_type = {}
        self.json_path_to_test_item = {}

    def add_fixture(
        self, item, fixture: Optional[BaseFixture], fixture_format: FixtureFormats
    ) -> None:
        """
        Adds a fixture to the list of fixtures of a given test case.
        """
        # TODO: remove this logic. if hive enabled set --from to Merge
        if fixture is None:
            return

        def get_single_test_name(item):
            test_name, test_parameters = convert_test_id_to_test_name_and_parameters(item.name)
            return f"{test_name}__{test_parameters}"

        def get_fixture_basename_for_flat_output(self, item):
            if item.config.getoption("single_fixture_per_file"):
                return Path(strip_test_prefix(get_single_test_name(item)))
            return Path(strip_test_prefix(item.originalname))

        def get_fixture_basename_for_nested_output(self, item):
            relative_fixture_output_dir = Path(item.path).parent / strip_test_prefix(
                Path(item.path).stem
            )
            module_relative_output_dir = get_module_relative_output_dir(
                relative_fixture_output_dir, item.config.getoption("filler_path")
            )

            if item.config.getoption("single_fixture_per_file"):
                return module_relative_output_dir / strip_test_prefix(get_single_test_name(item))
            return module_relative_output_dir / strip_test_prefix(item.originalname)

        fixture_basename: Path
        if self.flat_output:
            fixture_basename = get_fixture_basename_for_flat_output(self, item)
        else:
            fixture_basename = get_fixture_basename_for_nested_output(self, item)

        fixture_path = self.output_dir / fixture_basename.with_suffix(".json")
        if fixture_path not in self.all_fixtures:  # relevant when we group by test function
            self.all_fixtures[fixture_path] = {}
            self.json_path_to_fixture_type[fixture_path] = fixture_format
            self.json_path_to_test_item[fixture_path] = item

        self.all_fixtures[fixture_path][item.nodeid] = fixture.to_json()

    def dump_fixtures(self) -> None:
        """
        Dumps all collected fixtures to their respective files.
        """
        os.makedirs(self.output_dir, exist_ok=True)
        for fixture_path, fixtures in self.all_fixtures.items():
            if not self.flat_output:
                os.makedirs(fixture_path.parent, exist_ok=True)
            with open(fixture_path, "w") as f:
                json.dump(fixtures, f, indent=4)

    def verify_fixture_files(self, evm_fixture_verification: TransitionTool) -> None:
        """
        Runs `evm [state|block]test` on each fixture.
        """
        for fixture_path, fixture_format in self.json_path_to_fixture_type.items():
            item = self.json_path_to_test_item[fixture_path]
            verify_fixtures_dump_dir = self._get_verify_fixtures_dump_dir(item)
            evm_fixture_verification.verify_fixture(
                fixture_format, fixture_path, verify_fixtures_dump_dir
            )

    def _get_verify_fixtures_dump_dir(
        self,
        item: pytest.Item,
    ):
        """
        The directory to dump the current test function's fixture.json and fixture
        verification debug output.
        """
        base_dump_dir = item.config.getoption("base_dump_dir")
        if not base_dump_dir:
            return None
        filler_path = item.config.getoption("filler_path")
        if item.config.getoption("single_fixture_per_file"):
            return get_dump_dir_path(base_dump_dir, filler_path, item, level="test_parameter")
        else:
            return get_dump_dir_path(base_dump_dir, filler_path, item, level="test_function")
