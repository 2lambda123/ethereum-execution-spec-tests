"""
Define an entry point wrapper for test generator.
"""

import json
import os
import sys
from dataclasses import asdict, dataclass
from typing import Dict, List, Union

import requests

from ethereum_test_tools import Account, Address, Transaction


def main():  # noqa: D103
    if len(sys.argv) != 3:
        print_help()
        sys.exit(1)
    if sys.argv[1] in ["-h", "--help"]:
        print_help()
        sys.exit(0)
    make_test(sys.argv)


def print_help():  # noqa: D103
    print("Extracts transaction and required state from the mainnet to make a BC test out of it")
    print("Usage: gentest <tx_hash> <file.py>")


if __name__ == "__main__":
    main()


def make_test(args):  # noqa: D103
    transaction_hash = args[1]
    output_file = args[2]
    print("Load configs...")
    config = PyspecConfig(os.path.expanduser("~/.pyspec/config"))
    request = RequestManager(config.remote_nodes[0])

    print("Perform tx request: eth_get_transaction_by_hash(" + f"{transaction_hash}" + ")")
    tr = request.eth_get_transaction_by_hash(transaction_hash)

    print("Perform debug_trace_call")
    state = request.debug_trace_call(tr)

    print("Generate py test >> " + output_file)
    test = make_test_template(tr, state)
    with open(output_file, "w") as file:
        file.write(test)

    print(test)


def make_test_template(
    tr: "RequestManager.RemoteTransaction", state: Dict[Address, Account]
) -> str:
    """
    Prepare the .py file template
    """
    test = PYTEST_TEMPLATE
    test = test.replace(
        "$HEADLINE_COMMENT",
        "gentest autogenerated test with debug_traceCall of tx.hash " + tr.tr_hash,
    )
    test = test.replace("$TEST_NAME", "test_transaction_" + tr.tr_hash[2:])
    test = test.replace(
        "$TEST_COMMENT", "gentest autogenerated test for tx.hash " + tr.tr_hash[2:]
    )

    # Print a nice .py storage pre
    pad = "            "
    state_str = ""
    for address, account in state.items():
        if isinstance(account, dict):
            account_obj = Account(**account)
            state_str += '        "' + str(address) + '": Account(\n'
            state_str += pad + "balance=" + str(account_obj.balance) + ",\n"
            if address == tr.transaction.sender:
                state_str += pad + "nonce=" + str(tr.transaction.nonce) + ",\n"
            else:
                state_str += pad + "nonce=" + str(account_obj.nonce) + ",\n"

            if account_obj.code is None:
                state_str += pad + 'code="0x",\n'
            else:
                state_str += pad + 'code="' + str(account_obj.code) + '",\n'
            state_str += pad + "storage={\n"

            if account_obj.storage is not None:
                for record, value in account_obj.storage.items():
                    state_str += pad + '    "' + str(record) + '" : "' + str(value) + '",\n'

            state_str += pad + "}\n"
            state_str += "        ),\n"
    test = test.replace("$PRE", state_str)

    # Print legacy transaction in .py
    tr_str = ""
    tr_str += pad + "ty=" + str(tr.transaction.ty) + ",\n"
    tr_str += pad + "chain_id=" + str(tr.transaction.chain_id) + ",\n"
    tr_str += pad + "nonce=" + str(tr.transaction.nonce) + ",\n"
    tr_str += pad + 'to="' + str(tr.transaction.to) + '",\n'
    tr_str += pad + "gas_price=" + str(tr.transaction.gas_price) + ",\n"
    tr_str += pad + "protected=False,\n"
    tr_str += pad + 'data="' + str(tr.transaction.data) + '",\n'
    tr_str += pad + "gas_limit=" + str(tr.transaction.gas_limit) + ",\n"
    tr_str += pad + "value=" + str(tr.transaction.value) + ",\n"
    tr_str += pad + "v=" + str(tr.transaction.v) + ",\n"
    tr_str += pad + "r=" + str(tr.transaction.r) + ",\n"
    tr_str += pad + "s=" + str(tr.transaction.s) + ",\n"

    test = test.replace("$TR", tr_str)
    return test


class PyspecConfig:
    """
    Main class to manage Pyspec config
    """

    @dataclass
    class RemoteNode:
        """
        Remote node structure
        """

        name: str
        node_url: str
        client_id: str
        secret: str

    remote_nodes: List["PyspecConfig.RemoteNode"]

    def __init__(self, config_path: str):
        """
        Initialize pyspec config from file
        """
        with open(config_path, "r") as file:
            data = json.load(file)
            self.remote_nodes = [self._json_to_remote_node(node) for node in data["remote_nodes"]]

    def _json_to_remote_node(self, d):
        return PyspecConfig.RemoteNode(
            name=d["name"],
            node_url=d["node_url"],
            client_id=d["client_id"],
            secret=d["secret"],
        )


class RequestManager:
    """
    Interface for the RPC interaction with remote node
    """

    @dataclass()
    class RemoteTransaction:
        """
        Remote transaction structure
        """

        block_number: str
        tr_hash: str
        transaction: Transaction

    node_url: str
    headers: dict[str, str]

    def __init__(self, node_config: PyspecConfig.RemoteNode):
        """
        Initialize the RequestManager with specific client config.
        """
        self.node_url = node_config.node_url
        self.headers = {
            "CF-Access-Client-Id": node_config.client_id,
            "CF-Access-Client-Secret": node_config.secret,
            "Content-Type": "application/json",
        }

    def eth_get_transaction_by_hash(self, transaction_hash: str) -> RemoteTransaction:
        """
        Get transaction data.
        """
        data = {
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByHash",
            "params": [f"{transaction_hash}"],
            "id": 1,
        }
        response = requests.post(self.node_url, headers=self.headers, data=json.dumps(data))
        res = response.json().get("result", None)

        return RequestManager.RemoteTransaction(
            block_number=res["blockNumber"],
            tr_hash=res["hash"],
            transaction=Transaction(
                ty=int(res["type"], 16),
                gas_limit=int(res["gas"], 16),
                gas_price=int(res["gasPrice"], 16),
                data=res["input"],
                nonce=int(res["nonce"], 16),
                sender=res["from"],
                to=res["to"],
                value=int(res["value"], 16),
                v=int(res["v"], 16),
                r=int(res["r"], 16),
                s=int(res["s"], 16),
            ),
        )

    def eth_get_block_by_number(self, block_number: str):
        """
        Get block by number
        """
        data = {
            "jsonrpc": "2.0",
            "method": "eth_getBlockByNumber",
            "params": [f"{block_number}", False],
            "id": 1,
        }
        response = requests.post(self.node_url, headers=self.headers, data=json.dumps(data))
        return response.json().get("result", None)

    def debug_trace_call(self, tr: RemoteTransaction) -> Dict[Address, Account]:
        """
        Get pre state required for transaction
        """
        data = {
            "jsonrpc": "2.0",
            "method": "debug_traceCall",
            "params": [
                {
                    "from": f"{tr.transaction.sender}",
                    "to": f"{tr.transaction.to}",
                    "data": f"{tr.transaction.data}",
                },
                f"{tr.block_number}",
                {"tracer": "prestateTracer"},
            ],
            "id": 1,
        }

        response = requests.post(self.node_url, headers=self.headers, data=json.dumps(data))
        return response.json().get("result", None)


PYTEST_TEMPLATE = """
\"\"\"
$HEADLINE_COMMENT
\"\"\"

import pytest

from ethereum_test_tools import (
    Account,
    Address,
    Block,
    Environment,
    BlockchainTestFiller,
    Transaction,
)

REFERENCE_SPEC_GIT_PATH = "EIPS/eip-6780.md"
REFERENCE_SPEC_VERSION = "2f8299df31bb8173618901a03a8366a3183479b0"


@pytest.fixture
def env():  # noqa: D103
    return Environment(
        coinbase="0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba",
        difficulty=3402669764409613,
        #gas_limit=12469470,
        gas_limit=0x016345785d8a0000,
        number=11114732,
        timestamp="0x5f933d46",
    )


@pytest.mark.valid_from("Paris")
def $TEST_NAME(
    env: Environment,
    blockchain_test: BlockchainTestFiller,
):
    \"\"\"
    $TEST_COMMENT
    \"\"\"
    
    pre = {
$PRE
    }

    post = {
    }

    tx = Transaction(
$TR
    )

    blockchain_test(genesis_environment=env, pre=pre, post=post, blocks=[Block(txs=[tx])])

"""
