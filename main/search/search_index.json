{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Execution Spec Tests","text":"<p>ethereum/execution-spec-tests is both a collection of test cases and a framework in Python to generate tests for Ethereum execution clients implemented.</p> <p>The framework collects and executes the test cases in order to generate test fixtures (JSON) which can be consumed by any execution client to verify their implementation of ethereum/execution-specs. The fixtures, which define state transition and block tests, are generated by the framework using one of the <code>t8n</code> command-line tools that are provided by most execution clients, see below for an overview of the supported <code>t8n</code> tools.</p> <pre><code>---\ntitle: Test Fixture Generation with execution-spec-tests\n---\nflowchart LR\n  style C stroke:#333,stroke-width:2px\n  style D stroke:#333,stroke-width:2px\n  style G stroke:#F9A825,stroke-width:2px\n  style H stroke:#F9A825,stroke-width:2px\n\n  subgraph ethereum/go-ethereum\n    C[&lt;code&gt;evm t8n&lt;/code&gt;\\nexternal executable]\n  end\n\n  subgraph ethereum/solidity\n    D[&lt;code&gt;solc&lt;/code&gt;\\nexternal executable]\n  end\n\n  subgraph ethereum/EIPs\n    E(&lt;code&gt;EIPS/EIP-*.md&lt;/code&gt;\\nSHA digest via Github API)\n  end\n\n  subgraph \"ethereum/execution-spec-tests\"\n    A(&lt;code&gt;./tests/**/*.py&lt;/code&gt;\\nPython Test Cases)\n    B([&lt;code&gt;$ fill ./tests/&lt;/code&gt;\\nPython Framework])\n  end\n\n  subgraph Test Fixture Consumers\n    subgraph ethereum/hive\n      G([&lt;code&gt;$ hive ...&lt;/code&gt;\\nGo Test Framework])\n    end\n    H([Client executables])\n  end\n\n  C &lt;-.-&gt; B  \n  D &lt;-.-&gt; B\n  A --&gt; B\n  E &lt;-.-&gt; |retrieve latest spec version\\ncheck tested spec version| B\n  B --&gt;|output| F(&lt;code&gt;./fixtures/**/*.json&lt;/code&gt;\\nJSON Test Fixtures)\n  F --&gt;|input| G\n  F --&gt;|input| H</code></pre> <p>The generated test fixtures can be used:</p> <ol> <li>Directly by client teams' test frameworks, and,</li> <li>In the integration tests executed in the ethereum/hive framework.</li> </ol> <p>More information on how to use and download the released test fixtures can be found here.</p>"},{"location":"#transition-tool-support","title":"Transition Tool Support","text":"<p>The following transition tools are supported by the framework:</p> Client <code>t8n</code> Tool Tracing Support ethereum/evmone <code>evmone-t8n</code> Yes ethereum/execution-specs <code>ethereum-spec-evm</code> Yes ethereum/go-ethereum <code>evm t8n</code> Yes hyperledger/besu <code>evmtool t8n-server</code> Yes status-im/nimbus-eth1 <code>t8n</code> Yes"},{"location":"#relationship-to-ethereumtests","title":"Relationship to ethereum/tests","text":"<p>This collection of tests is relatively new (test case development started Q4, 2022) and mainly targets recent and upcoming Ethereum specification changes. It does not replace, but rather complements the existing tests in ethereum/tests.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>The motivation to implement test cases in ethereum/execution-spec-tests is:</p> <ol> <li>To implement test cases as code and ensure that changes, due to spec changes, for example, can be easily made. Moreover, changes are easily understandable and available in version control.</li> <li>To avoid the 2-step approach often used in ethereum/tests:<ol> <li>Code (often unavailable) -&gt; Test case (YAML).</li> <li>Test case (YAML) -&gt; Fixtures (JSON).</li> </ol> </li> </ol> <p>Contributing</p> <p>Contributions via PR are welcome!</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Test fixtures for use by clients are available for each release on the Github releases page.</p> <p>Key: \u2728 = New, \ud83d\udc1e = Fixed, \ud83d\udd00 = Changed, \ud83d\udca5 = Breaking change.</p>"},{"location":"CHANGELOG/#unreleased-2024-xx-xx","title":"\ud83d\udd1c Unreleased - 2024-xx-xx","text":""},{"location":"CHANGELOG/#test-cases","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\u2728 Add <code>test_create_selfdestruct_same_tx_increased_nonce</code> which tests self-destructing a contract with a nonce &gt; 1 (#478).</li> <li>\u2728 Add <code>test_double_kill</code> and <code>test_recreate</code> which test resurrection of accounts killed with <code>SELFDESTRUCT</code> (#488).</li> <li>\u2728 Add eof example valid invalid tests from ori, fetch EOF Container implementation (#535).</li> <li>\u2728 Add tests for EIP-2537: Precompile for BLS12-381 curve operations (#499).</li> <li>\u2728 EIP-663: Add <code>test_dupn.py</code> and <code>test_swapn.py</code> (#502).</li> <li>\u2728 Add tests for EIP-6110: Supply validator deposits on chain (#530).</li> <li>\u2728 Add tests for EIP-7002: Execution layer triggerable withdrawals (#530).</li> <li>\u2728 Add tests for EIP-7685: General purpose execution layer requests (#530).</li> <li>\u2728 Add tests for EIP-2935: Serve historical block hashes from state (#564).</li> <li>\u2728 Add tests for EIP-4200: EOF - Static relative jumps (#581).</li> </ul>"},{"location":"CHANGELOG/#framework","title":"\ud83d\udee0\ufe0f Framework","text":"<ul> <li>\ud83d\udc1e Fix incorrect <code>!=</code> operator for <code>FixedSizeBytes</code> (#477).</li> <li>\u2728 Add Macro enum that represents byte sequence of Op instructions (#457)</li> <li>\u2728 Number of parameters used to call opcodes (to generate bytecode) is now checked (#492).</li> <li>\u2728 Libraries have been refactored to use <code>pydantic</code> for type checking in most test types (#486, #501, #508).</li> <li>\u2728 Opcodes are now subscriptable and it's used to define the data portion of the opcode: <code>Op.PUSH1(1) == Op.PUSH1[1]  == b\"\\x60\\x01\"</code> (#513)</li> <li>\u2728 Added EOF fixture format (#512).</li> <li>\u2728 Verify filled EOF fixtures using <code>evmone-eofparse</code> during <code>fill</code> execution (#519).</li> <li>\u2728 Added <code>--traces</code> support when running with Hyperledger Besu (#511).</li> <li>\u2728 Use pytest's \"short\" traceback style (<code>--tb=short</code>) for failure summaries in the test report for more compact terminal output (#542).</li> <li>\u2728 The <code>fill</code> command now generates HTML test reports with links to the JSON fixtures and debug information (#537).</li> <li>\u2728 Add an Ethereum RPC client class for use with consume commands (#556).</li> <li>\u2728 Add a \"slow\" pytest marker, in order to be able to limit the filled tests until release (#562).</li> <li>\u2728 Add a CLI tool that generates blockchain tests as Python from a transaction hash (#470, #576).</li> <li>\u2728 Add more Transaction and Block exceptions from existing ethereum/tests repo (#572).</li> <li>\u2728 Add \"description\" and \"url\" fields containing test case documentation and a source code permalink to fixtures during <code>fill</code> and use them in <code>consume</code>-generated Hive test reports (#579).</li> <li>\u2728 Add git workflow evmone coverage script for any new lines mentioned in converted_ethereum_tests.txt (#503).</li> </ul>"},{"location":"CHANGELOG/#evm-tools","title":"\ud83d\udd27 EVM Tools","text":""},{"location":"CHANGELOG/#misc","title":"\ud83d\udccb Misc","text":"<ul> <li>\ud83d\udc1e Fix CI by using Golang 1.21 in Github Actions to build geth (#484).</li> <li>\ud83d\udca5 \"Merge\" has been renamed to \"Paris\" in the \"network\" field of the Blockchain tests, and in the \"post\" field of the State tests (#480).</li> <li>\u2728 Port entry point scripts to use click and add tests (#483).</li> <li>\ud83d\udca5 As part of the pydantic conversion, the fixtures have the following (possibly breaking) changes (#486):</li> <li>State test field <code>transaction</code> now uses the proper zero-padded hex number format for fields <code>maxPriorityFeePerGas</code>, <code>maxFeePerGas</code>, and <code>maxFeePerBlobGas</code></li> <li>Fixtures' hashes (in the <code>_info</code> field) are now calculated by removing the \"_info\" field entirely instead of it being set to an empty dict.</li> <li>\ud83d\udc1e Relax minor and patch dependency requirements to avoid conflicting package dependencies (#510).</li> <li>\ud83d\udd00 Update all CI actions to use their respective Node.js 20 versions, ahead of their Node.js 16 version deprecations (#527).</li> <li>\u2728 Releases now contain a <code>fixtures_eip7692.tar.gz</code> which contains all EOF fixtures (#573).</li> </ul>"},{"location":"CHANGELOG/#breaking-change","title":"\ud83d\udca5 Breaking Change","text":"<ul> <li>Cancun is now the latest deployed fork, and the development fork is now Prague (#489).</li> <li>Stable fixtures artifact <code>fixtures.tar.gz</code> has been renamed to <code>fixtures_stable.tar.gz</code> (#573)</li> </ul>"},{"location":"CHANGELOG/#v211-2024-03-09","title":"\ud83d\udd1c v2.1.1 - 2024-03-09","text":""},{"location":"CHANGELOG/#test-cases_1","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\ud83d\udc1e Dynamic create2 collision from different transactions same block (#430).</li> <li>\ud83d\udc1e Fix beacon root contract deployment tests so the account in the pre-alloc is not empty (#425).</li> <li>\ud83d\udd00 All beacon root contract tests are now contained in tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py, and all state tests have been converted back to blockchain tests format (#449)</li> </ul>"},{"location":"CHANGELOG/#framework_1","title":"\ud83d\udee0\ufe0f Framework","text":"<ul> <li> <p>\u2728 Adds two <code>consume</code> commands #339:</p> </li> <li> <p><code>consume direct</code> - Execute a test fixture directly against a client using a <code>blocktest</code>-like command (currently only geth supported).</p> </li> <li> <p><code>consume rlp</code> - Execute a test fixture in a hive simulator against a client that imports the test's genesis config and blocks as RLP upon startup. This is a re-write of the ethereum/consensus Golang simulator.</p> </li> <li> <p>\u2728 Add Prague to forks (#419).</p> </li> <li>\u2728 Improve handling of the argument passed to <code>solc --evm-version</code> when compiling Yul code (#418).</li> <li>\ud83d\udc1e Fix <code>fill -m yul_test</code> which failed to filter tests that are (dynamically) marked as a yul test (#418).</li> <li>\ud83d\udd00 Helper methods <code>to_address</code>, <code>to_hash</code> and <code>to_hash_bytes</code> have been deprecated in favor of <code>Address</code> and <code>Hash</code>, which are automatically detected as opcode parameters and pushed to the stack in the resulting bytecode (#422).</li> <li>\u2728 <code>Opcodes</code> enum now contains docstrings with each opcode description, including parameters and return values, which show up in many development environments (#424) @ThreeHrSleep.</li> <li>\ud83d\udd00 Locally calculate state root for the genesis blocks in the blockchain tests instead of calling t8n (#450).</li> <li>\ud83d\udc1e Fix bug that causes an exception during test collection because the fork parameter contains <code>None</code> (#452).</li> <li>\u2728 The <code>_info</code> field in the test fixtures now contains a <code>hash</code> field, which is the hash of the test fixture, and a <code>hasher</code> script has been added which prints and performs calculations on top of the hashes of all fixtures (see <code>hasher -h</code>) (#454).</li> <li>\u2728 Adds an optional <code>verify_sync</code> field to hive blockchain tests (EngineAPI). When set to true a second client attempts to sync to the first client that executed the tests (#431).</li> <li>\ud83d\udc1e Fix manually setting the gas limit in the genesis test env for post genesis blocks in blockchain tests (#472).</li> </ul>"},{"location":"CHANGELOG/#evm-tools_1","title":"\ud83d\udd27 EVM Tools","text":""},{"location":"CHANGELOG/#misc_1","title":"\ud83d\udccb Misc","text":"<ul> <li>\ud83d\udc1e Fix deprecation warnings due to outdated config in recommended VS Code project settings (#420).</li> <li>\ud83d\udc1e Fix typo in the selfdestruct revert tests module (#421).</li> </ul>"},{"location":"CHANGELOG/#v210-2024-01-29-cancun","title":"v2.1.0 - 2024-01-29: \ud83d\udc0d\ud83c\udfd6\ufe0f Cancun","text":"<p>Release v2.1.0 primarily fixes a small bug introduced within the previous release where transition forks are used within the new <code>StateTest</code> format. This was highlighted by @chfast within #405 (#405), where the fork name <code>ShanghaiToCancunAtTime15k</code> was found within state tests.</p>"},{"location":"CHANGELOG/#test-cases_2","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\u2728 EIP-4844: Adds <code>test_blob_gas_subtraction_tx()</code> verifying the blob gas fee is subtracted from the sender before executing the blob tx (#407).</li> </ul>"},{"location":"CHANGELOG/#framework_2","title":"\ud83d\udee0\ufe0f Framework","text":"<ul> <li>\ud83d\udc1e State tests generated with transition forks no longer use the transition fork name in the fixture output, instead they use the actual enabled fork according to the state test's block number and timestamp (#406).</li> </ul>"},{"location":"CHANGELOG/#misc_2","title":"\ud83d\udccb Misc","text":"<ul> <li>\u2728 Use <code>run-parallel</code> and shared wheel packages for <code>tox</code> (#408).</li> </ul>"},{"location":"CHANGELOG/#v200-2024-01-25-cancun","title":"v2.0.0 - 2024-01-25: \ud83d\udc0d\ud83c\udfd6\ufe0f Cancun","text":"<p>Release v2.0.0 contains many important framework changes, including introduction of the <code>StateTest</code> format, and some additional Cancun and other test coverage.</p> <p>Due to changes in the framework, there is a breaking change in the directory structure in the release tarball, please see the dedicated \"\ud83d\udca5 Breaking Changes\" section below for more information.</p>"},{"location":"CHANGELOG/#test-cases_3","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\u2728 EIP-4844: Add <code>test_sufficient_balance_blob_tx()</code> and <code>test_sufficient_balance_blob_tx_pre_fund_tx()</code> (#379).</li> <li>\u2728 EIP-6780: Add a reentrancy suicide revert test (#372).</li> <li>\u2728 EIP-1153: Add <code>test_run_until_out_of_gas()</code> for transient storage opcodes (#401).</li> <li>\u2728 EIP-198: Add tests for the MODEXP precompile (#364).</li> <li>\u2728 Tests for nested <code>CALL</code> and <code>CALLCODE</code> gas consumption with a positive value transfer (previously lacking coverage) (#371).</li> <li>\ud83d\udc1e EIP-4844: Fixed <code>test_invalid_tx_max_fee_per_blob_gas()</code> to account for extra gas required in the case where the account is incorrectly deduced the balance as if it had the correct block blob gas fee (#370).</li> <li>\ud83d\udc1e EIP-4844: Fixed <code>test_insufficient_balance_blob_tx()</code> to correctly calculate the minimum balance required for the accounts (#379).</li> <li>\ud83d\udc1e EIP-4844: Fix and enable <code>test_invalid_blob_tx_contract_creation</code> (#379).</li> <li>\ud83d\udd00 Convert all eligible <code>BlockchainTest</code>s to <code>StateTest</code>s (and additionally generate corresponding <code>BlockchainTest</code>s) (#368, #370).</li> </ul>"},{"location":"CHANGELOG/#framework_3","title":"\ud83d\udee0\ufe0f Framework","text":"<ul> <li>\u2728 Add <code>StateTest</code> fixture format generation; <code>StateTests</code> now generate a <code>StateTest</code> and a corresponding <code>BlockchainTest</code> test fixture, previously only <code>BlockchainTest</code> fixtures were generated (#368).</li> <li>\u2728 Add <code>StateTestOnly</code> fixture format is now available and its only difference with <code>StateTest</code> is that it does not produce a <code>BlockchainTest</code> (#368).</li> <li>\u2728 Add <code>evm_bytes_to_python</code> command-line utility which converts EVM bytecode to Python Opcodes (#357).</li> <li>\u2728 Fork objects used to write tests can now be compared using the <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code> operators, to check for a fork being newer than, newer than or equal, older than, older than or equal, respectively when compared against other fork (#367).</li> <li>\u2728 Add solc 0.8.23 support (#373).</li> <li>\u2728 Add framework unit tests for post state exception verification (#350).</li> <li>\u2728 Add a helper class <code>ethereum_test_tools.TestParameterGroup</code> to define test parameters as dataclasses and auto-generate test IDs (#364).</li> <li>\u2728 Add a <code>--single-fixture-per-file</code> flag to generate one fixture JSON file per test case (#331).</li> <li>\ud83d\udc1e Storage type iterator is now fixed (#369).</li> <li>\ud83d\udc1e Fix type coercion in <code>FixtureHeader.join()</code> (#398).</li> <li>\ud83d\udd00 Locally calculate the transactions list's root instead of using the one returned by t8n when producing BlockchainTests (#353).</li> <li>\ud83d\udd00 Change custom exception classes to dataclasses to improve testability (#386).</li> <li>\ud83d\udd00 Update fork name from \"Merge\" to \"Paris\" used within the framework and tests (#363).</li> <li>\ud83d\udca5 Replace <code>=</code> with <code>_</code> in pytest node ids and test fixture names (#342).</li> <li>\ud83d\udca5 The <code>StateTest</code>, spec format used to write tests, is now limited to a single transaction per test (#361).</li> <li>\ud83d\udca5 Tests must now use <code>BlockException</code> and <code>TransactionException</code> to define the expected exception of a given test, which can be used to test whether the client is hitting the proper exception when processing the block or transaction (#384).</li> <li>\ud83d\udca5 <code>fill</code>: Remove the <code>--enable-hive</code> flag; now all test types are generated by default (#358).</li> <li>\ud83d\udca5 Rename test fixtures names to match the corresponding pytest node ID as generated using <code>fill</code> (#342).</li> </ul>"},{"location":"CHANGELOG/#misc_3","title":"\ud83d\udccb Misc","text":"<ul> <li>\u2728 Docs: Add a \"Consuming Tests\" section to the docs, where each test fixture format is described, along with the steps to consume them, and the description of the structures used in each format (#375).</li> <li>\ud83d\udd00 Docs: Update <code>t8n</code> tool branch to fill tests for development features in the readme (#338).</li> <li>\ud83d\udd00 Filling tool: Updated the default filling tool (<code>t8n</code>) to go-ethereum@master (#368).</li> <li>\ud83d\udc1e Docs: Fix error banner in online docs due to mermaid syntax error (#398).</li> <li>\ud83d\udc1e Docs: Fix incorrectly formatted nested lists in online doc (#403).</li> </ul>"},{"location":"CHANGELOG/#breaking-changes","title":"\ud83d\udca5 Breaking Changes","text":"<p>A concrete example of the test name renaming and change in directory structure is provided below.</p> <ol> <li> <p>Fixture output, including release tarballs, now contain subdirectories for different test types:</p> </li> <li> <p><code>blockchain_tests</code>: Contains <code>BlockchainTest</code> formatted tests</p> </li> <li><code>blockchain_tests_hive</code>: Contains <code>BlockchainTest</code> with Engine API call directives for use in hive</li> <li> <p><code>state_tests</code>: Contains <code>StateTest</code> formatted tests</p> </li> <li> <p><code>StateTest</code>, spec format used to write tests, is now limited to a single transaction per test.</p> </li> <li>In this release the pytest node ID is now used for fixture names (previously only the test parameters were used), this should not be breaking. However, <code>=</code> in both node IDs (and therefore fixture names) have been replaced with <code>_</code>, which may break tooling that depends on the <code>=</code> character.</li> <li>Produced <code>blockchain_tests</code> fixtures and their corresponding <code>blockchain_tests_hive</code> fixtures now contain the named exceptions <code>BlockException</code> and <code>TransactionException</code> as strings in the <code>expectException</code> and <code>validationError</code> fields, respectively. These exceptions can be used to test whether the client is hitting the proper exception when processing an invalid block.</li> </ol> <p>Blockchain test:</p> <pre><code>\"blocks\": [\n      {\n         ...\n         \"expectException\": \"TransactionException.INSUFFICIENT_ACCOUNT_FUNDS\",\n         ...\n      }\n      ...\n]\n</code></pre> <p>Blockchain hive test:</p> <pre><code>\"engineNewPayloads\": [\n      {\n         ...\n         \"validationError\": \"TransactionException.INSUFFICIENT_ACCOUNT_FUNDS\",\n         ...\n      }\n      ...\n]\n</code></pre>"},{"location":"CHANGELOG/#renaming-and-release-tarball-directory-structure-change-example","title":"Renaming and Release Tarball Directory Structure Change Example","text":"<p>The fixture renaming provides a more consistent naming scheme between the pytest node ID and fixture name and allows the fixture name to be provided directly to pytest 5on the command line to execute individual tests in isolation, e.g. <code>pytest tests/frontier/opcodes/test_dup.py::test_dup[fork_Frontier]</code>.</p> <ol> <li> <p>Pytest node ID example:</p> </li> <li> <p>Previous node ID: <code>tests/frontier/opcodes/test_dup.py::test_dup[fork=Frontier]</code>.</p> </li> <li> <p>New node ID: <code>tests/frontier/opcodes/test_dup.py::test_dup[fork_Frontier]</code>.</p> </li> <li> <p>Fixture name example:</p> </li> <li> <p>Previous fixture name: <code>000-fork=Frontier</code></p> </li> <li> <p>New fixture name: <code>tests/frontier/opcodes/test_dup.py::test_dup[fork_Frontier]</code> (now the same as the pytest node ID).</p> </li> <li> <p>Fixture JSON file name example (within the release tarball):</p> </li> <li> <p>Previous fixture file name: <code>fixtures/frontier/opcodes/dup/dup.json</code> (<code>BlockChainTest</code> format).</p> </li> <li> <p>New fixture file names (all present within the release tarball):</p> <ul> <li><code>fixtures/state_tests/frontier/opcodes/dup/dup.json</code> (<code>StateTest</code> format).</li> <li><code>fixtures/blockchain_tests/frontier/opcodes/dup/dup.json</code> (<code>BlockChainTest</code> format).</li> <li><code>fixtures/blockchain_tests_hive/frontier/opcodes/dup/dup.json</code> (a blockchain test in <code>HiveFixture</code> format).</li> </ul> </li> </ol>"},{"location":"CHANGELOG/#v106-2023-10-19-cancun-devnet-10","title":"v1.0.6 - 2023-10-19: \ud83d\udc0d\ud83c\udfd6\ufe0f Cancun Devnet 10","text":""},{"location":"CHANGELOG/#test-cases_4","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\ud83d\udd00 EIP-4844: Update KZG point evaluation test vectors to use data from the official KZG setup and Mainnet Trusted Setup (#336).</li> </ul>"},{"location":"CHANGELOG/#framework_4","title":"\ud83d\udee0\ufe0f Framework","text":"<ul> <li>\ud83d\udd00 Fixtures: Add a non-RLP format field (<code>rlp_decoded</code>) to invalid blocks (#322).</li> <li>\ud83d\udd00 Spec: Refactor state and blockchain spec (#307).</li> </ul>"},{"location":"CHANGELOG/#evm-tools_2","title":"\ud83d\udd27 EVM Tools","text":"<ul> <li>\u2728 Run geth's <code>evm blocktest</code> command to verify JSON fixtures after test case execution (<code>--verify-fixtures</code>) (#325).</li> <li>\u2728 Enable tracing support for <code>ethereum-spec-evm</code> (#289).</li> </ul>"},{"location":"CHANGELOG/#misc_4","title":"\ud83d\udccb Misc","text":"<ul> <li>\u2728 Tooling: Add Python 3.12 support (#309).</li> <li>\u2728 Process: Added a Github pull request template (#308).</li> <li>\u2728 Docs: Changelog updated post release (#321).</li> <li>\u2728 Docs: Add a section explaining execution-spec-tests release artifacts (#334).</li> <li>\ud83d\udd00 T8N Tool: Branch used to generate the tests for Cancun is now lightclient/go-ethereum@devnet-10 (#336)</li> </ul>"},{"location":"CHANGELOG/#breaking-change_1","title":"\ud83d\udca5 Breaking Change","text":"<ul> <li>Fixtures now use the Mainnet Trusted Setup merged on consensus-specs#3521 (#336)</li> </ul>"},{"location":"CHANGELOG/#v105-2023-09-26-cancun-devnet-9-release-3","title":"v1.0.5 - 2023-09-26: \ud83d\udc0d\ud83c\udfd6\ufe0f Cancun Devnet 9 Release 3","text":"<p>This release mainly serves to update the EIP-4788 beacon roots address to <code>0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02</code>, as updated in ethereum/EIPs/pull/7672.</p>"},{"location":"CHANGELOG/#test-cases_5","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\ud83d\udc1e EIP-4844: Fix invalid blob txs pre-Cancun engine response (#306).</li> <li>\u2728 EIP-4788: Final update to the beacon root address (#312).</li> </ul>"},{"location":"CHANGELOG/#misc_5","title":"\ud83d\udccb Misc","text":"<ul> <li>\u2728 Docs: Changelog added (#305).</li> <li>\u2728 CI/CD: Run development fork tests in Github Actions (#302).</li> <li>\u2728 CI/CD: Generate test JSON fixtures on push (#303).</li> </ul>"},{"location":"CHANGELOG/#breaking-change_2","title":"\ud83d\udca5 Breaking Change","text":"<p>Please use development fixtures from now on when testing Cancun. These refer to changes that are currently under development within clients:</p> <ul> <li>fixtures: All tests until the last stable fork (Shanghai)</li> <li>fixtures_develop: All tests until the last development fork (Cancun)</li> <li>fixtures_hive: All tests until the last stable fork (Shanghai) in hive format (Engine API directives instead of the usual BlockchainTest format)</li> <li>fixtures_develop_hive: All tests until the last development fork (Cancun) in hive format</li> </ul>"},{"location":"CHANGELOG/#v104-2023-09-21-cancun-devnet-9-release-2","title":"v1.0.4 - 2023-09-21: \ud83d\udc0d Cancun Devnet 9 Release 2","text":"<p>This release adds additional coverage to the current set of Cancun tests, up to the Devnet-9 Cancun specification.</p> <p>Note: Additional EIP-4788 updates from ethereum/EIPs/pull/7672 will be included in the next release.</p>"},{"location":"CHANGELOG/#test-cases_6","title":"\ud83e\uddea Test Cases","text":"<ul> <li>\u2728 EIP-7516: BLOBBASEFEE opcode: Add first and comprehensive tests (@marioevz in #294).</li> <li>\u2728 EIP-4788: Beacon block root in the EVM: Increase coverage (@spencer-tb in #297).</li> <li>\ud83d\udc1e EIP-1153: Transient storage opcodes: Remove conftest '+1153' in network field (@spencer-tb in #299).</li> </ul>"},{"location":"CHANGELOG/#framework_5","title":"\ud83d\udee0\ufe0f Framework","text":"<ul> <li>\ud83d\udd00 EIP-4788: Beacon root contract is pre-deployed at <code>0xbEAC020008aFF7331c0A389CB2AAb67597567d7a</code> (@spencer-tb in #297).</li> <li>\u2728 Deprecate empty accounts within framework (@spencer-tb in #300).</li> <li>\u2728 Fixture generation split based on hive specificity (@spencer-tb in #301).</li> <li>\ud83d\udca5 <code>fill</code>: <code>--disable-hive</code> flag removed; replaced by <code>--enable-hive</code> (@spencer-tb in #301).</li> <li>\u2728 Add engine API forkchoice updated information in fixtures (@spencer-tb in #256).</li> </ul>"},{"location":"CHANGELOG/#v103-2023-09-14-cancun-devnet-9-release","title":"v1.0.3 - 2023-09-14: \ud83d\udc0d Cancun Devnet 9 Release","text":"<p>See v1.0.3.</p>"},{"location":"CHANGELOG/#v102-2023-08-11-cancun-devnet-8-4788-v2-pre-release","title":"v1.0.2 - 2023-08-11: \ud83d\udc0d Cancun Devnet 8 + 4788 v2 Pre-Release","text":"<p>See v1.0.2.</p>"},{"location":"CHANGELOG/#v101-2023-08-03-cancun-devnet-8-pre-release","title":"v1.0.1 - 2023-08-03: \ud83d\udc0d Cancun Devnet-8 Pre-Release","text":"<p>See v1.0.1.</p>"},{"location":"CHANGELOG/#v100-2023-06-27-welcome-to-the-pytest-era","title":"v1.0.0 - 2023-06-27: \ud83e\uddea Welcome to the Pytest Era","text":"<p>See v1.0.0.</p> <p>Older releases can be found on the releases page.</p>"},{"location":"changelog_section_template/","title":"Changelog Section Template","text":"<p>The following can be copy-pasted into the <code>CHANGELOG.md</code> file for a new release.</p>"},{"location":"changelog_section_template/#unreleased","title":"\ud83d\udd1c [Unreleased]","text":""},{"location":"changelog_section_template/#test-cases","title":"\ud83e\uddea Test Cases","text":""},{"location":"changelog_section_template/#framework","title":"\ud83d\udee0\ufe0f Framework","text":""},{"location":"changelog_section_template/#evm-tools","title":"\ud83d\udd27 EVM Tools","text":""},{"location":"changelog_section_template/#misc","title":"\ud83d\udccb Misc","text":""},{"location":"navigation/","title":"Navigation","text":"<ul> <li>Overview</li> <li>Getting Started<ul> <li>Quick Start</li> <li>VS Code Setup</li> <li>Repository Overview</li> <li>Executing Tests at a Prompt</li> <li>Executing Tests in VS Code</li> <li>Executing Tests for Features Under Development</li> <li>Debugging Transition Tools</li> </ul> </li> <li>Writing Tests<ul> <li>Code Standards</li> <li>Types of Test</li> <li>Adding a New Test</li> <li>Writing a New Test</li> <li>Referencing an EIP Spec Version</li> <li>Verifying Changes Locally</li> <li>Exception Tests</li> </ul> </li> <li>Tutorials<ul> <li>State Transition Tests</li> </ul> </li> <li>Consuming Tests<ul> <li>State Tests</li> <li>Blockchain Tests</li> <li>Blockchain Hive Tests</li> <li>EOF Tests</li> <li>Common Types</li> <li>Exceptions</li> </ul> </li> <li>Getting Help</li> <li>Developer Doc<ul> <li>Documentation</li> <li>Coding Style</li> <li>Enabling Precommit Checks</li> </ul> </li> <li>Changelog</li> <li>Library Reference<ul> <li>EVM Transition Tool Package</li> <li>Ethereum Test Tools Package</li> <li>Ethereum Test Forks Package</li> <li>Pytest Plugins</li> </ul> </li> <li>Test case reference<ul> <li>Prague<ul> <li>EIP-2537 Bls 12 381 Precompiles<ul> <li>Spec</li> <li>Test Bls12 G1add<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 G1msm<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 G1mul<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 G2add<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 G2msm<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 G2mul<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 Map Fp2 To G2<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 Map Fp To G1<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 Pairing<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 Precompiles Before Fork<ul> <li>Test Cases</li> </ul> </li> <li>Test Bls12 Variable Length Input Contracts<ul> <li>Test Cases</li> </ul> </li> <li>Vectors<ul> <li>Test-vectors</li> </ul> </li> </ul> </li> <li>EIP-2935 Historical Block Hashes From State<ul> <li>Spec</li> <li>Test Block Hashes<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-6110 Deposits<ul> <li>Spec</li> <li>Test Deposits<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-7002 El Triggerable Withdrawals<ul> <li>Spec</li> <li>Test Withdrawal Requests<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-7685 General Purpose El Requests<ul> <li>Spec</li> <li>Test Deposits Withdrawals<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-7692 Eof V1<ul> <li>Tracker</li> <li>EIP-3540 Eof V1<ul> <li>Spec</li> <li>Test Code Validation<ul> <li>Test Cases</li> </ul> </li> <li>Test Eof Example<ul> <li>Test Cases</li> </ul> </li> <li>Test Example Valid Invalid<ul> <li>Test Cases</li> </ul> </li> <li>Test Execution Function<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-4200 Relative Jumps<ul> <li>Test Rjump<ul> <li>Test Cases</li> </ul> </li> <li>Test Rjumpi<ul> <li>Test Cases</li> </ul> </li> <li>Test Rjumpv<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-6206 Jumpf<ul> <li>Spec</li> <li>Test Jumpf Execution<ul> <li>Test Cases</li> </ul> </li> <li>Test Jumpf Stack<ul> <li>Test Cases</li> </ul> </li> <li>Test Jumpf Target<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-663 DUPn Swapn Exchange<ul> <li>Test DUPn<ul> <li>Test Cases</li> </ul> </li> <li>Test Exchange<ul> <li>Test Cases</li> </ul> </li> <li>Test Swapn<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-7480 Data Section<ul> <li>Spec</li> <li>Test Code Validation<ul> <li>Test Cases</li> </ul> </li> <li>Test Data Opcodes<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-7620 Eof Create<ul> <li>Spec</li> <li>Test Eofcreate<ul> <li>Test Cases</li> </ul> </li> <li>Test Eofcreate Failures<ul> <li>Test Cases</li> </ul> </li> <li>Test Legacy Eof Creates<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>Cancun<ul> <li>EIP-1153 Tstore<ul> <li>Spec</li> <li>Test Tstorage<ul> <li>Test Cases</li> </ul> </li> <li>Test Tstorage Create Contexts<ul> <li>Test Cases</li> </ul> </li> <li>Test Tstorage Execution Contexts<ul> <li>Test Cases</li> </ul> </li> <li>Test Tstorage Reentrancy Contexts<ul> <li>Test Cases</li> </ul> </li> <li>Test Tstorage Selfdestruct<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-4788 Beacon Root<ul> <li>Spec</li> <li>Test Beacon Root Contract<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-4844 Blobs<ul> <li>Spec</li> <li>Test Blob Txs<ul> <li>Test Cases</li> </ul> </li> <li>Test Blob Txs Full<ul> <li>Test Cases</li> </ul> </li> <li>Test Blobhash Opcode<ul> <li>Test Cases</li> </ul> </li> <li>Test Blobhash Opcode Contexts<ul> <li>Test Cases</li> </ul> </li> <li>Test Excess Blob Gas<ul> <li>Test Cases</li> </ul> </li> <li>Test Excess Blob Gas Fork Transition<ul> <li>Test Cases</li> </ul> </li> <li>Test Point Evaluation Precompile<ul> <li>Test Cases</li> </ul> </li> <li>Test Point Evaluation Precompile Gas<ul> <li>Test Cases</li> </ul> </li> <li>Point Evaluation Vectors<ul> <li>Readme</li> </ul> </li> </ul> </li> <li>EIP-5656 Mcopy<ul> <li>Test Mcopy<ul> <li>Test Cases</li> </ul> </li> <li>Test Mcopy Contexts<ul> <li>Test Cases</li> </ul> </li> <li>Test Mcopy Memory Expansion<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-6780 Selfdestruct<ul> <li>Test Dynamic Create2 Selfdestruct Collision<ul> <li>Test Cases</li> </ul> </li> <li>Test Reentrancy Selfdestruct Revert<ul> <li>Test Cases</li> </ul> </li> <li>Test Selfdestruct<ul> <li>Test Cases</li> </ul> </li> <li>Test Selfdestruct Revert<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-7516 Blobgasfee<ul> <li>Test Blobgasfee Opcode<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Shanghai<ul> <li>EIP-3651 Warm Coinbase<ul> <li>Test Warm Coinbase<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-3855 Push0<ul> <li>Test Push0<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-3860 Initcode<ul> <li>Test Initcode<ul> <li>Test Cases</li> </ul> </li> </ul> </li> <li>EIP-4895 Withdrawals<ul> <li>Test Withdrawals<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Paris<ul> <li>Security<ul> <li>Test Selfdestruct Balance Bug<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Berlin<ul> <li>EIP-2930 Access List<ul> <li>Test ACL<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Istanbul<ul> <li>EIP-1344 CHAINID<ul> <li>Test CHAINID<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Constantinople<ul> <li>Create2<ul> <li>Test Recreate<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Byzantium<ul> <li>EIP-198 Modexp Precompile<ul> <li>Test Modexp<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Homestead<ul> <li>Yul<ul> <li>Test Yul Example<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> <li>Frontier<ul> <li>Opcodes<ul> <li>Test Call And Callcode Gas Calculation<ul> <li>Test Cases</li> </ul> </li> <li>Test DUP<ul> <li>Test Cases</li> </ul> </li> <li>Test Selfdestruct<ul> <li>Test Cases</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"consuming_tests/","title":"Consuming Tests (Fixtures) Generated by execution-spec-tests","text":"<p>ethereum/execution-spec-tests generates JSON test fixtures in different formats that can be consumed by execution clients either directly or via Hive:</p> Format Consumed by the client Location in <code>.tar.gz</code> release State Tests directly via a <code>statetest</code>-like command (e.g., go-ethereum/cmd/evm/staterunner.go) <code>./fixtures/state_tests/</code> Blockchain Tests directly via a <code>blocktest</code>-like command (e.g., go-ethereum/cmd/evm/blockrunner.go) <code>./fixtures/blockchain_tests/</code> Blockchain Hive Tests in the Hive <code>pyspec</code> simulator via the Engine API and other RPC endpoints <code>./fixtures/blockchain_tests_hive/</code> <p>Here's a top-level comparison of the different methods of consuming tests:</p> Consumed via Scope Pros Cons <code>statetest</code> or <code>blocktest</code>-like command Module test - Fast feedback loop- Less complex - Smaller coverage scope- Requires a dedicated interface to the client EVM to consume the JSON fixtures and execute tests <code>hive --sim ethereum/pyspec</code> System test / Integration test - Wider Coverage Scope- Tests more of the client stack - Slower feedback loop- Harder to debug- Post-Merge forks only (requires the Engine API) <p>Running <code>blocktest</code>, <code>statetest</code>, directly within the execution-spec-tests framework</p> <p>It's possible to execute <code>evm blocktest</code> directly within the execution-spec-tests framework. This is intended to verify fixture generation, see Debugging <code>t8n</code> Tools.</p> <p>Generating test fixtures using a <code>t8n</code> tool via <code>fill</code> is not considered to be the actual test</p> <p>The <code>fill</code> command uses <code>t8n</code> tools to generate fixtures. Whilst this will provide basic sanity checking of EVM behavior and a sub-set of post conditions are typically checked within test cases, it is not considered the actual test. The actual test is the execution of the fixture against the EVM which will check the entire post allocation and typically use different code paths than <code>t8n</code> commands.</p>"},{"location":"consuming_tests/#release-formats","title":"Release Formats","text":"<p>The ethereum/execution-spec-tests repository provides releases of fixtures in various formats (as of 2023-10-16):</p> Release Artifact Consumer Fork/feature scope <code>fixtures.tar.gz</code> Clients All tests until the last stable fork (\"must pass\") <code>fixtures_develop.tar.gz</code> Clients All tests until the last development fork"},{"location":"consuming_tests/#obtaining-the-most-recent-release-artifacts","title":"Obtaining the Most Recent Release Artifacts","text":"<p>Artifacts can be downloaded directly from the release page. The following script demonstrates how the most recent release version of a specific artifact can be downloaded using the Github API:</p> <pre><code>#!/bin/bash\n\n# requires jq\n# sudo apt install jq\n\n# The following two artifacts are intended for consumption by clients:\n# - fixtures.tar.gz: Generated up to the last deployed fork.\n# - fixtures_develop.tar.gz: Generated up to and including the latest dev fork.\n# As of March 2024, dev is Prague, deployed is Cancun.\n\nARTIFACT=\"fixtures_develop.tar.gz\"  \n\nOWNER=\"ethereum\"\nREPO=\"execution-spec-tests\"\n\nDOWNLOAD_URL=$(curl -s https://api.github.com/repos/$OWNER/$REPO/releases/latest \\\n                   | jq -r '.assets[] | select(.name==\"'$ARTIFACT'\").browser_download_url')\n\n# Sanity check for the download URL: contains a version tag prefixed with \"v\"\nif [[ \"$DOWNLOAD_URL\" =~ v[0-9]+\\.[0-9]+\\.[0-9]+ ]]; then\n    curl -LO $DOWNLOAD_URL\nelse\n    echo \"Error: URL does not contain a valid version tag (URL: ${DOWNLOAD_URL}).\"\n    exit 1\nfi\n</code></pre>"},{"location":"consuming_tests/blockchain_test/","title":"Blockchain Tests","text":"<p>The Blockchain Test fixture format tests are included in the fixtures subdirectory <code>blockchain_tests</code>.</p> <p>These are produced by the <code>StateTest</code> and <code>BlockchainTest</code> test specs.</p>"},{"location":"consuming_tests/blockchain_test/#description","title":"Description","text":"<p>The blockchain test fixture format is used to test block validation and the consensus rules of the Ethereum blockchain.</p> <p>It does so by defining a pre-execution state, a series of blocks, and a post-execution state, verifying that, after all the blocks have been processed, appended if valid or rejected if invalid, the result is the expected post-execution state.</p> <p>A single JSON fixture file is composed of a JSON object where each key-value pair is a different <code>Fixture</code> test object, with the key string representing the test name.</p> <p>The JSON file path plus the test name are used as the unique test identifier.</p>"},{"location":"consuming_tests/blockchain_test/#consumption","title":"Consumption","text":"<p>For each <code>Fixture</code> test object in the JSON fixture file, perform the following steps:</p> <ol> <li>Use <code>network</code> to configure the execution fork schedule according to the <code>Fork</code> type definition.</li> <li>Use <code>pre</code> as the starting state allocation of the execution environment for the test and calculate the genesis state root.</li> <li>Decode <code>genesisRLP</code> to obtain the genesis block header, if the block cannot be decoded, fail the test.</li> <li>Compare the genesis block header with <code>genesisBlockHeader</code>, if any field does not match, fail the test.</li> <li>Compare the state root calculated on step 2 with the state root in the genesis block header, if they do not match, fail the test.</li> <li>Set the genesis block as the current head of the chain.</li> <li> <p>If <code>blocks</code> contains at least one block, perform the following steps for each <code>FixtureBlock</code> or <code>InvalidFixtureBlock</code>:</p> <ol> <li> <p>Determine whether the current block is valid or invalid:</p> <ol> <li>If the <code>expectException</code> field is not present, it is valid, and object must be decoded as a <code>FixtureBlock</code>.</li> <li>If the <code>expectException</code> field is present, it is invalid, and object must be decoded as a <code>InvalidFixtureBlock</code>.</li> </ol> </li> <li> <p>Attempt to decode field <code>rlp</code> as the current block</p> <ol> <li>If the block cannot be decoded:<ul> <li>If an rlp decoding exception is not expected for the current block, fail the test.</li> <li>If an rlp decoding error is expected, pass the test (Note: A block with an expected exception will be the last block in the fixture).</li> </ul> </li> <li>If the block can be decoded, proceed to the next step.</li> </ol> </li> <li> <p>Attempt to apply the current decoded block on top of the current head of the chain</p> <ol> <li>If the block cannot be applied:<ul> <li>If an exception is expected on the current block and it matches the exception obtained upon execution, pass the test. (Note: A block with an expected exception will be the last block in the fixture)</li> <li>If an exception is not expected on the current block, fail the test</li> </ul> </li> <li>If the block can be applied:<ul> <li>If an exception is expected on the current block, fail the test</li> <li>If an exception is not expected on the current block, set the decoded block as the current head of the chain and proceed to the next block until you reach the last block in the fixture.</li> </ul> </li> </ol> </li> </ol> </li> <li> <p>Compare the hash of the current head of the chain against <code>lastblockhash</code>, if they do not match, fail the test.</p> </li> <li>Compare all accounts and the fields described in <code>post</code> against the current state, if any do not match, fail the test.</li> </ol>"},{"location":"consuming_tests/blockchain_test/#structures","title":"Structures","text":""},{"location":"consuming_tests/blockchain_test/#fixture","title":"<code>Fixture</code>","text":""},{"location":"consuming_tests/blockchain_test/#-network-fork","title":"- <code>network</code>: <code>Fork</code>","text":"<p>Fork configuration for the test.</p>"},{"location":"consuming_tests/blockchain_test/#-pre-alloc","title":"- <code>pre</code>: <code>Alloc</code>","text":"<p>Starting account allocation for the test. State root calculated from this allocation must match the one in the genesis block.</p>"},{"location":"consuming_tests/blockchain_test/#-genesisrlp-bytes","title":"- <code>genesisRLP</code>: <code>Bytes</code>","text":"<p>RLP serialized version of the genesis block.</p>"},{"location":"consuming_tests/blockchain_test/#-genesisblockheader-fixtureheader","title":"- <code>genesisBlockHeader</code>: <code>FixtureHeader</code>","text":"<p>Genesis block header.</p>"},{"location":"consuming_tests/blockchain_test/#-blocks-listfixtureblockinvalidfixtureblock","title":"- <code>blocks</code>: <code>List</code><code>[</code><code>FixtureBlock</code><code>|</code><code>InvalidFixtureBlock</code><code>]</code>","text":"<p>List of blocks to be processed after the genesis block.</p>"},{"location":"consuming_tests/blockchain_test/#-lastblockhash-hash","title":"- <code>lastblockhash</code>: <code>Hash</code>","text":"<p>Hash of the last valid block, or the genesis block hash if the list of blocks is empty, or contains a single invalid block.</p>"},{"location":"consuming_tests/blockchain_test/#-post-alloc","title":"- <code>post</code>: <code>Alloc</code>","text":"<p>Account allocation for verification after all the blocks have been processed.</p>"},{"location":"consuming_tests/blockchain_test/#-sealengine-str","title":"- <code>sealEngine</code>: <code>str</code>","text":"<p>Deprecated: Seal engine used to mine the blocks.</p>"},{"location":"consuming_tests/blockchain_test/#fixtureheader","title":"<code>FixtureHeader</code>","text":""},{"location":"consuming_tests/blockchain_test/#-parenthash-hash","title":"- <code>parentHash</code>: <code>Hash</code>","text":"<p>Hash of the parent block.</p>"},{"location":"consuming_tests/blockchain_test/#-unclehash-hash","title":"- <code>uncleHash</code>: <code>Hash</code>","text":"<p>Hash of the uncle block list.</p>"},{"location":"consuming_tests/blockchain_test/#-coinbase-address","title":"- <code>coinbase</code>: <code>Address</code>","text":"<p>Address of the account that will receive the rewards for building the block.</p>"},{"location":"consuming_tests/blockchain_test/#-stateroot-hash","title":"- <code>stateRoot</code>: <code>Hash</code>","text":"<p>Root hash of the state trie.</p>"},{"location":"consuming_tests/blockchain_test/#-transactionstrie-hash","title":"- <code>transactionsTrie</code>: <code>Hash</code>","text":"<p>Root hash of the transactions trie.</p>"},{"location":"consuming_tests/blockchain_test/#-receipttrie-hash","title":"- <code>receiptTrie</code>: <code>Hash</code>","text":"<p>Root hash of the receipts trie.</p>"},{"location":"consuming_tests/blockchain_test/#-bloom-bloom","title":"- <code>bloom</code>: <code>Bloom</code>","text":"<p>Bloom filter composed of the logs of all the transactions in the block.</p>"},{"location":"consuming_tests/blockchain_test/#-difficulty-zeropaddedhexnumber","title":"- <code>difficulty</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Difficulty of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-number-zeropaddedhexnumber","title":"- <code>number</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Number of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-gaslimit-zeropaddedhexnumber","title":"- <code>gasLimit</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Total gas limit of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-gasused-zeropaddedhexnumber","title":"- <code>gasUsed</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Total gas used by all the transactions in the block.</p>"},{"location":"consuming_tests/blockchain_test/#-timestamp-zeropaddedhexnumber","title":"- <code>timestamp</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Timestamp of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-extradata-bytes","title":"- <code>extraData</code>: <code>Bytes</code>","text":"<p>Extra data of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-mixhash-hash","title":"- <code>mixHash</code>: <code>Hash</code>","text":"<p>Mix hash or PrevRandao of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-nonce-headernonce","title":"- <code>nonce</code>: <code>HeaderNonce</code>","text":"<p>Nonce of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-hash-hash","title":"- <code>hash</code>: <code>Hash</code>","text":"<p>Hash of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-basefeepergas-zeropaddedhexnumber-fork-london","title":"- <code>baseFeePerGas</code>: <code>ZeroPaddedHexNumber</code> <code>(fork: London)</code>","text":"<p>Base fee per gas of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-withdrawalsroot-hash-fork-shanghai","title":"- <code>withdrawalsRoot</code>: <code>Hash</code> <code>(fork: Shanghai)</code>","text":"<p>Root hash of the withdrawals trie.</p>"},{"location":"consuming_tests/blockchain_test/#-blobgasused-zeropaddedhexnumber-fork-cancun","title":"- <code>blobGasUsed</code>: <code>ZeroPaddedHexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Total blob gas used by all the transactions in the block.</p>"},{"location":"consuming_tests/blockchain_test/#-excessblobgas-zeropaddedhexnumber-fork-cancun","title":"- <code>excessBlobGas</code>: <code>ZeroPaddedHexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Excess blob gas of the block used to calculate the blob fee per gas for this block.</p>"},{"location":"consuming_tests/blockchain_test/#-parentbeaconblockroot-hash-fork-cancun","title":"- <code>parentBeaconBlockRoot</code>: <code>Hash</code> <code>(fork: Cancun)</code>","text":"<p>Root hash of the parent beacon block.</p>"},{"location":"consuming_tests/blockchain_test/#fixtureblock","title":"<code>FixtureBlock</code>","text":""},{"location":"consuming_tests/blockchain_test/#-rlp-bytes","title":"- <code>rlp</code>: <code>Bytes</code>","text":"<p>RLP serialized version of the block. Field is only optional when embedded in a <code>InvalidFixtureBlock</code> as the <code>rlp_decoded</code> field.</p>"},{"location":"consuming_tests/blockchain_test/#-blockheader-fixtureheader","title":"- <code>blockHeader</code>: <code>FixtureHeader</code>","text":"<p>Decoded block header fields included in the block RLP.</p>"},{"location":"consuming_tests/blockchain_test/#-blocknumber-number","title":"- <code>blocknumber</code>: <code>Number</code>","text":"<p>Block number.</p>"},{"location":"consuming_tests/blockchain_test/#-transactions-listfixturetransaction","title":"- <code>transactions</code>: <code>List</code><code>[</code><code>FixtureTransaction</code><code>]</code>","text":"<p>List of decoded transactions included in the block RLP.</p>"},{"location":"consuming_tests/blockchain_test/#-uncleheaders-listfixtureheader","title":"- <code>uncleHeaders</code>: <code>List</code><code>[</code><code>FixtureHeader</code><code>]</code>","text":"<p>List of uncle headers included in the block RLP. An empty list post merge.</p>"},{"location":"consuming_tests/blockchain_test/#-withdrawals-optionallistfixturewithdrawal-fork-shanghai","title":"- <code>withdrawals</code>: <code>Optional</code><code>[</code><code>List</code><code>[</code><code>FixtureWithdrawal</code><code>]]</code> <code>(fork: Shanghai)</code>","text":"<p>Optional list of withdrawals included in the block RLP.</p>"},{"location":"consuming_tests/blockchain_test/#invalidfixtureblock","title":"<code>InvalidFixtureBlock</code>","text":""},{"location":"consuming_tests/blockchain_test/#-expectexception-transactionexceptionblockexception","title":"- <code>expectException</code>: <code>TransactionException</code><code>|</code><code>BlockException</code>","text":"<p>Expected exception that invalidates the block.</p>"},{"location":"consuming_tests/blockchain_test/#-rlp-bytes_1","title":"- <code>rlp</code>: <code>Bytes</code>","text":"<p>RLP serialized version of the block.</p>"},{"location":"consuming_tests/blockchain_test/#-rlp_decoded-optionalfixtureblock","title":"- <code>rlp_decoded</code>: <code>Optional</code><code>[</code><code>FixtureBlock</code><code>]</code>","text":"<p>Decoded block attributes included in the block RLP.</p>"},{"location":"consuming_tests/blockchain_test/#fixturetransaction","title":"<code>FixtureTransaction</code>","text":""},{"location":"consuming_tests/blockchain_test/#-type-zeropaddedhexnumber","title":"- <code>type</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Transaction type.</p>"},{"location":"consuming_tests/blockchain_test/#-chainid-zeropaddedhexnumber","title":"- <code>chainId</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Chain ID of the transaction.</p>"},{"location":"consuming_tests/blockchain_test/#-nonce-zeropaddedhexnumber","title":"- <code>nonce</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Nonce of the account that sends the transaction</p>"},{"location":"consuming_tests/blockchain_test/#-gasprice-zeropaddedhexnumber","title":"- <code>gasPrice</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Gas price for the transaction (Transaction types 0 &amp; 1)</p>"},{"location":"consuming_tests/blockchain_test/#-maxpriorityfeepergas-hexnumber-fork-london","title":"- <code>maxPriorityFeePerGas</code>: <code>HexNumber</code> <code>(fork: London)</code>","text":"<p>Max priority fee per gas to pay (Transaction types 2 &amp; 3)</p>"},{"location":"consuming_tests/blockchain_test/#-maxfeepergas-hexnumber-fork-london","title":"- <code>maxFeePerGas</code>: <code>HexNumber</code> <code>(fork: London)</code>","text":"<p>Max base fee per gas to pay (Transaction types 2 &amp; 3)</p>"},{"location":"consuming_tests/blockchain_test/#-gaslimit-zeropaddedhexnumber_1","title":"- <code>gasLimit</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Gas limit of the transaction</p>"},{"location":"consuming_tests/blockchain_test/#-to-address-null","title":"- <code>to</code>: <code>Address</code><code>| null</code>","text":"<p>Destination address of the transaction, or <code>null</code> to create a contract</p>"},{"location":"consuming_tests/blockchain_test/#-value-zeropaddedhexnumber","title":"- <code>value</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Value of the transaction</p>"},{"location":"consuming_tests/blockchain_test/#-data-bytes","title":"- <code>data</code>: <code>Bytes</code>","text":"<p>Data bytes of the transaction</p>"},{"location":"consuming_tests/blockchain_test/#-accesslist-listmappingaddresslisthash-fork-berlin","title":"- <code>accessList</code>: <code>List</code><code>[</code><code>Mapping</code><code>[</code><code>Address</code><code>,</code><code>List</code><code>[</code><code>Hash</code><code>]]]</code> <code>(fork: Berlin)</code>","text":"<p>Account access lists (Transaction types 1, 2 &amp; 3)</p>"},{"location":"consuming_tests/blockchain_test/#-maxfeeperblobgas-zeropaddedhexnumber-fork-cancun","title":"- <code>maxFeePerBlobGas</code>: <code>ZeroPaddedHexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Max fee per blob gas to pay (Transaction type 3)</p>"},{"location":"consuming_tests/blockchain_test/#-blobversionedhashes-listhash-fork-cancun","title":"- <code>blobVersionedHashes</code>: <code>List</code><code>[</code><code>Hash</code><code>]</code> <code>(fork: Cancun)</code>","text":"<p>Max fee per blob gas to pay (Transaction type 3)</p>"},{"location":"consuming_tests/blockchain_test/#-v-zeropaddedhexnumber","title":"- <code>v</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>V value of the transaction signature</p>"},{"location":"consuming_tests/blockchain_test/#-r-zeropaddedhexnumber","title":"- <code>r</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>R value of the transaction signature</p>"},{"location":"consuming_tests/blockchain_test/#-s-zeropaddedhexnumber","title":"- <code>s</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>S value of the transaction signature</p>"},{"location":"consuming_tests/blockchain_test/#-sender-address","title":"- <code>sender</code>: <code>Address</code>","text":"<p>Sender address of the transaction</p>"},{"location":"consuming_tests/blockchain_test/#-secretkey-hash","title":"- <code>secretKey</code>: <code>Hash</code>","text":"<p>Private key that must be used to sign the transaction</p>"},{"location":"consuming_tests/blockchain_test/#fixturewithdrawal","title":"<code>FixtureWithdrawal</code>","text":""},{"location":"consuming_tests/blockchain_test/#-index-zeropaddedhexnumber","title":"- <code>index</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Index of the withdrawal</p>"},{"location":"consuming_tests/blockchain_test/#-validatorindex-zeropaddedhexnumber","title":"- <code>validatorIndex</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Withdrawing validator index</p>"},{"location":"consuming_tests/blockchain_test/#-address-address","title":"- <code>address</code>: <code>Address</code>","text":"<p>Address to withdraw to</p>"},{"location":"consuming_tests/blockchain_test/#-amount-zeropaddedhexnumber","title":"- <code>amount</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Amount of the withdrawal</p>"},{"location":"consuming_tests/blockchain_test_hive/","title":"Blockchain Hive Tests","text":"<p>The Blockchain Hive Test fixture format tests are included in the fixtures subdirectory <code>blockchain_tests_hive</code>, and use Engine API directives instead of the usual BlockchainTest format.</p> <p>These are produced by the <code>StateTest</code> and <code>BlockchainTest</code> test specs.</p>"},{"location":"consuming_tests/blockchain_test_hive/#description","title":"Description","text":"<p>The Blockchain Hive Test fixture format is used to test block validation and the consensus rules of the Ethereum blockchain, when a block is delivered through the Engine API as a <code>engine_newPayloadVX</code> directive.</p> <p>It does so by defining a pre-execution state, a series of blocks as <code>engine_newPayloadVX</code> directives, and a post-execution state, verifying that, after all the blocks have been processed, appended if valid or rejected if invalid, the result is the expected post-execution state.</p> <p>A single JSON fixture file is composed of a JSON object where each key-value pair is a different <code>HiveFixture</code> test object, with the key string representing the test name.</p> <p>The JSON file path plus the test name are used as the unique test identifier.</p>"},{"location":"consuming_tests/blockchain_test_hive/#consumption","title":"Consumption","text":"<p>For each <code>HiveFixture</code> test object in the JSON fixture file, perform the following steps:</p> <ol> <li> <p>Start a full node using:</p> <ul> <li><code>network</code> to configure the execution fork schedule according to the <code>Fork</code> type definition.</li> <li><code>pre</code> as the starting state allocation of the execution environment for the test and calculate the genesis state root.</li> <li><code>genesisBlockHeader</code> as the genesis block header.</li> </ul> </li> <li> <p>Verify the head of the chain is the genesis block, and the state root matches the one calculated on step 1, otherwise fail the test.</p> </li> <li> <p>For each <code>FixtureEngineNewPayload</code> in <code>engineNewPayloads</code>:</p> <ol> <li>Deliver the payload using the <code>engine_newPayloadVX</code> directive, using:<ul> <li><code>version</code> as the version of the directive.</li> <li><code>executionPayload</code> as the payload.</li> <li><code>blob_versioned_hashes</code>, if present, as the list of hashes of the versioned blobs that are part of the execution payload.</li> <li><code>parentBeaconBlockRoot</code>, if present, as the hash of the parent beacon block root.</li> </ul> </li> <li>If <code>errorCode</code> is present:<ul> <li>Verify the directive returns an error, and the error code matches the one in <code>errorCode</code>, otherwise fail the test.</li> <li>Proceed to the next payload.</li> </ul> </li> <li>If <code>valid</code> is <code>false</code>, verify that the directive returns <code>status</code> field of PayloadStatusV1 as <code>INVALID</code>, otherwise fail the test.</li> <li>If <code>valid</code> is <code>true</code>, verify that the directive returns <code>status</code> field of PayloadStatusV1 as <code>VALID</code>, otherwise fail the test.</li> </ol> </li> </ol>"},{"location":"consuming_tests/blockchain_test_hive/#structures","title":"Structures","text":""},{"location":"consuming_tests/blockchain_test_hive/#hivefixture","title":"<code>HiveFixture</code>","text":""},{"location":"consuming_tests/blockchain_test_hive/#-network-fork","title":"- <code>network</code>: <code>Fork</code>","text":"<p>Fork configuration for the test.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-genesisblockheader-fixtureheader","title":"- <code>genesisBlockHeader</code>: <code>FixtureHeader</code>","text":"<p>Genesis block header.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-enginenewpayloads-listfixtureenginenewpayload","title":"- <code>engineNewPayloads</code>: <code>List</code><code>[</code><code>FixtureEngineNewPayload</code><code>]</code>","text":"<p>List of <code>engine_newPayloadVX</code> directives to be processed after the genesis block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-enginefcuversion-number","title":"- <code>engineFcuVersion</code>: <code>Number</code>","text":"<p>Version of the <code>engine_forkchoiceUpdatedVX</code> directive to use to set the head of the chain.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-pre-alloc","title":"- <code>pre</code>: <code>Alloc</code>","text":"<p>Starting account allocation for the test. State root calculated from this allocation must match the one in the genesis block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-post-alloc","title":"- <code>post</code>: <code>Alloc</code>","text":"<p>Account allocation for verification after all the blocks have been processed.</p>"},{"location":"consuming_tests/blockchain_test_hive/#fixtureenginenewpayload","title":"<code>FixtureEngineNewPayload</code>","text":""},{"location":"consuming_tests/blockchain_test_hive/#-executionpayload-fixtureexecutionpayload","title":"- <code>executionPayload</code>: <code>FixtureExecutionPayload</code>","text":"<p>Execution payload.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-blob_versioned_hashes-optionallisthash-fork-cancun","title":"- <code>blob_versioned_hashes</code>: <code>Optional</code><code>[</code><code>List</code><code>[</code><code>Hash</code><code>]]</code> <code>(fork: Cancun)</code>","text":"<p>List of hashes of the versioned blobs that are part of the execution payload. They can mismatch the hashes of the versioned blobs in the execution payload, for negative-testing reasons.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-parentbeaconblockroot-optionalhash-fork-cancun","title":"- <code>parentBeaconBlockRoot</code>: <code>Optional</code><code>[</code><code>Hash</code><code>]</code> <code>(fork: Cancun)</code>","text":"<p>Hash of the parent beacon block root.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-validationerror-transactionexceptionblockexception","title":"- <code>validationError</code>: <code>TransactionException</code><code>|</code><code>BlockException</code>","text":"<p>Validation error expected when executing the payload.</p> <p>When the payload is valid, this field is not present, and a <code>VALID</code> status is expected in the <code>status</code> field of PayloadStatusV1.</p> <p>If this field is present, the <code>status</code> field of PayloadStatusV1 is expected to be <code>INVALID</code>.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-version-number","title":"- <code>version</code>: <code>Number</code>","text":"<p>Version of the <code>engine_newPayloadVX</code> directive to use to deliver the payload.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-errorcode-optionalnumber","title":"- <code>errorCode</code>: <code>Optional</code><code>[</code><code>Number</code><code>]</code>","text":"<p>Error code to be returned by the <code>engine_newPayloadVX</code> directive.</p>"},{"location":"consuming_tests/blockchain_test_hive/#fixtureexecutionpayload","title":"<code>FixtureExecutionPayload</code>","text":""},{"location":"consuming_tests/blockchain_test_hive/#-parenthash-hash","title":"- <code>parentHash</code>: <code>Hash</code>","text":"<p>Hash of the parent block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-feerecipient-address","title":"- <code>feeRecipient</code>: <code>Address</code>","text":"<p>Address of the account that will receive the rewards for building the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-stateroot-hash","title":"- <code>stateRoot</code>: <code>Hash</code>","text":"<p>Root hash of the state trie.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-receiptsroot-hash","title":"- <code>receiptsRoot</code>: <code>Hash</code>","text":"<p>Root hash of the receipts trie.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-logsbloom-bloom","title":"- <code>logsBloom</code>: <code>Bloom</code>","text":"<p>Bloom filter composed of the logs of all the transactions in the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-blocknumber-hexnumber","title":"- <code>blockNumber</code>: <code>HexNumber</code>","text":"<p>Number of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-gaslimit-hexnumber","title":"- <code>gasLimit</code>: <code>HexNumber</code>","text":"<p>Total gas limit of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-gasused-hexnumber","title":"- <code>gasUsed</code>: <code>HexNumber</code>","text":"<p>Total gas used by all the transactions in the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-timestamp-hexnumber","title":"- <code>timestamp</code>: <code>HexNumber</code>","text":"<p>Timestamp of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-extradata-bytes","title":"- <code>extraData</code>: <code>Bytes</code>","text":"<p>Extra data of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-prevrandao-hash","title":"- <code>prevRandao</code>: <code>Hash</code>","text":"<p>PrevRandao of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-blockhash-hash","title":"- <code>blockHash</code>: <code>Hash</code>","text":"<p>Hash of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-transactions-listbytes","title":"- <code>transactions</code>: <code>List</code><code>[</code><code>Bytes</code><code>]</code>","text":"<p>List of transactions in the block, in serialized format.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-withdrawals-listfixturewithdrawal","title":"- <code>withdrawals</code>: <code>List</code><code>[</code><code>FixtureWithdrawal</code><code>]</code>","text":"<p>List of withdrawals in the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-basefeepergas-hexnumber-fork-london","title":"- <code>baseFeePerGas</code>: <code>HexNumber</code> <code>(fork: London)</code>","text":"<p>Base fee per gas of the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-blobgasused-hexnumber-fork-cancun","title":"- <code>blobGasUsed</code>: <code>HexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Total blob gas used by all the transactions in the block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#-excessblobgas-hexnumber-fork-cancun","title":"- <code>excessBlobGas</code>: <code>HexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Excess blob gas of the block used to calculate the blob fee per gas for this block.</p>"},{"location":"consuming_tests/blockchain_test_hive/#fixturewithdrawal","title":"<code>FixtureWithdrawal</code>","text":""},{"location":"consuming_tests/blockchain_test_hive/#-index-hexnumber","title":"- <code>index</code>: <code>HexNumber</code>","text":"<p>Index of the withdrawal</p>"},{"location":"consuming_tests/blockchain_test_hive/#-validatorindex-hexnumber","title":"- <code>validatorIndex</code>: <code>HexNumber</code>","text":"<p>Withdrawing validator index</p>"},{"location":"consuming_tests/blockchain_test_hive/#-address-address","title":"- <code>address</code>: <code>Address</code>","text":"<p>Address to withdraw to</p>"},{"location":"consuming_tests/blockchain_test_hive/#-amount-hexnumber","title":"- <code>amount</code>: <code>HexNumber</code>","text":"<p>Amount of the withdrawal</p>"},{"location":"consuming_tests/common_types/","title":"Common Types","text":""},{"location":"consuming_tests/common_types/#basic-types","title":"Basic Types","text":""},{"location":"consuming_tests/common_types/#address","title":"<code>Address</code>","text":"<p>Bytes of a 20-byte fixed length.</p>"},{"location":"consuming_tests/common_types/#bloom","title":"<code>Bloom</code>","text":"<p>Bytes of a 256-byte fixed length.</p>"},{"location":"consuming_tests/common_types/#bytes","title":"<code>Bytes</code>","text":"<p>Hexadecimal representation of binary data of any length encoded as a JSON string, with a \"0x\" prefix.</p>"},{"location":"consuming_tests/common_types/#emptyaddress","title":"<code>EmptyAddress</code>","text":"<p>An empty JSON string <code>\"\"</code>, used to represent an empty address. E.g. in the <code>to</code> field of a transaction when it is a contract creation.</p>"},{"location":"consuming_tests/common_types/#hash","title":"<code>Hash</code>","text":"<p>Bytes of a 32-byte fixed length.</p>"},{"location":"consuming_tests/common_types/#headernonce","title":"<code>HeaderNonce</code>","text":"<p>Bytes of a 8-byte fixed length.</p>"},{"location":"consuming_tests/common_types/#hexnumber","title":"<code>HexNumber</code>","text":"<p>Hexadecimal number with \"0x\" prefix encoded as a JSON string.</p>"},{"location":"consuming_tests/common_types/#list","title":"<code>List</code>","text":"<p>A JSON array where each element is a specific type, also defined in this document. E.g. <code>List[Address]</code> is a JSON array where each element is an Ethereum address.</p>"},{"location":"consuming_tests/common_types/#mapping","title":"<code>Mapping</code>","text":"<p>A JSON object where the keys and values are specific types, also defined in this document. E.g. <code>Mapping[Address, Account]</code> is a JSON object where the keys are Ethereum addresses, and the values are Ethereum accounts.</p>"},{"location":"consuming_tests/common_types/#number","title":"<code>Number</code>","text":"<p>Decimal number encoded as a JSON string.</p>"},{"location":"consuming_tests/common_types/#optional","title":"<code>Optional</code>","text":"<p>Marks a field as optional, meaning that the field can be missing from the JSON object.</p>"},{"location":"consuming_tests/common_types/#zeropaddedhexnumber","title":"<code>ZeroPaddedHexNumber</code>","text":"<p>Hexadecimal number with \"0x\" prefix encoded as a JSON string, with a single zero used to pad odd number of digits, and zero represented as \"0x00\".</p>"},{"location":"consuming_tests/common_types/#composite-types","title":"Composite Types","text":""},{"location":"consuming_tests/common_types/#storage-mappinghashhash","title":"<code>Storage</code>: <code>Mapping</code><code>[</code><code>Hash</code><code>,</code><code>Hash</code><code>]</code>","text":"<p>Storage represented as a JSON object, where the keys and values are represented with the <code>Hash</code> type.</p>"},{"location":"consuming_tests/common_types/#account","title":"<code>Account</code>","text":"<p>An Ethereum account represented as a JSON object with the following fields:</p>"},{"location":"consuming_tests/common_types/#-balance-zeropaddedhexnumber","title":"- <code>balance</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Balance of the account.</p>"},{"location":"consuming_tests/common_types/#-nonce-zeropaddedhexnumber","title":"- <code>nonce</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Nonce of the account.</p>"},{"location":"consuming_tests/common_types/#-code-bytes","title":"- <code>code</code>: <code>Bytes</code>","text":"<p>Code of the account.</p>"},{"location":"consuming_tests/common_types/#-storage-storage","title":"- <code>storage</code>: <code>Storage</code>","text":"<p>Storage of the account.</p>"},{"location":"consuming_tests/common_types/#alloc-mappingaddressaccount","title":"<code>Alloc</code>: <code>Mapping</code><code>[</code><code>Address</code><code>,</code><code>Account</code><code>]</code>","text":"<p>State allocation represented as a JSON object, where the keys are the addresses of the accounts, and the values are the accounts.</p>"},{"location":"consuming_tests/common_types/#fork","title":"Fork","text":"<p>Fork type is represented as a JSON string that can be set to one of the following values:</p>"},{"location":"consuming_tests/common_types/#frontier","title":"<code>\"Frontier\"</code>","text":"<ul> <li>Chain ID: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#homestead","title":"<code>\"Homestead\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#byzantium","title":"<code>\"Byzantium\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#constantinople","title":"<code>\"Constantinople\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#constantinoplefix","title":"<code>\"ConstantinopleFix\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#istanbul","title":"<code>\"Istanbul\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#muirglacier","title":"<code>\"MuirGlacier\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#berlin","title":"<code>\"Berlin\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#berlintolondonat5","title":"<code>\"BerlinToLondonAt5\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x05</code></li> </ul>"},{"location":"consuming_tests/common_types/#london","title":"<code>\"London\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#arrowglacier","title":"<code>\"ArrowGlacier\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#grayglacier","title":"<code>\"GrayGlacier\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> <li>Gray Glacier Block: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#merge","title":"<code>\"Merge\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> <li>Gray Glacier Block: <code>0x00</code></li> <li>Terminal Total Difficulty: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#mergetoshanghaiattime15k","title":"<code>\"MergeToShanghaiAtTime15k\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> <li>Gray Glacier Block: <code>0x00</code></li> <li>Terminal Total Difficulty: <code>0x00</code></li> <li>Shanghai Time: <code>0x3a98</code></li> </ul>"},{"location":"consuming_tests/common_types/#shanghai","title":"<code>\"Shanghai\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> <li>Gray Glacier Block: <code>0x00</code></li> <li>Terminal Total Difficulty: <code>0x00</code></li> <li>Shanghai Time: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/common_types/#shanghaitocancunattime15k","title":"<code>\"ShanghaiToCancunAtTime15k\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> <li>Gray Glacier Block: <code>0x00</code></li> <li>Terminal Total Difficulty: <code>0x00</code></li> <li>Shanghai Time: <code>0x0</code></li> <li>Cancun Time: <code>0x3a98</code></li> </ul>"},{"location":"consuming_tests/common_types/#cancun","title":"<code>\"Cancun\"</code>","text":"<ul> <li>Chain ID: <code>0x01</code></li> <li>Homestead Block: <code>0x00</code></li> <li>EIP150 Block: <code>0x00</code></li> <li>EIP155 Block: <code>0x00</code></li> <li>EIP158 Block: <code>0x00</code></li> <li>DAO Fork Block: <code>0x00</code></li> <li>Byzantium Block: <code>0x00</code></li> <li>Constantinople Block: <code>0x00</code></li> <li>Constantinople Fix Block: <code>0x00</code></li> <li>Istanbul Block: <code>0x00</code></li> <li>Muir Glacier Block: <code>0x00</code></li> <li>Berlin Block: <code>0x00</code></li> <li>London Block: <code>0x00</code></li> <li>Arrow Glacier Block: <code>0x00</code></li> <li>Gray Glacier Block: <code>0x00</code></li> <li>Terminal Total Difficulty: <code>0x00</code></li> <li>Shanghai Time: <code>0x00</code></li> <li>Cancun Time: <code>0x00</code></li> </ul>"},{"location":"consuming_tests/eof_test/","title":"EOF Tests","text":"<p>The EOF Test fixture format tests are included in the fixtures subdirectory <code>eof_tests</code>.</p> <p>These are produced by the <code>EOFTest</code> test spec.</p>"},{"location":"consuming_tests/eof_test/#description","title":"Description","text":"<p>The EOF test fixture format is used to test the EOF container validation function of the Ethereum Virtual Machine (EVM).</p> <p>It simply defines a binary code in hexadecimal format and a boolean value that indicates whether the code is valid or not.</p>"},{"location":"consuming_tests/eof_test/#consumption","title":"Consumption","text":"<p>TODO: Update this section</p>"},{"location":"consuming_tests/eof_test/#structures","title":"Structures","text":"<p>TODO: Update this section</p>"},{"location":"consuming_tests/exceptions/","title":"Exceptions","text":"<p>Exception types are represented as a JSON string in the test fixtures.</p> <p>The exception converted into a string is composed of the exception type name, followed by a period, followed by the specific exception name.</p> <p>For example, the exception <code>INSUFFICIENT_ACCOUNT_FUNDS</code> of type <code>TransactionException</code> is represented as <code>\"TransactionException.INSUFFICIENT_ACCOUNT_FUNDS\"</code>.</p> <p>The JSON string can contain multiple exception types, separated by the <code>|</code> character, denoting that the transaction or block can throw either one of the exceptions.</p>"},{"location":"consuming_tests/exceptions/#transactionexception","title":"<code>TransactionException</code>","text":"<p>               Bases: <code>ExceptionBase</code></p> <p>Exception raised when a transaction is invalid, and thus cannot be executed.</p> <p>If a transaction with any of these exceptions is included in a block, the block is invalid.</p> Source code in <code>src/ethereum_test_tools/exceptions/exceptions.py</code> <pre><code>@unique\nclass TransactionException(ExceptionBase):\n    \"\"\"\n    Exception raised when a transaction is invalid, and thus cannot be executed.\n\n    If a transaction with any of these exceptions is included in a block, the block is invalid.\n    \"\"\"\n\n    TYPE_NOT_SUPPORTED = auto()\n    \"\"\"\n    Transaction type is not supported on this chain configuration.\n    \"\"\"\n    SENDER_NOT_EOA = auto()\n    \"\"\"\n    Transaction is coming from address that is not exist anymore.\n    \"\"\"\n    ADDRESS_TOO_SHORT = auto()\n    \"\"\"\n    Transaction `to` is not allowed to be less than 20 bytes.\n    \"\"\"\n    ADDRESS_TOO_LONG = auto()\n    \"\"\"\n    Transaction `to` is not allowed to be more than 20 bytes.\n    \"\"\"\n    NONCE_MISMATCH_TOO_HIGH = auto()\n    \"\"\"\n    Transaction nonce &gt; sender.nonce.\n    \"\"\"\n    NONCE_MISMATCH_TOO_LOW = auto()\n    \"\"\"\n    Transaction nonce &lt; sender.nonce.\n    \"\"\"\n    NONCE_TOO_BIG = auto()\n    \"\"\"\n    Transaction `nonce` is not allowed to be max_uint64 - 1 (this is probably TransactionTest).\n    \"\"\"\n    NONCE_IS_MAX = auto()\n    \"\"\"\n    Transaction `nonce` is not allowed to be max_uint64 - 1 (this is StateTests).\n    \"\"\"\n    NONCE_OVERFLOW = auto()\n    \"\"\"\n    Transaction `nonce` is not allowed to be more than uint64.\n    \"\"\"\n    GASLIMIT_OVERFLOW = auto()\n    \"\"\"\n    Transaction gaslimit exceeds 2^64-1 maximum value.\n    \"\"\"\n    VALUE_OVERFLOW = auto()\n    \"\"\"\n    Transaction value exceeds 2^256-1 maximum value.\n    \"\"\"\n    GASPRICE_OVERFLOW = auto()\n    \"\"\"\n    Transaction gasPrice exceeds 2^256-1 maximum value.\n    \"\"\"\n    GASLIMIT_PRICE_PRODUCT_OVERFLOW = auto()\n    \"\"\"\n    Transaction gasPrice * gasLimit exceeds 2^256-1 maximum value.\n    \"\"\"\n    INVALID_SIGNATURE_VRS = auto()\n    \"\"\"\n    Invalid transaction v, r, s values.\n    \"\"\"\n    RLP_INVALID_SIGNATURE_R = auto()\n    \"\"\"\n    Error reading transaction signature R value.\n    \"\"\"\n    RLP_INVALID_SIGNATURE_S = auto()\n    \"\"\"\n    Error reading transaction signature S value.\n    \"\"\"\n    RLP_LEADING_ZEROS_GASLIMIT = auto()\n    \"\"\"\n    Error reading transaction gaslimit field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_GASPRICE = auto()\n    \"\"\"\n    Error reading transaction gasprice field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_VALUE = auto()\n    \"\"\"\n    Error reading transaction value field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_NONCE = auto()\n    \"\"\"\n    Error reading transaction nonce field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_R = auto()\n    \"\"\"\n    Error reading transaction signature R field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_S = auto()\n    \"\"\"\n    Error reading transaction signature S field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_V = auto()\n    \"\"\"\n    Error reading transaction signature V field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_BASEFEE = auto()\n    \"\"\"\n    Error reading transaction basefee field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_PRIORITY_FEE = auto()\n    \"\"\"\n    Error reading transaction priority fee field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_DATA_SIZE = auto()\n    \"\"\"\n    Error reading transaction data field RLP, (rlp field length has leading zeros).\n    \"\"\"\n    RLP_LEADING_ZEROS_NONCE_SIZE = auto()\n    \"\"\"\n    Error reading transaction nonce field RLP, (rlp field length has leading zeros).\n    \"\"\"\n    RLP_TOO_FEW_ELEMENTS = auto()\n    \"\"\"\n    Error reading transaction RLP, structure has too few elements than expected.\n    \"\"\"\n    RLP_TOO_MANY_ELEMENTS = auto()\n    \"\"\"\n    Error reading transaction RLP, structure has too many elements than expected.\n    \"\"\"\n    RLP_ERROR_EOF = auto()\n    \"\"\"\n    Error reading transaction RLP, rlp stream unexpectedly finished.\n    \"\"\"\n    RLP_ERROR_SIZE = auto()\n    \"\"\"\n    Error reading transaction RLP, rlp size is invalid.\n    \"\"\"\n    RLP_ERROR_SIZE_LEADING_ZEROS = auto()\n    \"\"\"\n    Error reading transaction RLP, field size has leading zeros.\n    \"\"\"\n    INVALID_CHAINID = auto()\n    \"\"\"\n    Transaction chain id encoding is incorrect.\n    \"\"\"\n    RLP_INVALID_DATA = auto()\n    \"\"\"\n    Transaction data field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_GASLIMIT = auto()\n    \"\"\"\n    Transaction gaslimit field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_NONCE = auto()\n    \"\"\"\n    Transaction nonce field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_TO = auto()\n    \"\"\"\n    Transaction to field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_LONG = auto()\n    \"\"\"\n    Transaction access list address is &gt; 20 bytes.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_SHORT = auto()\n    \"\"\"\n    Transaction access list address is &lt; 20 bytes.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_STORAGE_TOO_LONG = auto()\n    \"\"\"\n    Transaction access list storage hash &gt; 32 bytes.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_STORAGE_TOO_SHORT = auto()\n    \"\"\"\n    Transaction access list storage hash &lt; 32 bytes.\n    \"\"\"\n    RLP_INVALID_HEADER = auto()\n    \"\"\"\n    Transaction failed to read from RLP as rlp header is invalid.\n    \"\"\"\n    RLP_INVALID_VALUE = auto()\n    \"\"\"\n    Transaction value field is invalid rlp/structure.\n    \"\"\"\n    EC_RECOVERY_FAIL = auto()\n    \"\"\"\n    Transaction has correct signature, but ec recovery failed.\n    \"\"\"\n    INSUFFICIENT_ACCOUNT_FUNDS = auto()\n    \"\"\"\n    Transaction's sender does not have enough funds to pay for the transaction.\n    \"\"\"\n    INSUFFICIENT_MAX_FEE_PER_GAS = auto()\n    \"\"\"\n    Transaction's max-fee-per-gas is lower than the block base-fee.\n    \"\"\"\n    PRIORITY_OVERFLOW = auto()\n    \"\"\"\n    Transaction's max-priority-fee-per-gas is exceeds 2^256-1 maximum value.\n    \"\"\"\n    PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS = auto()\n    \"\"\"\n    Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas.\n    \"\"\"\n    PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS_2 = auto()\n    \"\"\"\n    Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas (TransactionTests).\n    \"\"\"\n    INSUFFICIENT_MAX_FEE_PER_BLOB_GAS = auto()\n    \"\"\"\n    Transaction's max-fee-per-blob-gas is lower than the block's blob-gas price.\n    \"\"\"\n    INTRINSIC_GAS_TOO_LOW = auto()\n    \"\"\"\n    Transaction's gas limit is too low.\n    \"\"\"\n    INITCODE_SIZE_EXCEEDED = auto()\n    \"\"\"\n    Transaction's initcode for a contract-creating transaction is too large.\n    \"\"\"\n    TYPE_3_TX_PRE_FORK = auto()\n    \"\"\"\n    Transaction type 3 included before activation fork.\n    \"\"\"\n    TYPE_3_TX_ZERO_BLOBS_PRE_FORK = auto()\n    \"\"\"\n    Transaction type 3, with zero blobs, included before activation fork.\n    \"\"\"\n    TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH = auto()\n    \"\"\"\n    Transaction contains a blob versioned hash with an invalid version.\n    \"\"\"\n    TYPE_3_TX_WITH_FULL_BLOBS = auto()\n    \"\"\"\n    Transaction contains full blobs (network-version of the transaction).\n    \"\"\"\n    TYPE_3_TX_BLOB_COUNT_EXCEEDED = auto()\n    \"\"\"\n    Transaction contains too many blob versioned hashes.\n    \"\"\"\n    TYPE_3_TX_CONTRACT_CREATION = auto()\n    \"\"\"\n    Transaction is a type 3 transaction and has an empty `to`.\n    \"\"\"\n    TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED = auto()\n    \"\"\"\n    Transaction causes block to go over blob gas limit.\n    \"\"\"\n    GAS_ALLOWANCE_EXCEEDED = auto()\n    \"\"\"\n    Transaction causes block to go over blob gas limit.\n    \"\"\"\n    TYPE_3_TX_ZERO_BLOBS = auto()\n    \"\"\"\n    Transaction is type 3, but has no blobs.\n    \"\"\"\n</code></pre>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_NOT_SUPPORTED","title":"<code>TYPE_NOT_SUPPORTED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction type is not supported on this chain configuration.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.SENDER_NOT_EOA","title":"<code>SENDER_NOT_EOA = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction is coming from address that is not exist anymore.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.ADDRESS_TOO_SHORT","title":"<code>ADDRESS_TOO_SHORT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>to</code> is not allowed to be less than 20 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.ADDRESS_TOO_LONG","title":"<code>ADDRESS_TOO_LONG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>to</code> is not allowed to be more than 20 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.NONCE_MISMATCH_TOO_HIGH","title":"<code>NONCE_MISMATCH_TOO_HIGH = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction nonce &gt; sender.nonce.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.NONCE_MISMATCH_TOO_LOW","title":"<code>NONCE_MISMATCH_TOO_LOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction nonce &lt; sender.nonce.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.NONCE_TOO_BIG","title":"<code>NONCE_TOO_BIG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>nonce</code> is not allowed to be max_uint64 - 1 (this is probably TransactionTest).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.NONCE_IS_MAX","title":"<code>NONCE_IS_MAX = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>nonce</code> is not allowed to be max_uint64 - 1 (this is StateTests).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.NONCE_OVERFLOW","title":"<code>NONCE_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>nonce</code> is not allowed to be more than uint64.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.GASLIMIT_OVERFLOW","title":"<code>GASLIMIT_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gaslimit exceeds 2^64-1 maximum value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.VALUE_OVERFLOW","title":"<code>VALUE_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction value exceeds 2^256-1 maximum value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.GASPRICE_OVERFLOW","title":"<code>GASPRICE_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gasPrice exceeds 2^256-1 maximum value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.GASLIMIT_PRICE_PRODUCT_OVERFLOW","title":"<code>GASLIMIT_PRICE_PRODUCT_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gasPrice * gasLimit exceeds 2^256-1 maximum value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INVALID_SIGNATURE_VRS","title":"<code>INVALID_SIGNATURE_VRS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Invalid transaction v, r, s values.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_SIGNATURE_R","title":"<code>RLP_INVALID_SIGNATURE_R = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature R value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_SIGNATURE_S","title":"<code>RLP_INVALID_SIGNATURE_S = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature S value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_GASLIMIT","title":"<code>RLP_LEADING_ZEROS_GASLIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction gaslimit field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_GASPRICE","title":"<code>RLP_LEADING_ZEROS_GASPRICE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction gasprice field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_VALUE","title":"<code>RLP_LEADING_ZEROS_VALUE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction value field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_NONCE","title":"<code>RLP_LEADING_ZEROS_NONCE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction nonce field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_R","title":"<code>RLP_LEADING_ZEROS_R = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature R field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_S","title":"<code>RLP_LEADING_ZEROS_S = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature S field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_V","title":"<code>RLP_LEADING_ZEROS_V = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature V field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_BASEFEE","title":"<code>RLP_LEADING_ZEROS_BASEFEE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction basefee field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_PRIORITY_FEE","title":"<code>RLP_LEADING_ZEROS_PRIORITY_FEE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction priority fee field RLP.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_DATA_SIZE","title":"<code>RLP_LEADING_ZEROS_DATA_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction data field RLP, (rlp field length has leading zeros).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_NONCE_SIZE","title":"<code>RLP_LEADING_ZEROS_NONCE_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction nonce field RLP, (rlp field length has leading zeros).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_TOO_FEW_ELEMENTS","title":"<code>RLP_TOO_FEW_ELEMENTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, structure has too few elements than expected.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_TOO_MANY_ELEMENTS","title":"<code>RLP_TOO_MANY_ELEMENTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, structure has too many elements than expected.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_ERROR_EOF","title":"<code>RLP_ERROR_EOF = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, rlp stream unexpectedly finished.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_ERROR_SIZE","title":"<code>RLP_ERROR_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, rlp size is invalid.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_ERROR_SIZE_LEADING_ZEROS","title":"<code>RLP_ERROR_SIZE_LEADING_ZEROS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, field size has leading zeros.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INVALID_CHAINID","title":"<code>INVALID_CHAINID = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction chain id encoding is incorrect.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_DATA","title":"<code>RLP_INVALID_DATA = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction data field is invalid rlp.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_GASLIMIT","title":"<code>RLP_INVALID_GASLIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gaslimit field is invalid rlp.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_NONCE","title":"<code>RLP_INVALID_NONCE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction nonce field is invalid rlp.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_TO","title":"<code>RLP_INVALID_TO = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction to field is invalid rlp.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_LONG","title":"<code>RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_LONG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list address is &gt; 20 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_SHORT","title":"<code>RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_SHORT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list address is &lt; 20 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_STORAGE_TOO_LONG","title":"<code>RLP_INVALID_ACCESS_LIST_STORAGE_TOO_LONG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list storage hash &gt; 32 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_STORAGE_TOO_SHORT","title":"<code>RLP_INVALID_ACCESS_LIST_STORAGE_TOO_SHORT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list storage hash &lt; 32 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_HEADER","title":"<code>RLP_INVALID_HEADER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction failed to read from RLP as rlp header is invalid.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.RLP_INVALID_VALUE","title":"<code>RLP_INVALID_VALUE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction value field is invalid rlp/structure.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.EC_RECOVERY_FAIL","title":"<code>EC_RECOVERY_FAIL = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction has correct signature, but ec recovery failed.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INSUFFICIENT_ACCOUNT_FUNDS","title":"<code>INSUFFICIENT_ACCOUNT_FUNDS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's sender does not have enough funds to pay for the transaction.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INSUFFICIENT_MAX_FEE_PER_GAS","title":"<code>INSUFFICIENT_MAX_FEE_PER_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-fee-per-gas is lower than the block base-fee.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.PRIORITY_OVERFLOW","title":"<code>PRIORITY_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-priority-fee-per-gas is exceeds 2^256-1 maximum value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS","title":"<code>PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS_2","title":"<code>PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS_2 = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas (TransactionTests).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INSUFFICIENT_MAX_FEE_PER_BLOB_GAS","title":"<code>INSUFFICIENT_MAX_FEE_PER_BLOB_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-fee-per-blob-gas is lower than the block's blob-gas price.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INTRINSIC_GAS_TOO_LOW","title":"<code>INTRINSIC_GAS_TOO_LOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's gas limit is too low.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.INITCODE_SIZE_EXCEEDED","title":"<code>INITCODE_SIZE_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's initcode for a contract-creating transaction is too large.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_PRE_FORK","title":"<code>TYPE_3_TX_PRE_FORK = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction type 3 included before activation fork.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_ZERO_BLOBS_PRE_FORK","title":"<code>TYPE_3_TX_ZERO_BLOBS_PRE_FORK = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction type 3, with zero blobs, included before activation fork.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH","title":"<code>TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction contains a blob versioned hash with an invalid version.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_WITH_FULL_BLOBS","title":"<code>TYPE_3_TX_WITH_FULL_BLOBS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction contains full blobs (network-version of the transaction).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_BLOB_COUNT_EXCEEDED","title":"<code>TYPE_3_TX_BLOB_COUNT_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction contains too many blob versioned hashes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_CONTRACT_CREATION","title":"<code>TYPE_3_TX_CONTRACT_CREATION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction is a type 3 transaction and has an empty <code>to</code>.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED","title":"<code>TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction causes block to go over blob gas limit.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.GAS_ALLOWANCE_EXCEEDED","title":"<code>GAS_ALLOWANCE_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction causes block to go over blob gas limit.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.TransactionException.TYPE_3_TX_ZERO_BLOBS","title":"<code>TYPE_3_TX_ZERO_BLOBS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction is type 3, but has no blobs.</p>"},{"location":"consuming_tests/exceptions/#blockexception","title":"<code>BlockException</code>","text":"<p>               Bases: <code>ExceptionBase</code></p> <p>Exception raised when a block is invalid, but not due to a transaction.</p> <p>E.g. all transactions in the block are valid, and can be applied to the state, but the block header contains an invalid field.</p> Source code in <code>src/ethereum_test_tools/exceptions/exceptions.py</code> <pre><code>@unique\nclass BlockException(ExceptionBase):\n    \"\"\"\n    Exception raised when a block is invalid, but not due to a transaction.\n\n    E.g. all transactions in the block are valid, and can be applied to the state, but the\n    block header contains an invalid field.\n    \"\"\"\n\n    TOO_MANY_UNCLES = auto()\n    \"\"\"\n    Block declares too many uncles over the allowed limit.\n    \"\"\"\n    UNCLE_IN_CHAIN = auto()\n    \"\"\"\n    Block declares uncle header that is already imported into chain.\n    \"\"\"\n    UNCLE_IS_ANCESTOR = auto()\n    \"\"\"\n    Block declares uncle header that is directly a parent of this block.\n    \"\"\"\n    UNCLE_IS_BROTHER = auto()\n    \"\"\"\n    Block declares two similar uncle headers.\n    \"\"\"\n    UNCLE_PARENT_INCORRECT = auto()\n    \"\"\"\n    Block declares uncle header that is an outdated block to be an uncle.\n    \"\"\"\n    EXTRA_DATA_TOO_BIG = auto()\n    \"\"\"\n    Block header's extra data &gt;32 bytes.\n    \"\"\"\n    EXTRA_DATA_INVALID_DAO = auto()\n    \"\"\"\n    Block header's extra data after dao fork must be a fixed pre defined hash.\n    \"\"\"\n    UNKNOWN_PARENT = auto()\n    \"\"\"\n    Block header's parent hash does not correspond to any of existing blocks on chain.\n    \"\"\"\n    UNCLE_UNKNOWN_PARENT = auto()\n    \"\"\"\n    Uncle header's parent hash does not correspond to any of existing blocks on chain.\n    \"\"\"\n    UNKNOWN_PARENT_ZERO = auto()\n    \"\"\"\n    Block header's parent hash is zero hash.\n    \"\"\"\n    GASLIMIT_TOO_BIG = auto()\n    \"\"\"\n    Block header's gas limit &gt; 0x7fffffffffffffff.\n    \"\"\"\n    INVALID_BLOCK_NUMBER = auto()\n    \"\"\"\n    Block header's number != parent header's number + 1.\n    \"\"\"\n    INVALID_BLOCK_TIMESTAMP_OLDER_THAN_PARENT = auto()\n    \"\"\"\n    Block header's timestamp &lt;= parent header's timestamp.\n    \"\"\"\n    INVALID_DIFFICULTY = auto()\n    \"\"\"\n    Block header's difficulty does not match the difficulty formula calculated from previous block.\n    \"\"\"\n    INVALID_LOG_BLOOM = auto()\n    \"\"\"\n    Block header's logs bloom hash does not match the actually computed log bloom.\n    \"\"\"\n    INVALID_STATE_ROOT = auto()\n    \"\"\"\n    Block header's state root hash does not match the actually computed hash of the state.\n    \"\"\"\n    INVALID_RECEIPTS_ROOT = auto()\n    \"\"\"\n    Block header's receipts root hash does not match the actually computed hash of receipts.\n    \"\"\"\n    INVALID_TRANSACTIONS_ROOT = auto()\n    \"\"\"\n    Block header's transactions root hash does not match the actually computed hash of tx tree.\n    \"\"\"\n    INVALID_UNCLES_HASH = auto()\n    \"\"\"\n    Block header's uncle hash does not match the actually computed hash of block's uncles.\n    \"\"\"\n    GAS_USED_OVERFLOW = auto()\n    \"\"\"\n    Block transactions consume more gas than block header allow.\n    \"\"\"\n    INVALID_GASLIMIT = auto()\n    \"\"\"\n    Block header's gas limit does not match the gas limit formula calculated from previous block.\n    \"\"\"\n    INVALID_BASEFEE_PER_GAS = auto()\n    \"\"\"\n    Block header's base_fee_per_gas field is calculated incorrect.\n    \"\"\"\n    INVALID_GAS_USED = auto()\n    \"\"\"\n    Block header's actual gas used does not match the provided header's value\n    \"\"\"\n    INVALID_WITHDRAWALS_ROOT = auto()\n    \"\"\"\n    Block header's withdrawals root does not match calculated withdrawals root.\n    \"\"\"\n    INCORRECT_BLOCK_FORMAT = auto()\n    \"\"\"\n    Block's format is incorrect, contains invalid fields, is missing fields, or contains fields of\n    a fork that is not active yet.\n    \"\"\"\n    BLOB_GAS_USED_ABOVE_LIMIT = auto()\n    \"\"\"\n    Block's blob gas used in header is above the limit.\n    \"\"\"\n    INCORRECT_BLOB_GAS_USED = auto()\n    \"\"\"\n    Block's blob gas used in header is incorrect.\n    \"\"\"\n    INCORRECT_EXCESS_BLOB_GAS = auto()\n    \"\"\"\n    Block's excess blob gas in header is incorrect.\n    \"\"\"\n    RLP_STRUCTURES_ENCODING = auto()\n    \"\"\"\n    Block's rlp encoding is valid but ethereum structures in it are invalid.\n    \"\"\"\n    RLP_WITHDRAWALS_NOT_READ = auto()\n    \"\"\"\n    Block's rlp encoding is missing withdrawals.\n    \"\"\"\n    RLP_INVALID_FIELD_OVERFLOW_64 = auto()\n    \"\"\"\n    One of block's fields rlp is overflow 2**64 value.\n    \"\"\"\n    RLP_INVALID_ADDRESS = auto()\n    \"\"\"\n    Block withdrawals address is rlp of invalid address != 20 bytes.\n    \"\"\"\n    INVALID_REQUESTS = auto()\n    \"\"\"\n    Block's requests are invalid.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LEGACY = auto()\n    \"\"\"\n    Legacy block import is impossible in this chain configuration.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LEGACY_WRONG_PARENT = auto()\n    \"\"\"\n    Legacy block import is impossible, trying to import on top of a block that is not legacy.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LONDON_WRONG_PARENT = auto()\n    \"\"\"\n    Trying to import london (basefee) block on top of block that is not 1559.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_PARIS_WRONG_POW = auto()\n    \"\"\"\n    Trying to import paris(merge) block with PoW enabled.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_PARIS_WRONG_POS = auto()\n    \"\"\"\n    Trying to import paris(merge) block with PoS enabled before TTD is reached.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LONDON_OVER_PARIS = auto()\n    \"\"\"\n    Trying to import london looking block over paris network (POS).\n    \"\"\"\n    IMPORT_IMPOSSIBLE_PARIS_OVER_SHANGHAI = auto()\n    \"\"\"\n    Trying to import paris block on top of shanghai block.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_SHANGHAI = auto()\n    \"\"\"\n    Shanghai block import is impossible in this chain configuration.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_UNCLES_OVER_PARIS = auto()\n    \"\"\"\n    Trying to import a block after paris fork that has not empty uncles hash.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_DIFFICULTY_OVER_PARIS = auto()\n    \"\"\"\n    Trying to import a block after paris fork that has difficulty != 0.\n    \"\"\"\n</code></pre>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.TOO_MANY_UNCLES","title":"<code>TOO_MANY_UNCLES = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares too many uncles over the allowed limit.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNCLE_IN_CHAIN","title":"<code>UNCLE_IN_CHAIN = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares uncle header that is already imported into chain.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNCLE_IS_ANCESTOR","title":"<code>UNCLE_IS_ANCESTOR = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares uncle header that is directly a parent of this block.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNCLE_IS_BROTHER","title":"<code>UNCLE_IS_BROTHER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares two similar uncle headers.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNCLE_PARENT_INCORRECT","title":"<code>UNCLE_PARENT_INCORRECT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares uncle header that is an outdated block to be an uncle.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.EXTRA_DATA_TOO_BIG","title":"<code>EXTRA_DATA_TOO_BIG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's extra data &gt;32 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.EXTRA_DATA_INVALID_DAO","title":"<code>EXTRA_DATA_INVALID_DAO = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's extra data after dao fork must be a fixed pre defined hash.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNKNOWN_PARENT","title":"<code>UNKNOWN_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's parent hash does not correspond to any of existing blocks on chain.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNCLE_UNKNOWN_PARENT","title":"<code>UNCLE_UNKNOWN_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Uncle header's parent hash does not correspond to any of existing blocks on chain.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.UNKNOWN_PARENT_ZERO","title":"<code>UNKNOWN_PARENT_ZERO = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's parent hash is zero hash.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.GASLIMIT_TOO_BIG","title":"<code>GASLIMIT_TOO_BIG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's gas limit &gt; 0x7fffffffffffffff.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_BLOCK_NUMBER","title":"<code>INVALID_BLOCK_NUMBER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's number != parent header's number + 1.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_BLOCK_TIMESTAMP_OLDER_THAN_PARENT","title":"<code>INVALID_BLOCK_TIMESTAMP_OLDER_THAN_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's timestamp &lt;= parent header's timestamp.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_DIFFICULTY","title":"<code>INVALID_DIFFICULTY = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's difficulty does not match the difficulty formula calculated from previous block.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_LOG_BLOOM","title":"<code>INVALID_LOG_BLOOM = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's logs bloom hash does not match the actually computed log bloom.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_STATE_ROOT","title":"<code>INVALID_STATE_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's state root hash does not match the actually computed hash of the state.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_RECEIPTS_ROOT","title":"<code>INVALID_RECEIPTS_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's receipts root hash does not match the actually computed hash of receipts.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_TRANSACTIONS_ROOT","title":"<code>INVALID_TRANSACTIONS_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's transactions root hash does not match the actually computed hash of tx tree.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_UNCLES_HASH","title":"<code>INVALID_UNCLES_HASH = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's uncle hash does not match the actually computed hash of block's uncles.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.GAS_USED_OVERFLOW","title":"<code>GAS_USED_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block transactions consume more gas than block header allow.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_GASLIMIT","title":"<code>INVALID_GASLIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's gas limit does not match the gas limit formula calculated from previous block.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_BASEFEE_PER_GAS","title":"<code>INVALID_BASEFEE_PER_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's base_fee_per_gas field is calculated incorrect.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_GAS_USED","title":"<code>INVALID_GAS_USED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's actual gas used does not match the provided header's value</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_WITHDRAWALS_ROOT","title":"<code>INVALID_WITHDRAWALS_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's withdrawals root does not match calculated withdrawals root.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INCORRECT_BLOCK_FORMAT","title":"<code>INCORRECT_BLOCK_FORMAT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's format is incorrect, contains invalid fields, is missing fields, or contains fields of a fork that is not active yet.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.BLOB_GAS_USED_ABOVE_LIMIT","title":"<code>BLOB_GAS_USED_ABOVE_LIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's blob gas used in header is above the limit.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INCORRECT_BLOB_GAS_USED","title":"<code>INCORRECT_BLOB_GAS_USED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's blob gas used in header is incorrect.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INCORRECT_EXCESS_BLOB_GAS","title":"<code>INCORRECT_EXCESS_BLOB_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's excess blob gas in header is incorrect.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.RLP_STRUCTURES_ENCODING","title":"<code>RLP_STRUCTURES_ENCODING = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's rlp encoding is valid but ethereum structures in it are invalid.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.RLP_WITHDRAWALS_NOT_READ","title":"<code>RLP_WITHDRAWALS_NOT_READ = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's rlp encoding is missing withdrawals.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.RLP_INVALID_FIELD_OVERFLOW_64","title":"<code>RLP_INVALID_FIELD_OVERFLOW_64 = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>One of block's fields rlp is overflow 2**64 value.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.RLP_INVALID_ADDRESS","title":"<code>RLP_INVALID_ADDRESS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block withdrawals address is rlp of invalid address != 20 bytes.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.INVALID_REQUESTS","title":"<code>INVALID_REQUESTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's requests are invalid.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LEGACY","title":"<code>IMPORT_IMPOSSIBLE_LEGACY = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Legacy block import is impossible in this chain configuration.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LEGACY_WRONG_PARENT","title":"<code>IMPORT_IMPOSSIBLE_LEGACY_WRONG_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Legacy block import is impossible, trying to import on top of a block that is not legacy.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LONDON_WRONG_PARENT","title":"<code>IMPORT_IMPOSSIBLE_LONDON_WRONG_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import london (basefee) block on top of block that is not 1559.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_PARIS_WRONG_POW","title":"<code>IMPORT_IMPOSSIBLE_PARIS_WRONG_POW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import paris(merge) block with PoW enabled.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_PARIS_WRONG_POS","title":"<code>IMPORT_IMPOSSIBLE_PARIS_WRONG_POS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import paris(merge) block with PoS enabled before TTD is reached.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LONDON_OVER_PARIS","title":"<code>IMPORT_IMPOSSIBLE_LONDON_OVER_PARIS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import london looking block over paris network (POS).</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_PARIS_OVER_SHANGHAI","title":"<code>IMPORT_IMPOSSIBLE_PARIS_OVER_SHANGHAI = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import paris block on top of shanghai block.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_SHANGHAI","title":"<code>IMPORT_IMPOSSIBLE_SHANGHAI = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Shanghai block import is impossible in this chain configuration.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_UNCLES_OVER_PARIS","title":"<code>IMPORT_IMPOSSIBLE_UNCLES_OVER_PARIS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import a block after paris fork that has not empty uncles hash.</p>"},{"location":"consuming_tests/exceptions/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_DIFFICULTY_OVER_PARIS","title":"<code>IMPORT_IMPOSSIBLE_DIFFICULTY_OVER_PARIS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import a block after paris fork that has difficulty != 0.</p>"},{"location":"consuming_tests/state_test/","title":"State Tests","text":"<p>The State Test fixture format tests are included in the fixtures subdirectory <code>state_tests</code>.</p> <p>These are produced by the <code>StateTest</code> and <code>StateTestOnly</code> test specs.</p>"},{"location":"consuming_tests/state_test/#description","title":"Description","text":"<p>The state test fixture format is used to test the state transition function of the Ethereum Virtual Machine (EVM).</p> <p>It does so by defining a transaction, a pre-execution state, and a post-execution state, and verifying that the transaction execution results in the expected post-execution state.</p> <p>A single JSON fixture file is composed of a JSON object where each key-value pair is a different <code>Fixture</code> test object, with the key string representing the test name.</p> <p>The JSON file path plus the test name are used as the unique test identifier.</p> <p>As opposed to other fixture formats, the state test fixture format could contain multiple test vectors per test object, each represented by an element in the mapping of lists of the <code>post</code> field.</p> <p>However tests generated by the <code>execution-spec-tests</code> repository do not use this feature, as every single test object contains only a single test vector.</p>"},{"location":"consuming_tests/state_test/#consumption","title":"Consumption","text":"<p>For each <code>Fixture</code> test object in the JSON fixture file, perform the following steps:</p> <ol> <li>Use <code>pre</code> as the starting state allocation of the execution environment for the test.</li> <li>Use <code>env</code> to configure the current execution environment.</li> <li> <p>For each <code>Fork</code> key of <code>post</code> in the test, and for each of the elements of the list of <code>FixtureForkPost</code> values:</p> <ol> <li>Configure the execution fork schedule according to the current <code>Fork</code> key.</li> <li>Using the <code>indexes</code> values, and the <code>transaction</code> object, decode the transaction to be executed.</li> <li>If the serialized version of the decoded transaction does not match <code>txbytes</code>, fail the test.</li> <li> <p>Attempt to apply the transaction using the current execution environment:</p> <ol> <li>If the transaction could not be applied to the current execution context:<ul> <li>If <code>expectException</code> is empty, fail the test.</li> <li>If <code>expectException</code> is not empty, revert the state to the pre-state.</li> </ul> </li> <li>If the transaction could be applied to the current execution context:<ul> <li>If <code>expectException</code> is not empty, fail the test.</li> </ul> </li> </ol> </li> <li> <p>Compare the resulting post-state root with the expected post-state root contained in the <code>hash</code> field of the current <code>FixtureForkPost</code>, and fail the test if they do not match.</p> </li> <li>Compare the resulting logs hash with the expected logs contained in the <code>logs</code> field of the current <code>FixtureForkPost</code>, and fail the test if they do not match.</li> </ol> </li> </ol>"},{"location":"consuming_tests/state_test/#structures","title":"Structures","text":""},{"location":"consuming_tests/state_test/#fixture","title":"<code>Fixture</code>","text":""},{"location":"consuming_tests/state_test/#-env-fixtureenvironment","title":"- <code>env</code>: <code>FixtureEnvironment</code>","text":"<p>Execution environment description for the test.</p>"},{"location":"consuming_tests/state_test/#-pre-alloc","title":"- <code>pre</code>: <code>Alloc</code>","text":"<p>Starting account allocation for the test.</p>"},{"location":"consuming_tests/state_test/#-transaction-fixturetransaction","title":"- <code>transaction</code>: <code>FixtureTransaction</code>","text":"<p>Transaction to be executed.</p>"},{"location":"consuming_tests/state_test/#-post-mappingforklist-fixtureforkpost","title":"- <code>post</code>: <code>Mapping</code><code>(</code><code>Fork</code><code>,</code><code>List</code><code>[</code> <code>FixtureForkPost</code> <code>])</code>","text":"<p>Mapping of lists of post for verification per fork, where each element represents a single possible outcome of the transaction execution after being applied to the <code>pre</code>.</p>"},{"location":"consuming_tests/state_test/#fixtureenvironment","title":"<code>FixtureEnvironment</code>","text":""},{"location":"consuming_tests/state_test/#-currentcoinbase-address","title":"- <code>currentCoinbase</code>: <code>Address</code>","text":"<p>The address of the account that will receive the rewards for building the block.</p>"},{"location":"consuming_tests/state_test/#-currentgaslimit-zeropaddedhexnumber","title":"- <code>currentGasLimit</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Total gas limit of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#-currentnumber-zeropaddedhexnumber","title":"- <code>currentNumber</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Number of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#-currentdifficulty-zeropaddedhexnumber","title":"- <code>currentDifficulty</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Difficulty of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#-currenttimestamp-zeropaddedhexnumber","title":"- <code>currentTimestamp</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Timestamp of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#-currentbasefee-zeropaddedhexnumber-fork-london","title":"- <code>currentBaseFee</code>: <code>ZeroPaddedHexNumber</code> <code>(fork: London)</code>","text":"<p>Base fee of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#-currentrandom-hash-fork-paris","title":"- <code>currentRandom</code>: <code>Hash</code> <code>(fork: Paris)</code>","text":"<p>Randao value of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#-currentexcessblobgas-zeropaddedhexnumber-fork-cancun","title":"- <code>currentExcessBlobGas</code>: <code>ZeroPaddedHexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Excess blob gas of the block where the transaction is executed.</p>"},{"location":"consuming_tests/state_test/#fixturetransaction","title":"<code>FixtureTransaction</code>","text":""},{"location":"consuming_tests/state_test/#-nonce-zeropaddedhexnumber","title":"- <code>nonce</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Nonce of the account that sends the transaction</p>"},{"location":"consuming_tests/state_test/#-gasprice-zeropaddedhexnumber","title":"- <code>gasPrice</code>: <code>ZeroPaddedHexNumber</code>","text":"<p>Gas price for the transaction (Transaction types 0 &amp; 1)</p>"},{"location":"consuming_tests/state_test/#-maxpriorityfeepergas-hexnumber","title":"- <code>maxPriorityFeePerGas</code>: <code>HexNumber</code>","text":"<p>Max priority fee per gas to pay (Transaction types 2 &amp; 3)</p>"},{"location":"consuming_tests/state_test/#-maxfeepergas-hexnumber","title":"- <code>maxFeePerGas</code>: <code>HexNumber</code>","text":"<p>Max base fee per gas to pay (Transaction types 2 &amp; 3)</p>"},{"location":"consuming_tests/state_test/#-gaslimit-listzeropaddedhexnumber","title":"- <code>gasLimit</code>: <code>List</code><code>[</code><code>ZeroPaddedHexNumber</code><code>]</code>","text":"<p>List of gas limits used on each indexed test combination</p>"},{"location":"consuming_tests/state_test/#-to-addressemptyaddress","title":"- <code>to</code>: <code>Address</code><code>|</code><code>EmptyAddress</code>","text":"<p>Destination address of the transaction, or an empty string to create a contract</p>"},{"location":"consuming_tests/state_test/#-value-listzeropaddedhexnumber","title":"- <code>value</code>: <code>List</code><code>[</code><code>ZeroPaddedHexNumber</code><code>]</code>","text":"<p>List of values used on each indexed test combination</p>"},{"location":"consuming_tests/state_test/#-data-listbytes","title":"- <code>data</code>: <code>List</code><code>[</code><code>Bytes</code><code>]</code>","text":"<p>List of data bytes used on each indexed test combination</p>"},{"location":"consuming_tests/state_test/#-accesslists-listlistmappingaddresslisthash-fork-berlin","title":"- <code>accessLists</code>: <code>List</code><code>[</code><code>List</code><code>[</code><code>Mapping</code><code>[</code><code>Address</code><code>,</code><code>List</code><code>[</code><code>Hash</code><code>]]]]</code> <code>(fork: Berlin)</code>","text":"<p>List of account access lists used on each indexed test combination (Transaction types 1, 2 &amp; 3)</p>"},{"location":"consuming_tests/state_test/#-maxfeeperblobgas-hexnumber-fork-cancun","title":"- <code>maxFeePerBlobGas</code>: <code>HexNumber</code> <code>(fork: Cancun)</code>","text":"<p>Max fee per blob gas to pay (Transaction type 3)</p>"},{"location":"consuming_tests/state_test/#-blobversionedhashes-listhash-fork-cancun","title":"- <code>blobVersionedHashes</code>: <code>List</code><code>[</code><code>Hash</code><code>]</code> <code>(fork: Cancun)</code>","text":"<p>List of blob versioned hashes the transaction includes (Transaction type 3)</p>"},{"location":"consuming_tests/state_test/#-sender-address","title":"- <code>sender</code>: <code>Address</code>","text":"<p>Sender address of the transaction</p>"},{"location":"consuming_tests/state_test/#-secretkey-hash","title":"- <code>secretKey</code>: <code>Hash</code>","text":"<p>Private key that must be used to sign the transaction</p>"},{"location":"consuming_tests/state_test/#fixtureforkpost","title":"<code>FixtureForkPost</code>","text":""},{"location":"consuming_tests/state_test/#-indexes-fixtureforkpostindexes","title":"- <code>indexes</code>: <code>FixtureForkPostIndexes</code>","text":"<p>Transaction field indexes that must be used to obtain the transaction to be executed</p>"},{"location":"consuming_tests/state_test/#-txbytes-bytes","title":"- <code>txbytes</code>: <code>Bytes</code>","text":"<p>Serialized bytes version of the <code>FixtureTransaction</code> that was executed to produce this post-state</p>"},{"location":"consuming_tests/state_test/#-hash-hash","title":"- <code>hash</code>: <code>Hash</code>","text":"<p>Expected state root value that results of applying the transaction to the pre-state</p>"},{"location":"consuming_tests/state_test/#-logs-hash","title":"- <code>logs</code>: <code>Hash</code>","text":"<p>Hash of the RLP representation of the state logs result of applying the transaction to the pre-state (TODO: double-check this.)</p>"},{"location":"consuming_tests/state_test/#-expectexception-transactionexception","title":"- <code>expectException</code>: <code>TransactionException</code>","text":"<p>Exception that is expected to be thrown by the transaction execution (Field is missing if the transaction is expected to succeed)</p>"},{"location":"consuming_tests/state_test/#fixtureforkpostindexes","title":"<code>FixtureForkPostIndexes</code>","text":""},{"location":"consuming_tests/state_test/#-data-int","title":"- <code>data</code>: <code>int</code>","text":"<p>Index of the data field in the transaction</p>"},{"location":"consuming_tests/state_test/#-gas-int","title":"- <code>gas</code>: <code>int</code>","text":"<p>Index of the gas limit field in the transaction</p>"},{"location":"consuming_tests/state_test/#-value-int","title":"- <code>value</code>: <code>int</code>","text":"<p>Index of the value field in the transaction</p>"},{"location":"dev/","title":"Developer Documentation","text":"<p>This documentation is aimed at maintainers of <code>execution-spec-tests</code> but may be helpful during test case development:</p> <ul> <li>generating documentation.</li> <li>coding style.</li> <li>enabling pre-commit checks.</li> </ul>"},{"location":"dev/coding_style/","title":"Coding Style","text":""},{"location":"dev/coding_style/#formatting-and-line-length","title":"Formatting and Line Length","text":"<p>The Python code in execution-spec-tests is black formatted with a maximum line length of 100. Using VS Code with <code>editor.formatOnSave</code> is a big help to ensure files conform to the repo's coding style, see VS Code Setup to configure this and other useful settings.</p>"},{"location":"dev/coding_style/#ignoring-bulk-change-commits","title":"Ignoring Bulk Change Commits","text":"<p>The max line length was changed from 80 to 100 in Q2 2023. To ignore this bulk change commit in git blame output, use the <code>.git-blame-ignore-revs</code> file, for example:</p> <pre><code>git blame --ignore-revs-file .git-blame-ignore-revs docs/gen_test_case_reference.py\n</code></pre> <p>To use the revs file persistently with <code>git blame</code>, run</p> <pre><code>git config blame.ignoreRevsFile .git-blame-ignore-revs\n</code></pre>"},{"location":"dev/docs/","title":"Documentation","text":"<p>The <code>execution-spec-tests</code> documentation is generated via <code>mkdocs</code> and hosted remotely on Github Pages at ethereum.github.io/execution-spec-tests.</p>"},{"location":"dev/docs/#prerequisites","title":"Prerequisites","text":"<pre><code>pip install -e .[docs]\n</code></pre>"},{"location":"dev/docs/#build-the-documentation","title":"Build the Documentation","text":"<p>One time build:</p> <pre><code>mkdocs build\n</code></pre> <p>Pre-commit check: One time build and lint/type checking:</p> <pre><code>tox -e docs\n</code></pre>"},{"location":"dev/docs/#local-deployment-and-test","title":"Local Deployment and Test","text":"<p>This runs continually: Deploys the site locally and re-generates the site upon modifications to <code>docs/**/*.md</code> or <code>tests/**/*.py</code>:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"dev/docs/#remote-deployment-and-versioning","title":"Remote Deployment and Versioning","text":"<p>The execution-specs-test docs are hosted on Github pages at the repo's Github pages. Versions are updated/deployed automatically as part of Github Actions, but this can also be performed on the command-line.</p> <p>Our mkdocs configuration uses mike as a version provider. All deployments should be made via <code>mike</code> (whether as part of CI/CD or executed locally).</p> <p>The deployed versions of the docs managed via <code>mike</code> are kept in the gh-pages branch. When you run <code>mike</code> it commits to this branch and optionally pushes the changes directly to remote.</p>"},{"location":"dev/docs/#aliases","title":"Aliases","text":"<p>We currently use two aliases:</p> <ul> <li><code>latest</code>: the latest stable release.</li> <li><code>development</code>: the current state of the main branch.</li> </ul> <p>These aliases point to specific versions, as configured below. It's possible to share links containing either of these aliases or to specific versions, i.e, the following are all valid links:</p> <ul> <li>https://ethereum.github.io/execution-spec-tests/ (redirects to latest/main)</li> <li>https://ethereum.github.io/execution-spec-tests/latest (redirects to main)</li> <li>https://ethereum.github.io/execution-spec-tests/development (redirects to tagged version)</li> <li>https://ethereum.github.io/execution-spec-tests/main</li> <li>https://ethereum.github.io/execution-spec-tests/v1.0.0</li> </ul>"},{"location":"dev/docs/#cicd-doc-deployment-via-github-actions","title":"CI/CD: Doc Deployment via Github Actions","text":"<p>There are two workflows that automatically deploy updated/new versions of the docs:</p> <p>| Workflow <code>yaml</code> File | What | When | |-----------------_____|------|------| | <code>docs_main.yaml</code>     | Update \"main\" version of docs | Push to 'main' branch, (e.g., on PR merge) | | <code>docs_tags.yaml</code>     | Deploy new version of docs; tag is used as version name | Upon creating a tag matching <code>v*</code> |</p>"},{"location":"dev/docs/#build-and-deployment-without-alias-update","title":"Build and Deployment (without alias update)","text":"<p>Build a new version and deploy it to remote (this version will then show up in the version selector list):</p> <pre><code>mike deploy --push v1.2.3\n</code></pre> <p>Local deployment</p> <p>If you deploy locally, the documentation will be built with any changes made in your local repository. Check out the tag to deploy tagged versions.</p>"},{"location":"dev/docs/#build-deploy-and-update-the-alias","title":"Build, Deploy and Update the Alias","text":"<p>Build, deploy and update the version an alias points to with:</p> <pre><code>mike deploy --push --update-aliases v1.2.3 latest\n</code></pre> <p>where <code>v1.2.3</code> indicates the version's name and <code>development</code> is the alias. This will overwrite the version if it already exists.  </p> <p>Updating the 'main' version locally</p> <p>\"main\" is just a version name (intended to reflect that it is build from the main branch). However, <code>mike</code> will build the docs site from the current local repository state (including local modifications). Therefore, make sure you're on the HEAD of the main branch before executing (unless you know what you're doing )!</p> <pre><code>mike deploy --push main\n</code></pre> <p>If the alias accidentally go change:</p> <pre><code>mike deploy --push --update-aliases main development\n</code></pre>"},{"location":"dev/docs/#viewing-and-deleting-versions","title":"Viewing and Deleting Versions","text":"<p>List versions:</p> <pre><code>mike list\n</code></pre> <p>Delete a version:</p> <pre><code>mike delete v1.2.3a1-eof\n</code></pre>"},{"location":"dev/docs/#set-default-version","title":"Set Default Version","text":"<p>Set the default version of the docs to open upon loading the page:</p> <pre><code>mike set-default --push latest\n</code></pre> <p>Typically, this must only be executed once for a repo.</p>"},{"location":"dev/docs/#implementation","title":"Implementation","text":""},{"location":"dev/docs/#plugins","title":"Plugins","text":"<p>The documentation flow uses <code>mkdocs</code> and the following additional plugins:</p> <ul> <li>mkdocs: The main doc generation tool.</li> <li>mkdocs-material: Provides many additional features and styling for mkdocs.</li> <li>mkdocstrings and mkdocstrings-python: To generate documentation from Python docstrings.</li> <li>mkdocs-gen-files: To generate markdown files automatically for each test case Python module. See this page for example usage. This plugin is used to programmatically generate the nav section for the generated test case reference documentation.</li> <li>mkdocs-literate-nav: Is used to define the navigation layout for non-generated content and was created to work well with <code>mkdocs-gen-files</code> to add nav content for generated content.</li> <li>blueswen/mkdocs-glightbox - for improved image and inline content display.</li> </ul>"},{"location":"dev/docs/#the-test-case-reference-section","title":"The \"Test Case Reference\" Section","text":"<p>This section is auto-generated via a combination of:</p> <ol> <li>mkdocstrings and mkdocstrings-python,</li> <li>mkdocs-gen-files,</li> <li>mkdocs-literate-nav.</li> </ol> <p>It auto-generates a sequence of nested pages (with nav entries) of all python modules detected under <code>./tests</code>. Each page contains a stub to the doc generated by mkdocstrings from the module's docstrings and source code. The mkdocs-gen-files and mkdocs-literate-nav plugins were created exactly for this purpose.</p> <p>No action is necessary if a new test directory or module is added to <code>./tests</code>, it will be picked up automatically.</p> <p>Working with generated content</p> <p>The files in the <code>./tests</code> directory are watched by <code>mkdocs serve</code>. Run <code>mkdocs serve</code> and edit the source docstrings: The browser will reload with the new content automatically.</p>"},{"location":"dev/docs/#navigation","title":"Navigation","text":"<p>All pages that are to be included in the documentation and the navigation bar must be included in <code>navigation.md</code>, except \"Test Case Reference\" entries. This is enabled by mkdocs-literate-nav. The nav entries for the automatically generated \"Test Case Reference\" section are generated in mkdocs-gen-files and appended to <code>navigation.md</code>.</p> <p>Current nav ordering limitations</p> <p>The \"Test Case Reference\" section must currently be the last section in the nav. This is because our mkdocs flow:</p> <ol> <li>Reads <code>navigation.md</code>.</li> <li>Generates the Test Case Reference documentation and appends the Test Case Reference entries to <code>navigation.md</code></li> <li>Generates the nav.</li> </ol> <p>If necessary, we could probably split <code>navigation.md</code> into two files</p> <ul> <li><code>navigation-pre-test-case-reference.md</code>,</li> <li><code>navigation-post-test-case-reference.md</code>,</li> </ul> <p>and create an arbitrary ordering in the Test Case Reference doc gen script. But this is untested.</p>"},{"location":"dev/docs/#read-the-docs","title":"Read the Docs","text":"<p>Originally, documentation was hosted at readthedocs.io. Currently, this now defunct page (execution-spec-tests.readthedocs.io) is configured to redirect to the Github Pages site. This is achieved by following the steps listed in the second half of this answer on stackoverflow. A public repo with a dummy Sphinx project is required to achieve this: danceratopz/est-docs-redirect.</p>"},{"location":"dev/precommit/","title":"Enabling Pre-Commit Checks","text":"<p>There's a pre-commit config file available in the repository root (<code>.pre-commit-config.yaml</code>) that can be used to enable automatic checks upon commit - the commit will not go through if the checks don't pass.</p> <p>To enable pre-commit, the following must be ran once:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre> <p>Bypassing pre-commit checks</p> <p>Enabling of pre-commit checks is not mandatory (it cannot be enforced) and even if it is enabled, it can always be bypassed with:</p> <pre><code>git commit --no-verify\n</code></pre>"},{"location":"getting_help/","title":"Getting Help","text":"<p>The tests in this repository are a community effort to help improve the development cycle of all Ethereum execution clients.</p> <p>We encourage contributions and recognize that Python is not everyone's  primary language - if you stumble over issues or need help, please reach out to one of the execution-spec-tests maintainers either directly or in the <code>#testing</code> channel in the Ethereum R&amp;D Discord Server.</p>"},{"location":"getting_help/#contact-the-maintainers","title":"Contact the Maintainers","text":"<p>Write to:</p> <ul> <li>Dan on Discord or Telegram (<code>danceratopz</code>).</li> <li>Spencer on Discord or Telegram (<code>spencertaylorbrown</code>/<code>@techbro_ccoli</code>).</li> <li>Mario on Discord or Telegram (<code>marioevz</code>/<code>@marioevz</code>).</li> </ul> <p> </p>"},{"location":"getting_started/debugging_t8n_tools/","title":"Debugging Transition Tools","text":"<p>There are two flags that can help debugging <code>t8n</code> tools or the execution-spec-tests framework:</p> <ol> <li><code>--evm-dump-dir</code>: Write debug information from <code>t8n</code> tool calls to the specified directory.</li> <li><code>--traces</code>: Collect traces of the execution from the transition tool.</li> <li><code>--verify-fixtures</code>: Run go-ethereum's <code>evm blocktest</code> command to verify the generated test fixtures.</li> </ol>"},{"location":"getting_started/debugging_t8n_tools/#evm-dump-directory","title":"EVM Dump Directory","text":"<p>The <code>--evm-dump-dir</code> flag tells the framework to write the inputs and outputs of every call made to the <code>t8n</code> command to the specified output directory. The aim is to help debugging or simply understand how a test is interacting with the EVM.</p> <p>Each test case receives its own sub-directory under the <code>--evm-dump-dir</code> that contains these files which can be easily accessed from the HTML test report generated by <code>fill</code> (located by default in the root of the <code>--output</code> directory).</p> <p></p> <p>In particular, a script <code>t8n.sh</code> is generated for each call to the <code>t8n</code> command which can be used to reproduce the call to trigger errors or attach a debugger without the need to execute Python.</p> <p>For example, running:</p> <pre><code>fill tests/berlin/eip2930_access_list/ --fork Berlin -m blockchain_test \\\n    --evm-dump-dir=/tmp/evm-dump --traces\n</code></pre> <p>will produce the directory structure:</p> <pre><code>\ud83d\udcc2 /tmp/evm-dump\n\u2514\u2500\u2500 \ud83d\udcc2 berlin__eip2930_access_list__test_acl__test_access_list\n    \u2514\u2500\u2500 \ud83d\udcc2 fork_Berlin_blockchain_test\n        \u2514\u2500\u2500 \ud83d\udcc2 0\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 args.py\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 input\n         \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 alloc.json\n         \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 env.json\n         \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 txs.json\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 output\n         \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 alloc.json\n         \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 result.json\n         \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 txs.rlp\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 returncode.txt\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 stderr.txt\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 stdin.txt\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 stdout.txt\n         \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 t8n.sh\n            \u2514\u2500\u2500 \ud83d\udcc4 trace-0-0x5c4f07ce52f0a276a06aabdfff16cc693b5e007c018f9a42431e68200e2da515.jsonl\n</code></pre> <p>where the directory <code>0</code> is the starting index of the different calls made to the <code>t8n</code> tool executed during the test, and since the test only contains one block, there is only one directory present.</p> <p>Note, there may be more directories present <code>1</code>, <code>2</code>, <code>3</code>,... if the test executes more blocks.</p> <p>Each directory contains files containing information corresponding to the call, for example, the <code>args.py</code> file contains the arguments passed to the <code>t8n</code> command and the <code>output/alloc.json</code> file contains the output of the <code>t8n</code> command's <code>--output-alloc</code> flag.</p>"},{"location":"getting_started/debugging_t8n_tools/#the-t8nsh-script","title":"The <code>t8n.sh</code> Script","text":"<p>The <code>t8n.sh</code> script written to the debug directory can be used to reproduce a specific call made to the <code>t8n</code> command during the test session. For example, if a Besu <code>t8n-server</code> has been started on port <code>3001</code>, the request made by the test for first block can be reproduced as:</p> <pre><code>/tmp/besu/test_access_list_fork_Berlin/0/t8n.sh 3001\n</code></pre> <p>which writes the response the from the <code>t8n-server</code> to the console output:</p> <pre><code>{\n  \"alloc\" : {\n    \"0x000000000000000000000000000000000000aaaa\" : {\n      \"code\" : \"0x5854505854\",\n      \"balance\" : \"0x4\",\n      \"nonce\" : \"0x1\"\n    },\n    \"0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba\" : {\n      \"balance\" : \"0x1bc16d674ecb26ce\"\n    },\n    \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\" : {\n      \"balance\" : \"0x2cd931\",\n      \"nonce\" : \"0x1\"\n    }\n  },\n  \"body\" : \"0xf8a0b89e01f89b0180078304ef0094000000000000000000000000000000000000aaaa0180f838f7940000000000000000000000000000000000000000e1a0000000000000000000000000000000000000000000000000000000000000000001a02e16eb72206c93c471b5894800495ee9c64ae2d9823bcc4d6adeb5d9d9af0dd4a03be6691e933a0816c59d059a556c27c6753e6ce76d1e357b9201865c80b28df3\",\n  \"result\" : {\n    \"stateRoot\" : \"0x51799508f764047aee6606bc6a00863856f83ee5b91555f00c8a3cbdfbec5acb\",\n    ...\n    ...\n  }\n}\n</code></pre> <p>The <code>t8n.sh</code> is written to the debug directory for all supported t8n tools.</p>"},{"location":"getting_started/debugging_t8n_tools/#verifying-test-fixtures-via-evm-blocktest","title":"Verifying Test Fixtures via <code>evm blocktest</code>","text":"<p>The <code>--verify-fixtures</code> flag can be used to run go-ethereum's <code>evm blocktest</code> command in order to verify the generated JSON test fixtures.</p> <p>For example, running:</p> <pre><code>fill tests/berlin/eip2930_access_list/ --fork Berlin -m blockchain_test \\\n    --evm-dump-dir==/tmp/evm-dump \\\n    --evm-bin=../evmone/build/bin/evmone-t8n \\\n    --verify-fixtures-bin=../go-ethereum/build/bin/evm \\\n    --verify-fixtures\n</code></pre> <p>will additionally run the <code>evm blocktest</code> command on every JSON fixture file and write its output to the EVM dump directory:</p> <pre><code>\ud83d\udcc2 /tmp/evm-dump\n\u2514\u2500\u2500 \ud83d\udcc2 berlin__eip2930_access_list__test_acl__test_access_list\n    \u251c\u2500\u2500 \ud83d\udcc4 fixtures.json\n    \u251c\u2500\u2500 \ud83d\udcc2 fork_Berlin_blockchain_test\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 0\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 args.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 input\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 alloc.json\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 env.json\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 txs.json\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 output\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 alloc.json\n    \u2502   ... ... ...\n    \u2502\n    \u251c\u2500\u2500 \ud83d\udcc4 verify_fixtures_args.py\n    \u251c\u2500\u2500 \ud83d\udcc4 verify_fixtures_returncode.txt\n    \u251c\u2500\u2500 \ud83d\udcc4 verify_fixtures.sh\n    \u251c\u2500\u2500 \ud83d\udcc4 verify_fixtures_stderr.txt\n    \u2514\u2500\u2500 \ud83d\udcc4 verify_fixtures_stdout.txt\n</code></pre> <p>where the <code>verify_fixtures.sh</code> script can be used to reproduce the <code>evm blocktest</code> command.</p>"},{"location":"getting_started/debugging_t8n_tools/#further-verify-fixtures-examples","title":"Further <code>--verify-fixtures</code> Examples","text":"<ol> <li> <p>No fixture verification performed:</p> <pre><code>fill\n</code></pre> </li> <li> <p>Verify fixtures: Use the first <code>evm</code> binary in the <code>PATH</code> to execute both the <code>t8n</code> and <code>blocktest</code> commands (i.e., same binary used; this must be a geth binary):</p> <pre><code>fill --verify-fixtures\n</code></pre> </li> <li> <p>Explicitly specify the evm binary to execute the <code>blocktest</code> command (the first evm binary in the <code>PATH</code> is used for <code>t8n</code> commands; <code>--verify-fixtures</code> is not necessary):</p> <pre><code>fill --verify-fixtures-bin=../go-ethereum/build/bin/evm\n</code></pre> </li> <li> <p>Explicitly set two different <code>evm</code> binaries to execute the <code>t8n</code> and <code>blocktest</code> commands; write debug data to the specified <code>--evm-dump-dir</code>:</p> <pre><code>fill --evm-bin=../evmone/build/bin/evmone-t8n \\\n  --verify-fixtures-bin=../go-ethereum/build/bin/evm \\\n  --evm-dump-dir=/tmp/evm-dump\n</code></pre> </li> <li> <p>Additionally use <code>--single-fixture-per-file</code> to improve the granularity of the reporting of the <code>evm blocktest</code> command by writing the fixture generated by each parametrized test case to its own file.</p> <pre><code>fill --evm-bin=../evmone/build/bin/evmone-t8n \\\n  --verify-fixtures-bin=../go-ethereum/build/bin/evm \\\n  --evm-dump-dir=/tmp/evm-dump \\\n  --single-fixture-per-file\n</code></pre> </li> </ol> <p>Execution scope of <code>evm blocktest</code></p> <p>Note, by default, that <code>evm blocktest</code> is not executed per parametrized test case, but rather per test function. This is because each fixture JSON file contains fixtures for all the parametrized test cases for one test function. This means only one error will be reported, even if multiple fixtures fail within one fixture file.</p> <p>Additionally, it is only executed after all the test cases in the module have been executed<sup>1</sup> and will only report the first failing test fixture in all files, even if there are multiple failing fixture files.</p> <p>This means, by default, that the feedback is not as granular as for test case execution. To improve granularity, and get feedback per parametrized test case use <code>--single-fixture-per-file</code>.</p> <ol> <li> <p> This limitation is required to enable support of the <code>pytest-xdist</code> plugin for concurrent test execution across multiple CPUs. To achieve this we use the we apply the <code>--dist loadscope</code> xdist flag in our <code>pytest.ini</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting_started/executing_tests_command_line/","title":"Executing Tests at a Prompt","text":"<p>The execution-spec-tests test framework uses the pytest framework for test case collection and execution. The <code>fill</code> command is essentially an alias for <code>pytest</code>, which uses several custom pytest plugins to run transition tools against test cases and generate JSON fixtures.</p> <p>Options specific to execution-spec-tests</p> <p>The command-line options specific to filling tests can be listed via:</p> <pre><code>fill --help\n</code></pre> <p>See Custom <code>fill</code> Command-Line Options for all options.</p>"},{"location":"getting_started/executing_tests_command_line/#collection-test-exploration","title":"Collection - Test Exploration","text":"<p>The test cases implemented in the <code>./tests</code> sub-directory can be listed in the console using:</p> <pre><code>fill --collect-only\n</code></pre> <p>and can be filtered (by test path, function and parameter substring):</p> <pre><code>fill --collect-only -k warm_coinbase\n</code></pre> <p>Docstrings are additionally displayed when ran verbosely:</p> <pre><code>fill --collect-only -k warm_coinbase -vv\n</code></pre>"},{"location":"getting_started/executing_tests_command_line/#execution","title":"Execution","text":"<p>By default, test cases are executed for all forks already deployed to mainnet, but not for forks still under active development, i.e., as of time of writing, Q2 2023:</p> <pre><code>fill\n</code></pre> <p>will generate fixtures for test cases from Frontier to Shanghai.</p> <p>To generate all the test fixtures defined in the <code>./tests/shanghai</code> sub-directory and write them to the <code>./fixtures-shanghai</code> directory, run <code>fill</code> in the top-level directory as:</p> <pre><code>fill ./tests/shanghai --output=\"fixtures-shanghai\"\n</code></pre> <p>Test case verification</p> <p>Note, that the (limited set of) test <code>post</code> conditions are tested against the output of the <code>evm t8n</code> command during test generation.</p> <p>To generate all the test fixtures in the <code>tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py</code> module, for example, run:</p> <pre><code>fill tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py\n</code></pre> <p>To generate specific test fixtures from a specific test function or even test function and parameter set, obtain the corresponding test ID using:</p> <pre><code>fill --collect-only -q -k test_warm_coinbase\n</code></pre> <p>This filters the tests by <code>test_warm_coinbase</code>. Then find the relevant test ID in the console output and provide it to fill, for example, for a test function:</p> <pre><code>fill tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py::test_warm_coinbase_gas_usage\n</code></pre> <p>or, for a test function and specific parameter combination:</p> <pre><code>fill tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py::test_warm_coinbase_gas_usage[fork_Paris-DELEGATECALL]\n</code></pre>"},{"location":"getting_started/executing_tests_command_line/#execution-for-development-forks","title":"Execution for Development Forks","text":"<p>By default, test cases are not executed with upcoming Ethereum forks so that they can be readily executed against the <code>evm</code> tool from the latest <code>geth</code> release.</p> <p>In order to execute test cases for an upcoming fork, ensure that the <code>evm</code> tool used supports that fork and features under test and use the <code>--until</code> or <code>--fork</code> flag.</p> <p>For example, as of Q2 2023, the current fork under active development is <code>Cancun</code>: <pre><code>fill --until Cancun\n</code></pre></p> <p>See: Executing Tests for Features under Development.</p>"},{"location":"getting_started/executing_tests_command_line/#debugging-the-t8n-command","title":"Debugging the <code>t8n</code> Command","text":"<p>The <code>--evm-dump-dir</code> flag can be used to dump the inputs and outputs of every call made to the <code>t8n</code> command for debugging purposes, see Debugging Transition Tools.</p>"},{"location":"getting_started/executing_tests_command_line/#other-useful-pytest-command-line-options","title":"Other Useful Pytest Command-Line Options","text":"<pre><code>fill -vv            # More verbose output\nfill -x             # Exit instantly on first error or failed test case\nfill --pdb -nauto   # Drop into the debugger upon error in a test case\nfill -s             # Print stdout from tests to the console during execution\n</code></pre>"},{"location":"getting_started/executing_tests_command_line/#custom-fill-command-line-options","title":"Custom <code>fill</code> Command-Line Options","text":"<p>To see all the options available to fill, including pytest and pytest plugin options, use <code>--pytest-help</code>.</p> <p>To list the options that only specific to fill, use:</p> <pre><code>fill --help\n</code></pre> <p>Output:</p> <pre><code>usage: fill [-h] [--evm-bin EVM_BIN] [--traces] [--verify-fixtures]\n            [--verify-fixtures-bin VERIFY_FIXTURES_BIN] [--solc-bin SOLC_BIN]\n            [--filler-path FILLER_PATH] [--output OUTPUT] [--flat-output]\n            [--single-fixture-per-file] [--enable-hive]\n            [--evm-dump-dir EVM_DUMP_DIR] [--forks] [--fork FORK] [--from FROM]\n            [--until UNTIL] [--test-help]\n\noptions:\n  -h, --help            show this help message and exit\n\nArguments defining evm executable behavior:\n  --evm-bin EVM_BIN     Path to an evm executable that provides `t8n`. Default:\n                        First 'evm' entry in PATH.\n  --traces              Collect traces of the execution information from the\n                        transition tool.\n  --verify-fixtures     Verify generated fixture JSON files using geth's evm\n                        blocktest command. By default, the same evm binary as\n                        for the t8n tool is used. A different (geth) evm binary\n                        may be specified via --verify-fixtures-bin, this must\n                        be specified if filling with a non-geth t8n tool that\n                        does not support blocktest.\n  --verify-fixtures-bin VERIFY_FIXTURES_BIN\n                        Path to an evm executable that provides the `blocktest`\n                        command. Default: The first (geth) 'evm' entry in PATH.\n\nArguments defining the solc executable:\n  --solc-bin SOLC_BIN   Path to a solc executable (for Yul source compilation).\n                        Default: First 'solc' entry in PATH.\n\nArguments defining filler location and output:\n  --filler-path FILLER_PATH\n                        Path to filler directives\n  --output OUTPUT       Directory to store the generated test fixtures. Can be\n                        deleted.\n  --flat-output         Output each test case in the directory without the\n                        folder structure.\n  --single-fixture-per-file\n                        Don't group fixtures in JSON files by test function;\n                        write each fixture to its own file. This can be used to\n                        increase the granularity of --verify-fixtures.\n  --no-html             Don't generate an HTML test report (in the output\n                        directory). The --html flag can be used to specify a\n                        different path.\n\n\nArguments defining debug behavior:\n  --evm-dump-dir EVM_DUMP_DIR, --t8n-dump-dir EVM_DUMP_DIR\n                        Path to dump the transition tool debug output.\n\nSpecify the fork range to generate fixtures for:\n  --forks               Display forks supported by the test framework and exit.\n  --fork FORK           Only fill tests for the specified fork.\n  --from FROM           Fill tests from and including the specified fork.\n  --until UNTIL         Fill tests until and including the specified fork.\n\nArguments related to running execution-spec-tests:\n  --test-help           Only show help options specific to execution-spec-tests\n                        and exit.\n\nExit: After displaying help.\n</code></pre>"},{"location":"getting_started/executing_tests_dev_fork/","title":"Executing Tests for Features under Development","text":""},{"location":"getting_started/executing_tests_dev_fork/#requirements","title":"Requirements","text":"<p>By default, execution-spec-tests only generates fixtures for forks that have been deployed to mainnet. In order to generate fixtures for evm features that are actively under development:</p> <ol> <li>A version of the <code>evm</code> and <code>solc</code> tools that implement the feature must be available (although, typically only a developer version of the <code>evm</code> tool is required, usually the latest stable release of <code>solc</code> is adequate), and,</li> <li> <p>The development fork to test must be explicitly specified on the command-line:</p> via the <code>--fork</code> flagvia the <code>--from</code> flagvia the <code>--until</code> flag <pre><code>fill -k 4844 --fork=Cancun -v\n</code></pre> <pre><code>fill -k 4844 --from=Cancun -v\n</code></pre> <pre><code>fill -k 4844 --until=Cancun -v\n</code></pre> </li> </ol> <p>Specifying the <code>evm</code> binary via <code>evm-bin</code></p> <p>It is possible to explicitly specify the <code>evm</code> binary used to generate fixtures via the <code>--evm-bin</code> flag, for example,</p> <pre><code>fill --fork=Cancun --evm-bin=/opt/bin/evm -v\n</code></pre>"},{"location":"getting_started/executing_tests_dev_fork/#further-help","title":"Further Help","text":"<ol> <li><code>geth</code>/<code>evm</code> build documentation.</li> <li><code>solc</code> build documentation.</li> </ol> <p>Verifying <code>evm</code> and <code>solc</code> versions used</p> <p>The versions used to generate fixtures are displayed in the console output:   </p>"},{"location":"getting_started/executing_tests_dev_fork/#vs-code-setup","title":"VS Code Setup","text":"<p>By default, VS Code's Testing View will only show tests for stable forks. To show tests for development forks, uncomment the relevant line in the <code>python.testing.pytestArgs</code> configuration section of included settings file (<code>.vscode/settings.json</code>) to enable the <code>--until=FORK</code> flag. See VS Code Setup for help finding the settings files.</p>"},{"location":"getting_started/executing_tests_vs_code/","title":"Executing Tests in VS Code","text":"<p>Prerequisite: VS Code Setup.</p>"},{"location":"getting_started/executing_tests_vs_code/#exploring-test-cases","title":"Exploring Test Cases","text":"<p>Implemented test cases can be explored in VS Code's \"Testing\" View; click on the conical flask highlighted in the screenshot below.</p> <p> </p> <p>Testing EVM Features Under Active Development</p> <p>See the VS Code section in Executing Tests for Features under Development to explore tests targeting EVM features under development.</p>"},{"location":"getting_started/executing_tests_vs_code/#executing-and-debugging-test-cases","title":"Executing and Debugging Test Cases","text":""},{"location":"getting_started/quick_start/","title":"Quick Start","text":"<p>Testing features under active development</p> <p>The EVM features under test must be implemented in the <code>evm</code> tool and <code>solc</code> executables that are used by the execution-spec-tests framework. The following guide installs stable versions of these tools.</p> <p>To test features under active development, start with this base configuration and then follow the steps in executing tests for features under development. </p> <p>The following requires a Python 3.10, 3.11 or 3.12 installation.</p> <ol> <li> <p>Ensure <code>go-ethereum</code>'s <code>evm</code> tool and <code>solc</code> (0.8.20, 0.8.21, 0.8.22, 0.8.23  supported) are in your path. Either build the required versions, or alternatively:</p> UbuntumacOSWindows <p><pre><code>sudo add-apt-repository -y ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install ethereum solc\n</code></pre>   More help:</p> <ul> <li>geth installation doc.</li> <li>solc installation doc.</li> </ul> <p><pre><code>brew update\nbrew upgrade\nbrew tap ethereum/ethereum\nbrew install ethereum solidity\n</code></pre>   More help:</p> <ul> <li>geth installation doc.</li> <li>solc installation doc.</li> </ul> <p>Binaries available here:</p> <ul> <li>geth (binary or installer).</li> <li>solc.</li> </ul> <p>More help:</p> <ul> <li>geth installation doc.</li> <li>solc static binaries doc.</li> </ul> </li> <li> <p>Clone the execution-spec-tests repo and install its dependencies (it's recommended to use a virtual environment for the installation):</p> <pre><code>git clone https://github.com/ethereum/execution-spec-tests\ncd execution-spec-tests\npython3 -m venv ./venv/\nsource ./venv/bin/activate\npip install -e '.[docs,lint,test]'\n</code></pre> </li> <li> <p>Verify installation:</p> <ol> <li> <p>Explore test cases:</p> <pre><code>fill --collect-only\n</code></pre> <p>Expected console output:  </p> </li> <li> <p>Execute the test cases (verbosely) in the <code>./tests/berlin/eip2930_access_list/test_acl.py</code> module:</p> <pre><code>fill -v tests/berlin/eip2930_access_list/test_acl.py\n</code></pre> <p>Expected console output:   Check:</p> <ol> <li>The versions of the <code>evm</code> and <code>solc</code> tools are as expected (your versions may differ from those in the highlighted box).</li> <li>The generated HTML test report by clicking the link at the bottom of the console output.</li> <li> <p>The corresponding fixture file has been generated:</p> <pre><code>head fixtures/blockchain_tests/berlin/eip2930_access_list/acl/access_list.json\n</code></pre> </li> </ol> </li> </ol> </li> </ol>"},{"location":"getting_started/quick_start/#next-steps","title":"Next Steps","text":"<ol> <li>Learn useful command-line flags.</li> <li>Execute tests for features under development via the <code>--fork</code> flag.</li> <li>Optional: Configure VS Code to auto-format Python code and execute tests within VS Code.</li> <li>Implement a new test case, see Writing Tests.</li> </ol>"},{"location":"getting_started/repository_overview/","title":"Repository Overview","text":""},{"location":"getting_started/repository_overview/#repository-overview","title":"Repository Overview","text":"<p>The most relevant folders and files in the repo are:</p> <pre><code>\ud83d\udcc1 execution-test-specs/\n\u251c\u2500\u2574\ud83d\udcc1 tests/                     # test cases\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 eips/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 vm/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 ...\n\u251c\u2500\u2574\ud83d\udcc1 fixtures/                  # default fixture output dir\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 blockchain_tests/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 blockchain_tests_hive/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 state_tests/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 ...\n\u251c\u2500\u2574\ud83d\udcc1 src/                       # library &amp; framework packages\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 ethereum_test_fork/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 ethereum_test_tools/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 ...\n\u251c\u2500\u2574\ud83d\udcc1 docs/                      # markdown documentation\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 getting_started\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 dev\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 ...\n\u251c\u2500\u2574\ud83d\udcc1 .vscode/                   # visual studio code config\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 settings.recommended.json # copy to settings.json\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 launch.recommended.json\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 extensions.json\n\u2514\u2500\u2500 \ud83d\udcc4 whitelist.txt             # spellcheck dictionary\n</code></pre>"},{"location":"getting_started/repository_overview/#tests","title":"<code>tests/</code>","text":"<p>Contains the implementation of the Ethereum consensus tests available in this repository.</p>"},{"location":"getting_started/repository_overview/#src","title":"<code>src/</code>","text":"<p>Contains various packages that help to define test cases and to interface with the <code>evm t8n</code> command. Additionally, it contains some packages that enable test case execution by customizing pytest which acts as the test framework.</p>"},{"location":"getting_started/repository_overview/#docs","title":"<code>docs/</code>","text":"<p>Contains documentation configuration and source files.</p>"},{"location":"getting_started/repository_overview/#vscode","title":"<code>.vscode/</code>","text":"<p>See VS Code Setup.</p>"},{"location":"getting_started/setup_vs_code/","title":"VS Code Setup","text":"<p>VS Code setup is optional, but does offer the following advantages:</p> <ul> <li>Auto-format your Python code to conform to the repository's code standards (black).</li> <li>Inline linting and auto-completion (thanks to Python type hints).</li> <li>Spell-check your code and docs.</li> <li>Graphical exploration of test cases and easy test execution/debug.</li> </ul>"},{"location":"getting_started/setup_vs_code/#installation","title":"Installation","text":"<p>Please refer to the Visual Studio Code docs for help with installation.</p>"},{"location":"getting_started/setup_vs_code/#vs-code-settings-file","title":"VS Code Settings file","text":"<p>The ethereum/execution-spec-tests repo includes configuration files for VS Code in the <code>.vscode/</code> sub-directory:</p> <pre><code>\ud83d\udcc1 execution-test-specs/\n\u2514\u2500\u2500\ud83d\udcc1 .vscode/\n    \u251c\u2500\u2500 \ud83d\udcc4 settings.recommended.json\n    \u251c\u2500\u2500 \ud83d\udcc4 extensions.json\n    \u2514\u2500\u2500 \ud83d\udcc4 launch.recommended.json\n</code></pre> <p>To enable the recommended settings, copy the settings file to the expected location:</p> <pre><code>cp .vscode/settings.recommended.json .vscode/settings.json\n</code></pre> <p>To additionally enable the recommended launch configurations:</p> <pre><code>cp .vscode/launch.recommended.json .vscode/launch.json\n</code></pre>"},{"location":"getting_started/setup_vs_code/#additional-vs-code-extensions","title":"Additional VS Code Extensions","text":"<p>Open the folder in VS Code where execution-spec-tests is cloned: VS Code should prompt to install the repository's required extensions from <code>.vscode/extensions.json</code>:</p> <ul> <li><code>ms-python.python</code></li> <li><code>ms-python.isort</code></li> <li><code>ms-python.flake8</code></li> <li><code>ms-python.black-formatter</code></li> <li><code>esbenp.prettier-vscode</code></li> <li><code>streetsidesoftware.code-spell-checker</code></li> <li><code>tamasfe.even-better-toml</code></li> </ul> <p>Workspace Trust</p> <p>Trust the <code>execution-specs-test</code> repository when opening in VS Code to be prompted to install the plugins recommended via the <code>extensions.json</code> file.</p>"},{"location":"getting_started/setup_vs_code/#configuration-for-testing-evm-features-under-active-development","title":"Configuration for Testing EVM Features Under Active Development","text":"<p>An additional step is required to enable fixture generations for features from forks that are under active development and have not been deployed to mainnet, see Executing Tests for Features under Development.</p>"},{"location":"library/","title":"Library (Tools) Reference Documentation","text":"<p>Execution spec tests consists of several packages that implement helper classes and tools that enable and simplify test case implementation. This section contains their reference documentation:</p> <ul> <li><code>evm_transition_tool</code> - a wrapper for the transition (<code>t8n</code>) tool.</li> <li><code>ethereum_test_tools</code> - provides primitives and helpers to test Ethereum execution clients.</li> <li><code>ethereum_test_forks</code> - provides definitions for supported forks used in tests.</li> <li><code>pytest_plugins</code> - contains pytest customizations that provide additional functionality for generating test fixtures.</li> </ul>"},{"location":"library/ethereum_test_forks/","title":"Ethereum Test Forks package","text":"<p>Ethereum test fork definitions.</p>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.ForkAttribute","title":"<code>ForkAttribute</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>A protocol to get the attribute of a fork at a given block number and timestamp.</p> Source code in <code>src/ethereum_test_forks/base_fork.py</code> <pre><code>class ForkAttribute(Protocol):\n    \"\"\"\n    A protocol to get the attribute of a fork at a given block number and timestamp.\n    \"\"\"\n\n    def __call__(self, block_number: int = 0, timestamp: int = 0) -&gt; Any:\n        \"\"\"\n        Returns the value of the attribute at the given block number and timestamp.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.ForkAttribute.__call__","title":"<code>__call__(block_number=0, timestamp=0)</code>","text":"<p>Returns the value of the attribute at the given block number and timestamp.</p> Source code in <code>src/ethereum_test_forks/base_fork.py</code> <pre><code>def __call__(self, block_number: int = 0, timestamp: int = 0) -&gt; Any:\n    \"\"\"\n    Returns the value of the attribute at the given block number and timestamp.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.ArrowGlacier","title":"<code>ArrowGlacier</code>","text":"<p>               Bases: <code>London</code></p> <p>Arrow Glacier fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class ArrowGlacier(London, solc_name=\"london\", ignore=True):\n    \"\"\"\n    Arrow Glacier fork\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Berlin","title":"<code>Berlin</code>","text":"<p>               Bases: <code>Istanbul</code></p> <p>Berlin fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Berlin(Istanbul):\n    \"\"\"\n    Berlin fork\n    \"\"\"\n\n    @classmethod\n    def tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Berlin, access list transactions are introduced\n        \"\"\"\n        return [1] + super(Berlin, cls).tx_types(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Berlin.tx_types","title":"<code>tx_types(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Berlin, access list transactions are introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Berlin, access list transactions are introduced\n    \"\"\"\n    return [1] + super(Berlin, cls).tx_types(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Byzantium","title":"<code>Byzantium</code>","text":"<p>               Bases: <code>Homestead</code></p> <p>Byzantium fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Byzantium(Homestead):\n    \"\"\"\n    Byzantium fork\n    \"\"\"\n\n    @classmethod\n    def get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n        \"\"\"\n        At Byzantium, the block reward is reduced to\n        3_000_000_000_000_000_000 wei\n        \"\"\"\n        return 3_000_000_000_000_000_000\n\n    @classmethod\n    def precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Byzantium, pre-compiles for bigint modular exponentiation, addition and scalar\n        multiplication on elliptic curve alt_bn128, and optimal ate pairing check on\n        elliptic curve alt_bn128 are introduced\n        \"\"\"\n        return [5, 6, 7, 8] + super(Byzantium, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Byzantium.get_reward","title":"<code>get_reward(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Byzantium, the block reward is reduced to 3_000_000_000_000_000_000 wei</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n    \"\"\"\n    At Byzantium, the block reward is reduced to\n    3_000_000_000_000_000_000 wei\n    \"\"\"\n    return 3_000_000_000_000_000_000\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Byzantium.precompiles","title":"<code>precompiles(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Byzantium, pre-compiles for bigint modular exponentiation, addition and scalar multiplication on elliptic curve alt_bn128, and optimal ate pairing check on elliptic curve alt_bn128 are introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Byzantium, pre-compiles for bigint modular exponentiation, addition and scalar\n    multiplication on elliptic curve alt_bn128, and optimal ate pairing check on\n    elliptic curve alt_bn128 are introduced\n    \"\"\"\n    return [5, 6, 7, 8] + super(Byzantium, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun","title":"<code>Cancun</code>","text":"<p>               Bases: <code>Shanghai</code></p> <p>Cancun fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Cancun(Shanghai):\n    \"\"\"\n    Cancun fork\n    \"\"\"\n\n    @classmethod\n    def solc_min_version(cls) -&gt; Version:\n        \"\"\"\n        Returns the minimum version of solc that supports this fork.\n        \"\"\"\n        return Version.parse(\"0.8.24\")\n\n    @classmethod\n    def header_excess_blob_gas_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Excess blob gas is required starting from Cancun.\n        \"\"\"\n        return True\n\n    @classmethod\n    def header_blob_gas_used_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Blob gas used is required starting from Cancun.\n        \"\"\"\n        return True\n\n    @classmethod\n    def header_beacon_root_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Parent beacon block root is required starting from Cancun.\n        \"\"\"\n        return True\n\n    @classmethod\n    def blob_gas_per_blob(cls, block_number: int, timestamp: int) -&gt; int:\n        \"\"\"\n        Blobs are enabled started from Cancun.\n        \"\"\"\n        return 2**17\n\n    @classmethod\n    def tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Cancun, blob type transactions are introduced\n        \"\"\"\n        return [3] + super(Cancun, cls).tx_types(block_number, timestamp)\n\n    @classmethod\n    def precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Cancun, pre-compile for kzg point evaluation is introduced\n        \"\"\"\n        return [0xA] + super(Cancun, cls).precompiles(block_number, timestamp)\n\n    @classmethod\n    def pre_allocation_blockchain(cls) -&gt; Mapping:\n        \"\"\"\n        Cancun requires pre-allocation of the beacon root contract for EIP-4788 on blockchain\n        type tests\n        \"\"\"\n        new_allocation = {\n            0x000F3DF6D732807EF1319FB7B8BB8522D0BEAC02: {\n                \"nonce\": 1,\n                \"code\": \"0x3373fffffffffffffffffffffffffffffffffffffffe14604d57602036146024575f5f\"\n                \"fd5b5f35801560495762001fff810690815414603c575f5ffd5b62001fff01545f5260205ff35b5f\"\n                \"5ffd5b62001fff42064281555f359062001fff015500\",\n            }\n        }\n        return new_allocation | super(Cancun, cls).pre_allocation_blockchain()\n\n    @classmethod\n    def engine_new_payload_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        Starting at Cancun, new payload calls must use version 3\n        \"\"\"\n        return 3\n\n    @classmethod\n    def engine_new_payload_blob_hashes(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Starting at Cancun, payloads must have blob hashes.\n        \"\"\"\n        return True\n\n    @classmethod\n    def engine_new_payload_beacon_root(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Starting at Cancun, payloads must have a parent beacon block root.\n        \"\"\"\n        return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.solc_min_version","title":"<code>solc_min_version()</code>  <code>classmethod</code>","text":"<p>Returns the minimum version of solc that supports this fork.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef solc_min_version(cls) -&gt; Version:\n    \"\"\"\n    Returns the minimum version of solc that supports this fork.\n    \"\"\"\n    return Version.parse(\"0.8.24\")\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.header_excess_blob_gas_required","title":"<code>header_excess_blob_gas_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Excess blob gas is required starting from Cancun.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_excess_blob_gas_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Excess blob gas is required starting from Cancun.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.header_blob_gas_used_required","title":"<code>header_blob_gas_used_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Blob gas used is required starting from Cancun.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_blob_gas_used_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Blob gas used is required starting from Cancun.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.header_beacon_root_required","title":"<code>header_beacon_root_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Parent beacon block root is required starting from Cancun.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_beacon_root_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Parent beacon block root is required starting from Cancun.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.blob_gas_per_blob","title":"<code>blob_gas_per_blob(block_number, timestamp)</code>  <code>classmethod</code>","text":"<p>Blobs are enabled started from Cancun.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef blob_gas_per_blob(cls, block_number: int, timestamp: int) -&gt; int:\n    \"\"\"\n    Blobs are enabled started from Cancun.\n    \"\"\"\n    return 2**17\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.tx_types","title":"<code>tx_types(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Cancun, blob type transactions are introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Cancun, blob type transactions are introduced\n    \"\"\"\n    return [3] + super(Cancun, cls).tx_types(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.precompiles","title":"<code>precompiles(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Cancun, pre-compile for kzg point evaluation is introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Cancun, pre-compile for kzg point evaluation is introduced\n    \"\"\"\n    return [0xA] + super(Cancun, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.pre_allocation_blockchain","title":"<code>pre_allocation_blockchain()</code>  <code>classmethod</code>","text":"<p>Cancun requires pre-allocation of the beacon root contract for EIP-4788 on blockchain type tests</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef pre_allocation_blockchain(cls) -&gt; Mapping:\n    \"\"\"\n    Cancun requires pre-allocation of the beacon root contract for EIP-4788 on blockchain\n    type tests\n    \"\"\"\n    new_allocation = {\n        0x000F3DF6D732807EF1319FB7B8BB8522D0BEAC02: {\n            \"nonce\": 1,\n            \"code\": \"0x3373fffffffffffffffffffffffffffffffffffffffe14604d57602036146024575f5f\"\n            \"fd5b5f35801560495762001fff810690815414603c575f5ffd5b62001fff01545f5260205ff35b5f\"\n            \"5ffd5b62001fff42064281555f359062001fff015500\",\n        }\n    }\n    return new_allocation | super(Cancun, cls).pre_allocation_blockchain()\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.engine_new_payload_version","title":"<code>engine_new_payload_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Starting at Cancun, new payload calls must use version 3</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    Starting at Cancun, new payload calls must use version 3\n    \"\"\"\n    return 3\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.engine_new_payload_blob_hashes","title":"<code>engine_new_payload_blob_hashes(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Starting at Cancun, payloads must have blob hashes.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_blob_hashes(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Starting at Cancun, payloads must have blob hashes.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Cancun.engine_new_payload_beacon_root","title":"<code>engine_new_payload_beacon_root(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Starting at Cancun, payloads must have a parent beacon block root.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_beacon_root(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Starting at Cancun, payloads must have a parent beacon block root.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Constantinople","title":"<code>Constantinople</code>","text":"<p>               Bases: <code>Byzantium</code></p> <p>Constantinople fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Constantinople(Byzantium):\n    \"\"\"\n    Constantinople fork\n    \"\"\"\n\n    @classmethod\n    def get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n        \"\"\"\n        At Constantinople, the block reward is reduced to\n        2_000_000_000_000_000_000 wei\n        \"\"\"\n        return 2_000_000_000_000_000_000\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Constantinople.get_reward","title":"<code>get_reward(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Constantinople, the block reward is reduced to 2_000_000_000_000_000_000 wei</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n    \"\"\"\n    At Constantinople, the block reward is reduced to\n    2_000_000_000_000_000_000 wei\n    \"\"\"\n    return 2_000_000_000_000_000_000\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.ConstantinopleFix","title":"<code>ConstantinopleFix</code>","text":"<p>               Bases: <code>Constantinople</code></p> <p>Constantinople Fix fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class ConstantinopleFix(Constantinople, solc_name=\"constantinople\"):\n    \"\"\"\n    Constantinople Fix fork\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier","title":"<code>Frontier</code>","text":"<p>               Bases: <code>BaseFork</code></p> <p>Frontier fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Frontier(BaseFork, solc_name=\"homestead\"):\n    \"\"\"\n    Frontier fork\n    \"\"\"\n\n    @classmethod\n    def transition_tool_name(cls, block_number: int = 0, timestamp: int = 0) -&gt; str:\n        \"\"\"\n        Returns fork name as it's meant to be passed to the transition tool for execution.\n        \"\"\"\n        if cls._transition_tool_name is not None:\n            return cls._transition_tool_name\n        return cls.name()\n\n    @classmethod\n    def solc_name(cls) -&gt; str:\n        \"\"\"\n        Returns fork name as it's meant to be passed to the solc compiler.\n        \"\"\"\n        if cls._solc_name is not None:\n            return cls._solc_name\n        return cls.name().lower()\n\n    @classmethod\n    def solc_min_version(cls) -&gt; Version:\n        \"\"\"\n        Returns the minimum version of solc that supports this fork.\n        \"\"\"\n        return Version.parse(\"0.8.20\")\n\n    @classmethod\n    def header_base_fee_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain base fee\n        \"\"\"\n        return False\n\n    @classmethod\n    def header_prev_randao_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain Prev Randao value\n        \"\"\"\n        return False\n\n    @classmethod\n    def header_zero_difficulty_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not have difficulty zero\n        \"\"\"\n        return False\n\n    @classmethod\n    def header_withdrawals_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain withdrawals\n        \"\"\"\n        return False\n\n    @classmethod\n    def header_excess_blob_gas_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain excess blob gas\n        \"\"\"\n        return False\n\n    @classmethod\n    def header_blob_gas_used_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain blob gas used\n        \"\"\"\n        return False\n\n    @classmethod\n    def blob_gas_per_blob(cls, block_number: int, timestamp: int) -&gt; int:\n        \"\"\"\n        Returns the amount of blob gas used per blob for a given fork.\n        \"\"\"\n        return 0\n\n    @classmethod\n    def header_requests_required(cls, block_number: int, timestamp: int) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain beacon chain requests.\n        \"\"\"\n        return False\n\n    @classmethod\n    def engine_new_payload_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        At genesis, payloads cannot be sent through the engine API\n        \"\"\"\n        return None\n\n    @classmethod\n    def header_beacon_root_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, header must not contain parent beacon block root\n        \"\"\"\n        return False\n\n    @classmethod\n    def engine_new_payload_blob_hashes(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, payloads do not have blob hashes.\n        \"\"\"\n        return False\n\n    @classmethod\n    def engine_new_payload_beacon_root(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        At genesis, payloads do not have a parent beacon block root.\n        \"\"\"\n        return False\n\n    @classmethod\n    def engine_forkchoice_updated_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        At genesis, forkchoice updates cannot be sent through the engine API.\n        \"\"\"\n        return cls.engine_new_payload_version(block_number, timestamp)\n\n    @classmethod\n    def get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n        \"\"\"\n        At Genesis the expected reward amount in wei is\n        5_000_000_000_000_000_000\n        \"\"\"\n        return 5_000_000_000_000_000_000\n\n    @classmethod\n    def tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Genesis, only legacy transactions are allowed\n        \"\"\"\n        return [0]\n\n    @classmethod\n    def precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Genesis, no pre-compiles are allowed\n        \"\"\"\n        return []\n\n    @classmethod\n    def pre_allocation(cls) -&gt; Mapping:\n        \"\"\"\n        Returns whether the fork expects pre-allocation of accounts\n\n        Frontier does not require pre-allocated accounts\n        \"\"\"\n        return {}\n\n    @classmethod\n    def pre_allocation_blockchain(cls) -&gt; Mapping:\n        \"\"\"\n        Returns whether the fork expects pre-allocation of accounts\n\n        Frontier does not require pre-allocated accounts\n        \"\"\"\n        return {}\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.transition_tool_name","title":"<code>transition_tool_name(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Returns fork name as it's meant to be passed to the transition tool for execution.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef transition_tool_name(cls, block_number: int = 0, timestamp: int = 0) -&gt; str:\n    \"\"\"\n    Returns fork name as it's meant to be passed to the transition tool for execution.\n    \"\"\"\n    if cls._transition_tool_name is not None:\n        return cls._transition_tool_name\n    return cls.name()\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.solc_name","title":"<code>solc_name()</code>  <code>classmethod</code>","text":"<p>Returns fork name as it's meant to be passed to the solc compiler.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef solc_name(cls) -&gt; str:\n    \"\"\"\n    Returns fork name as it's meant to be passed to the solc compiler.\n    \"\"\"\n    if cls._solc_name is not None:\n        return cls._solc_name\n    return cls.name().lower()\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.solc_min_version","title":"<code>solc_min_version()</code>  <code>classmethod</code>","text":"<p>Returns the minimum version of solc that supports this fork.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef solc_min_version(cls) -&gt; Version:\n    \"\"\"\n    Returns the minimum version of solc that supports this fork.\n    \"\"\"\n    return Version.parse(\"0.8.20\")\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_base_fee_required","title":"<code>header_base_fee_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain base fee</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_base_fee_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain base fee\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_prev_randao_required","title":"<code>header_prev_randao_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain Prev Randao value</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_prev_randao_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain Prev Randao value\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_zero_difficulty_required","title":"<code>header_zero_difficulty_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not have difficulty zero</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_zero_difficulty_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not have difficulty zero\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_withdrawals_required","title":"<code>header_withdrawals_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain withdrawals</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_withdrawals_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain withdrawals\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_excess_blob_gas_required","title":"<code>header_excess_blob_gas_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain excess blob gas</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_excess_blob_gas_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain excess blob gas\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_blob_gas_used_required","title":"<code>header_blob_gas_used_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain blob gas used</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_blob_gas_used_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain blob gas used\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.blob_gas_per_blob","title":"<code>blob_gas_per_blob(block_number, timestamp)</code>  <code>classmethod</code>","text":"<p>Returns the amount of blob gas used per blob for a given fork.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef blob_gas_per_blob(cls, block_number: int, timestamp: int) -&gt; int:\n    \"\"\"\n    Returns the amount of blob gas used per blob for a given fork.\n    \"\"\"\n    return 0\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_requests_required","title":"<code>header_requests_required(block_number, timestamp)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain beacon chain requests.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_requests_required(cls, block_number: int, timestamp: int) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain beacon chain requests.\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.engine_new_payload_version","title":"<code>engine_new_payload_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, payloads cannot be sent through the engine API</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    At genesis, payloads cannot be sent through the engine API\n    \"\"\"\n    return None\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.header_beacon_root_required","title":"<code>header_beacon_root_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, header must not contain parent beacon block root</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_beacon_root_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, header must not contain parent beacon block root\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.engine_new_payload_blob_hashes","title":"<code>engine_new_payload_blob_hashes(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, payloads do not have blob hashes.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_blob_hashes(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, payloads do not have blob hashes.\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.engine_new_payload_beacon_root","title":"<code>engine_new_payload_beacon_root(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, payloads do not have a parent beacon block root.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_beacon_root(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    At genesis, payloads do not have a parent beacon block root.\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.engine_forkchoice_updated_version","title":"<code>engine_forkchoice_updated_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At genesis, forkchoice updates cannot be sent through the engine API.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_forkchoice_updated_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    At genesis, forkchoice updates cannot be sent through the engine API.\n    \"\"\"\n    return cls.engine_new_payload_version(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.get_reward","title":"<code>get_reward(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Genesis the expected reward amount in wei is 5_000_000_000_000_000_000</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n    \"\"\"\n    At Genesis the expected reward amount in wei is\n    5_000_000_000_000_000_000\n    \"\"\"\n    return 5_000_000_000_000_000_000\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.tx_types","title":"<code>tx_types(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Genesis, only legacy transactions are allowed</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Genesis, only legacy transactions are allowed\n    \"\"\"\n    return [0]\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.precompiles","title":"<code>precompiles(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Genesis, no pre-compiles are allowed</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Genesis, no pre-compiles are allowed\n    \"\"\"\n    return []\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.pre_allocation","title":"<code>pre_allocation()</code>  <code>classmethod</code>","text":"<p>Returns whether the fork expects pre-allocation of accounts</p> <p>Frontier does not require pre-allocated accounts</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef pre_allocation(cls) -&gt; Mapping:\n    \"\"\"\n    Returns whether the fork expects pre-allocation of accounts\n\n    Frontier does not require pre-allocated accounts\n    \"\"\"\n    return {}\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Frontier.pre_allocation_blockchain","title":"<code>pre_allocation_blockchain()</code>  <code>classmethod</code>","text":"<p>Returns whether the fork expects pre-allocation of accounts</p> <p>Frontier does not require pre-allocated accounts</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef pre_allocation_blockchain(cls) -&gt; Mapping:\n    \"\"\"\n    Returns whether the fork expects pre-allocation of accounts\n\n    Frontier does not require pre-allocated accounts\n    \"\"\"\n    return {}\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.GrayGlacier","title":"<code>GrayGlacier</code>","text":"<p>               Bases: <code>ArrowGlacier</code></p> <p>Gray Glacier fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class GrayGlacier(ArrowGlacier, solc_name=\"london\", ignore=True):\n    \"\"\"\n    Gray Glacier fork\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Homestead","title":"<code>Homestead</code>","text":"<p>               Bases: <code>Frontier</code></p> <p>Homestead fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Homestead(Frontier):\n    \"\"\"\n    Homestead fork\n    \"\"\"\n\n    @classmethod\n    def precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Homestead, EC-recover, SHA256, RIPEMD160, and Identity pre-compiles are introduced\n        \"\"\"\n        return [1, 2, 3, 4] + super(Homestead, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Homestead.precompiles","title":"<code>precompiles(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Homestead, EC-recover, SHA256, RIPEMD160, and Identity pre-compiles are introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Homestead, EC-recover, SHA256, RIPEMD160, and Identity pre-compiles are introduced\n    \"\"\"\n    return [1, 2, 3, 4] + super(Homestead, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Istanbul","title":"<code>Istanbul</code>","text":"<p>               Bases: <code>ConstantinopleFix</code></p> <p>Istanbul fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Istanbul(ConstantinopleFix):\n    \"\"\"\n    Istanbul fork\n    \"\"\"\n\n    @classmethod\n    def precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Istanbul, pre-compile for blake2 compression is introduced\n        \"\"\"\n        return [9] + super(Istanbul, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Istanbul.precompiles","title":"<code>precompiles(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Istanbul, pre-compile for blake2 compression is introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Istanbul, pre-compile for blake2 compression is introduced\n    \"\"\"\n    return [9] + super(Istanbul, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.London","title":"<code>London</code>","text":"<p>               Bases: <code>Berlin</code></p> <p>London fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class London(Berlin):\n    \"\"\"\n    London fork\n    \"\"\"\n\n    @classmethod\n    def header_base_fee_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Base Fee is required starting from London.\n        \"\"\"\n        return True\n\n    @classmethod\n    def tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At London, dynamic fee transactions are introduced\n        \"\"\"\n        return [2] + super(London, cls).tx_types(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.London.header_base_fee_required","title":"<code>header_base_fee_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Base Fee is required starting from London.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_base_fee_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Base Fee is required starting from London.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.London.tx_types","title":"<code>tx_types(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At London, dynamic fee transactions are introduced</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef tx_types(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At London, dynamic fee transactions are introduced\n    \"\"\"\n    return [2] + super(London, cls).tx_types(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.MuirGlacier","title":"<code>MuirGlacier</code>","text":"<p>               Bases: <code>Istanbul</code></p> <p>Muir Glacier fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class MuirGlacier(Istanbul, solc_name=\"istanbul\", ignore=True):\n    \"\"\"\n    Muir Glacier fork\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Paris","title":"<code>Paris</code>","text":"<p>               Bases: <code>London</code></p> <p>Paris (Merge) fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Paris(\n    London,\n    transition_tool_name=\"Merge\",\n    blockchain_test_network_name=\"Paris\",\n):\n    \"\"\"\n    Paris (Merge) fork\n    \"\"\"\n\n    @classmethod\n    def header_prev_randao_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Prev Randao is required starting from Paris.\n        \"\"\"\n        return True\n\n    @classmethod\n    def header_zero_difficulty_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Zero difficulty is required starting from Paris.\n        \"\"\"\n        return True\n\n    @classmethod\n    def get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n        \"\"\"\n        Paris updates the reward to 0.\n        \"\"\"\n        return 0\n\n    @classmethod\n    def engine_new_payload_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        Starting at Paris, payloads can be sent through the engine API\n        \"\"\"\n        return 1\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Paris.header_prev_randao_required","title":"<code>header_prev_randao_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Prev Randao is required starting from Paris.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_prev_randao_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Prev Randao is required starting from Paris.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Paris.header_zero_difficulty_required","title":"<code>header_zero_difficulty_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Zero difficulty is required starting from Paris.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_zero_difficulty_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Zero difficulty is required starting from Paris.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Paris.get_reward","title":"<code>get_reward(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Paris updates the reward to 0.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef get_reward(cls, block_number: int = 0, timestamp: int = 0) -&gt; int:\n    \"\"\"\n    Paris updates the reward to 0.\n    \"\"\"\n    return 0\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Paris.engine_new_payload_version","title":"<code>engine_new_payload_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Starting at Paris, payloads can be sent through the engine API</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    Starting at Paris, payloads can be sent through the engine API\n    \"\"\"\n    return 1\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague","title":"<code>Prague</code>","text":"<p>               Bases: <code>Cancun</code></p> <p>Prague fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Prague(Cancun):\n    \"\"\"\n    Prague fork\n    \"\"\"\n\n    @classmethod\n    def is_deployed(cls) -&gt; bool:\n        \"\"\"\n        Flags that the fork has not been deployed to mainnet; it is under active\n        development.\n        \"\"\"\n        return False\n\n    @classmethod\n    def solc_min_version(cls) -&gt; Version:\n        \"\"\"\n        Returns the minimum version of solc that supports this fork.\n        \"\"\"\n        return Version.parse(\"1.0.0\")  # set a high version; currently unknown\n\n    @classmethod\n    def precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n        \"\"\"\n        At Prague, pre-compile for BLS operations are added:\n\n        G1ADD = 0x0B\n        G1MUL = 0x0C\n        G1MSM = 0x0D\n        G2ADD = 0x0E\n        G2MUL = 0x0F\n        G2MSM = 0x10\n        PAIRING = 0x11\n        MAP_FP_TO_G1 = 0x12\n        MAP_FP2_TO_G2 = 0x13\n        \"\"\"\n        return list(range(0xB, 0x13 + 1)) + super(Prague, cls).precompiles(block_number, timestamp)\n\n    @classmethod\n    def pre_allocation_blockchain(cls) -&gt; Mapping:\n        \"\"\"\n        Prague requires pre-allocation of the beacon chain deposit contract for EIP-6110,\n        the exits contract for EIP-7002, and the history storage contract for EIP-2935.\n        \"\"\"\n        new_allocation = {}\n\n        # Add the beacon chain deposit contract\n        DEPOSIT_CONTRACT_TREE_DEPTH = 32\n        storage = {}\n        next_hash = sha256(b\"\\x00\" * 64).digest()\n        for i in range(DEPOSIT_CONTRACT_TREE_DEPTH + 2, DEPOSIT_CONTRACT_TREE_DEPTH * 2 + 1):\n            storage[i] = next_hash\n            next_hash = sha256(next_hash + next_hash).digest()\n\n        with open(CURRENT_FOLDER / \"deposit_contract.bin\", mode=\"rb\") as f:\n            new_allocation.update(\n                {\n                    0x00000000219AB540356CBB839CBE05303D7705FA: {\n                        \"nonce\": 1,\n                        \"code\": f.read(),\n                        \"storage\": storage,\n                    }\n                }\n            )\n\n        # Add the withdrawal request contract\n        with open(CURRENT_FOLDER / \"withdrawal_request.bin\", mode=\"rb\") as f:\n            new_allocation.update(\n                {\n                    0x00A3CA265EBCB825B45F985A16CEFB49958CE017: {\n                        \"nonce\": 1,\n                        \"code\": f.read(),\n                    },\n                }\n            )\n\n        # Add the history storage contract\n        with open(CURRENT_FOLDER / \"history_contract.bin\", mode=\"rb\") as f:\n            new_allocation.update(\n                {\n                    0x25A219378DAD9B3503C8268C9CA836A52427A4FB: {\n                        \"nonce\": 1,\n                        \"code\": f.read(),\n                    }\n                }\n            )\n\n        return new_allocation | super(Prague, cls).pre_allocation_blockchain()\n\n    @classmethod\n    def header_requests_required(cls, block_number: int, timestamp: int) -&gt; bool:\n        \"\"\"\n        Prague requires that the execution layer block contains the beacon\n        chain requests.\n        \"\"\"\n        return True\n\n    @classmethod\n    def engine_new_payload_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        Starting at Prague, new payload calls must use version 4\n        \"\"\"\n        return 4\n\n    @classmethod\n    def engine_forkchoice_updated_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        At Prague, version number of NewPayload and ForkchoiceUpdated diverge.\n        \"\"\"\n        return 3\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.is_deployed","title":"<code>is_deployed()</code>  <code>classmethod</code>","text":"<p>Flags that the fork has not been deployed to mainnet; it is under active development.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef is_deployed(cls) -&gt; bool:\n    \"\"\"\n    Flags that the fork has not been deployed to mainnet; it is under active\n    development.\n    \"\"\"\n    return False\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.solc_min_version","title":"<code>solc_min_version()</code>  <code>classmethod</code>","text":"<p>Returns the minimum version of solc that supports this fork.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef solc_min_version(cls) -&gt; Version:\n    \"\"\"\n    Returns the minimum version of solc that supports this fork.\n    \"\"\"\n    return Version.parse(\"1.0.0\")  # set a high version; currently unknown\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.precompiles","title":"<code>precompiles(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Prague, pre-compile for BLS operations are added:</p> <p>G1ADD = 0x0B G1MUL = 0x0C G1MSM = 0x0D G2ADD = 0x0E G2MUL = 0x0F G2MSM = 0x10 PAIRING = 0x11 MAP_FP_TO_G1 = 0x12 MAP_FP2_TO_G2 = 0x13</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef precompiles(cls, block_number: int = 0, timestamp: int = 0) -&gt; List[int]:\n    \"\"\"\n    At Prague, pre-compile for BLS operations are added:\n\n    G1ADD = 0x0B\n    G1MUL = 0x0C\n    G1MSM = 0x0D\n    G2ADD = 0x0E\n    G2MUL = 0x0F\n    G2MSM = 0x10\n    PAIRING = 0x11\n    MAP_FP_TO_G1 = 0x12\n    MAP_FP2_TO_G2 = 0x13\n    \"\"\"\n    return list(range(0xB, 0x13 + 1)) + super(Prague, cls).precompiles(block_number, timestamp)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.pre_allocation_blockchain","title":"<code>pre_allocation_blockchain()</code>  <code>classmethod</code>","text":"<p>Prague requires pre-allocation of the beacon chain deposit contract for EIP-6110, the exits contract for EIP-7002, and the history storage contract for EIP-2935.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef pre_allocation_blockchain(cls) -&gt; Mapping:\n    \"\"\"\n    Prague requires pre-allocation of the beacon chain deposit contract for EIP-6110,\n    the exits contract for EIP-7002, and the history storage contract for EIP-2935.\n    \"\"\"\n    new_allocation = {}\n\n    # Add the beacon chain deposit contract\n    DEPOSIT_CONTRACT_TREE_DEPTH = 32\n    storage = {}\n    next_hash = sha256(b\"\\x00\" * 64).digest()\n    for i in range(DEPOSIT_CONTRACT_TREE_DEPTH + 2, DEPOSIT_CONTRACT_TREE_DEPTH * 2 + 1):\n        storage[i] = next_hash\n        next_hash = sha256(next_hash + next_hash).digest()\n\n    with open(CURRENT_FOLDER / \"deposit_contract.bin\", mode=\"rb\") as f:\n        new_allocation.update(\n            {\n                0x00000000219AB540356CBB839CBE05303D7705FA: {\n                    \"nonce\": 1,\n                    \"code\": f.read(),\n                    \"storage\": storage,\n                }\n            }\n        )\n\n    # Add the withdrawal request contract\n    with open(CURRENT_FOLDER / \"withdrawal_request.bin\", mode=\"rb\") as f:\n        new_allocation.update(\n            {\n                0x00A3CA265EBCB825B45F985A16CEFB49958CE017: {\n                    \"nonce\": 1,\n                    \"code\": f.read(),\n                },\n            }\n        )\n\n    # Add the history storage contract\n    with open(CURRENT_FOLDER / \"history_contract.bin\", mode=\"rb\") as f:\n        new_allocation.update(\n            {\n                0x25A219378DAD9B3503C8268C9CA836A52427A4FB: {\n                    \"nonce\": 1,\n                    \"code\": f.read(),\n                }\n            }\n        )\n\n    return new_allocation | super(Prague, cls).pre_allocation_blockchain()\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.header_requests_required","title":"<code>header_requests_required(block_number, timestamp)</code>  <code>classmethod</code>","text":"<p>Prague requires that the execution layer block contains the beacon chain requests.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_requests_required(cls, block_number: int, timestamp: int) -&gt; bool:\n    \"\"\"\n    Prague requires that the execution layer block contains the beacon\n    chain requests.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.engine_new_payload_version","title":"<code>engine_new_payload_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Starting at Prague, new payload calls must use version 4</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    Starting at Prague, new payload calls must use version 4\n    \"\"\"\n    return 4\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Prague.engine_forkchoice_updated_version","title":"<code>engine_forkchoice_updated_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>At Prague, version number of NewPayload and ForkchoiceUpdated diverge.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_forkchoice_updated_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    At Prague, version number of NewPayload and ForkchoiceUpdated diverge.\n    \"\"\"\n    return 3\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Shanghai","title":"<code>Shanghai</code>","text":"<p>               Bases: <code>Paris</code></p> <p>Shanghai fork</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>class Shanghai(Paris):\n    \"\"\"\n    Shanghai fork\n    \"\"\"\n\n    @classmethod\n    def header_withdrawals_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n        \"\"\"\n        Withdrawals are required starting from Shanghai.\n        \"\"\"\n        return True\n\n    @classmethod\n    def engine_new_payload_version(\n        cls, block_number: int = 0, timestamp: int = 0\n    ) -&gt; Optional[int]:\n        \"\"\"\n        Starting at Shanghai, new payload calls must use version 2\n        \"\"\"\n        return 2\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Shanghai.header_withdrawals_required","title":"<code>header_withdrawals_required(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Withdrawals are required starting from Shanghai.</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef header_withdrawals_required(cls, block_number: int = 0, timestamp: int = 0) -&gt; bool:\n    \"\"\"\n    Withdrawals are required starting from Shanghai.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.Shanghai.engine_new_payload_version","title":"<code>engine_new_payload_version(block_number=0, timestamp=0)</code>  <code>classmethod</code>","text":"<p>Starting at Shanghai, new payload calls must use version 2</p> Source code in <code>src/ethereum_test_forks/forks/forks.py</code> <pre><code>@classmethod\ndef engine_new_payload_version(\n    cls, block_number: int = 0, timestamp: int = 0\n) -&gt; Optional[int]:\n    \"\"\"\n    Starting at Shanghai, new payload calls must use version 2\n    \"\"\"\n    return 2\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.BerlinToLondonAt5","title":"<code>BerlinToLondonAt5</code>","text":"<p>               Bases: <code>Berlin</code></p> <p>Berlin to London transition at Block 5</p> Source code in <code>src/ethereum_test_forks/forks/transition.py</code> <pre><code>@transition_fork(to_fork=London, at_block=5)\nclass BerlinToLondonAt5(Berlin):\n    \"\"\"\n    Berlin to London transition at Block 5\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.ParisToShanghaiAtTime15k","title":"<code>ParisToShanghaiAtTime15k</code>","text":"<p>               Bases: <code>Paris</code></p> <p>Paris to Shanghai transition at Timestamp 15k</p> Source code in <code>src/ethereum_test_forks/forks/transition.py</code> <pre><code>@transition_fork(to_fork=Shanghai, at_timestamp=15_000)\nclass ParisToShanghaiAtTime15k(Paris, blockchain_test_network_name=\"ParisToShanghaiAtTime15k\"):\n    \"\"\"\n    Paris to Shanghai transition at Timestamp 15k\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.ShanghaiToCancunAtTime15k","title":"<code>ShanghaiToCancunAtTime15k</code>","text":"<p>               Bases: <code>Shanghai</code></p> <p>Shanghai to Cancun transition at Timestamp 15k</p> Source code in <code>src/ethereum_test_forks/forks/transition.py</code> <pre><code>@transition_fork(to_fork=Cancun, at_timestamp=15_000)\nclass ShanghaiToCancunAtTime15k(Shanghai):\n    \"\"\"\n    Shanghai to Cancun transition at Timestamp 15k\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.InvalidForkError","title":"<code>InvalidForkError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Invalid fork error raised when the fork specified by command-line option --latest-fork is not found.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>class InvalidForkError(Exception):\n    \"\"\"\n    Invalid fork error raised when the fork specified by command-line option\n    --latest-fork is not found.\n    \"\"\"\n\n    def __init__(self, message):\n        super().__init__(message)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.forks_from","title":"<code>forks_from(fork, deployed_only=True)</code>","text":"<p>Returns the specified fork and all forks after it.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def forks_from(fork: Fork, deployed_only: bool = True) -&gt; List[Fork]:\n    \"\"\"\n    Returns the specified fork and all forks after it.\n    \"\"\"\n    if deployed_only:\n        latest_fork = get_deployed_forks()[-1]\n    else:\n        latest_fork = get_forks()[-1]\n    return forks_from_until(fork, latest_fork)\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.forks_from_until","title":"<code>forks_from_until(fork_from, fork_until)</code>","text":"<p>Returns the specified fork and all forks after it until and including the second specified fork</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def forks_from_until(fork_from: Fork, fork_until: Fork) -&gt; List[Fork]:\n    \"\"\"\n    Returns the specified fork and all forks after it until and including the\n    second specified fork\n    \"\"\"\n    prev_fork = fork_until\n\n    forks: List[Fork] = []\n\n    while prev_fork != BaseFork and prev_fork != fork_from:\n        forks.insert(0, prev_fork)\n\n        prev_fork = prev_fork.__base__\n\n    if prev_fork == BaseFork:\n        return []\n\n    forks.insert(0, fork_from)\n\n    return forks\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_closest_fork_with_solc_support","title":"<code>get_closest_fork_with_solc_support(fork, solc_version)</code>","text":"<p>Returns the closest fork, potentially the provided fork itself, that has solc support.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_closest_fork_with_solc_support(fork: Fork, solc_version: Version) -&gt; Optional[Fork]:\n    \"\"\"\n    Returns the closest fork, potentially the provided fork itself, that has\n    solc support.\n    \"\"\"\n    if fork is BaseFork:\n        return None\n    return (\n        fork\n        if solc_version &gt;= fork.solc_min_version()\n        else get_closest_fork_with_solc_support(get_parent_fork(fork), solc_version)\n    )\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_deployed_forks","title":"<code>get_deployed_forks()</code>","text":"<p>Returns a list of all the fork classes implemented by <code>ethereum_test_forks</code> that have been deployed to mainnet, chronologically ordered by deployment.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_deployed_forks() -&gt; List[Fork]:\n    \"\"\"\n    Returns a list of all the fork classes implemented by `ethereum_test_forks`\n    that have been deployed to mainnet, chronologically ordered by deployment.\n    \"\"\"\n    return [fork for fork in get_forks() if fork.is_deployed()]\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_development_forks","title":"<code>get_development_forks()</code>","text":"<p>Returns a list of all the fork classes implemented by <code>ethereum_test_forks</code> that have been not yet deployed to mainnet and are currently under development. The list is ordered by their planned deployment date.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_development_forks() -&gt; List[Fork]:\n    \"\"\"\n    Returns a list of all the fork classes implemented by `ethereum_test_forks`\n    that have been not yet deployed to mainnet and are currently under\n    development. The list is ordered by their planned deployment date.\n    \"\"\"\n    return [fork for fork in get_forks() if not fork.is_deployed()]\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_forks","title":"<code>get_forks()</code>","text":"<p>Returns a list of all the fork classes implemented by <code>ethereum_test_forks</code> ordered chronologically by deployment.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_forks() -&gt; List[Fork]:\n    \"\"\"\n    Returns a list of all the fork classes implemented by\n    `ethereum_test_forks` ordered chronologically by deployment.\n    \"\"\"\n    all_forks: List[Fork] = []\n    for fork_name in forks.__dict__:\n        fork = forks.__dict__[fork_name]\n        if not isinstance(fork, type):\n            continue\n        if issubclass(fork, BaseFork) and fork is not BaseFork:\n            all_forks.append(fork)\n    return all_forks\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_forks_with_solc_support","title":"<code>get_forks_with_solc_support(solc_version)</code>","text":"<p>Returns a list of all fork classes that are supported by solc.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_forks_with_solc_support(solc_version: Version) -&gt; List[Fork]:\n    \"\"\"\n    Returns a list of all fork classes that are supported by solc.\n    \"\"\"\n    return [fork for fork in get_forks() if solc_version &gt;= fork.solc_min_version()]\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_forks_without_solc_support","title":"<code>get_forks_without_solc_support(solc_version)</code>","text":"<p>Returns a list of all fork classes that aren't supported by solc.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_forks_without_solc_support(solc_version: Version) -&gt; List[Fork]:\n    \"\"\"\n    Returns a list of all fork classes that aren't supported by solc.\n    \"\"\"\n    return [fork for fork in get_forks() if solc_version &lt; fork.solc_min_version()]\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.get_transition_forks","title":"<code>get_transition_forks()</code>","text":"<p>Returns all the transition forks</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def get_transition_forks() -&gt; List[Fork]:\n    \"\"\"\n    Returns all the transition forks\n    \"\"\"\n    transition_forks: List[Fork] = []\n\n    for fork_name in transition.__dict__:\n        fork = transition.__dict__[fork_name]\n        if not isinstance(fork, type):\n            continue\n        if issubclass(fork, TransitionBaseClass) and issubclass(fork, BaseFork):\n            transition_forks.append(fork)\n\n    return transition_forks\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.transition_fork_from_to","title":"<code>transition_fork_from_to(fork_from, fork_to)</code>","text":"<p>Returns the transition fork that transitions to and from the specified forks.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def transition_fork_from_to(fork_from: Fork, fork_to: Fork) -&gt; Fork | None:\n    \"\"\"\n    Returns the transition fork that transitions to and from the specified\n    forks.\n    \"\"\"\n    for transition_fork in get_transition_forks():\n        if not issubclass(transition_fork, TransitionBaseClass):\n            continue\n        if (\n            transition_fork.transitions_to() == fork_to\n            and transition_fork.transitions_from() == fork_from\n        ):\n            return transition_fork\n\n    return None\n</code></pre>"},{"location":"library/ethereum_test_forks/#ethereum_test_forks.transition_fork_to","title":"<code>transition_fork_to(fork_to)</code>","text":"<p>Returns the transition fork that transitions to the specified fork.</p> Source code in <code>src/ethereum_test_forks/helpers.py</code> <pre><code>def transition_fork_to(fork_to: Fork) -&gt; List[Fork]:\n    \"\"\"\n    Returns the transition fork that transitions to the specified fork.\n    \"\"\"\n    transition_forks: List[Fork] = []\n    for transition_fork in get_transition_forks():\n        if not issubclass(transition_fork, TransitionBaseClass):\n            continue\n        if transition_fork.transitions_to() == fork_to:\n            transition_forks.append(transition_fork)\n\n    return transition_forks\n</code></pre>"},{"location":"library/ethereum_test_tools/","title":"Ethereum Test Tools Package","text":"<p>Module containing tools for generating cross-client Ethereum execution layer tests.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CalldataCase","title":"<code>CalldataCase</code>  <code>dataclass</code>","text":"<p>Small helper class to represent a single case whose condition depends on the value of the contract's calldata in a Switch case statement.</p> <p>By default the calldata is read from position zero, but this can be overridden using <code>position</code>.</p> <p>The <code>condition</code> is generated automatically based on the <code>value</code> (and optionally <code>position</code>) and may not be set directly.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>@dataclass\nclass CalldataCase:\n    \"\"\"\n    Small helper class to represent a single case whose condition depends\n    on the value of the contract's calldata in a Switch case statement.\n\n    By default the calldata is read from position zero, but this can be\n    overridden using `position`.\n\n    The `condition` is generated automatically based on the `value` (and\n    optionally `position`) and may not be set directly.\n    \"\"\"\n\n    action: str | bytes | SupportsBytes\n    value: int | str | bytes | SupportsBytes\n    position: int = 0\n    condition: bytes = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        Generate the condition base on `value` and `position`.\n        \"\"\"\n        value_as_bytes = self.value\n        if not isinstance(self.value, int):\n            value_as_bytes = Op.PUSH32(to_bytes(self.value))\n        self.condition = Op.EQ(Op.CALLDATALOAD(self.position), value_as_bytes)\n        self.action = to_bytes(self.action)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CalldataCase.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Generate the condition base on <code>value</code> and <code>position</code>.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Generate the condition base on `value` and `position`.\n    \"\"\"\n    value_as_bytes = self.value\n    if not isinstance(self.value, int):\n        value_as_bytes = Op.PUSH32(to_bytes(self.value))\n    self.condition = Op.EQ(Op.CALLDATALOAD(self.position), value_as_bytes)\n    self.action = to_bytes(self.action)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Case","title":"<code>Case</code>  <code>dataclass</code>","text":"<p>Small helper class to represent a single, generic case in a <code>Switch</code> cases list.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>@dataclass\nclass Case:\n    \"\"\"\n    Small helper class to represent a single, generic case in a `Switch` cases\n    list.\n    \"\"\"\n\n    condition: str | bytes | SupportsBytes\n    action: str | bytes | SupportsBytes\n\n    def __post_init__(self):\n        \"\"\"\n        Ensure that the condition and action are of type bytes.\n        \"\"\"\n        self.condition = to_bytes(self.condition)\n        self.action = to_bytes(self.action)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Case.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Ensure that the condition and action are of type bytes.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Ensure that the condition and action are of type bytes.\n    \"\"\"\n    self.condition = to_bytes(self.condition)\n    self.action = to_bytes(self.action)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code","title":"<code>Code</code>","text":"<p>               Bases: <code>SupportsBytes</code>, <code>Sized</code></p> <p>Generic code object.</p> Source code in <code>src/ethereum_test_tools/code/code.py</code> <pre><code>class Code(SupportsBytes, Sized):\n    \"\"\"\n    Generic code object.\n    \"\"\"\n\n    bytecode: Optional[bytes] = None\n    \"\"\"\n    bytes array that represents the bytecode of this object.\n    \"\"\"\n    name: Optional[str] = None\n    \"\"\"\n    Name used to describe this code.\n    Usually used to add extra information to a test case.\n    \"\"\"\n\n    def __init__(\n        self,\n        code: Optional[str | bytes | SupportsBytes] = None,\n        *,\n        name: Optional[str] = None,\n    ):\n        \"\"\"\n        Create a new Code object.\n        \"\"\"\n        if code is not None:\n            self.bytecode = to_bytes(code)\n        self.name = name\n\n    def __bytes__(self) -&gt; bytes:\n        \"\"\"\n        Transform the Code object into bytes.\n        \"\"\"\n        if self.bytecode is None:\n            return bytes()\n        else:\n            return self.bytecode\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        Get the length of the Code object.\n        \"\"\"\n        if self.bytecode is None:\n            return 0\n        else:\n            return len(self.bytecode)\n\n    def __add__(self, other: str | bytes | SupportsBytes) -&gt; \"Code\":\n        \"\"\"\n        Adds two code objects together, by converting both to bytes first.\n        \"\"\"\n        return Code(to_bytes(self) + to_bytes(other))\n\n    def __radd__(self, other: str | bytes | SupportsBytes) -&gt; \"Code\":\n        \"\"\"\n        Adds two code objects together, by converting both to bytes first.\n        \"\"\"\n        return Code(to_bytes(other) + to_bytes(self))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.bytecode","title":"<code>bytecode: Optional[bytes] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>bytes array that represents the bytecode of this object.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.name","title":"<code>name: Optional[str] = name</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name used to describe this code. Usually used to add extra information to a test case.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.__init__","title":"<code>__init__(code=None, *, name=None)</code>","text":"<p>Create a new Code object.</p> Source code in <code>src/ethereum_test_tools/code/code.py</code> <pre><code>def __init__(\n    self,\n    code: Optional[str | bytes | SupportsBytes] = None,\n    *,\n    name: Optional[str] = None,\n):\n    \"\"\"\n    Create a new Code object.\n    \"\"\"\n    if code is not None:\n        self.bytecode = to_bytes(code)\n    self.name = name\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.__bytes__","title":"<code>__bytes__()</code>","text":"<p>Transform the Code object into bytes.</p> Source code in <code>src/ethereum_test_tools/code/code.py</code> <pre><code>def __bytes__(self) -&gt; bytes:\n    \"\"\"\n    Transform the Code object into bytes.\n    \"\"\"\n    if self.bytecode is None:\n        return bytes()\n    else:\n        return self.bytecode\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.__len__","title":"<code>__len__()</code>","text":"<p>Get the length of the Code object.</p> Source code in <code>src/ethereum_test_tools/code/code.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    Get the length of the Code object.\n    \"\"\"\n    if self.bytecode is None:\n        return 0\n    else:\n        return len(self.bytecode)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.__add__","title":"<code>__add__(other)</code>","text":"<p>Adds two code objects together, by converting both to bytes first.</p> Source code in <code>src/ethereum_test_tools/code/code.py</code> <pre><code>def __add__(self, other: str | bytes | SupportsBytes) -&gt; \"Code\":\n    \"\"\"\n    Adds two code objects together, by converting both to bytes first.\n    \"\"\"\n    return Code(to_bytes(self) + to_bytes(other))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Code.__radd__","title":"<code>__radd__(other)</code>","text":"<p>Adds two code objects together, by converting both to bytes first.</p> Source code in <code>src/ethereum_test_tools/code/code.py</code> <pre><code>def __radd__(self, other: str | bytes | SupportsBytes) -&gt; \"Code\":\n    \"\"\"\n    Adds two code objects together, by converting both to bytes first.\n    \"\"\"\n    return Code(to_bytes(other) + to_bytes(self))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CodeGasMeasure","title":"<code>CodeGasMeasure</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Code</code></p> <p>Helper class used to generate bytecode that measures gas usage of a bytecode, taking into account and subtracting any extra overhead gas costs required to execute. By default, the result gas calculation is saved to storage key 0.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>@dataclass(kw_only=True)\nclass CodeGasMeasure(Code):\n    \"\"\"\n    Helper class used to generate bytecode that measures gas usage of a\n    bytecode, taking into account and subtracting any extra overhead gas costs\n    required to execute.\n    By default, the result gas calculation is saved to storage key 0.\n    \"\"\"\n\n    code: str | bytes | SupportsBytes\n    \"\"\"\n    Bytecode to be executed to measure the gas usage.\n    \"\"\"\n    overhead_cost: int = 0\n    \"\"\"\n    Extra gas cost to be subtracted from extra operations.\n    \"\"\"\n    extra_stack_items: int = 0\n    \"\"\"\n    Extra stack items that remain at the end of the execution.\n    To be considered when subtracting the value of the previous GAS operation,\n    and to be popped at the end of the execution.\n    \"\"\"\n    sstore_key: int = 0\n    \"\"\"\n    Storage key to save the gas used.\n    \"\"\"\n\n    def __post_init__(self):\n        \"\"\"\n        Assemble the bytecode that measures gas usage.\n        \"\"\"\n        res = bytes()\n        res += bytes(\n            [\n                0x5A,  # GAS\n            ]\n        )\n        res += to_bytes(self.code)  # Execute code to measure its gas cost\n        res += bytes(\n            [\n                0x5A,  # GAS\n            ]\n        )\n        # We need to swap and pop for each extra stack item that remained from\n        # the execution of the code\n        res += (\n            bytes(\n                [\n                    0x90,  # SWAP1\n                    0x50,  # POP\n                ]\n            )\n            * self.extra_stack_items\n        )\n        res += bytes(\n            [\n                0x90,  # SWAP1\n                0x03,  # SUB\n                0x60,  # PUSH1\n                self.overhead_cost + 2,  # Overhead cost + GAS opcode price\n                0x90,  # SWAP1\n                0x03,  # SUB\n                0x60,  # PUSH1\n                self.sstore_key,  # -&gt; SSTORE key\n                0x55,  # SSTORE\n                0x00,  # STOP\n            ]\n        )\n        self.bytecode = res\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CodeGasMeasure.code","title":"<code>code: str | bytes | SupportsBytes</code>  <code>instance-attribute</code>","text":"<p>Bytecode to be executed to measure the gas usage.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CodeGasMeasure.overhead_cost","title":"<code>overhead_cost: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Extra gas cost to be subtracted from extra operations.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CodeGasMeasure.extra_stack_items","title":"<code>extra_stack_items: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Extra stack items that remain at the end of the execution. To be considered when subtracting the value of the previous GAS operation, and to be popped at the end of the execution.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CodeGasMeasure.sstore_key","title":"<code>sstore_key: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Storage key to save the gas used.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.CodeGasMeasure.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Assemble the bytecode that measures gas usage.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Assemble the bytecode that measures gas usage.\n    \"\"\"\n    res = bytes()\n    res += bytes(\n        [\n            0x5A,  # GAS\n        ]\n    )\n    res += to_bytes(self.code)  # Execute code to measure its gas cost\n    res += bytes(\n        [\n            0x5A,  # GAS\n        ]\n    )\n    # We need to swap and pop for each extra stack item that remained from\n    # the execution of the code\n    res += (\n        bytes(\n            [\n                0x90,  # SWAP1\n                0x50,  # POP\n            ]\n        )\n        * self.extra_stack_items\n    )\n    res += bytes(\n        [\n            0x90,  # SWAP1\n            0x03,  # SUB\n            0x60,  # PUSH1\n            self.overhead_cost + 2,  # Overhead cost + GAS opcode price\n            0x90,  # SWAP1\n            0x03,  # SUB\n            0x60,  # PUSH1\n            self.sstore_key,  # -&gt; SSTORE key\n            0x55,  # SSTORE\n            0x00,  # STOP\n        ]\n    )\n    self.bytecode = res\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Conditional","title":"<code>Conditional</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Code</code></p> <p>Helper class used to generate conditional bytecode.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>@dataclass(kw_only=True)\nclass Conditional(Code):\n    \"\"\"\n    Helper class used to generate conditional bytecode.\n    \"\"\"\n\n    condition: str | bytes | SupportsBytes\n    \"\"\"\n    Condition bytecode which must return the true or false condition of the conditional statement.\n    \"\"\"\n\n    if_true: str | bytes | SupportsBytes\n    \"\"\"\n    Bytecode to execute if the condition is true.\n    \"\"\"\n\n    if_false: str | bytes | SupportsBytes\n    \"\"\"\n    Bytecode to execute if the condition is false.\n    \"\"\"\n\n    def __post_init__(self):\n        \"\"\"\n        Assemble the conditional bytecode by generating the necessary jump and\n        jumpdest opcodes surrounding the condition and the two possible execution\n        paths.\n\n        In the future, PC usage should be replaced by using RJUMP and RJUMPI\n        \"\"\"\n        condition_bytes = to_bytes(self.condition)\n        if_true_bytes = to_bytes(self.if_true)\n        if_false_bytes = to_bytes(self.if_false)\n\n        # First we append a jumpdest to the start of the true branch\n        if_true_bytes = Op.JUMPDEST + if_true_bytes\n\n        # Then we append the unconditional jump to the end of the false branch, used to skip the\n        # true branch\n        if_false_bytes += Op.JUMP(Op.ADD(Op.PC, len(if_true_bytes) + 3))\n\n        # Then we need to do the conditional jump by skipping the false branch\n        condition_bytes = Op.JUMPI(Op.ADD(Op.PC, len(if_false_bytes) + 3), condition_bytes)\n\n        # Finally we append the true and false branches, and the condition, plus the jumpdest at\n        # the very end\n        self.bytecode = condition_bytes + if_false_bytes + if_true_bytes + Op.JUMPDEST\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Conditional.condition","title":"<code>condition: str | bytes | SupportsBytes</code>  <code>instance-attribute</code>","text":"<p>Condition bytecode which must return the true or false condition of the conditional statement.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Conditional.if_true","title":"<code>if_true: str | bytes | SupportsBytes</code>  <code>instance-attribute</code>","text":"<p>Bytecode to execute if the condition is true.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Conditional.if_false","title":"<code>if_false: str | bytes | SupportsBytes</code>  <code>instance-attribute</code>","text":"<p>Bytecode to execute if the condition is false.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Conditional.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Assemble the conditional bytecode by generating the necessary jump and jumpdest opcodes surrounding the condition and the two possible execution paths.</p> <p>In the future, PC usage should be replaced by using RJUMP and RJUMPI</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Assemble the conditional bytecode by generating the necessary jump and\n    jumpdest opcodes surrounding the condition and the two possible execution\n    paths.\n\n    In the future, PC usage should be replaced by using RJUMP and RJUMPI\n    \"\"\"\n    condition_bytes = to_bytes(self.condition)\n    if_true_bytes = to_bytes(self.if_true)\n    if_false_bytes = to_bytes(self.if_false)\n\n    # First we append a jumpdest to the start of the true branch\n    if_true_bytes = Op.JUMPDEST + if_true_bytes\n\n    # Then we append the unconditional jump to the end of the false branch, used to skip the\n    # true branch\n    if_false_bytes += Op.JUMP(Op.ADD(Op.PC, len(if_true_bytes) + 3))\n\n    # Then we need to do the conditional jump by skipping the false branch\n    condition_bytes = Op.JUMPI(Op.ADD(Op.PC, len(if_false_bytes) + 3), condition_bytes)\n\n    # Finally we append the true and false branches, and the condition, plus the jumpdest at\n    # the very end\n    self.bytecode = condition_bytes + if_false_bytes + if_true_bytes + Op.JUMPDEST\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Initcode","title":"<code>Initcode</code>","text":"<p>               Bases: <code>Code</code></p> <p>Helper class used to generate initcode for the specified deployment code.</p> <p>The execution gas cost of the initcode is calculated, and also the deployment gas costs for the deployed code.</p> <p>The initcode can be padded to a certain length if necessary, which does not affect the deployed code.</p> <p>Other costs such as the CREATE2 hashing costs or the initcode_word_cost of EIP-3860 are not taken into account by any of these calculated costs.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>class Initcode(Code):\n    \"\"\"\n    Helper class used to generate initcode for the specified deployment code.\n\n    The execution gas cost of the initcode is calculated, and also the\n    deployment gas costs for the deployed code.\n\n    The initcode can be padded to a certain length if necessary, which\n    does not affect the deployed code.\n\n    Other costs such as the CREATE2 hashing costs or the initcode_word_cost\n    of EIP-3860 are *not* taken into account by any of these calculated\n    costs.\n    \"\"\"\n\n    deploy_code: str | bytes | SupportsBytes\n    \"\"\"\n    Bytecode to be deployed by the initcode.\n    \"\"\"\n    execution_gas: int\n    \"\"\"\n    Gas cost of executing the initcode, without considering deployment gas\n    costs.\n    \"\"\"\n    deployment_gas: int\n    \"\"\"\n    Gas cost of deploying the cost, subtracted after initcode execution,\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        deploy_code: str | bytes | SupportsBytes,\n        initcode_length: Optional[int] = None,\n        initcode_prefix: str | bytes | SupportsBytes = b\"\",\n        initcode_prefix_execution_gas: int = 0,\n        padding_byte: int = 0x00,\n        name: Optional[str] = None,\n    ):\n        \"\"\"\n        Generate legacy initcode that inits a contract with the specified code.\n        The initcode can be padded to a specified length for testing purposes.\n        \"\"\"\n        self.execution_gas = initcode_prefix_execution_gas\n        self.deploy_code = deploy_code\n        deploy_code_bytes = to_bytes(self.deploy_code)\n        code_length = len(deploy_code_bytes)\n\n        initcode_prefix_bytes = to_bytes(initcode_prefix)\n        initcode = bytearray(initcode_prefix_bytes)\n\n        # PUSH2: length=&lt;bytecode length&gt;\n        initcode.append(0x61)\n        initcode += code_length.to_bytes(length=2, byteorder=\"big\")\n        self.execution_gas += 3\n\n        # PUSH1: offset=0\n        initcode.append(0x60)\n        initcode.append(0x00)\n        self.execution_gas += 3\n\n        # DUP2\n        initcode.append(0x81)\n        self.execution_gas += 3\n\n        # PUSH1: initcode_length=11 + len(initcode_prefix_bytes) (constant)\n        no_prefix_length = 0x0B\n        assert no_prefix_length + len(initcode_prefix_bytes) &lt;= 0xFF, \"initcode prefix too long\"\n        initcode.append(0x60)\n        initcode.append(no_prefix_length + len(initcode_prefix_bytes))\n        self.execution_gas += 3\n\n        # DUP3\n        initcode.append(0x82)\n        self.execution_gas += 3\n\n        # CODECOPY: destinationOffset=0, offset=0, length\n        initcode.append(0x39)\n        self.execution_gas += (\n            3\n            + (3 * ceiling_division(code_length, 32))\n            + (3 * code_length)\n            + ((code_length * code_length) // 512)\n        )\n\n        # RETURN: offset=0, length\n        initcode.append(0xF3)\n        self.execution_gas += 0\n\n        initcode_plus_deploy_code = bytes(initcode) + deploy_code_bytes\n        padding_bytes = bytes()\n\n        if initcode_length is not None:\n            assert initcode_length &gt;= len(\n                initcode_plus_deploy_code\n            ), \"specified invalid length for initcode\"\n\n            padding_bytes = bytes(\n                [padding_byte] * (initcode_length - len(initcode_plus_deploy_code))\n            )\n\n        self.deployment_gas = GAS_PER_DEPLOYED_CODE_BYTE * len(deploy_code_bytes)\n\n        super().__init__(initcode_plus_deploy_code + padding_bytes, name=name)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Initcode.deploy_code","title":"<code>deploy_code: str | bytes | SupportsBytes = deploy_code</code>  <code>instance-attribute</code>","text":"<p>Bytecode to be deployed by the initcode.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Initcode.execution_gas","title":"<code>execution_gas: int = initcode_prefix_execution_gas</code>  <code>instance-attribute</code>","text":"<p>Gas cost of executing the initcode, without considering deployment gas costs.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Initcode.deployment_gas","title":"<code>deployment_gas: int = GAS_PER_DEPLOYED_CODE_BYTE * len(deploy_code_bytes)</code>  <code>instance-attribute</code>","text":"<p>Gas cost of deploying the cost, subtracted after initcode execution,</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Initcode.__init__","title":"<code>__init__(*, deploy_code, initcode_length=None, initcode_prefix=b'', initcode_prefix_execution_gas=0, padding_byte=0, name=None)</code>","text":"<p>Generate legacy initcode that inits a contract with the specified code. The initcode can be padded to a specified length for testing purposes.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>def __init__(\n    self,\n    *,\n    deploy_code: str | bytes | SupportsBytes,\n    initcode_length: Optional[int] = None,\n    initcode_prefix: str | bytes | SupportsBytes = b\"\",\n    initcode_prefix_execution_gas: int = 0,\n    padding_byte: int = 0x00,\n    name: Optional[str] = None,\n):\n    \"\"\"\n    Generate legacy initcode that inits a contract with the specified code.\n    The initcode can be padded to a specified length for testing purposes.\n    \"\"\"\n    self.execution_gas = initcode_prefix_execution_gas\n    self.deploy_code = deploy_code\n    deploy_code_bytes = to_bytes(self.deploy_code)\n    code_length = len(deploy_code_bytes)\n\n    initcode_prefix_bytes = to_bytes(initcode_prefix)\n    initcode = bytearray(initcode_prefix_bytes)\n\n    # PUSH2: length=&lt;bytecode length&gt;\n    initcode.append(0x61)\n    initcode += code_length.to_bytes(length=2, byteorder=\"big\")\n    self.execution_gas += 3\n\n    # PUSH1: offset=0\n    initcode.append(0x60)\n    initcode.append(0x00)\n    self.execution_gas += 3\n\n    # DUP2\n    initcode.append(0x81)\n    self.execution_gas += 3\n\n    # PUSH1: initcode_length=11 + len(initcode_prefix_bytes) (constant)\n    no_prefix_length = 0x0B\n    assert no_prefix_length + len(initcode_prefix_bytes) &lt;= 0xFF, \"initcode prefix too long\"\n    initcode.append(0x60)\n    initcode.append(no_prefix_length + len(initcode_prefix_bytes))\n    self.execution_gas += 3\n\n    # DUP3\n    initcode.append(0x82)\n    self.execution_gas += 3\n\n    # CODECOPY: destinationOffset=0, offset=0, length\n    initcode.append(0x39)\n    self.execution_gas += (\n        3\n        + (3 * ceiling_division(code_length, 32))\n        + (3 * code_length)\n        + ((code_length * code_length) // 512)\n    )\n\n    # RETURN: offset=0, length\n    initcode.append(0xF3)\n    self.execution_gas += 0\n\n    initcode_plus_deploy_code = bytes(initcode) + deploy_code_bytes\n    padding_bytes = bytes()\n\n    if initcode_length is not None:\n        assert initcode_length &gt;= len(\n            initcode_plus_deploy_code\n        ), \"specified invalid length for initcode\"\n\n        padding_bytes = bytes(\n            [padding_byte] * (initcode_length - len(initcode_plus_deploy_code))\n        )\n\n    self.deployment_gas = GAS_PER_DEPLOYED_CODE_BYTE * len(deploy_code_bytes)\n\n    super().__init__(initcode_plus_deploy_code + padding_bytes, name=name)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Switch","title":"<code>Switch</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Code</code></p> <p>Helper class used to generate switch-case expressions in EVM bytecode.</p> Switch-case behavior <ul> <li>If no condition is met in the list of BytecodeCases conditions,     the <code>default_action</code> bytecode is executed.</li> <li>If multiple conditions are met, the action from the first valid     condition is the only one executed.</li> <li>There is no fall through; it is not possible to execute multiple     actions.</li> </ul> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>@dataclass(kw_only=True)\nclass Switch(Code):\n    \"\"\"\n    Helper class used to generate switch-case expressions in EVM bytecode.\n\n    Switch-case behavior:\n        - If no condition is met in the list of BytecodeCases conditions,\n            the `default_action` bytecode is executed.\n        - If multiple conditions are met, the action from the first valid\n            condition is the only one executed.\n        - There is no fall through; it is not possible to execute multiple\n            actions.\n    \"\"\"\n\n    default_action: str | bytes | SupportsBytes\n    \"\"\"\n    The default bytecode to execute; if no condition is met, this bytecode is\n    executed.\n    \"\"\"\n\n    cases: List[Case | CalldataCase]\n    \"\"\"\n    A list of Case or CalldataCase: The first element with a condition that\n    evaluates to a non-zero value is the one that is executed.\n    \"\"\"\n\n    def __post_init__(self):\n        \"\"\"\n        Assemble the bytecode by looping over the list of cases and adding\n        the necessary JUMPI and JUMPDEST opcodes in order to replicate\n        switch-case behavior.\n\n        In the future, PC usage should be replaced by using RJUMP and RJUMPI.\n        \"\"\"\n        # The length required to jump over subsequent actions to the final JUMPDEST at the end\n        # of the switch-case block:\n        # - add 6 per case for the length of the JUMPDEST and JUMP(ADD(PC, action_jump_length))\n        #   bytecode\n        # - add 3 to the total to account for this action's JUMP; the PC within the call\n        #   requires a \"correction\" of 3.\n        action_jump_length = sum(len(case.action) + 6 for case in self.cases) + 3\n\n        # All conditions get pre-pended to this bytecode; if none are met, we reach the default\n        self.bytecode = to_bytes(self.default_action) + Op.JUMP(Op.ADD(Op.PC, action_jump_length))\n\n        # The length required to jump over the default action and its JUMP bytecode\n        condition_jump_length = len(self.bytecode) + 3\n\n        # Reversed: first case in the list has priority; it will become the outer-most onion layer.\n        # We build up layers around the default_action, after 1 iteration of the loop, a simplified\n        # representation of the bytecode is:\n        #\n        #  JUMPI(case[n-1].condition)\n        #  + default_action + JUMP()\n        #  + JUMPDEST + case[n-1].action + JUMP()\n        #\n        # and after n=len(cases) iterations:\n        #\n        #  JUMPI(case[0].condition)\n        #  + JUMPI(case[1].condition)\n        #    ...\n        #  + JUMPI(case[n-1].condition)\n        #  + default_action + JUMP()\n        #  + JUMPDEST + case[n-1].action + JUMP()\n        #  + ...\n        #  + JUMPDEST + case[1].action + JUMP()\n        #  + JUMPDEST + case[0].action + JUMP()\n        #\n        for case in reversed(self.cases):\n            action_jump_length -= len(case.action) + 6\n            action = Op.JUMPDEST + case.action + Op.JUMP(Op.ADD(Op.PC, action_jump_length))\n            condition = Op.JUMPI(Op.ADD(Op.PC, condition_jump_length), case.condition)\n            # wrap the current case around the onion as its next layer\n            self.bytecode = condition + self.bytecode + action\n            condition_jump_length += len(condition) + len(action)\n\n        self.bytecode += Op.JUMPDEST\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Switch.default_action","title":"<code>default_action: str | bytes | SupportsBytes</code>  <code>instance-attribute</code>","text":"<p>The default bytecode to execute; if no condition is met, this bytecode is executed.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Switch.cases","title":"<code>cases: List[Case | CalldataCase]</code>  <code>instance-attribute</code>","text":"<p>A list of Case or CalldataCase: The first element with a condition that evaluates to a non-zero value is the one that is executed.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Switch.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Assemble the bytecode by looping over the list of cases and adding the necessary JUMPI and JUMPDEST opcodes in order to replicate switch-case behavior.</p> <p>In the future, PC usage should be replaced by using RJUMP and RJUMPI.</p> Source code in <code>src/ethereum_test_tools/code/generators.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Assemble the bytecode by looping over the list of cases and adding\n    the necessary JUMPI and JUMPDEST opcodes in order to replicate\n    switch-case behavior.\n\n    In the future, PC usage should be replaced by using RJUMP and RJUMPI.\n    \"\"\"\n    # The length required to jump over subsequent actions to the final JUMPDEST at the end\n    # of the switch-case block:\n    # - add 6 per case for the length of the JUMPDEST and JUMP(ADD(PC, action_jump_length))\n    #   bytecode\n    # - add 3 to the total to account for this action's JUMP; the PC within the call\n    #   requires a \"correction\" of 3.\n    action_jump_length = sum(len(case.action) + 6 for case in self.cases) + 3\n\n    # All conditions get pre-pended to this bytecode; if none are met, we reach the default\n    self.bytecode = to_bytes(self.default_action) + Op.JUMP(Op.ADD(Op.PC, action_jump_length))\n\n    # The length required to jump over the default action and its JUMP bytecode\n    condition_jump_length = len(self.bytecode) + 3\n\n    # Reversed: first case in the list has priority; it will become the outer-most onion layer.\n    # We build up layers around the default_action, after 1 iteration of the loop, a simplified\n    # representation of the bytecode is:\n    #\n    #  JUMPI(case[n-1].condition)\n    #  + default_action + JUMP()\n    #  + JUMPDEST + case[n-1].action + JUMP()\n    #\n    # and after n=len(cases) iterations:\n    #\n    #  JUMPI(case[0].condition)\n    #  + JUMPI(case[1].condition)\n    #    ...\n    #  + JUMPI(case[n-1].condition)\n    #  + default_action + JUMP()\n    #  + JUMPDEST + case[n-1].action + JUMP()\n    #  + ...\n    #  + JUMPDEST + case[1].action + JUMP()\n    #  + JUMPDEST + case[0].action + JUMP()\n    #\n    for case in reversed(self.cases):\n        action_jump_length -= len(case.action) + 6\n        action = Op.JUMPDEST + case.action + Op.JUMP(Op.ADD(Op.PC, action_jump_length))\n        condition = Op.JUMPI(Op.ADD(Op.PC, condition_jump_length), case.condition)\n        # wrap the current case around the onion as its next layer\n        self.bytecode = condition + self.bytecode + action\n        condition_jump_length += len(condition) + len(action)\n\n    self.bytecode += Op.JUMPDEST\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Yul","title":"<code>Yul</code>","text":"<p>               Bases: <code>Solc</code>, <code>SupportsBytes</code>, <code>Sized</code></p> <p>Yul compiler. Compiles Yul source code into bytecode.</p> Source code in <code>src/ethereum_test_tools/code/yul.py</code> <pre><code>class Yul(Solc, SupportsBytes, Sized):\n    \"\"\"\n    Yul compiler.\n    Compiles Yul source code into bytecode.\n    \"\"\"\n\n    source: str\n    evm_version: str | None\n\n    def __init__(\n        self,\n        source: str,\n        fork: Optional[Fork] = None,\n        binary: Optional[Path | str] = None,\n    ):\n        super().__init__(binary)\n        self.source = source\n        self.evm_version = fork.solc_name() if fork else None\n\n    @cached_property\n    def compiled(self) -&gt; bytes:\n        \"\"\"Returns the compiled Yul source code.\"\"\"\n        solc_args = (\"--evm-version\", self.evm_version) if self.evm_version else ()\n\n        result = self.run(*solc_args, *DEFAULT_SOLC_ARGS, input=self.source)\n\n        if result.returncode:\n            stderr_lines = result.stderr.splitlines()\n            stderr_message = \"\\n\".join(line.strip() for line in stderr_lines)\n            raise Exception(f\"failed to compile yul source:\\n{stderr_message[7:]}\")\n\n        lines = result.stdout.splitlines()\n\n        hex_str = lines[lines.index(\"Binary representation:\") + 1]\n\n        return bytes.fromhex(hex_str)\n\n    def __bytes__(self) -&gt; bytes:\n        \"\"\"\n        Assembles using `solc --assemble`.\n        \"\"\"\n        return self.compiled\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        Get the length of the Yul bytecode.\n        \"\"\"\n        return len(bytes(self))\n\n    def __add__(self, other: str | bytes | SupportsBytes) -&gt; Code:\n        \"\"\"\n        Adds two code objects together, by converting both to bytes first.\n        \"\"\"\n        return Code(bytes(self) + to_bytes(other))\n\n    def __radd__(self, other: str | bytes | SupportsBytes) -&gt; Code:\n        \"\"\"\n        Adds two code objects together, by converting both to bytes first.\n        \"\"\"\n        return Code(to_bytes(other) + bytes(self))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Yul.compiled","title":"<code>compiled: bytes</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the compiled Yul source code.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Yul.__bytes__","title":"<code>__bytes__()</code>","text":"<p>Assembles using <code>solc --assemble</code>.</p> Source code in <code>src/ethereum_test_tools/code/yul.py</code> <pre><code>def __bytes__(self) -&gt; bytes:\n    \"\"\"\n    Assembles using `solc --assemble`.\n    \"\"\"\n    return self.compiled\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Yul.__len__","title":"<code>__len__()</code>","text":"<p>Get the length of the Yul bytecode.</p> Source code in <code>src/ethereum_test_tools/code/yul.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    Get the length of the Yul bytecode.\n    \"\"\"\n    return len(bytes(self))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Yul.__add__","title":"<code>__add__(other)</code>","text":"<p>Adds two code objects together, by converting both to bytes first.</p> Source code in <code>src/ethereum_test_tools/code/yul.py</code> <pre><code>def __add__(self, other: str | bytes | SupportsBytes) -&gt; Code:\n    \"\"\"\n    Adds two code objects together, by converting both to bytes first.\n    \"\"\"\n    return Code(bytes(self) + to_bytes(other))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Yul.__radd__","title":"<code>__radd__(other)</code>","text":"<p>Adds two code objects together, by converting both to bytes first.</p> Source code in <code>src/ethereum_test_tools/code/yul.py</code> <pre><code>def __radd__(self, other: str | bytes | SupportsBytes) -&gt; Code:\n    \"\"\"\n    Adds two code objects together, by converting both to bytes first.\n    \"\"\"\n    return Code(to_bytes(other) + bytes(self))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.AccessList","title":"<code>AccessList</code>","text":"<p>               Bases: <code>CamelModel</code></p> <p>Access List for transactions.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class AccessList(CamelModel):\n    \"\"\"\n    Access List for transactions.\n    \"\"\"\n\n    address: Address\n    storage_keys: List[Hash]\n\n    def to_list(self) -&gt; List[Address | List[Hash]]:\n        \"\"\"\n        Returns the access list as a list of serializable elements.\n        \"\"\"\n        return [self.address, self.storage_keys]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.AccessList.to_list","title":"<code>to_list()</code>","text":"<p>Returns the access list as a list of serializable elements.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def to_list(self) -&gt; List[Address | List[Hash]]:\n    \"\"\"\n    Returns the access list as a list of serializable elements.\n    \"\"\"\n    return [self.address, self.storage_keys]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account","title":"<code>Account</code>","text":"<p>               Bases: <code>CopyValidateModel</code></p> <p>State associated with an address.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Account(CopyValidateModel):\n    \"\"\"\n    State associated with an address.\n    \"\"\"\n\n    nonce: ZeroPaddedHexNumber = ZeroPaddedHexNumber(0)\n    \"\"\"\n    The scalar value equal to a) the number of transactions sent by\n    an Externally Owned Account, b) the amount of contracts created by a\n    contract.\n    \"\"\"\n    balance: ZeroPaddedHexNumber = ZeroPaddedHexNumber(0)\n    \"\"\"\n    The amount of Wei (10&lt;sup&gt;-18&lt;/sup&gt; Eth) the account has.\n    \"\"\"\n    code: Bytes = Bytes(b\"\")\n    \"\"\"\n    Bytecode contained by the account.\n    \"\"\"\n    storage: Storage = Field(default_factory=Storage)\n    \"\"\"\n    Storage within a contract.\n    \"\"\"\n\n    NONEXISTENT: ClassVar[None] = None\n    \"\"\"\n    Sentinel object used to specify when an account should not exist in the\n    state.\n    \"\"\"\n\n    @dataclass(kw_only=True)\n    class NonceMismatch(Exception):\n        \"\"\"\n        Test expected a certain nonce value for an account but a different\n        value was found.\n        \"\"\"\n\n        address: Address\n        want: int | None\n        got: int | None\n\n        def __init__(self, address: Address, want: int | None, got: int | None, *args):\n            super().__init__(args)\n            self.address = address\n            self.want = want\n            self.got = got\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return (\n                f\"unexpected nonce for account {self.address}: \"\n                + f\"want {self.want}, got {self.got}\"\n            )\n\n    @dataclass(kw_only=True)\n    class BalanceMismatch(Exception):\n        \"\"\"\n        Test expected a certain balance for an account but a different\n        value was found.\n        \"\"\"\n\n        address: Address\n        want: int | None\n        got: int | None\n\n        def __init__(self, address: Address, want: int | None, got: int | None, *args):\n            super().__init__(args)\n            self.address = address\n            self.want = want\n            self.got = got\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return (\n                f\"unexpected balance for account {self.address}: \"\n                + f\"want {self.want}, got {self.got}\"\n            )\n\n    @dataclass(kw_only=True)\n    class CodeMismatch(Exception):\n        \"\"\"\n        Test expected a certain bytecode for an account but a different\n        one was found.\n        \"\"\"\n\n        address: Address\n        want: bytes | None\n        got: bytes | None\n\n        def __init__(self, address: Address, want: bytes | None, got: bytes | None, *args):\n            super().__init__(args)\n            self.address = address\n            self.want = want\n            self.got = got\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return (\n                f\"unexpected code for account {self.address}: \"\n                + f\"want {self.want}, got {self.got}\"\n            )\n\n    def check_alloc(self: \"Account\", address: Address, account: \"Account\"):\n        \"\"\"\n        Checks the returned alloc against an expected account in post state.\n        Raises exception on failure.\n        \"\"\"\n        if \"nonce\" in self.model_fields_set:\n            if self.nonce != account.nonce:\n                raise Account.NonceMismatch(\n                    address=address,\n                    want=self.nonce,\n                    got=account.nonce,\n                )\n\n        if \"balance\" in self.model_fields_set:\n            if self.balance != account.balance:\n                raise Account.BalanceMismatch(\n                    address=address,\n                    want=self.balance,\n                    got=account.balance,\n                )\n\n        if \"code\" in self.model_fields_set:\n            if self.code != account.code:\n                raise Account.CodeMismatch(\n                    address=address,\n                    want=self.code,\n                    got=account.code,\n                )\n\n        if \"storage\" in self.model_fields_set:\n            self.storage.must_be_equal(address=address, other=account.storage)\n\n    def __bool__(self: \"Account\") -&gt; bool:\n        \"\"\"\n        Returns True on a non-empty account.\n        \"\"\"\n        return any((self.nonce, self.balance, self.code, self.storage))\n\n    @classmethod\n    def with_code(cls: Type, code: BytesConvertible) -&gt; \"Account\":\n        \"\"\"\n        Create account with provided `code` and nonce of `1`.\n        \"\"\"\n        return Account(nonce=HexNumber(1), code=Bytes(code))\n\n    @classmethod\n    def merge(\n        cls: Type, account_1: \"Dict | Account | None\", account_2: \"Dict | Account | None\"\n    ) -&gt; \"Account\":\n        \"\"\"\n        Create a merged account from two sources.\n        \"\"\"\n\n        def to_kwargs_dict(account: \"Dict | Account | None\") -&gt; Dict:\n            if account is None:\n                return {}\n            if isinstance(account, dict):\n                return account\n            elif isinstance(account, cls):\n                return account.model_dump(exclude_unset=True)\n            raise TypeError(f\"Unexpected type for account merge: {type(account)}\")\n\n        kwargs = to_kwargs_dict(account_1)\n        kwargs.update(to_kwargs_dict(account_2))\n\n        return cls(**kwargs)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.nonce","title":"<code>nonce: ZeroPaddedHexNumber = ZeroPaddedHexNumber(0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The scalar value equal to a) the number of transactions sent by an Externally Owned Account, b) the amount of contracts created by a contract.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.balance","title":"<code>balance: ZeroPaddedHexNumber = ZeroPaddedHexNumber(0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The amount of Wei (10<sup>-18</sup> Eth) the account has.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.code","title":"<code>code: Bytes = Bytes(b'')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Bytecode contained by the account.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.storage","title":"<code>storage: Storage = Field(default_factory=Storage)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Storage within a contract.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.NONEXISTENT","title":"<code>NONEXISTENT: None = None</code>  <code>class-attribute</code>","text":"<p>Sentinel object used to specify when an account should not exist in the state.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.NonceMismatch","title":"<code>NonceMismatch</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Test expected a certain nonce value for an account but a different value was found.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass NonceMismatch(Exception):\n    \"\"\"\n    Test expected a certain nonce value for an account but a different\n    value was found.\n    \"\"\"\n\n    address: Address\n    want: int | None\n    got: int | None\n\n    def __init__(self, address: Address, want: int | None, got: int | None, *args):\n        super().__init__(args)\n        self.address = address\n        self.want = want\n        self.got = got\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return (\n            f\"unexpected nonce for account {self.address}: \"\n            + f\"want {self.want}, got {self.got}\"\n        )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.NonceMismatch.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return (\n        f\"unexpected nonce for account {self.address}: \"\n        + f\"want {self.want}, got {self.got}\"\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.BalanceMismatch","title":"<code>BalanceMismatch</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Test expected a certain balance for an account but a different value was found.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass BalanceMismatch(Exception):\n    \"\"\"\n    Test expected a certain balance for an account but a different\n    value was found.\n    \"\"\"\n\n    address: Address\n    want: int | None\n    got: int | None\n\n    def __init__(self, address: Address, want: int | None, got: int | None, *args):\n        super().__init__(args)\n        self.address = address\n        self.want = want\n        self.got = got\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return (\n            f\"unexpected balance for account {self.address}: \"\n            + f\"want {self.want}, got {self.got}\"\n        )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.BalanceMismatch.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return (\n        f\"unexpected balance for account {self.address}: \"\n        + f\"want {self.want}, got {self.got}\"\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.CodeMismatch","title":"<code>CodeMismatch</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Test expected a certain bytecode for an account but a different one was found.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass CodeMismatch(Exception):\n    \"\"\"\n    Test expected a certain bytecode for an account but a different\n    one was found.\n    \"\"\"\n\n    address: Address\n    want: bytes | None\n    got: bytes | None\n\n    def __init__(self, address: Address, want: bytes | None, got: bytes | None, *args):\n        super().__init__(args)\n        self.address = address\n        self.want = want\n        self.got = got\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return (\n            f\"unexpected code for account {self.address}: \"\n            + f\"want {self.want}, got {self.got}\"\n        )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.CodeMismatch.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return (\n        f\"unexpected code for account {self.address}: \"\n        + f\"want {self.want}, got {self.got}\"\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.check_alloc","title":"<code>check_alloc(address, account)</code>","text":"<p>Checks the returned alloc against an expected account in post state. Raises exception on failure.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def check_alloc(self: \"Account\", address: Address, account: \"Account\"):\n    \"\"\"\n    Checks the returned alloc against an expected account in post state.\n    Raises exception on failure.\n    \"\"\"\n    if \"nonce\" in self.model_fields_set:\n        if self.nonce != account.nonce:\n            raise Account.NonceMismatch(\n                address=address,\n                want=self.nonce,\n                got=account.nonce,\n            )\n\n    if \"balance\" in self.model_fields_set:\n        if self.balance != account.balance:\n            raise Account.BalanceMismatch(\n                address=address,\n                want=self.balance,\n                got=account.balance,\n            )\n\n    if \"code\" in self.model_fields_set:\n        if self.code != account.code:\n            raise Account.CodeMismatch(\n                address=address,\n                want=self.code,\n                got=account.code,\n            )\n\n    if \"storage\" in self.model_fields_set:\n        self.storage.must_be_equal(address=address, other=account.storage)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.__bool__","title":"<code>__bool__()</code>","text":"<p>Returns True on a non-empty account.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __bool__(self: \"Account\") -&gt; bool:\n    \"\"\"\n    Returns True on a non-empty account.\n    \"\"\"\n    return any((self.nonce, self.balance, self.code, self.storage))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.with_code","title":"<code>with_code(code)</code>  <code>classmethod</code>","text":"<p>Create account with provided <code>code</code> and nonce of <code>1</code>.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@classmethod\ndef with_code(cls: Type, code: BytesConvertible) -&gt; \"Account\":\n    \"\"\"\n    Create account with provided `code` and nonce of `1`.\n    \"\"\"\n    return Account(nonce=HexNumber(1), code=Bytes(code))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Account.merge","title":"<code>merge(account_1, account_2)</code>  <code>classmethod</code>","text":"<p>Create a merged account from two sources.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@classmethod\ndef merge(\n    cls: Type, account_1: \"Dict | Account | None\", account_2: \"Dict | Account | None\"\n) -&gt; \"Account\":\n    \"\"\"\n    Create a merged account from two sources.\n    \"\"\"\n\n    def to_kwargs_dict(account: \"Dict | Account | None\") -&gt; Dict:\n        if account is None:\n            return {}\n        if isinstance(account, dict):\n            return account\n        elif isinstance(account, cls):\n            return account.model_dump(exclude_unset=True)\n        raise TypeError(f\"Unexpected type for account merge: {type(account)}\")\n\n    kwargs = to_kwargs_dict(account_1)\n    kwargs.update(to_kwargs_dict(account_2))\n\n    return cls(**kwargs)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Address","title":"<code>Address</code>","text":"<p>               Bases: <code>FixedSizeBytes[20]</code></p> <p>Class that helps represent Ethereum addresses in tests.</p> Source code in <code>src/ethereum_test_tools/common/base_types.py</code> <pre><code>class Address(FixedSizeBytes[20]):  # type: ignore\n    \"\"\"\n    Class that helps represent Ethereum addresses in tests.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc","title":"<code>Alloc</code>","text":"<p>               Bases: <code>RootModel[Dict[Address, Account | None]]</code></p> <p>Allocation of accounts in the state, pre and post test execution.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Alloc(RootModel[Dict[Address, Account | None]]):\n    \"\"\"\n    Allocation of accounts in the state, pre and post test execution.\n    \"\"\"\n\n    root: Dict[Address, Account | None] = Field(default_factory=dict, validate_default=True)\n\n    @dataclass(kw_only=True)\n    class UnexpectedAccount(Exception):\n        \"\"\"\n        Unexpected account found in the allocation.\n        \"\"\"\n\n        address: Address\n        account: Account | None\n\n        def __init__(self, address: Address, account: Account | None, *args):\n            super().__init__(args)\n            self.address = address\n            self.account = account\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return f\"unexpected account in allocation {self.address}: {self.account}\"\n\n    @dataclass(kw_only=True)\n    class MissingAccount(Exception):\n        \"\"\"\n        Expected account not found in the allocation.\n        \"\"\"\n\n        address: Address\n\n        def __init__(self, address: Address, *args):\n            super().__init__(args)\n            self.address = address\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return f\"Account missing from allocation {self.address}\"\n\n    @classmethod\n    def merge(cls, alloc_1: \"Alloc\", alloc_2: \"Alloc\") -&gt; \"Alloc\":\n        \"\"\"\n        Returns the merged allocation of two sources.\n        \"\"\"\n        merged = alloc_1.model_dump()\n\n        for address, other_account in alloc_2.root.items():\n            merged_account = Account.merge(merged.get(address, None), other_account)\n            if merged_account:\n                merged[address] = merged_account\n            elif address in merged:\n                merged.pop(address, None)\n\n        return Alloc(merged)\n\n    def __iter__(self):\n        \"\"\"\n        Returns an iterator over the allocation.\n        \"\"\"\n        return iter(self.root)\n\n    def __getitem__(self, address: Address | FixedSizeBytesConvertible) -&gt; Account | None:\n        \"\"\"\n        Returns the account associated with an address.\n        \"\"\"\n        if not isinstance(address, Address):\n            address = Address(address)\n        return self.root[address]\n\n    def __setitem__(self, address: Address | FixedSizeBytesConvertible, account: Account | None):\n        \"\"\"\n        Sets the account associated with an address.\n        \"\"\"\n        if not isinstance(address, Address):\n            address = Address(address)\n        self.root[address] = account\n\n    def __delitem__(self, address: Address | FixedSizeBytesConvertible):\n        \"\"\"\n        Deletes the account associated with an address.\n        \"\"\"\n        if not isinstance(address, Address):\n            address = Address(address)\n        self.root.pop(address, None)\n\n    def __contains__(self, address: Address | FixedSizeBytesConvertible) -&gt; bool:\n        \"\"\"\n        Checks if an account is in the allocation.\n        \"\"\"\n        if not isinstance(address, Address):\n            address = Address(address)\n        return address in self.root\n\n    def empty_accounts(self) -&gt; List[Address]:\n        \"\"\"\n        Returns a list of addresses of empty accounts.\n        \"\"\"\n        return [address for address, account in self.root.items() if not account]\n\n    def state_root(self) -&gt; bytes:\n        \"\"\"\n        Returns the state root of the allocation.\n        \"\"\"\n        state = State()\n        for address, account in self.root.items():\n            if account is None:\n                continue\n            set_account(\n                state=state,\n                address=FrontierAddress(address),\n                account=FrontierAccount(\n                    nonce=Uint(account.nonce) if account.nonce is not None else Uint(0),\n                    balance=(U256(account.balance) if account.balance is not None else U256(0)),\n                    code=account.code if account.code is not None else b\"\",\n                ),\n            )\n            if account.storage is not None:\n                for key, value in account.storage.root.items():\n                    set_storage(\n                        state=state,\n                        address=FrontierAddress(address),\n                        key=Hash(key),\n                        value=U256(value),\n                    )\n        return state_root(state)\n\n    def verify_post_alloc(self, got_alloc: \"Alloc\"):\n        \"\"\"\n        Verify that the allocation matches the expected post in the test.\n        Raises exception on unexpected values.\n        \"\"\"\n        assert isinstance(got_alloc, Alloc), f\"got_alloc is not an Alloc: {got_alloc}\"\n        for address, account in self.root.items():\n            if account is None:\n                # Account must not exist\n                if address in got_alloc.root and got_alloc.root[address] is not None:\n                    raise Alloc.UnexpectedAccount(address, got_alloc.root[address])\n            else:\n                if address in got_alloc.root:\n                    got_account = got_alloc.root[address]\n                    assert isinstance(got_account, Account)\n                    assert isinstance(account, Account)\n                    account.check_alloc(address, got_account)\n                else:\n                    raise Alloc.MissingAccount(address)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.UnexpectedAccount","title":"<code>UnexpectedAccount</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Unexpected account found in the allocation.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass UnexpectedAccount(Exception):\n    \"\"\"\n    Unexpected account found in the allocation.\n    \"\"\"\n\n    address: Address\n    account: Account | None\n\n    def __init__(self, address: Address, account: Account | None, *args):\n        super().__init__(args)\n        self.address = address\n        self.account = account\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return f\"unexpected account in allocation {self.address}: {self.account}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.UnexpectedAccount.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return f\"unexpected account in allocation {self.address}: {self.account}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.MissingAccount","title":"<code>MissingAccount</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Expected account not found in the allocation.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass MissingAccount(Exception):\n    \"\"\"\n    Expected account not found in the allocation.\n    \"\"\"\n\n    address: Address\n\n    def __init__(self, address: Address, *args):\n        super().__init__(args)\n        self.address = address\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return f\"Account missing from allocation {self.address}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.MissingAccount.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return f\"Account missing from allocation {self.address}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.merge","title":"<code>merge(alloc_1, alloc_2)</code>  <code>classmethod</code>","text":"<p>Returns the merged allocation of two sources.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@classmethod\ndef merge(cls, alloc_1: \"Alloc\", alloc_2: \"Alloc\") -&gt; \"Alloc\":\n    \"\"\"\n    Returns the merged allocation of two sources.\n    \"\"\"\n    merged = alloc_1.model_dump()\n\n    for address, other_account in alloc_2.root.items():\n        merged_account = Account.merge(merged.get(address, None), other_account)\n        if merged_account:\n            merged[address] = merged_account\n        elif address in merged:\n            merged.pop(address, None)\n\n    return Alloc(merged)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.__iter__","title":"<code>__iter__()</code>","text":"<p>Returns an iterator over the allocation.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __iter__(self):\n    \"\"\"\n    Returns an iterator over the allocation.\n    \"\"\"\n    return iter(self.root)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.__getitem__","title":"<code>__getitem__(address)</code>","text":"<p>Returns the account associated with an address.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __getitem__(self, address: Address | FixedSizeBytesConvertible) -&gt; Account | None:\n    \"\"\"\n    Returns the account associated with an address.\n    \"\"\"\n    if not isinstance(address, Address):\n        address = Address(address)\n    return self.root[address]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.__setitem__","title":"<code>__setitem__(address, account)</code>","text":"<p>Sets the account associated with an address.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __setitem__(self, address: Address | FixedSizeBytesConvertible, account: Account | None):\n    \"\"\"\n    Sets the account associated with an address.\n    \"\"\"\n    if not isinstance(address, Address):\n        address = Address(address)\n    self.root[address] = account\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.__delitem__","title":"<code>__delitem__(address)</code>","text":"<p>Deletes the account associated with an address.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __delitem__(self, address: Address | FixedSizeBytesConvertible):\n    \"\"\"\n    Deletes the account associated with an address.\n    \"\"\"\n    if not isinstance(address, Address):\n        address = Address(address)\n    self.root.pop(address, None)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.__contains__","title":"<code>__contains__(address)</code>","text":"<p>Checks if an account is in the allocation.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __contains__(self, address: Address | FixedSizeBytesConvertible) -&gt; bool:\n    \"\"\"\n    Checks if an account is in the allocation.\n    \"\"\"\n    if not isinstance(address, Address):\n        address = Address(address)\n    return address in self.root\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.empty_accounts","title":"<code>empty_accounts()</code>","text":"<p>Returns a list of addresses of empty accounts.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def empty_accounts(self) -&gt; List[Address]:\n    \"\"\"\n    Returns a list of addresses of empty accounts.\n    \"\"\"\n    return [address for address, account in self.root.items() if not account]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.state_root","title":"<code>state_root()</code>","text":"<p>Returns the state root of the allocation.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def state_root(self) -&gt; bytes:\n    \"\"\"\n    Returns the state root of the allocation.\n    \"\"\"\n    state = State()\n    for address, account in self.root.items():\n        if account is None:\n            continue\n        set_account(\n            state=state,\n            address=FrontierAddress(address),\n            account=FrontierAccount(\n                nonce=Uint(account.nonce) if account.nonce is not None else Uint(0),\n                balance=(U256(account.balance) if account.balance is not None else U256(0)),\n                code=account.code if account.code is not None else b\"\",\n            ),\n        )\n        if account.storage is not None:\n            for key, value in account.storage.root.items():\n                set_storage(\n                    state=state,\n                    address=FrontierAddress(address),\n                    key=Hash(key),\n                    value=U256(value),\n                )\n    return state_root(state)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Alloc.verify_post_alloc","title":"<code>verify_post_alloc(got_alloc)</code>","text":"<p>Verify that the allocation matches the expected post in the test. Raises exception on unexpected values.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def verify_post_alloc(self, got_alloc: \"Alloc\"):\n    \"\"\"\n    Verify that the allocation matches the expected post in the test.\n    Raises exception on unexpected values.\n    \"\"\"\n    assert isinstance(got_alloc, Alloc), f\"got_alloc is not an Alloc: {got_alloc}\"\n    for address, account in self.root.items():\n        if account is None:\n            # Account must not exist\n            if address in got_alloc.root and got_alloc.root[address] is not None:\n                raise Alloc.UnexpectedAccount(address, got_alloc.root[address])\n        else:\n            if address in got_alloc.root:\n                got_account = got_alloc.root[address]\n                assert isinstance(got_account, Account)\n                assert isinstance(account, Account)\n                account.check_alloc(address, got_account)\n            else:\n                raise Alloc.MissingAccount(address)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.DepositRequest","title":"<code>DepositRequest</code>","text":"<p>               Bases: <code>DepositRequestGeneric[HexNumber]</code></p> <p>Deposit Request type</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class DepositRequest(DepositRequestGeneric[HexNumber]):\n    \"\"\"\n    Deposit Request type\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EngineAPIError","title":"<code>EngineAPIError</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>List of Engine API errors</p> Source code in <code>src/ethereum_test_tools/common/constants.py</code> <pre><code>class EngineAPIError(IntEnum):\n    \"\"\"\n    List of Engine API errors\n    \"\"\"\n\n    ParseError = -32700\n    InvalidRequest = -32600\n    MethodNotFound = -32601\n    InvalidParams = -32602\n    InternalError = -32603\n    ServerError = -32000\n    UnknownPayload = -38001\n    InvalidForkchoiceState = -38002\n    InvalidPayloadAttributes = -38003\n    TooLargeRequest = -38004\n    UnsupportedFork = -38005\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Environment","title":"<code>Environment</code>","text":"<p>               Bases: <code>EnvironmentGeneric[Number]</code></p> <p>Structure used to keep track of the context in which a block must be executed.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Environment(EnvironmentGeneric[Number]):\n    \"\"\"\n    Structure used to keep track of the context in which a block\n    must be executed.\n    \"\"\"\n\n    blob_gas_used: Number | None = Field(None, alias=\"currentBlobGasUsed\")\n    parent_ommers_hash: Hash = Field(Hash(0), alias=\"parentUncleHash\")\n    parent_blob_gas_used: Number | None = Field(None)\n    parent_excess_blob_gas: Number | None = Field(None)\n    parent_beacon_block_root: Hash | None = Field(None)\n\n    block_hashes: Dict[Number, Hash] = Field(default_factory=dict)\n    ommers: List[Hash] = Field(default_factory=list)\n    withdrawals: List[Withdrawal] | None = Field(None)\n    extra_data: Bytes = Field(Bytes(b\"\\x00\"), exclude=True)\n\n    @computed_field  # type: ignore[misc]\n    @cached_property\n    def parent_hash(self) -&gt; Hash | None:\n        \"\"\"\n        Obtains the latest hash according to the highest block number in\n        `block_hashes`.\n        \"\"\"\n        if len(self.block_hashes) == 0:\n            return None\n\n        last_index = max(self.block_hashes.keys())\n        return Hash(self.block_hashes[last_index])\n\n    def set_fork_requirements(self, fork: Fork) -&gt; \"Environment\":\n        \"\"\"\n        Fills the required fields in an environment depending on the fork.\n        \"\"\"\n        number = self.number\n        timestamp = self.timestamp\n\n        updated_values: Dict[str, Any] = {}\n\n        if fork.header_prev_randao_required(number, timestamp) and self.prev_randao is None:\n            updated_values[\"prev_randao\"] = 0\n\n        if fork.header_withdrawals_required(number, timestamp) and self.withdrawals is None:\n            updated_values[\"withdrawals\"] = []\n\n        if (\n            fork.header_base_fee_required(number, timestamp)\n            and self.base_fee_per_gas is None\n            and self.parent_base_fee_per_gas is None\n        ):\n            updated_values[\"base_fee_per_gas\"] = DEFAULT_BASE_FEE\n\n        if fork.header_zero_difficulty_required(number, timestamp):\n            updated_values[\"difficulty\"] = 0\n        elif self.difficulty is None and self.parent_difficulty is None:\n            updated_values[\"difficulty\"] = 0x20000\n\n        if (\n            fork.header_excess_blob_gas_required(number, timestamp)\n            and self.excess_blob_gas is None\n            and self.parent_excess_blob_gas is None\n        ):\n            updated_values[\"excess_blob_gas\"] = 0\n\n        if (\n            fork.header_blob_gas_used_required(number, timestamp)\n            and self.blob_gas_used is None\n            and self.parent_blob_gas_used is None\n        ):\n            updated_values[\"blob_gas_used\"] = 0\n\n        if (\n            fork.header_beacon_root_required(number, timestamp)\n            and self.parent_beacon_block_root is None\n        ):\n            updated_values[\"parent_beacon_block_root\"] = 0\n\n        return self.copy(**updated_values)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Environment.parent_hash","title":"<code>parent_hash: Hash | None</code>  <code>cached</code> <code>property</code>","text":"<p>Obtains the latest hash according to the highest block number in <code>block_hashes</code>.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Environment.set_fork_requirements","title":"<code>set_fork_requirements(fork)</code>","text":"<p>Fills the required fields in an environment depending on the fork.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def set_fork_requirements(self, fork: Fork) -&gt; \"Environment\":\n    \"\"\"\n    Fills the required fields in an environment depending on the fork.\n    \"\"\"\n    number = self.number\n    timestamp = self.timestamp\n\n    updated_values: Dict[str, Any] = {}\n\n    if fork.header_prev_randao_required(number, timestamp) and self.prev_randao is None:\n        updated_values[\"prev_randao\"] = 0\n\n    if fork.header_withdrawals_required(number, timestamp) and self.withdrawals is None:\n        updated_values[\"withdrawals\"] = []\n\n    if (\n        fork.header_base_fee_required(number, timestamp)\n        and self.base_fee_per_gas is None\n        and self.parent_base_fee_per_gas is None\n    ):\n        updated_values[\"base_fee_per_gas\"] = DEFAULT_BASE_FEE\n\n    if fork.header_zero_difficulty_required(number, timestamp):\n        updated_values[\"difficulty\"] = 0\n    elif self.difficulty is None and self.parent_difficulty is None:\n        updated_values[\"difficulty\"] = 0x20000\n\n    if (\n        fork.header_excess_blob_gas_required(number, timestamp)\n        and self.excess_blob_gas is None\n        and self.parent_excess_blob_gas is None\n    ):\n        updated_values[\"excess_blob_gas\"] = 0\n\n    if (\n        fork.header_blob_gas_used_required(number, timestamp)\n        and self.blob_gas_used is None\n        and self.parent_blob_gas_used is None\n    ):\n        updated_values[\"blob_gas_used\"] = 0\n\n    if (\n        fork.header_beacon_root_required(number, timestamp)\n        and self.parent_beacon_block_root is None\n    ):\n        updated_values[\"parent_beacon_block_root\"] = 0\n\n    return self.copy(**updated_values)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Hash","title":"<code>Hash</code>","text":"<p>               Bases: <code>FixedSizeBytes[32]</code></p> <p>Class that helps represent hashes in tests.</p> Source code in <code>src/ethereum_test_tools/common/base_types.py</code> <pre><code>class Hash(FixedSizeBytes[32]):  # type: ignore\n    \"\"\"\n    Class that helps represent hashes in tests.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Removable","title":"<code>Removable</code>","text":"<p>Sentinel class to detect if a parameter should be removed. (<code>None</code> normally means \"do not modify\")</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Removable:\n    \"\"\"\n    Sentinel class to detect if a parameter should be removed.\n    (`None` normally means \"do not modify\")\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage","title":"<code>Storage</code>","text":"<p>               Bases: <code>RootModel[Dict[StorageKeyValueType, StorageKeyValueType]]</code></p> <p>Definition of a storage in pre or post state of a test</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Storage(RootModel[Dict[StorageKeyValueType, StorageKeyValueType]]):\n    \"\"\"\n    Definition of a storage in pre or post state of a test\n    \"\"\"\n\n    root: Dict[StorageKeyValueType, StorageKeyValueType] = Field(default_factory=dict)\n\n    _current_slot: Iterator[int] = count(0)\n\n    StorageDictType: ClassVar[TypeAlias] = Dict[\n        str | int | bytes | SupportsBytes, str | int | bytes | SupportsBytes\n    ]\n    \"\"\"\n    Dictionary type to be used when defining an input to initialize a storage.\n    \"\"\"\n\n    @dataclass(kw_only=True)\n    class InvalidType(Exception):\n        \"\"\"\n        Invalid type used when describing test's expected storage key or value.\n        \"\"\"\n\n        key_or_value: Any\n\n        def __init__(self, key_or_value: Any, *args):\n            super().__init__(args)\n            self.key_or_value = key_or_value\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return f\"invalid type for key/value: {self.key_or_value}\"\n\n    @dataclass(kw_only=True)\n    class InvalidValue(Exception):\n        \"\"\"\n        Invalid value used when describing test's expected storage key or\n        value.\n        \"\"\"\n\n        key_or_value: Any\n\n        def __init__(self, key_or_value: Any, *args):\n            super().__init__(args)\n            self.key_or_value = key_or_value\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return f\"invalid value for key/value: {self.key_or_value}\"\n\n    @dataclass(kw_only=True)\n    class MissingKey(Exception):\n        \"\"\"\n        Test expected to find a storage key set but key was missing.\n        \"\"\"\n\n        key: int\n\n        def __init__(self, key: int, *args):\n            super().__init__(args)\n            self.key = key\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return \"key {0} not found in storage\".format(Hash(self.key))\n\n    @dataclass(kw_only=True)\n    class KeyValueMismatch(Exception):\n        \"\"\"\n        Test expected a certain value in a storage key but value found\n        was different.\n        \"\"\"\n\n        address: Address\n        key: int\n        want: int\n        got: int\n\n        def __init__(self, address: Address, key: int, want: int, got: int, *args):\n            super().__init__(args)\n            self.address = address\n            self.key = key\n            self.want = want\n            self.got = got\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return (\n                f\"incorrect value in address {self.address} for \"\n                + f\"key {Hash(self.key)}:\"\n                + f\" want {HexNumber(self.want)} (dec:{self.want}),\"\n                + f\" got {HexNumber(self.got)} (dec:{self.got})\"\n            )\n\n    def __contains__(self, key: StorageKeyValueTypeConvertible | StorageKeyValueType) -&gt; bool:\n        \"\"\"Checks for an item in the storage\"\"\"\n        return StorageKeyValueTypeAdapter.validate_python(key) in self.root\n\n    def __getitem__(\n        self, key: StorageKeyValueTypeConvertible | StorageKeyValueType\n    ) -&gt; StorageKeyValueType:\n        \"\"\"Returns an item from the storage\"\"\"\n        return self.root[StorageKeyValueTypeAdapter.validate_python(key)]\n\n    def __setitem__(\n        self,\n        key: StorageKeyValueTypeConvertible | StorageKeyValueType,\n        value: StorageKeyValueTypeConvertible | StorageKeyValueType,\n    ):  # noqa: SC200\n        \"\"\"Sets an item in the storage\"\"\"\n        self.root[\n            StorageKeyValueTypeAdapter.validate_python(key)\n        ] = StorageKeyValueTypeAdapter.validate_python(value)\n\n    def __delitem__(self, key: StorageKeyValueTypeConvertible | StorageKeyValueType):\n        \"\"\"Deletes an item from the storage\"\"\"\n        del self.root[StorageKeyValueTypeAdapter.validate_python(key)]\n\n    def __iter__(self):\n        \"\"\"Returns an iterator over the storage\"\"\"\n        return iter(self.root)\n\n    def __eq__(self, other) -&gt; bool:\n        \"\"\"\n        Returns True if both storages are equal.\n        \"\"\"\n        if not isinstance(other, Storage):\n            return False\n        return self.root == other.root\n\n    def __ne__(self, other) -&gt; bool:\n        \"\"\"\n        Returns True if both storages are not equal.\n        \"\"\"\n        if not isinstance(other, Storage):\n            return False\n        return self.root != other.root\n\n    def __bool__(self) -&gt; bool:\n        \"\"\"Returns True if the storage is not empty\"\"\"\n        return any(v for v in self.root.values())\n\n    def keys(self) -&gt; set[StorageKeyValueType]:\n        \"\"\"Returns the keys of the storage\"\"\"\n        return set(self.root.keys())\n\n    def store_next(\n        self, value: StorageKeyValueTypeConvertible | StorageKeyValueType | bool\n    ) -&gt; StorageKeyValueType:\n        \"\"\"\n        Stores a value in the storage and returns the key where the value is stored.\n\n        Increments the key counter so the next time this function is called,\n        the next key is used.\n        \"\"\"\n        slot = StorageKeyValueTypeAdapter.validate_python(next(self._current_slot))\n        self[slot] = StorageKeyValueTypeAdapter.validate_python(value)\n        return slot\n\n    def contains(self, other: \"Storage\") -&gt; bool:\n        \"\"\"\n        Returns True if self contains all keys with equal value as\n        contained by second storage.\n        Used for comparison with test expected post state and alloc returned\n        by the transition tool.\n        \"\"\"\n        for key in other.keys():\n            if key not in self:\n                return False\n            if self[key] != other[key]:\n                return False\n        return True\n\n    def must_contain(self, address: Address, other: \"Storage\"):\n        \"\"\"\n        Succeeds only if self contains all keys with equal value as\n        contained by second storage.\n        Used for comparison with test expected post state and alloc returned\n        by the transition tool.\n        Raises detailed exception when a difference is found.\n        \"\"\"\n        for key in other.keys():\n            if key not in self:\n                # storage[key]==0 is equal to missing storage\n                if other[key] != 0:\n                    raise Storage.MissingKey(key=key)\n            elif self[key] != other[key]:\n                raise Storage.KeyValueMismatch(\n                    address=address, key=key, want=self[key], got=other[key]\n                )\n\n    def must_be_equal(self, address: Address, other: \"Storage | None\"):\n        \"\"\"\n        Succeeds only if \"self\" is equal to \"other\" storage.\n        \"\"\"\n        # Test keys contained in both storage objects\n        if other is None:\n            other = Storage({})\n        for key in self.keys() &amp; other.keys():\n            if self[key] != other[key]:\n                raise Storage.KeyValueMismatch(\n                    address=address, key=key, want=self[key], got=other[key]\n                )\n\n        # Test keys contained in either one of the storage objects\n        for key in self.keys() ^ other.keys():\n            if key in self:\n                if self[key] != 0:\n                    raise Storage.KeyValueMismatch(address=address, key=key, want=self[key], got=0)\n\n            elif other[key] != 0:\n                raise Storage.KeyValueMismatch(address=address, key=key, want=0, got=other[key])\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.StorageDictType","title":"<code>StorageDictType: TypeAlias = Dict[str | int | bytes | SupportsBytes, str | int | bytes | SupportsBytes]</code>  <code>class-attribute</code>","text":"<p>Dictionary type to be used when defining an input to initialize a storage.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.InvalidType","title":"<code>InvalidType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Invalid type used when describing test's expected storage key or value.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass InvalidType(Exception):\n    \"\"\"\n    Invalid type used when describing test's expected storage key or value.\n    \"\"\"\n\n    key_or_value: Any\n\n    def __init__(self, key_or_value: Any, *args):\n        super().__init__(args)\n        self.key_or_value = key_or_value\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return f\"invalid type for key/value: {self.key_or_value}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.InvalidType.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return f\"invalid type for key/value: {self.key_or_value}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.InvalidValue","title":"<code>InvalidValue</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Invalid value used when describing test's expected storage key or value.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass InvalidValue(Exception):\n    \"\"\"\n    Invalid value used when describing test's expected storage key or\n    value.\n    \"\"\"\n\n    key_or_value: Any\n\n    def __init__(self, key_or_value: Any, *args):\n        super().__init__(args)\n        self.key_or_value = key_or_value\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return f\"invalid value for key/value: {self.key_or_value}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.InvalidValue.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return f\"invalid value for key/value: {self.key_or_value}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.MissingKey","title":"<code>MissingKey</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Test expected to find a storage key set but key was missing.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass MissingKey(Exception):\n    \"\"\"\n    Test expected to find a storage key set but key was missing.\n    \"\"\"\n\n    key: int\n\n    def __init__(self, key: int, *args):\n        super().__init__(args)\n        self.key = key\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return \"key {0} not found in storage\".format(Hash(self.key))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.MissingKey.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return \"key {0} not found in storage\".format(Hash(self.key))\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.KeyValueMismatch","title":"<code>KeyValueMismatch</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Test expected a certain value in a storage key but value found was different.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@dataclass(kw_only=True)\nclass KeyValueMismatch(Exception):\n    \"\"\"\n    Test expected a certain value in a storage key but value found\n    was different.\n    \"\"\"\n\n    address: Address\n    key: int\n    want: int\n    got: int\n\n    def __init__(self, address: Address, key: int, want: int, got: int, *args):\n        super().__init__(args)\n        self.address = address\n        self.key = key\n        self.want = want\n        self.got = got\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return (\n            f\"incorrect value in address {self.address} for \"\n            + f\"key {Hash(self.key)}:\"\n            + f\" want {HexNumber(self.want)} (dec:{self.want}),\"\n            + f\" got {HexNumber(self.got)} (dec:{self.got})\"\n        )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.KeyValueMismatch.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return (\n        f\"incorrect value in address {self.address} for \"\n        + f\"key {Hash(self.key)}:\"\n        + f\" want {HexNumber(self.want)} (dec:{self.want}),\"\n        + f\" got {HexNumber(self.got)} (dec:{self.got})\"\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Checks for an item in the storage</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __contains__(self, key: StorageKeyValueTypeConvertible | StorageKeyValueType) -&gt; bool:\n    \"\"\"Checks for an item in the storage\"\"\"\n    return StorageKeyValueTypeAdapter.validate_python(key) in self.root\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Returns an item from the storage</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __getitem__(\n    self, key: StorageKeyValueTypeConvertible | StorageKeyValueType\n) -&gt; StorageKeyValueType:\n    \"\"\"Returns an item from the storage\"\"\"\n    return self.root[StorageKeyValueTypeAdapter.validate_python(key)]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>Sets an item in the storage</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __setitem__(\n    self,\n    key: StorageKeyValueTypeConvertible | StorageKeyValueType,\n    value: StorageKeyValueTypeConvertible | StorageKeyValueType,\n):  # noqa: SC200\n    \"\"\"Sets an item in the storage\"\"\"\n    self.root[\n        StorageKeyValueTypeAdapter.validate_python(key)\n    ] = StorageKeyValueTypeAdapter.validate_python(value)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__delitem__","title":"<code>__delitem__(key)</code>","text":"<p>Deletes an item from the storage</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __delitem__(self, key: StorageKeyValueTypeConvertible | StorageKeyValueType):\n    \"\"\"Deletes an item from the storage\"\"\"\n    del self.root[StorageKeyValueTypeAdapter.validate_python(key)]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__iter__","title":"<code>__iter__()</code>","text":"<p>Returns an iterator over the storage</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __iter__(self):\n    \"\"\"Returns an iterator over the storage\"\"\"\n    return iter(self.root)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Returns True if both storages are equal.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __eq__(self, other) -&gt; bool:\n    \"\"\"\n    Returns True if both storages are equal.\n    \"\"\"\n    if not isinstance(other, Storage):\n        return False\n    return self.root == other.root\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Returns True if both storages are not equal.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __ne__(self, other) -&gt; bool:\n    \"\"\"\n    Returns True if both storages are not equal.\n    \"\"\"\n    if not isinstance(other, Storage):\n        return False\n    return self.root != other.root\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.__bool__","title":"<code>__bool__()</code>","text":"<p>Returns True if the storage is not empty</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"Returns True if the storage is not empty\"\"\"\n    return any(v for v in self.root.values())\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.keys","title":"<code>keys()</code>","text":"<p>Returns the keys of the storage</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def keys(self) -&gt; set[StorageKeyValueType]:\n    \"\"\"Returns the keys of the storage\"\"\"\n    return set(self.root.keys())\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.store_next","title":"<code>store_next(value)</code>","text":"<p>Stores a value in the storage and returns the key where the value is stored.</p> <p>Increments the key counter so the next time this function is called, the next key is used.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def store_next(\n    self, value: StorageKeyValueTypeConvertible | StorageKeyValueType | bool\n) -&gt; StorageKeyValueType:\n    \"\"\"\n    Stores a value in the storage and returns the key where the value is stored.\n\n    Increments the key counter so the next time this function is called,\n    the next key is used.\n    \"\"\"\n    slot = StorageKeyValueTypeAdapter.validate_python(next(self._current_slot))\n    self[slot] = StorageKeyValueTypeAdapter.validate_python(value)\n    return slot\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.contains","title":"<code>contains(other)</code>","text":"<p>Returns True if self contains all keys with equal value as contained by second storage. Used for comparison with test expected post state and alloc returned by the transition tool.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def contains(self, other: \"Storage\") -&gt; bool:\n    \"\"\"\n    Returns True if self contains all keys with equal value as\n    contained by second storage.\n    Used for comparison with test expected post state and alloc returned\n    by the transition tool.\n    \"\"\"\n    for key in other.keys():\n        if key not in self:\n            return False\n        if self[key] != other[key]:\n            return False\n    return True\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.must_contain","title":"<code>must_contain(address, other)</code>","text":"<p>Succeeds only if self contains all keys with equal value as contained by second storage. Used for comparison with test expected post state and alloc returned by the transition tool. Raises detailed exception when a difference is found.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def must_contain(self, address: Address, other: \"Storage\"):\n    \"\"\"\n    Succeeds only if self contains all keys with equal value as\n    contained by second storage.\n    Used for comparison with test expected post state and alloc returned\n    by the transition tool.\n    Raises detailed exception when a difference is found.\n    \"\"\"\n    for key in other.keys():\n        if key not in self:\n            # storage[key]==0 is equal to missing storage\n            if other[key] != 0:\n                raise Storage.MissingKey(key=key)\n        elif self[key] != other[key]:\n            raise Storage.KeyValueMismatch(\n                address=address, key=key, want=self[key], got=other[key]\n            )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Storage.must_be_equal","title":"<code>must_be_equal(address, other)</code>","text":"<p>Succeeds only if \"self\" is equal to \"other\" storage.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def must_be_equal(self, address: Address, other: \"Storage | None\"):\n    \"\"\"\n    Succeeds only if \"self\" is equal to \"other\" storage.\n    \"\"\"\n    # Test keys contained in both storage objects\n    if other is None:\n        other = Storage({})\n    for key in self.keys() &amp; other.keys():\n        if self[key] != other[key]:\n            raise Storage.KeyValueMismatch(\n                address=address, key=key, want=self[key], got=other[key]\n            )\n\n    # Test keys contained in either one of the storage objects\n    for key in self.keys() ^ other.keys():\n        if key in self:\n            if self[key] != 0:\n                raise Storage.KeyValueMismatch(address=address, key=key, want=self[key], got=0)\n\n        elif other[key] != 0:\n            raise Storage.KeyValueMismatch(address=address, key=key, want=0, got=other[key])\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TestParameterGroup","title":"<code>TestParameterGroup</code>  <code>dataclass</code>","text":"<p>Base class for grouping test parameters in a dataclass. Provides a generic repr method to generate clean test ids, including only non-default optional fields.</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>@dataclass(kw_only=True, frozen=True, repr=False)\nclass TestParameterGroup:\n    \"\"\"\n    Base class for grouping test parameters in a dataclass. Provides a generic\n    __repr__ method to generate clean test ids, including only non-default\n    optional fields.\n    \"\"\"\n\n    __test__ = False  # explicitly prevent pytest collecting this class\n\n    def __repr__(self):\n        \"\"\"\n        Generates a repr string, intended to be used as a test id, based on the class\n        name and the values of the non-default optional fields.\n        \"\"\"\n        class_name = self.__class__.__name__\n        field_strings = []\n\n        for field in fields(self):\n            value = getattr(self, field.name)\n            # Include the field only if it is not optional or not set to its default value\n            if field.default is MISSING or field.default != value:\n                field_strings.append(f\"{field.name}_{value}\")\n\n        return f\"{class_name}_{'-'.join(field_strings)}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TestParameterGroup.__repr__","title":"<code>__repr__()</code>","text":"<p>Generates a repr string, intended to be used as a test id, based on the class name and the values of the non-default optional fields.</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def __repr__(self):\n    \"\"\"\n    Generates a repr string, intended to be used as a test id, based on the class\n    name and the values of the non-default optional fields.\n    \"\"\"\n    class_name = self.__class__.__name__\n    field_strings = []\n\n    for field in fields(self):\n        value = getattr(self, field.name)\n        # Include the field only if it is not optional or not set to its default value\n        if field.default is MISSING or field.default != value:\n            field_strings.append(f\"{field.name}_{value}\")\n\n    return f\"{class_name}_{'-'.join(field_strings)}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction","title":"<code>Transaction</code>","text":"<p>               Bases: <code>TransactionGeneric[HexNumber]</code>, <code>TransactionTransitionToolConverter</code></p> <p>Generic object that can represent all Ethereum transaction types.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Transaction(TransactionGeneric[HexNumber], TransactionTransitionToolConverter):\n    \"\"\"\n    Generic object that can represent all Ethereum transaction types.\n    \"\"\"\n\n    gas_limit: HexNumber = Field(HexNumber(21_000), serialization_alias=\"gas\")\n    to: Address | None = Field(Address(0xAA))\n    data: Bytes = Field(Bytes(b\"\"), alias=\"input\")\n\n    secret_key: Hash | None = None\n    error: List[TransactionException] | TransactionException | None = Field(None, exclude=True)\n\n    protected: bool = Field(True, exclude=True)\n    rlp_override: bytes | None = Field(None, exclude=True)\n\n    wrapped_blob_transaction: bool = Field(False, exclude=True)\n    blobs: Sequence[Bytes] | None = Field(None, exclude=True)\n    blob_kzg_commitments: Sequence[Bytes] | None = Field(None, exclude=True)\n    blob_kzg_proofs: Sequence[Bytes] | None = Field(None, exclude=True)\n\n    model_config = ConfigDict(validate_assignment=True)\n\n    class InvalidFeePayment(Exception):\n        \"\"\"\n        Transaction described more than one fee payment type.\n        \"\"\"\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return \"only one type of fee payment field can be used in a single tx\"\n\n    class InvalidSignaturePrivateKey(Exception):\n        \"\"\"\n        Transaction describes both the signature and private key of\n        source account.\n        \"\"\"\n\n        def __str__(self):\n            \"\"\"Print exception string\"\"\"\n            return \"can't define both 'signature' and 'private_key'\"\n\n    def model_post_init(self, __context):\n        \"\"\"\n        Ensures the transaction has no conflicting properties.\n        \"\"\"\n        super().model_post_init(__context)\n\n        if self.gas_price is not None and (\n            self.max_fee_per_gas is not None\n            or self.max_priority_fee_per_gas is not None\n            or self.max_fee_per_blob_gas is not None\n        ):\n            raise Transaction.InvalidFeePayment()\n\n        if (\n            self.gas_price is None\n            and self.max_fee_per_gas is None\n            and self.max_priority_fee_per_gas is None\n            and self.max_fee_per_blob_gas is None\n        ):\n            self.gas_price = 10\n\n        if self.v is not None and self.secret_key is not None:\n            raise Transaction.InvalidSignaturePrivateKey()\n\n        if self.v is None and self.secret_key is None:\n            self.secret_key = Hash(TestPrivateKey)\n\n        if \"ty\" not in self.model_fields_set:\n            # Try to deduce transaction type from included fields\n            if self.max_fee_per_blob_gas is not None:\n                self.ty = 3\n            elif self.max_fee_per_gas is not None:\n                self.ty = 2\n            elif self.access_list is not None:\n                self.ty = 1\n            else:\n                self.ty = 0\n\n        # Set default values for fields that are required for certain tx types\n        if self.ty &gt;= 1 and self.access_list is None:\n            self.access_list = []\n\n        if self.ty &gt;= 2 and self.max_priority_fee_per_gas is None:\n            self.max_priority_fee_per_gas = 0\n\n    def with_error(\n        self, error: List[TransactionException] | TransactionException\n    ) -&gt; \"Transaction\":\n        \"\"\"\n        Create a copy of the transaction with an added error.\n        \"\"\"\n        return self.copy(error=error)\n\n    def with_nonce(self, nonce: int) -&gt; \"Transaction\":\n        \"\"\"\n        Create a copy of the transaction with a modified nonce.\n        \"\"\"\n        return self.copy(nonce=nonce)\n\n    def with_signature_and_sender(self, *, keep_secret_key: bool = False) -&gt; \"Transaction\":\n        \"\"\"\n        Returns a signed version of the transaction using the private key.\n        \"\"\"\n        updated_values: Dict[str, Any] = {}\n\n        if self.v is not None:\n            # Transaction already signed\n            if self.sender is not None:\n                return self\n\n            public_key = PublicKey.from_signature_and_message(\n                self.signature_bytes, keccak256(self.signing_bytes), hasher=None\n            )\n            updated_values[\"sender\"] = Address(\n                keccak256(public_key.format(compressed=False)[1:])[32 - 20 :]\n            )\n            return self.copy(**updated_values)\n\n        if self.secret_key is None:\n            raise ValueError(\"secret_key must be set to sign a transaction\")\n\n        # Get the signing bytes\n        signing_hash = keccak256(self.signing_bytes)\n\n        # Sign the bytes\n        signature_bytes = PrivateKey(secret=self.secret_key).sign_recoverable(\n            signing_hash, hasher=None\n        )\n        public_key = PublicKey.from_signature_and_message(\n            signature_bytes, signing_hash, hasher=None\n        )\n\n        sender = keccak256(public_key.format(compressed=False)[1:])[32 - 20 :]\n        updated_values[\"sender\"] = Address(sender)\n\n        v, r, s = (\n            signature_bytes[64],\n            int.from_bytes(signature_bytes[0:32], byteorder=\"big\"),\n            int.from_bytes(signature_bytes[32:64], byteorder=\"big\"),\n        )\n        if self.ty == 0:\n            if self.protected:\n                v += 35 + (self.chain_id * 2)\n            else:  # not protected\n                v += 27\n\n        updated_values[\"v\"] = HexNumber(v)\n        updated_values[\"r\"] = HexNumber(r)\n        updated_values[\"s\"] = HexNumber(s)\n\n        updated_values[\"secret_key\"] = None\n\n        updated_tx = self.model_copy(update=updated_values)\n\n        # Remove the secret key if requested\n        if keep_secret_key:\n            updated_tx.secret_key = self.secret_key\n        return updated_tx\n\n    @cached_property\n    def signing_envelope(self) -&gt; List[Any]:\n        \"\"\"\n        Returns the list of values included in the envelope used for signing.\n        \"\"\"\n        to = self.to if self.to else bytes()\n        if self.ty == 3:\n            # EIP-4844: https://eips.ethereum.org/EIPS/eip-4844\n            if self.max_priority_fee_per_gas is None:\n                raise ValueError(\"max_priority_fee_per_gas must be set for type 3 tx\")\n            if self.max_fee_per_gas is None:\n                raise ValueError(\"max_fee_per_gas must be set for type 3 tx\")\n            if self.max_fee_per_blob_gas is None:\n                raise ValueError(\"max_fee_per_blob_gas must be set for type 3 tx\")\n            if self.blob_versioned_hashes is None:\n                raise ValueError(\"blob_versioned_hashes must be set for type 3 tx\")\n            if self.access_list is None:\n                raise ValueError(\"access_list must be set for type 3 tx\")\n            return [\n                Uint(self.chain_id),\n                Uint(self.nonce),\n                Uint(self.max_priority_fee_per_gas),\n                Uint(self.max_fee_per_gas),\n                Uint(self.gas_limit),\n                to,\n                Uint(self.value),\n                self.data,\n                [a.to_list() for a in self.access_list],\n                Uint(self.max_fee_per_blob_gas),\n                list(self.blob_versioned_hashes),\n            ]\n        elif self.ty == 2:\n            # EIP-1559: https://eips.ethereum.org/EIPS/eip-1559\n            if self.max_priority_fee_per_gas is None:\n                raise ValueError(\"max_priority_fee_per_gas must be set for type 2 tx\")\n            if self.max_fee_per_gas is None:\n                raise ValueError(\"max_fee_per_gas must be set for type 2 tx\")\n            if self.access_list is None:\n                raise ValueError(\"access_list must be set for type 2 tx\")\n            return [\n                Uint(self.chain_id),\n                Uint(self.nonce),\n                Uint(self.max_priority_fee_per_gas),\n                Uint(self.max_fee_per_gas),\n                Uint(self.gas_limit),\n                to,\n                Uint(self.value),\n                self.data,\n                [a.to_list() for a in self.access_list],\n            ]\n        elif self.ty == 1:\n            # EIP-2930: https://eips.ethereum.org/EIPS/eip-2930\n            if self.gas_price is None:\n                raise ValueError(\"gas_price must be set for type 1 tx\")\n            if self.access_list is None:\n                raise ValueError(\"access_list must be set for type 1 tx\")\n\n            return [\n                Uint(self.chain_id),\n                Uint(self.nonce),\n                Uint(self.gas_price),\n                Uint(self.gas_limit),\n                to,\n                Uint(self.value),\n                self.data,\n                [a.to_list() for a in self.access_list],\n            ]\n        elif self.ty == 0:\n            if self.gas_price is None:\n                raise ValueError(\"gas_price must be set for type 0 tx\")\n\n            if self.protected:\n                # EIP-155: https://eips.ethereum.org/EIPS/eip-155\n                return [\n                    Uint(self.nonce),\n                    Uint(self.gas_price),\n                    Uint(self.gas_limit),\n                    to,\n                    Uint(self.value),\n                    self.data,\n                    Uint(self.chain_id),\n                    Uint(0),\n                    Uint(0),\n                ]\n            else:\n                return [\n                    Uint(self.nonce),\n                    Uint(self.gas_price),\n                    Uint(self.gas_limit),\n                    to,\n                    Uint(self.value),\n                    self.data,\n                ]\n        raise NotImplementedError(\"signing for transaction type {self.ty} not implemented\")\n\n    @cached_property\n    def payload_body(self) -&gt; List[Any]:\n        \"\"\"\n        Returns the list of values included in the transaction body.\n        \"\"\"\n        if self.v is None or self.r is None or self.s is None:\n            raise ValueError(\"signature must be set before serializing any tx type\")\n\n        signing_envelope = self.signing_envelope\n\n        if self.ty == 0 and self.protected:\n            # Remove the chain_id and the two zeros from the signing envelope\n            signing_envelope = signing_envelope[:-3]\n        elif self.ty == 3 and self.wrapped_blob_transaction:\n            # EIP-4844: https://eips.ethereum.org/EIPS/eip-4844\n            if self.blobs is None:\n                raise ValueError(\"blobs must be set for type 3 tx\")\n            if self.blob_kzg_commitments is None:\n                raise ValueError(\"blob_kzg_commitments must be set for type 3 tx\")\n            if self.blob_kzg_proofs is None:\n                raise ValueError(\"blob_kzg_proofs must be set for type 3 tx\")\n            return [\n                signing_envelope + [Uint(self.v), Uint(self.r), Uint(self.s)],\n                list(self.blobs),\n                list(self.blob_kzg_commitments),\n                list(self.blob_kzg_proofs),\n            ]\n\n        return signing_envelope + [Uint(self.v), Uint(self.r), Uint(self.s)]\n\n    @cached_property\n    def rlp(self) -&gt; bytes:\n        \"\"\"\n        Returns bytes of the serialized representation of the transaction,\n        which is almost always RLP encoding.\n        \"\"\"\n        if self.rlp_override is not None:\n            return self.rlp_override\n        if self.ty &gt; 0:\n            return bytes([self.ty]) + eth_rlp.encode(self.payload_body)\n        else:\n            return eth_rlp.encode(self.payload_body)\n\n    @cached_property\n    def signing_bytes(self) -&gt; bytes:\n        \"\"\"\n        Returns the serialized bytes of the transaction used for signing.\n        \"\"\"\n        return (\n            bytes([self.ty]) + eth_rlp.encode(self.signing_envelope)\n            if self.ty &gt; 0\n            else eth_rlp.encode(self.signing_envelope)\n        )\n\n    @cached_property\n    def signature_bytes(self) -&gt; bytes:\n        \"\"\"\n        Returns the serialized bytes of the transaction signature.\n        \"\"\"\n        assert self.v is not None and self.r is not None and self.s is not None\n        v = int(self.v)\n        if self.ty == 0:\n            if self.protected:\n                assert self.chain_id is not None\n                v -= 35 + (self.chain_id * 2)\n            else:\n                v -= 27\n        return (\n            self.r.to_bytes(32, byteorder=\"big\")\n            + self.s.to_bytes(32, byteorder=\"big\")\n            + bytes([v])\n        )\n\n    @cached_property\n    def serializable_list(self) -&gt; Any:\n        \"\"\"\n        Returns the list of values included in the transaction as a serializable object.\n        \"\"\"\n        return self.rlp if self.ty &gt; 0 else self.payload_body\n\n    @staticmethod\n    def list_root(input_txs: List[\"Transaction\"]) -&gt; Hash:\n        \"\"\"\n        Returns the transactions root of a list of transactions.\n        \"\"\"\n        t = HexaryTrie(db={})\n        for i, tx in enumerate(input_txs):\n            t.set(eth_rlp.encode(Uint(i)), tx.rlp)\n        return Hash(t.root_hash)\n\n    @staticmethod\n    def list_blob_versioned_hashes(input_txs: List[\"Transaction\"]) -&gt; List[Hash]:\n        \"\"\"\n        Gets a list of ordered blob versioned hashes from a list of transactions.\n        \"\"\"\n        return [\n            blob_versioned_hash\n            for tx in input_txs\n            if tx.blob_versioned_hashes is not None\n            for blob_versioned_hash in tx.blob_versioned_hashes\n        ]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.InvalidFeePayment","title":"<code>InvalidFeePayment</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Transaction described more than one fee payment type.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class InvalidFeePayment(Exception):\n    \"\"\"\n    Transaction described more than one fee payment type.\n    \"\"\"\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return \"only one type of fee payment field can be used in a single tx\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.InvalidFeePayment.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return \"only one type of fee payment field can be used in a single tx\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.InvalidSignaturePrivateKey","title":"<code>InvalidSignaturePrivateKey</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Transaction describes both the signature and private key of source account.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class InvalidSignaturePrivateKey(Exception):\n    \"\"\"\n    Transaction describes both the signature and private key of\n    source account.\n    \"\"\"\n\n    def __str__(self):\n        \"\"\"Print exception string\"\"\"\n        return \"can't define both 'signature' and 'private_key'\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.InvalidSignaturePrivateKey.__str__","title":"<code>__str__()</code>","text":"<p>Print exception string</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def __str__(self):\n    \"\"\"Print exception string\"\"\"\n    return \"can't define both 'signature' and 'private_key'\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Ensures the transaction has no conflicting properties.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def model_post_init(self, __context):\n    \"\"\"\n    Ensures the transaction has no conflicting properties.\n    \"\"\"\n    super().model_post_init(__context)\n\n    if self.gas_price is not None and (\n        self.max_fee_per_gas is not None\n        or self.max_priority_fee_per_gas is not None\n        or self.max_fee_per_blob_gas is not None\n    ):\n        raise Transaction.InvalidFeePayment()\n\n    if (\n        self.gas_price is None\n        and self.max_fee_per_gas is None\n        and self.max_priority_fee_per_gas is None\n        and self.max_fee_per_blob_gas is None\n    ):\n        self.gas_price = 10\n\n    if self.v is not None and self.secret_key is not None:\n        raise Transaction.InvalidSignaturePrivateKey()\n\n    if self.v is None and self.secret_key is None:\n        self.secret_key = Hash(TestPrivateKey)\n\n    if \"ty\" not in self.model_fields_set:\n        # Try to deduce transaction type from included fields\n        if self.max_fee_per_blob_gas is not None:\n            self.ty = 3\n        elif self.max_fee_per_gas is not None:\n            self.ty = 2\n        elif self.access_list is not None:\n            self.ty = 1\n        else:\n            self.ty = 0\n\n    # Set default values for fields that are required for certain tx types\n    if self.ty &gt;= 1 and self.access_list is None:\n        self.access_list = []\n\n    if self.ty &gt;= 2 and self.max_priority_fee_per_gas is None:\n        self.max_priority_fee_per_gas = 0\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.with_error","title":"<code>with_error(error)</code>","text":"<p>Create a copy of the transaction with an added error.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def with_error(\n    self, error: List[TransactionException] | TransactionException\n) -&gt; \"Transaction\":\n    \"\"\"\n    Create a copy of the transaction with an added error.\n    \"\"\"\n    return self.copy(error=error)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.with_nonce","title":"<code>with_nonce(nonce)</code>","text":"<p>Create a copy of the transaction with a modified nonce.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def with_nonce(self, nonce: int) -&gt; \"Transaction\":\n    \"\"\"\n    Create a copy of the transaction with a modified nonce.\n    \"\"\"\n    return self.copy(nonce=nonce)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.with_signature_and_sender","title":"<code>with_signature_and_sender(*, keep_secret_key=False)</code>","text":"<p>Returns a signed version of the transaction using the private key.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>def with_signature_and_sender(self, *, keep_secret_key: bool = False) -&gt; \"Transaction\":\n    \"\"\"\n    Returns a signed version of the transaction using the private key.\n    \"\"\"\n    updated_values: Dict[str, Any] = {}\n\n    if self.v is not None:\n        # Transaction already signed\n        if self.sender is not None:\n            return self\n\n        public_key = PublicKey.from_signature_and_message(\n            self.signature_bytes, keccak256(self.signing_bytes), hasher=None\n        )\n        updated_values[\"sender\"] = Address(\n            keccak256(public_key.format(compressed=False)[1:])[32 - 20 :]\n        )\n        return self.copy(**updated_values)\n\n    if self.secret_key is None:\n        raise ValueError(\"secret_key must be set to sign a transaction\")\n\n    # Get the signing bytes\n    signing_hash = keccak256(self.signing_bytes)\n\n    # Sign the bytes\n    signature_bytes = PrivateKey(secret=self.secret_key).sign_recoverable(\n        signing_hash, hasher=None\n    )\n    public_key = PublicKey.from_signature_and_message(\n        signature_bytes, signing_hash, hasher=None\n    )\n\n    sender = keccak256(public_key.format(compressed=False)[1:])[32 - 20 :]\n    updated_values[\"sender\"] = Address(sender)\n\n    v, r, s = (\n        signature_bytes[64],\n        int.from_bytes(signature_bytes[0:32], byteorder=\"big\"),\n        int.from_bytes(signature_bytes[32:64], byteorder=\"big\"),\n    )\n    if self.ty == 0:\n        if self.protected:\n            v += 35 + (self.chain_id * 2)\n        else:  # not protected\n            v += 27\n\n    updated_values[\"v\"] = HexNumber(v)\n    updated_values[\"r\"] = HexNumber(r)\n    updated_values[\"s\"] = HexNumber(s)\n\n    updated_values[\"secret_key\"] = None\n\n    updated_tx = self.model_copy(update=updated_values)\n\n    # Remove the secret key if requested\n    if keep_secret_key:\n        updated_tx.secret_key = self.secret_key\n    return updated_tx\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.signing_envelope","title":"<code>signing_envelope: List[Any]</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the list of values included in the envelope used for signing.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.payload_body","title":"<code>payload_body: List[Any]</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the list of values included in the transaction body.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.rlp","title":"<code>rlp: bytes</code>  <code>cached</code> <code>property</code>","text":"<p>Returns bytes of the serialized representation of the transaction, which is almost always RLP encoding.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.signing_bytes","title":"<code>signing_bytes: bytes</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the serialized bytes of the transaction used for signing.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.signature_bytes","title":"<code>signature_bytes: bytes</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the serialized bytes of the transaction signature.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.serializable_list","title":"<code>serializable_list: Any</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the list of values included in the transaction as a serializable object.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.list_root","title":"<code>list_root(input_txs)</code>  <code>staticmethod</code>","text":"<p>Returns the transactions root of a list of transactions.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@staticmethod\ndef list_root(input_txs: List[\"Transaction\"]) -&gt; Hash:\n    \"\"\"\n    Returns the transactions root of a list of transactions.\n    \"\"\"\n    t = HexaryTrie(db={})\n    for i, tx in enumerate(input_txs):\n        t.set(eth_rlp.encode(Uint(i)), tx.rlp)\n    return Hash(t.root_hash)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Transaction.list_blob_versioned_hashes","title":"<code>list_blob_versioned_hashes(input_txs)</code>  <code>staticmethod</code>","text":"<p>Gets a list of ordered blob versioned hashes from a list of transactions.</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>@staticmethod\ndef list_blob_versioned_hashes(input_txs: List[\"Transaction\"]) -&gt; List[Hash]:\n    \"\"\"\n    Gets a list of ordered blob versioned hashes from a list of transactions.\n    \"\"\"\n    return [\n        blob_versioned_hash\n        for tx in input_txs\n        if tx.blob_versioned_hashes is not None\n        for blob_versioned_hash in tx.blob_versioned_hashes\n    ]\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Withdrawal","title":"<code>Withdrawal</code>","text":"<p>               Bases: <code>WithdrawalGeneric[HexNumber]</code></p> <p>Withdrawal type</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class Withdrawal(WithdrawalGeneric[HexNumber]):\n    \"\"\"\n    Withdrawal type\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.WithdrawalRequest","title":"<code>WithdrawalRequest</code>","text":"<p>               Bases: <code>WithdrawalRequestGeneric[HexNumber]</code></p> <p>Withdrawal Request type</p> Source code in <code>src/ethereum_test_tools/common/types.py</code> <pre><code>class WithdrawalRequest(WithdrawalRequestGeneric[HexNumber]):\n    \"\"\"\n    Withdrawal Request type\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.add_kzg_version","title":"<code>add_kzg_version(b_hashes, kzg_version)</code>","text":"<p>Adds the Kzg Version to each blob hash.</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def add_kzg_version(\n    b_hashes: List[bytes | SupportsBytes | int | str], kzg_version: int\n) -&gt; List[bytes]:\n    \"\"\"\n    Adds the Kzg Version to each blob hash.\n    \"\"\"\n    kzg_version_hex = bytes([kzg_version])\n    kzg_versioned_hashes = []\n\n    for hash in b_hashes:\n        hash = bytes(Hash(hash))\n        if isinstance(hash, int) or isinstance(hash, str):\n            kzg_versioned_hashes.append(kzg_version_hex + hash[1:])\n        elif isinstance(hash, bytes) or isinstance(hash, SupportsBytes):\n            if isinstance(hash, SupportsBytes):\n                hash = bytes(hash)\n            kzg_versioned_hashes.append(kzg_version_hex + hash[1:])\n        else:\n            raise TypeError(\"Blob hash must be either an integer, string or bytes\")\n    return kzg_versioned_hashes\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ceiling_division","title":"<code>ceiling_division(a, b)</code>","text":"<p>Calculates the ceil without using floating point. Used by many of the EVM's formulas</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def ceiling_division(a: int, b: int) -&gt; int:\n    \"\"\"\n    Calculates the ceil without using floating point.\n    Used by many of the EVM's formulas\n    \"\"\"\n    return -(a // -b)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.compute_create2_address","title":"<code>compute_create2_address(address, salt, initcode)</code>","text":"<p>Compute address of the resulting contract created using the <code>CREATE2</code> opcode.</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def compute_create2_address(\n    address: FixedSizeBytesConvertible, salt: FixedSizeBytesConvertible, initcode: BytesConvertible\n) -&gt; Address:\n    \"\"\"\n    Compute address of the resulting contract created using the `CREATE2`\n    opcode.\n    \"\"\"\n    hash = keccak256(b\"\\xff\" + Address(address) + Hash(salt) + keccak256(Bytes(initcode)))\n    return Address(hash[-20:])\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.compute_create_address","title":"<code>compute_create_address(address, nonce)</code>","text":"<p>Compute address of the resulting contract created using a transaction or the <code>CREATE</code> opcode.</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def compute_create_address(address: FixedSizeBytesConvertible, nonce: int) -&gt; Address:\n    \"\"\"\n    Compute address of the resulting contract created using a transaction\n    or the `CREATE` opcode.\n    \"\"\"\n    nonce_bytes = bytes() if nonce == 0 else nonce.to_bytes(length=1, byteorder=\"big\")\n    hash = keccak256(encode([Address(address), nonce_bytes]))\n    return Address(hash[-20:])\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.compute_eofcreate_address","title":"<code>compute_eofcreate_address(address, salt, init_container)</code>","text":"<p>Compute address of the resulting contract created using the <code>EOFCREATE</code> opcode.</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def compute_eofcreate_address(\n    address: FixedSizeBytesConvertible,\n    salt: FixedSizeBytesConvertible,\n    init_container: BytesConvertible,\n) -&gt; Address:\n    \"\"\"\n    Compute address of the resulting contract created using the `EOFCREATE` opcode.\n    \"\"\"\n    hash = keccak256(b\"\\xff\" + Address(address) + Hash(salt) + keccak256(Bytes(init_container)))\n    return Address(hash[-20:])\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.copy_opcode_cost","title":"<code>copy_opcode_cost(length)</code>","text":"<p>Calculates the cost of the COPY opcodes, assuming memory expansion from empty memory, based on the costs specified in the yellow paper: https://ethereum.github.io/yellowpaper/paper.pdf</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def copy_opcode_cost(length: int) -&gt; int:\n    \"\"\"\n    Calculates the cost of the COPY opcodes, assuming memory expansion from\n    empty memory, based on the costs specified in the yellow paper:\n    https://ethereum.github.io/yellowpaper/paper.pdf\n    \"\"\"\n    return 3 + (ceiling_division(length, 32) * 3) + cost_memory_bytes(length, 0)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.cost_memory_bytes","title":"<code>cost_memory_bytes(new_bytes, previous_bytes)</code>","text":"<p>Calculates the cost of memory expansion, based on the costs specified in the yellow paper: https://ethereum.github.io/yellowpaper/paper.pdf</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def cost_memory_bytes(new_bytes: int, previous_bytes: int) -&gt; int:\n    \"\"\"\n    Calculates the cost of memory expansion, based on the costs specified in\n    the yellow paper: https://ethereum.github.io/yellowpaper/paper.pdf\n    \"\"\"\n    if new_bytes &lt;= previous_bytes:\n        return 0\n    new_words = ceiling_division(new_bytes, 32)\n    previous_words = ceiling_division(previous_bytes, 32)\n\n    def c(w: int) -&gt; int:\n        g_memory = 3\n        return (g_memory * w) + ((w * w) // 512)\n\n    return c(new_words) - c(previous_words)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.eip_2028_transaction_data_cost","title":"<code>eip_2028_transaction_data_cost(data)</code>","text":"<p>Calculates the cost of a given data as part of a transaction, based on the costs specified in EIP-2028: https://eips.ethereum.org/EIPS/eip-2028</p> Source code in <code>src/ethereum_test_tools/common/helpers.py</code> <pre><code>def eip_2028_transaction_data_cost(data: BytesConvertible) -&gt; int:\n    \"\"\"\n    Calculates the cost of a given data as part of a transaction, based on the\n    costs specified in EIP-2028: https://eips.ethereum.org/EIPS/eip-2028\n    \"\"\"\n    cost = 0\n    for b in Bytes(data):\n        if b == 0:\n            cost += 4\n        else:\n            cost += 16\n    return cost\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException","title":"<code>BlockException</code>","text":"<p>               Bases: <code>ExceptionBase</code></p> <p>Exception raised when a block is invalid, but not due to a transaction.</p> <p>E.g. all transactions in the block are valid, and can be applied to the state, but the block header contains an invalid field.</p> Source code in <code>src/ethereum_test_tools/exceptions/exceptions.py</code> <pre><code>@unique\nclass BlockException(ExceptionBase):\n    \"\"\"\n    Exception raised when a block is invalid, but not due to a transaction.\n\n    E.g. all transactions in the block are valid, and can be applied to the state, but the\n    block header contains an invalid field.\n    \"\"\"\n\n    TOO_MANY_UNCLES = auto()\n    \"\"\"\n    Block declares too many uncles over the allowed limit.\n    \"\"\"\n    UNCLE_IN_CHAIN = auto()\n    \"\"\"\n    Block declares uncle header that is already imported into chain.\n    \"\"\"\n    UNCLE_IS_ANCESTOR = auto()\n    \"\"\"\n    Block declares uncle header that is directly a parent of this block.\n    \"\"\"\n    UNCLE_IS_BROTHER = auto()\n    \"\"\"\n    Block declares two similar uncle headers.\n    \"\"\"\n    UNCLE_PARENT_INCORRECT = auto()\n    \"\"\"\n    Block declares uncle header that is an outdated block to be an uncle.\n    \"\"\"\n    EXTRA_DATA_TOO_BIG = auto()\n    \"\"\"\n    Block header's extra data &gt;32 bytes.\n    \"\"\"\n    EXTRA_DATA_INVALID_DAO = auto()\n    \"\"\"\n    Block header's extra data after dao fork must be a fixed pre defined hash.\n    \"\"\"\n    UNKNOWN_PARENT = auto()\n    \"\"\"\n    Block header's parent hash does not correspond to any of existing blocks on chain.\n    \"\"\"\n    UNCLE_UNKNOWN_PARENT = auto()\n    \"\"\"\n    Uncle header's parent hash does not correspond to any of existing blocks on chain.\n    \"\"\"\n    UNKNOWN_PARENT_ZERO = auto()\n    \"\"\"\n    Block header's parent hash is zero hash.\n    \"\"\"\n    GASLIMIT_TOO_BIG = auto()\n    \"\"\"\n    Block header's gas limit &gt; 0x7fffffffffffffff.\n    \"\"\"\n    INVALID_BLOCK_NUMBER = auto()\n    \"\"\"\n    Block header's number != parent header's number + 1.\n    \"\"\"\n    INVALID_BLOCK_TIMESTAMP_OLDER_THAN_PARENT = auto()\n    \"\"\"\n    Block header's timestamp &lt;= parent header's timestamp.\n    \"\"\"\n    INVALID_DIFFICULTY = auto()\n    \"\"\"\n    Block header's difficulty does not match the difficulty formula calculated from previous block.\n    \"\"\"\n    INVALID_LOG_BLOOM = auto()\n    \"\"\"\n    Block header's logs bloom hash does not match the actually computed log bloom.\n    \"\"\"\n    INVALID_STATE_ROOT = auto()\n    \"\"\"\n    Block header's state root hash does not match the actually computed hash of the state.\n    \"\"\"\n    INVALID_RECEIPTS_ROOT = auto()\n    \"\"\"\n    Block header's receipts root hash does not match the actually computed hash of receipts.\n    \"\"\"\n    INVALID_TRANSACTIONS_ROOT = auto()\n    \"\"\"\n    Block header's transactions root hash does not match the actually computed hash of tx tree.\n    \"\"\"\n    INVALID_UNCLES_HASH = auto()\n    \"\"\"\n    Block header's uncle hash does not match the actually computed hash of block's uncles.\n    \"\"\"\n    GAS_USED_OVERFLOW = auto()\n    \"\"\"\n    Block transactions consume more gas than block header allow.\n    \"\"\"\n    INVALID_GASLIMIT = auto()\n    \"\"\"\n    Block header's gas limit does not match the gas limit formula calculated from previous block.\n    \"\"\"\n    INVALID_BASEFEE_PER_GAS = auto()\n    \"\"\"\n    Block header's base_fee_per_gas field is calculated incorrect.\n    \"\"\"\n    INVALID_GAS_USED = auto()\n    \"\"\"\n    Block header's actual gas used does not match the provided header's value\n    \"\"\"\n    INVALID_WITHDRAWALS_ROOT = auto()\n    \"\"\"\n    Block header's withdrawals root does not match calculated withdrawals root.\n    \"\"\"\n    INCORRECT_BLOCK_FORMAT = auto()\n    \"\"\"\n    Block's format is incorrect, contains invalid fields, is missing fields, or contains fields of\n    a fork that is not active yet.\n    \"\"\"\n    BLOB_GAS_USED_ABOVE_LIMIT = auto()\n    \"\"\"\n    Block's blob gas used in header is above the limit.\n    \"\"\"\n    INCORRECT_BLOB_GAS_USED = auto()\n    \"\"\"\n    Block's blob gas used in header is incorrect.\n    \"\"\"\n    INCORRECT_EXCESS_BLOB_GAS = auto()\n    \"\"\"\n    Block's excess blob gas in header is incorrect.\n    \"\"\"\n    RLP_STRUCTURES_ENCODING = auto()\n    \"\"\"\n    Block's rlp encoding is valid but ethereum structures in it are invalid.\n    \"\"\"\n    RLP_WITHDRAWALS_NOT_READ = auto()\n    \"\"\"\n    Block's rlp encoding is missing withdrawals.\n    \"\"\"\n    RLP_INVALID_FIELD_OVERFLOW_64 = auto()\n    \"\"\"\n    One of block's fields rlp is overflow 2**64 value.\n    \"\"\"\n    RLP_INVALID_ADDRESS = auto()\n    \"\"\"\n    Block withdrawals address is rlp of invalid address != 20 bytes.\n    \"\"\"\n    INVALID_REQUESTS = auto()\n    \"\"\"\n    Block's requests are invalid.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LEGACY = auto()\n    \"\"\"\n    Legacy block import is impossible in this chain configuration.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LEGACY_WRONG_PARENT = auto()\n    \"\"\"\n    Legacy block import is impossible, trying to import on top of a block that is not legacy.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LONDON_WRONG_PARENT = auto()\n    \"\"\"\n    Trying to import london (basefee) block on top of block that is not 1559.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_PARIS_WRONG_POW = auto()\n    \"\"\"\n    Trying to import paris(merge) block with PoW enabled.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_PARIS_WRONG_POS = auto()\n    \"\"\"\n    Trying to import paris(merge) block with PoS enabled before TTD is reached.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_LONDON_OVER_PARIS = auto()\n    \"\"\"\n    Trying to import london looking block over paris network (POS).\n    \"\"\"\n    IMPORT_IMPOSSIBLE_PARIS_OVER_SHANGHAI = auto()\n    \"\"\"\n    Trying to import paris block on top of shanghai block.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_SHANGHAI = auto()\n    \"\"\"\n    Shanghai block import is impossible in this chain configuration.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_UNCLES_OVER_PARIS = auto()\n    \"\"\"\n    Trying to import a block after paris fork that has not empty uncles hash.\n    \"\"\"\n    IMPORT_IMPOSSIBLE_DIFFICULTY_OVER_PARIS = auto()\n    \"\"\"\n    Trying to import a block after paris fork that has difficulty != 0.\n    \"\"\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.TOO_MANY_UNCLES","title":"<code>TOO_MANY_UNCLES = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares too many uncles over the allowed limit.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNCLE_IN_CHAIN","title":"<code>UNCLE_IN_CHAIN = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares uncle header that is already imported into chain.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNCLE_IS_ANCESTOR","title":"<code>UNCLE_IS_ANCESTOR = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares uncle header that is directly a parent of this block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNCLE_IS_BROTHER","title":"<code>UNCLE_IS_BROTHER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares two similar uncle headers.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNCLE_PARENT_INCORRECT","title":"<code>UNCLE_PARENT_INCORRECT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block declares uncle header that is an outdated block to be an uncle.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.EXTRA_DATA_TOO_BIG","title":"<code>EXTRA_DATA_TOO_BIG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's extra data &gt;32 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.EXTRA_DATA_INVALID_DAO","title":"<code>EXTRA_DATA_INVALID_DAO = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's extra data after dao fork must be a fixed pre defined hash.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNKNOWN_PARENT","title":"<code>UNKNOWN_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's parent hash does not correspond to any of existing blocks on chain.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNCLE_UNKNOWN_PARENT","title":"<code>UNCLE_UNKNOWN_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Uncle header's parent hash does not correspond to any of existing blocks on chain.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.UNKNOWN_PARENT_ZERO","title":"<code>UNKNOWN_PARENT_ZERO = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's parent hash is zero hash.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.GASLIMIT_TOO_BIG","title":"<code>GASLIMIT_TOO_BIG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's gas limit &gt; 0x7fffffffffffffff.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_BLOCK_NUMBER","title":"<code>INVALID_BLOCK_NUMBER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's number != parent header's number + 1.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_BLOCK_TIMESTAMP_OLDER_THAN_PARENT","title":"<code>INVALID_BLOCK_TIMESTAMP_OLDER_THAN_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's timestamp &lt;= parent header's timestamp.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_DIFFICULTY","title":"<code>INVALID_DIFFICULTY = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's difficulty does not match the difficulty formula calculated from previous block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_LOG_BLOOM","title":"<code>INVALID_LOG_BLOOM = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's logs bloom hash does not match the actually computed log bloom.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_STATE_ROOT","title":"<code>INVALID_STATE_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's state root hash does not match the actually computed hash of the state.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_RECEIPTS_ROOT","title":"<code>INVALID_RECEIPTS_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's receipts root hash does not match the actually computed hash of receipts.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_TRANSACTIONS_ROOT","title":"<code>INVALID_TRANSACTIONS_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's transactions root hash does not match the actually computed hash of tx tree.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_UNCLES_HASH","title":"<code>INVALID_UNCLES_HASH = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's uncle hash does not match the actually computed hash of block's uncles.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.GAS_USED_OVERFLOW","title":"<code>GAS_USED_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block transactions consume more gas than block header allow.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_GASLIMIT","title":"<code>INVALID_GASLIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's gas limit does not match the gas limit formula calculated from previous block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_BASEFEE_PER_GAS","title":"<code>INVALID_BASEFEE_PER_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's base_fee_per_gas field is calculated incorrect.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_GAS_USED","title":"<code>INVALID_GAS_USED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's actual gas used does not match the provided header's value</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_WITHDRAWALS_ROOT","title":"<code>INVALID_WITHDRAWALS_ROOT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block header's withdrawals root does not match calculated withdrawals root.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INCORRECT_BLOCK_FORMAT","title":"<code>INCORRECT_BLOCK_FORMAT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's format is incorrect, contains invalid fields, is missing fields, or contains fields of a fork that is not active yet.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.BLOB_GAS_USED_ABOVE_LIMIT","title":"<code>BLOB_GAS_USED_ABOVE_LIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's blob gas used in header is above the limit.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INCORRECT_BLOB_GAS_USED","title":"<code>INCORRECT_BLOB_GAS_USED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's blob gas used in header is incorrect.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INCORRECT_EXCESS_BLOB_GAS","title":"<code>INCORRECT_EXCESS_BLOB_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's excess blob gas in header is incorrect.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.RLP_STRUCTURES_ENCODING","title":"<code>RLP_STRUCTURES_ENCODING = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's rlp encoding is valid but ethereum structures in it are invalid.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.RLP_WITHDRAWALS_NOT_READ","title":"<code>RLP_WITHDRAWALS_NOT_READ = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's rlp encoding is missing withdrawals.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.RLP_INVALID_FIELD_OVERFLOW_64","title":"<code>RLP_INVALID_FIELD_OVERFLOW_64 = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>One of block's fields rlp is overflow 2**64 value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.RLP_INVALID_ADDRESS","title":"<code>RLP_INVALID_ADDRESS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block withdrawals address is rlp of invalid address != 20 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.INVALID_REQUESTS","title":"<code>INVALID_REQUESTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Block's requests are invalid.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LEGACY","title":"<code>IMPORT_IMPOSSIBLE_LEGACY = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Legacy block import is impossible in this chain configuration.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LEGACY_WRONG_PARENT","title":"<code>IMPORT_IMPOSSIBLE_LEGACY_WRONG_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Legacy block import is impossible, trying to import on top of a block that is not legacy.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LONDON_WRONG_PARENT","title":"<code>IMPORT_IMPOSSIBLE_LONDON_WRONG_PARENT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import london (basefee) block on top of block that is not 1559.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_PARIS_WRONG_POW","title":"<code>IMPORT_IMPOSSIBLE_PARIS_WRONG_POW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import paris(merge) block with PoW enabled.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_PARIS_WRONG_POS","title":"<code>IMPORT_IMPOSSIBLE_PARIS_WRONG_POS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import paris(merge) block with PoS enabled before TTD is reached.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_LONDON_OVER_PARIS","title":"<code>IMPORT_IMPOSSIBLE_LONDON_OVER_PARIS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import london looking block over paris network (POS).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_PARIS_OVER_SHANGHAI","title":"<code>IMPORT_IMPOSSIBLE_PARIS_OVER_SHANGHAI = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import paris block on top of shanghai block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_SHANGHAI","title":"<code>IMPORT_IMPOSSIBLE_SHANGHAI = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Shanghai block import is impossible in this chain configuration.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_UNCLES_OVER_PARIS","title":"<code>IMPORT_IMPOSSIBLE_UNCLES_OVER_PARIS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import a block after paris fork that has not empty uncles hash.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockException.IMPORT_IMPOSSIBLE_DIFFICULTY_OVER_PARIS","title":"<code>IMPORT_IMPOSSIBLE_DIFFICULTY_OVER_PARIS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trying to import a block after paris fork that has difficulty != 0.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException","title":"<code>EOFException</code>","text":"<p>               Bases: <code>ExceptionBase</code></p> <p>Exception raised when an EOF container is invalid.</p> Source code in <code>src/ethereum_test_tools/exceptions/exceptions.py</code> <pre><code>@unique\nclass EOFException(ExceptionBase):\n    \"\"\"\n    Exception raised when an EOF container is invalid.\n    \"\"\"\n\n    DEFAULT_EXCEPTION = auto()\n    \"\"\"\n    Expect some exception, not yet known.\n    \"\"\"\n\n    UNDEFINED_EXCEPTION = auto()\n    \"\"\"\n    Indicates that exception string is not mapped to an exception enum.\n    \"\"\"\n\n    UNDEFINED_INSTRUCTION = auto()\n    \"\"\"\n    EOF container has undefined instruction in it's body code.\n    \"\"\"\n\n    UNKNOWN_VERSION = auto()\n    \"\"\"\n    EOF container has an unknown version.\n    \"\"\"\n    INCOMPLETE_MAGIC = auto()\n    \"\"\"\n    EOF container has not enough bytes to read magic.\n    \"\"\"\n    INVALID_MAGIC = auto()\n    \"\"\"\n    EOF container has not allowed magic version byte.\n    \"\"\"\n    INVALID_VERSION = auto()\n    \"\"\"\n    EOF container version bytes mismatch.\n    \"\"\"\n    INVALID_NON_RETURNING_FLAG = auto()\n    \"\"\"\n    EOF container's section has non-returning flag set incorrectly.\n    \"\"\"\n    INVALID_RJUMP_DESTINATION = auto()\n    \"\"\"\n    Code has RJUMP instruction with invalid parameters.\n    \"\"\"\n    MISSING_TYPE_HEADER = auto()\n    \"\"\"\n    EOF container missing types section.\n    \"\"\"\n    INVALID_TYPE_SECTION_SIZE = auto()\n    \"\"\"\n    EOF container types section has wrong size.\n    \"\"\"\n    INVALID_TYPE_BODY = auto()\n    \"\"\"\n    EOF container types body section bytes are wrong.\n    \"\"\"\n    MISSING_CODE_HEADER = auto()\n    \"\"\"\n    EOF container missing code section.\n    \"\"\"\n    INVALID_CODE_SECTION = auto()\n    \"\"\"\n    EOF container code section bytes are incorrect.\n    \"\"\"\n    INCOMPLETE_CODE_HEADER = auto()\n    \"\"\"\n    EOF container code header missing bytes.\n    \"\"\"\n    INCOMPLETE_DATA_HEADER = auto()\n    \"\"\"\n    EOF container data header missing bytes.\n    \"\"\"\n    ZERO_SECTION_SIZE = auto()\n    \"\"\"\n    EOF container data header construction is wrong.\n    \"\"\"\n    MISSING_DATA_SECTION = auto()\n    \"\"\"\n    EOF container missing data section\n    \"\"\"\n    INCOMPLETE_CONTAINER = auto()\n    \"\"\"\n    EOF container bytes are incomplete.\n    \"\"\"\n    INVALID_SECTION_BODIES_SIZE = auto()\n    \"\"\"\n    Sections bodies does not match sections headers.\n    \"\"\"\n    TRAILING_BYTES = auto()\n    \"\"\"\n    EOF container has bytes beyond data section.\n    \"\"\"\n    MISSING_TERMINATOR = auto()\n    \"\"\"\n    EOF container missing terminator bytes between header and body.\n    \"\"\"\n    MISSING_HEADERS_TERMINATOR = auto()\n    \"\"\"\n    Some type of another exception about missing headers terminator.\n    \"\"\"\n    INVALID_FIRST_SECTION_TYPE = auto()\n    \"\"\"\n    EOF container header does not have types section first.\n    \"\"\"\n    INCOMPLETE_SECTION_NUMBER = auto()\n    \"\"\"\n    EOF container header has section that is missing declaration bytes.\n    \"\"\"\n    INCOMPLETE_SECTION_SIZE = auto()\n    \"\"\"\n    EOF container header has section that is defined incorrectly.\n    \"\"\"\n    TOO_MANY_CODE_SECTIONS = auto()\n    \"\"\"\n    EOF container header has too many code sections.\n    \"\"\"\n    MISSING_STOP_OPCODE = auto()\n    \"\"\"\n    EOF container's code missing STOP bytecode at it's end.\n    \"\"\"\n    INPUTS_OUTPUTS_NUM_ABOVE_LIMIT = auto()\n    \"\"\"\n    EOF container code section inputs/outputs number is above the limit\n    \"\"\"\n    UNREACHABLE_INSTRUCTIONS = auto()\n    \"\"\"\n    EOF container's code have instructions that are unreachable.\n    \"\"\"\n    UNREACHABLE_CODE_SECTIONS = auto()\n    \"\"\"\n    EOF container's body have code sections that are unreachable.\n    \"\"\"\n    STACK_UNDERFLOW = auto()\n    \"\"\"\n    EOF container's code produces an stack underflow.\n    \"\"\"\n    MAX_STACK_HEIGHT_ABOVE_LIMIT = auto()\n    \"\"\"\n    EOF container's specified max stack height is above the limit.\n    \"\"\"\n    STACK_HIGHER_THAN_OUTPUTS = auto()\n    \"\"\"\n    EOF container section stack height is higher than the outputs.\n    when returning\n    \"\"\"\n    JUMPF_DESTINATION_INCOMPATIBLE_OUTPUTS = auto()\n    \"\"\"\n    EOF container section JUMPF's to a destination section with incompatible outputs.\n    \"\"\"\n    INVALID_MAX_STACK_HEIGHT = auto()\n    \"\"\"\n    EOF container section's specified max stack height does not match the actual stack height.\n    \"\"\"\n    INVALID_DATALOADN_INDEX = auto()\n    \"\"\"\n    A DATALOADN instruction has out-of-bounds index for the data section.\n    \"\"\"\n    TRUNCATED_INSTRUCTION = auto()\n    \"\"\"\n    EOF container's code section has truncated instruction.\n    \"\"\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.DEFAULT_EXCEPTION","title":"<code>DEFAULT_EXCEPTION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Expect some exception, not yet known.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.UNDEFINED_EXCEPTION","title":"<code>UNDEFINED_EXCEPTION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Indicates that exception string is not mapped to an exception enum.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.UNDEFINED_INSTRUCTION","title":"<code>UNDEFINED_INSTRUCTION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container has undefined instruction in it's body code.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.UNKNOWN_VERSION","title":"<code>UNKNOWN_VERSION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container has an unknown version.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INCOMPLETE_MAGIC","title":"<code>INCOMPLETE_MAGIC = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container has not enough bytes to read magic.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_MAGIC","title":"<code>INVALID_MAGIC = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container has not allowed magic version byte.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_VERSION","title":"<code>INVALID_VERSION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container version bytes mismatch.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_NON_RETURNING_FLAG","title":"<code>INVALID_NON_RETURNING_FLAG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's section has non-returning flag set incorrectly.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_RJUMP_DESTINATION","title":"<code>INVALID_RJUMP_DESTINATION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Code has RJUMP instruction with invalid parameters.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MISSING_TYPE_HEADER","title":"<code>MISSING_TYPE_HEADER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container missing types section.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_TYPE_SECTION_SIZE","title":"<code>INVALID_TYPE_SECTION_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container types section has wrong size.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_TYPE_BODY","title":"<code>INVALID_TYPE_BODY = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container types body section bytes are wrong.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MISSING_CODE_HEADER","title":"<code>MISSING_CODE_HEADER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container missing code section.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_CODE_SECTION","title":"<code>INVALID_CODE_SECTION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container code section bytes are incorrect.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INCOMPLETE_CODE_HEADER","title":"<code>INCOMPLETE_CODE_HEADER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container code header missing bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INCOMPLETE_DATA_HEADER","title":"<code>INCOMPLETE_DATA_HEADER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container data header missing bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.ZERO_SECTION_SIZE","title":"<code>ZERO_SECTION_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container data header construction is wrong.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MISSING_DATA_SECTION","title":"<code>MISSING_DATA_SECTION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container missing data section</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INCOMPLETE_CONTAINER","title":"<code>INCOMPLETE_CONTAINER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container bytes are incomplete.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_SECTION_BODIES_SIZE","title":"<code>INVALID_SECTION_BODIES_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Sections bodies does not match sections headers.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.TRAILING_BYTES","title":"<code>TRAILING_BYTES = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container has bytes beyond data section.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MISSING_TERMINATOR","title":"<code>MISSING_TERMINATOR = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container missing terminator bytes between header and body.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MISSING_HEADERS_TERMINATOR","title":"<code>MISSING_HEADERS_TERMINATOR = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Some type of another exception about missing headers terminator.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_FIRST_SECTION_TYPE","title":"<code>INVALID_FIRST_SECTION_TYPE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container header does not have types section first.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INCOMPLETE_SECTION_NUMBER","title":"<code>INCOMPLETE_SECTION_NUMBER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container header has section that is missing declaration bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INCOMPLETE_SECTION_SIZE","title":"<code>INCOMPLETE_SECTION_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container header has section that is defined incorrectly.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.TOO_MANY_CODE_SECTIONS","title":"<code>TOO_MANY_CODE_SECTIONS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container header has too many code sections.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MISSING_STOP_OPCODE","title":"<code>MISSING_STOP_OPCODE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's code missing STOP bytecode at it's end.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INPUTS_OUTPUTS_NUM_ABOVE_LIMIT","title":"<code>INPUTS_OUTPUTS_NUM_ABOVE_LIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container code section inputs/outputs number is above the limit</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.UNREACHABLE_INSTRUCTIONS","title":"<code>UNREACHABLE_INSTRUCTIONS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's code have instructions that are unreachable.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.UNREACHABLE_CODE_SECTIONS","title":"<code>UNREACHABLE_CODE_SECTIONS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's body have code sections that are unreachable.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.STACK_UNDERFLOW","title":"<code>STACK_UNDERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's code produces an stack underflow.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.MAX_STACK_HEIGHT_ABOVE_LIMIT","title":"<code>MAX_STACK_HEIGHT_ABOVE_LIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's specified max stack height is above the limit.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.STACK_HIGHER_THAN_OUTPUTS","title":"<code>STACK_HIGHER_THAN_OUTPUTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container section stack height is higher than the outputs. when returning</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.JUMPF_DESTINATION_INCOMPATIBLE_OUTPUTS","title":"<code>JUMPF_DESTINATION_INCOMPATIBLE_OUTPUTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container section JUMPF's to a destination section with incompatible outputs.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_MAX_STACK_HEIGHT","title":"<code>INVALID_MAX_STACK_HEIGHT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container section's specified max stack height does not match the actual stack height.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.INVALID_DATALOADN_INDEX","title":"<code>INVALID_DATALOADN_INDEX = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A DATALOADN instruction has out-of-bounds index for the data section.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFException.TRUNCATED_INSTRUCTION","title":"<code>TRUNCATED_INSTRUCTION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EOF container's code section has truncated instruction.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException","title":"<code>TransactionException</code>","text":"<p>               Bases: <code>ExceptionBase</code></p> <p>Exception raised when a transaction is invalid, and thus cannot be executed.</p> <p>If a transaction with any of these exceptions is included in a block, the block is invalid.</p> Source code in <code>src/ethereum_test_tools/exceptions/exceptions.py</code> <pre><code>@unique\nclass TransactionException(ExceptionBase):\n    \"\"\"\n    Exception raised when a transaction is invalid, and thus cannot be executed.\n\n    If a transaction with any of these exceptions is included in a block, the block is invalid.\n    \"\"\"\n\n    TYPE_NOT_SUPPORTED = auto()\n    \"\"\"\n    Transaction type is not supported on this chain configuration.\n    \"\"\"\n    SENDER_NOT_EOA = auto()\n    \"\"\"\n    Transaction is coming from address that is not exist anymore.\n    \"\"\"\n    ADDRESS_TOO_SHORT = auto()\n    \"\"\"\n    Transaction `to` is not allowed to be less than 20 bytes.\n    \"\"\"\n    ADDRESS_TOO_LONG = auto()\n    \"\"\"\n    Transaction `to` is not allowed to be more than 20 bytes.\n    \"\"\"\n    NONCE_MISMATCH_TOO_HIGH = auto()\n    \"\"\"\n    Transaction nonce &gt; sender.nonce.\n    \"\"\"\n    NONCE_MISMATCH_TOO_LOW = auto()\n    \"\"\"\n    Transaction nonce &lt; sender.nonce.\n    \"\"\"\n    NONCE_TOO_BIG = auto()\n    \"\"\"\n    Transaction `nonce` is not allowed to be max_uint64 - 1 (this is probably TransactionTest).\n    \"\"\"\n    NONCE_IS_MAX = auto()\n    \"\"\"\n    Transaction `nonce` is not allowed to be max_uint64 - 1 (this is StateTests).\n    \"\"\"\n    NONCE_OVERFLOW = auto()\n    \"\"\"\n    Transaction `nonce` is not allowed to be more than uint64.\n    \"\"\"\n    GASLIMIT_OVERFLOW = auto()\n    \"\"\"\n    Transaction gaslimit exceeds 2^64-1 maximum value.\n    \"\"\"\n    VALUE_OVERFLOW = auto()\n    \"\"\"\n    Transaction value exceeds 2^256-1 maximum value.\n    \"\"\"\n    GASPRICE_OVERFLOW = auto()\n    \"\"\"\n    Transaction gasPrice exceeds 2^256-1 maximum value.\n    \"\"\"\n    GASLIMIT_PRICE_PRODUCT_OVERFLOW = auto()\n    \"\"\"\n    Transaction gasPrice * gasLimit exceeds 2^256-1 maximum value.\n    \"\"\"\n    INVALID_SIGNATURE_VRS = auto()\n    \"\"\"\n    Invalid transaction v, r, s values.\n    \"\"\"\n    RLP_INVALID_SIGNATURE_R = auto()\n    \"\"\"\n    Error reading transaction signature R value.\n    \"\"\"\n    RLP_INVALID_SIGNATURE_S = auto()\n    \"\"\"\n    Error reading transaction signature S value.\n    \"\"\"\n    RLP_LEADING_ZEROS_GASLIMIT = auto()\n    \"\"\"\n    Error reading transaction gaslimit field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_GASPRICE = auto()\n    \"\"\"\n    Error reading transaction gasprice field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_VALUE = auto()\n    \"\"\"\n    Error reading transaction value field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_NONCE = auto()\n    \"\"\"\n    Error reading transaction nonce field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_R = auto()\n    \"\"\"\n    Error reading transaction signature R field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_S = auto()\n    \"\"\"\n    Error reading transaction signature S field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_V = auto()\n    \"\"\"\n    Error reading transaction signature V field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_BASEFEE = auto()\n    \"\"\"\n    Error reading transaction basefee field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_PRIORITY_FEE = auto()\n    \"\"\"\n    Error reading transaction priority fee field RLP.\n    \"\"\"\n    RLP_LEADING_ZEROS_DATA_SIZE = auto()\n    \"\"\"\n    Error reading transaction data field RLP, (rlp field length has leading zeros).\n    \"\"\"\n    RLP_LEADING_ZEROS_NONCE_SIZE = auto()\n    \"\"\"\n    Error reading transaction nonce field RLP, (rlp field length has leading zeros).\n    \"\"\"\n    RLP_TOO_FEW_ELEMENTS = auto()\n    \"\"\"\n    Error reading transaction RLP, structure has too few elements than expected.\n    \"\"\"\n    RLP_TOO_MANY_ELEMENTS = auto()\n    \"\"\"\n    Error reading transaction RLP, structure has too many elements than expected.\n    \"\"\"\n    RLP_ERROR_EOF = auto()\n    \"\"\"\n    Error reading transaction RLP, rlp stream unexpectedly finished.\n    \"\"\"\n    RLP_ERROR_SIZE = auto()\n    \"\"\"\n    Error reading transaction RLP, rlp size is invalid.\n    \"\"\"\n    RLP_ERROR_SIZE_LEADING_ZEROS = auto()\n    \"\"\"\n    Error reading transaction RLP, field size has leading zeros.\n    \"\"\"\n    INVALID_CHAINID = auto()\n    \"\"\"\n    Transaction chain id encoding is incorrect.\n    \"\"\"\n    RLP_INVALID_DATA = auto()\n    \"\"\"\n    Transaction data field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_GASLIMIT = auto()\n    \"\"\"\n    Transaction gaslimit field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_NONCE = auto()\n    \"\"\"\n    Transaction nonce field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_TO = auto()\n    \"\"\"\n    Transaction to field is invalid rlp.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_LONG = auto()\n    \"\"\"\n    Transaction access list address is &gt; 20 bytes.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_SHORT = auto()\n    \"\"\"\n    Transaction access list address is &lt; 20 bytes.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_STORAGE_TOO_LONG = auto()\n    \"\"\"\n    Transaction access list storage hash &gt; 32 bytes.\n    \"\"\"\n    RLP_INVALID_ACCESS_LIST_STORAGE_TOO_SHORT = auto()\n    \"\"\"\n    Transaction access list storage hash &lt; 32 bytes.\n    \"\"\"\n    RLP_INVALID_HEADER = auto()\n    \"\"\"\n    Transaction failed to read from RLP as rlp header is invalid.\n    \"\"\"\n    RLP_INVALID_VALUE = auto()\n    \"\"\"\n    Transaction value field is invalid rlp/structure.\n    \"\"\"\n    EC_RECOVERY_FAIL = auto()\n    \"\"\"\n    Transaction has correct signature, but ec recovery failed.\n    \"\"\"\n    INSUFFICIENT_ACCOUNT_FUNDS = auto()\n    \"\"\"\n    Transaction's sender does not have enough funds to pay for the transaction.\n    \"\"\"\n    INSUFFICIENT_MAX_FEE_PER_GAS = auto()\n    \"\"\"\n    Transaction's max-fee-per-gas is lower than the block base-fee.\n    \"\"\"\n    PRIORITY_OVERFLOW = auto()\n    \"\"\"\n    Transaction's max-priority-fee-per-gas is exceeds 2^256-1 maximum value.\n    \"\"\"\n    PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS = auto()\n    \"\"\"\n    Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas.\n    \"\"\"\n    PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS_2 = auto()\n    \"\"\"\n    Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas (TransactionTests).\n    \"\"\"\n    INSUFFICIENT_MAX_FEE_PER_BLOB_GAS = auto()\n    \"\"\"\n    Transaction's max-fee-per-blob-gas is lower than the block's blob-gas price.\n    \"\"\"\n    INTRINSIC_GAS_TOO_LOW = auto()\n    \"\"\"\n    Transaction's gas limit is too low.\n    \"\"\"\n    INITCODE_SIZE_EXCEEDED = auto()\n    \"\"\"\n    Transaction's initcode for a contract-creating transaction is too large.\n    \"\"\"\n    TYPE_3_TX_PRE_FORK = auto()\n    \"\"\"\n    Transaction type 3 included before activation fork.\n    \"\"\"\n    TYPE_3_TX_ZERO_BLOBS_PRE_FORK = auto()\n    \"\"\"\n    Transaction type 3, with zero blobs, included before activation fork.\n    \"\"\"\n    TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH = auto()\n    \"\"\"\n    Transaction contains a blob versioned hash with an invalid version.\n    \"\"\"\n    TYPE_3_TX_WITH_FULL_BLOBS = auto()\n    \"\"\"\n    Transaction contains full blobs (network-version of the transaction).\n    \"\"\"\n    TYPE_3_TX_BLOB_COUNT_EXCEEDED = auto()\n    \"\"\"\n    Transaction contains too many blob versioned hashes.\n    \"\"\"\n    TYPE_3_TX_CONTRACT_CREATION = auto()\n    \"\"\"\n    Transaction is a type 3 transaction and has an empty `to`.\n    \"\"\"\n    TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED = auto()\n    \"\"\"\n    Transaction causes block to go over blob gas limit.\n    \"\"\"\n    GAS_ALLOWANCE_EXCEEDED = auto()\n    \"\"\"\n    Transaction causes block to go over blob gas limit.\n    \"\"\"\n    TYPE_3_TX_ZERO_BLOBS = auto()\n    \"\"\"\n    Transaction is type 3, but has no blobs.\n    \"\"\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_NOT_SUPPORTED","title":"<code>TYPE_NOT_SUPPORTED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction type is not supported on this chain configuration.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.SENDER_NOT_EOA","title":"<code>SENDER_NOT_EOA = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction is coming from address that is not exist anymore.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.ADDRESS_TOO_SHORT","title":"<code>ADDRESS_TOO_SHORT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>to</code> is not allowed to be less than 20 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.ADDRESS_TOO_LONG","title":"<code>ADDRESS_TOO_LONG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>to</code> is not allowed to be more than 20 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.NONCE_MISMATCH_TOO_HIGH","title":"<code>NONCE_MISMATCH_TOO_HIGH = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction nonce &gt; sender.nonce.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.NONCE_MISMATCH_TOO_LOW","title":"<code>NONCE_MISMATCH_TOO_LOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction nonce &lt; sender.nonce.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.NONCE_TOO_BIG","title":"<code>NONCE_TOO_BIG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>nonce</code> is not allowed to be max_uint64 - 1 (this is probably TransactionTest).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.NONCE_IS_MAX","title":"<code>NONCE_IS_MAX = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>nonce</code> is not allowed to be max_uint64 - 1 (this is StateTests).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.NONCE_OVERFLOW","title":"<code>NONCE_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction <code>nonce</code> is not allowed to be more than uint64.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.GASLIMIT_OVERFLOW","title":"<code>GASLIMIT_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gaslimit exceeds 2^64-1 maximum value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.VALUE_OVERFLOW","title":"<code>VALUE_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction value exceeds 2^256-1 maximum value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.GASPRICE_OVERFLOW","title":"<code>GASPRICE_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gasPrice exceeds 2^256-1 maximum value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.GASLIMIT_PRICE_PRODUCT_OVERFLOW","title":"<code>GASLIMIT_PRICE_PRODUCT_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gasPrice * gasLimit exceeds 2^256-1 maximum value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INVALID_SIGNATURE_VRS","title":"<code>INVALID_SIGNATURE_VRS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Invalid transaction v, r, s values.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_SIGNATURE_R","title":"<code>RLP_INVALID_SIGNATURE_R = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature R value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_SIGNATURE_S","title":"<code>RLP_INVALID_SIGNATURE_S = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature S value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_GASLIMIT","title":"<code>RLP_LEADING_ZEROS_GASLIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction gaslimit field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_GASPRICE","title":"<code>RLP_LEADING_ZEROS_GASPRICE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction gasprice field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_VALUE","title":"<code>RLP_LEADING_ZEROS_VALUE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction value field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_NONCE","title":"<code>RLP_LEADING_ZEROS_NONCE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction nonce field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_R","title":"<code>RLP_LEADING_ZEROS_R = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature R field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_S","title":"<code>RLP_LEADING_ZEROS_S = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature S field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_V","title":"<code>RLP_LEADING_ZEROS_V = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction signature V field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_BASEFEE","title":"<code>RLP_LEADING_ZEROS_BASEFEE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction basefee field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_PRIORITY_FEE","title":"<code>RLP_LEADING_ZEROS_PRIORITY_FEE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction priority fee field RLP.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_DATA_SIZE","title":"<code>RLP_LEADING_ZEROS_DATA_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction data field RLP, (rlp field length has leading zeros).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_LEADING_ZEROS_NONCE_SIZE","title":"<code>RLP_LEADING_ZEROS_NONCE_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction nonce field RLP, (rlp field length has leading zeros).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_TOO_FEW_ELEMENTS","title":"<code>RLP_TOO_FEW_ELEMENTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, structure has too few elements than expected.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_TOO_MANY_ELEMENTS","title":"<code>RLP_TOO_MANY_ELEMENTS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, structure has too many elements than expected.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_ERROR_EOF","title":"<code>RLP_ERROR_EOF = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, rlp stream unexpectedly finished.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_ERROR_SIZE","title":"<code>RLP_ERROR_SIZE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, rlp size is invalid.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_ERROR_SIZE_LEADING_ZEROS","title":"<code>RLP_ERROR_SIZE_LEADING_ZEROS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error reading transaction RLP, field size has leading zeros.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INVALID_CHAINID","title":"<code>INVALID_CHAINID = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction chain id encoding is incorrect.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_DATA","title":"<code>RLP_INVALID_DATA = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction data field is invalid rlp.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_GASLIMIT","title":"<code>RLP_INVALID_GASLIMIT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction gaslimit field is invalid rlp.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_NONCE","title":"<code>RLP_INVALID_NONCE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction nonce field is invalid rlp.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_TO","title":"<code>RLP_INVALID_TO = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction to field is invalid rlp.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_LONG","title":"<code>RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_LONG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list address is &gt; 20 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_SHORT","title":"<code>RLP_INVALID_ACCESS_LIST_ADDRESS_TOO_SHORT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list address is &lt; 20 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_STORAGE_TOO_LONG","title":"<code>RLP_INVALID_ACCESS_LIST_STORAGE_TOO_LONG = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list storage hash &gt; 32 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_ACCESS_LIST_STORAGE_TOO_SHORT","title":"<code>RLP_INVALID_ACCESS_LIST_STORAGE_TOO_SHORT = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction access list storage hash &lt; 32 bytes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_HEADER","title":"<code>RLP_INVALID_HEADER = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction failed to read from RLP as rlp header is invalid.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.RLP_INVALID_VALUE","title":"<code>RLP_INVALID_VALUE = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction value field is invalid rlp/structure.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.EC_RECOVERY_FAIL","title":"<code>EC_RECOVERY_FAIL = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction has correct signature, but ec recovery failed.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INSUFFICIENT_ACCOUNT_FUNDS","title":"<code>INSUFFICIENT_ACCOUNT_FUNDS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's sender does not have enough funds to pay for the transaction.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INSUFFICIENT_MAX_FEE_PER_GAS","title":"<code>INSUFFICIENT_MAX_FEE_PER_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-fee-per-gas is lower than the block base-fee.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.PRIORITY_OVERFLOW","title":"<code>PRIORITY_OVERFLOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-priority-fee-per-gas is exceeds 2^256-1 maximum value.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS","title":"<code>PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS_2","title":"<code>PRIORITY_GREATER_THAN_MAX_FEE_PER_GAS_2 = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-priority-fee-per-gas is greater than the max-fee-per-gas (TransactionTests).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INSUFFICIENT_MAX_FEE_PER_BLOB_GAS","title":"<code>INSUFFICIENT_MAX_FEE_PER_BLOB_GAS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's max-fee-per-blob-gas is lower than the block's blob-gas price.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INTRINSIC_GAS_TOO_LOW","title":"<code>INTRINSIC_GAS_TOO_LOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's gas limit is too low.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.INITCODE_SIZE_EXCEEDED","title":"<code>INITCODE_SIZE_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction's initcode for a contract-creating transaction is too large.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_PRE_FORK","title":"<code>TYPE_3_TX_PRE_FORK = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction type 3 included before activation fork.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_ZERO_BLOBS_PRE_FORK","title":"<code>TYPE_3_TX_ZERO_BLOBS_PRE_FORK = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction type 3, with zero blobs, included before activation fork.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH","title":"<code>TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction contains a blob versioned hash with an invalid version.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_WITH_FULL_BLOBS","title":"<code>TYPE_3_TX_WITH_FULL_BLOBS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction contains full blobs (network-version of the transaction).</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_BLOB_COUNT_EXCEEDED","title":"<code>TYPE_3_TX_BLOB_COUNT_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction contains too many blob versioned hashes.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_CONTRACT_CREATION","title":"<code>TYPE_3_TX_CONTRACT_CREATION = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction is a type 3 transaction and has an empty <code>to</code>.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED","title":"<code>TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction causes block to go over blob gas limit.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.GAS_ALLOWANCE_EXCEEDED","title":"<code>GAS_ALLOWANCE_EXCEEDED = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction causes block to go over blob gas limit.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TransactionException.TYPE_3_TX_ZERO_BLOBS","title":"<code>TYPE_3_TX_ZERO_BLOBS = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transaction is type 3, but has no blobs.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec","title":"<code>ReferenceSpec</code>","text":"<p>Reference Specification Description Abstract Class.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>class ReferenceSpec:\n    \"\"\"\n    Reference Specification Description Abstract Class.\n    \"\"\"\n\n    @abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"\n        Returns the name of the spec.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def has_known_version(self) -&gt; bool:\n        \"\"\"\n        Returns true if the reference spec object is hard-coded with a latest\n        known version.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def known_version(self) -&gt; str:\n        \"\"\"\n        Returns the latest known version in the reference.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def api_url(self) -&gt; str:\n        \"\"\"\n        Returns the URL required to poll the version from an API, if needed.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def latest_version(self) -&gt; str:\n        \"\"\"\n        Returns a digest that points to the latest version of the spec.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def is_outdated(self) -&gt; bool:\n        \"\"\"\n        Checks whether the reference specification has been updated since the\n        test was last updated.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def write_info(self, info: Dict[str, str]):\n        \"\"\"\n        Writes info about the reference specification used into the output\n        fixture.\n        \"\"\"\n        pass\n\n    @staticmethod\n    @abstractmethod\n    def parseable_from_module(module_dict: Dict[str, Any]) -&gt; bool:\n        \"\"\"\n        Checks whether the module's dict contains required reference spec\n        information.\n        \"\"\"\n        pass\n\n    @staticmethod\n    @abstractmethod\n    def parse_from_module(module_dict: Dict[str, Any]) -&gt; \"ReferenceSpec\":\n        \"\"\"\n        Parses the module's dict into a reference spec.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.name","title":"<code>name()</code>  <code>abstractmethod</code>","text":"<p>Returns the name of the spec.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef name(self) -&gt; str:\n    \"\"\"\n    Returns the name of the spec.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.has_known_version","title":"<code>has_known_version()</code>  <code>abstractmethod</code>","text":"<p>Returns true if the reference spec object is hard-coded with a latest known version.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef has_known_version(self) -&gt; bool:\n    \"\"\"\n    Returns true if the reference spec object is hard-coded with a latest\n    known version.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.known_version","title":"<code>known_version()</code>  <code>abstractmethod</code>","text":"<p>Returns the latest known version in the reference.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef known_version(self) -&gt; str:\n    \"\"\"\n    Returns the latest known version in the reference.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.api_url","title":"<code>api_url()</code>  <code>abstractmethod</code>","text":"<p>Returns the URL required to poll the version from an API, if needed.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef api_url(self) -&gt; str:\n    \"\"\"\n    Returns the URL required to poll the version from an API, if needed.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.latest_version","title":"<code>latest_version()</code>  <code>abstractmethod</code>","text":"<p>Returns a digest that points to the latest version of the spec.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef latest_version(self) -&gt; str:\n    \"\"\"\n    Returns a digest that points to the latest version of the spec.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.is_outdated","title":"<code>is_outdated()</code>  <code>abstractmethod</code>","text":"<p>Checks whether the reference specification has been updated since the test was last updated.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef is_outdated(self) -&gt; bool:\n    \"\"\"\n    Checks whether the reference specification has been updated since the\n    test was last updated.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.write_info","title":"<code>write_info(info)</code>  <code>abstractmethod</code>","text":"<p>Writes info about the reference specification used into the output fixture.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@abstractmethod\ndef write_info(self, info: Dict[str, str]):\n    \"\"\"\n    Writes info about the reference specification used into the output\n    fixture.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.parseable_from_module","title":"<code>parseable_from_module(module_dict)</code>  <code>abstractmethod</code> <code>staticmethod</code>","text":"<p>Checks whether the module's dict contains required reference spec information.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef parseable_from_module(module_dict: Dict[str, Any]) -&gt; bool:\n    \"\"\"\n    Checks whether the module's dict contains required reference spec\n    information.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.ReferenceSpec.parse_from_module","title":"<code>parse_from_module(module_dict)</code>  <code>abstractmethod</code> <code>staticmethod</code>","text":"<p>Parses the module's dict into a reference spec.</p> Source code in <code>src/ethereum_test_tools/reference_spec/reference_spec.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef parse_from_module(module_dict: Dict[str, Any]) -&gt; \"ReferenceSpec\":\n    \"\"\"\n    Parses the module's dict into a reference spec.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseFixture","title":"<code>BaseFixture</code>","text":"<p>               Bases: <code>CamelModel</code></p> <p>Represents a base Ethereum test fixture of any type.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>class BaseFixture(CamelModel):\n    \"\"\"Represents a base Ethereum test fixture of any type.\"\"\"\n\n    info: Dict[str, str] = Field(default_factory=dict, alias=\"_info\")\n    format: ClassVar[FixtureFormats] = FixtureFormats.UNSET_TEST_FORMAT\n\n    @cached_property\n    def json_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"\n        Returns the JSON representation of the fixture.\n        \"\"\"\n        return self.model_dump(mode=\"json\", by_alias=True, exclude_none=True, exclude={\"info\"})\n\n    @cached_property\n    def hash(self) -&gt; str:\n        \"\"\"\n        Returns the hash of the fixture.\n        \"\"\"\n        json_str = json.dumps(self.json_dict, sort_keys=True, separators=(\",\", \":\"))\n        h = hashlib.sha256(json_str.encode(\"utf-8\")).hexdigest()\n        return f\"0x{h}\"\n\n    def json_dict_with_info(self, hash_only: bool = False) -&gt; Dict[str, Any]:\n        \"\"\"\n        Returns the JSON representation of the fixture with the info field.\n        \"\"\"\n        dict_with_info = self.json_dict.copy()\n        dict_with_info[\"_info\"] = {\"hash\": self.hash}\n        if not hash_only:\n            dict_with_info[\"_info\"].update(self.info)\n        return dict_with_info\n\n    def fill_info(\n        self,\n        t8n: TransitionTool,\n        fixture_description: str,\n        fixture_source_url: str,\n        ref_spec: ReferenceSpec | None,\n    ):\n        \"\"\"\n        Fill the info field for this fixture\n        \"\"\"\n        if \"comment\" not in self.info:\n            self.info[\"comment\"] = \"`execution-spec-tests` generated test\"\n        self.info[\"filling-transition-tool\"] = t8n.version()\n        self.info[\"description\"] = fixture_description\n        self.info[\"url\"] = fixture_source_url\n        if ref_spec is not None:\n            ref_spec.write_info(self.info)\n\n    def get_fork(self) -&gt; str:\n        \"\"\"\n        Returns the fork of the fixture as a string.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseFixture.json_dict","title":"<code>json_dict: Dict[str, Any]</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the JSON representation of the fixture.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseFixture.hash","title":"<code>hash: str</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the hash of the fixture.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseFixture.json_dict_with_info","title":"<code>json_dict_with_info(hash_only=False)</code>","text":"<p>Returns the JSON representation of the fixture with the info field.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>def json_dict_with_info(self, hash_only: bool = False) -&gt; Dict[str, Any]:\n    \"\"\"\n    Returns the JSON representation of the fixture with the info field.\n    \"\"\"\n    dict_with_info = self.json_dict.copy()\n    dict_with_info[\"_info\"] = {\"hash\": self.hash}\n    if not hash_only:\n        dict_with_info[\"_info\"].update(self.info)\n    return dict_with_info\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseFixture.fill_info","title":"<code>fill_info(t8n, fixture_description, fixture_source_url, ref_spec)</code>","text":"<p>Fill the info field for this fixture</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>def fill_info(\n    self,\n    t8n: TransitionTool,\n    fixture_description: str,\n    fixture_source_url: str,\n    ref_spec: ReferenceSpec | None,\n):\n    \"\"\"\n    Fill the info field for this fixture\n    \"\"\"\n    if \"comment\" not in self.info:\n        self.info[\"comment\"] = \"`execution-spec-tests` generated test\"\n    self.info[\"filling-transition-tool\"] = t8n.version()\n    self.info[\"description\"] = fixture_description\n    self.info[\"url\"] = fixture_source_url\n    if ref_spec is not None:\n        ref_spec.write_info(self.info)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseFixture.get_fork","title":"<code>get_fork()</code>","text":"<p>Returns the fork of the fixture as a string.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>def get_fork(self) -&gt; str:\n    \"\"\"\n    Returns the fork of the fixture as a string.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseTest","title":"<code>BaseTest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a base Ethereum test which must return a single test fixture.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>class BaseTest(BaseModel):\n    \"\"\"\n    Represents a base Ethereum test which must return a single test fixture.\n    \"\"\"\n\n    tag: str = \"\"\n\n    # Transition tool specific fields\n    t8n_dump_dir: Path | None = Field(None, exclude=True)\n    _t8n_call_counter: Iterator[int] = count(0)\n\n    supported_fixture_formats: ClassVar[List[FixtureFormats]] = []\n\n    @abstractmethod\n    def generate(\n        self,\n        *,\n        t8n: TransitionTool,\n        fork: Fork,\n        fixture_format: FixtureFormats,\n        eips: Optional[List[int]] = None,\n    ) -&gt; BaseFixture:\n        \"\"\"\n        Generate the list of test fixtures.\n        \"\"\"\n        pass\n\n    @classmethod\n    def pytest_parameter_name(cls) -&gt; str:\n        \"\"\"\n        Must return the name of the parameter used in pytest to select this\n        spec type as filler for the test.\n\n        By default, it returns the underscore separated name of the class.\n        \"\"\"\n        return reduce(lambda x, y: x + (\"_\" if y.isupper() else \"\") + y, cls.__name__).lower()\n\n    def get_next_transition_tool_output_path(self) -&gt; str:\n        \"\"\"\n        Returns the path to the next transition tool output file.\n        \"\"\"\n        if not self.t8n_dump_dir:\n            return \"\"\n        return path.join(\n            self.t8n_dump_dir,\n            str(next(self._t8n_call_counter)),\n        )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseTest.generate","title":"<code>generate(*, t8n, fork, fixture_format, eips=None)</code>  <code>abstractmethod</code>","text":"<p>Generate the list of test fixtures.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>@abstractmethod\ndef generate(\n    self,\n    *,\n    t8n: TransitionTool,\n    fork: Fork,\n    fixture_format: FixtureFormats,\n    eips: Optional[List[int]] = None,\n) -&gt; BaseFixture:\n    \"\"\"\n    Generate the list of test fixtures.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseTest.pytest_parameter_name","title":"<code>pytest_parameter_name()</code>  <code>classmethod</code>","text":"<p>Must return the name of the parameter used in pytest to select this spec type as filler for the test.</p> <p>By default, it returns the underscore separated name of the class.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>@classmethod\ndef pytest_parameter_name(cls) -&gt; str:\n    \"\"\"\n    Must return the name of the parameter used in pytest to select this\n    spec type as filler for the test.\n\n    By default, it returns the underscore separated name of the class.\n    \"\"\"\n    return reduce(lambda x, y: x + (\"_\" if y.isupper() else \"\") + y, cls.__name__).lower()\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BaseTest.get_next_transition_tool_output_path","title":"<code>get_next_transition_tool_output_path()</code>","text":"<p>Returns the path to the next transition tool output file.</p> Source code in <code>src/ethereum_test_tools/spec/base/base_test.py</code> <pre><code>def get_next_transition_tool_output_path(self) -&gt; str:\n    \"\"\"\n    Returns the path to the next transition tool output file.\n    \"\"\"\n    if not self.t8n_dump_dir:\n        return \"\"\n    return path.join(\n        self.t8n_dump_dir,\n        str(next(self._t8n_call_counter)),\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest","title":"<code>BlockchainTest</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>Filler type that tests multiple blocks (valid or invalid) in a chain.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>class BlockchainTest(BaseTest):\n    \"\"\"\n    Filler type that tests multiple blocks (valid or invalid) in a chain.\n    \"\"\"\n\n    pre: Alloc\n    post: Alloc\n    blocks: List[Block]\n    genesis_environment: Environment = Field(default_factory=Environment)\n    verify_sync: bool = False\n    chain_id: int = 1\n\n    supported_fixture_formats: ClassVar[List[FixtureFormats]] = [\n        FixtureFormats.BLOCKCHAIN_TEST,\n        FixtureFormats.BLOCKCHAIN_TEST_HIVE,\n    ]\n\n    def make_genesis(\n        self,\n        fork: Fork,\n    ) -&gt; Tuple[Alloc, FixtureBlock]:\n        \"\"\"\n        Create a genesis block from the blockchain test definition.\n        \"\"\"\n        env = self.genesis_environment.set_fork_requirements(fork)\n        assert (\n            env.withdrawals is None or len(env.withdrawals) == 0\n        ), \"withdrawals must be empty at genesis\"\n        assert env.parent_beacon_block_root is None or env.parent_beacon_block_root == Hash(\n            0\n        ), \"parent_beacon_block_root must be empty at genesis\"\n\n        pre_alloc = Alloc.merge(\n            Alloc.model_validate(fork.pre_allocation_blockchain()),\n            self.pre,\n        )\n        if empty_accounts := pre_alloc.empty_accounts():\n            raise Exception(f\"Empty accounts in pre state: {empty_accounts}\")\n        state_root = pre_alloc.state_root()\n        genesis = FixtureHeader(\n            parent_hash=0,\n            ommers_hash=EmptyOmmersRoot,\n            fee_recipient=0,\n            state_root=state_root,\n            transactions_trie=EmptyTrieRoot,\n            receipts_root=EmptyTrieRoot,\n            logs_bloom=0,\n            difficulty=0x20000 if env.difficulty is None else env.difficulty,\n            number=0,\n            gas_limit=env.gas_limit,\n            gas_used=0,\n            timestamp=0,\n            extra_data=b\"\\x00\",\n            prev_randao=0,\n            nonce=0,\n            base_fee_per_gas=env.base_fee_per_gas,\n            blob_gas_used=env.blob_gas_used,\n            excess_blob_gas=env.excess_blob_gas,\n            withdrawals_root=Withdrawal.list_root(env.withdrawals)\n            if env.withdrawals is not None\n            else None,\n            parent_beacon_block_root=env.parent_beacon_block_root,\n            requests_root=Requests(root=[]).trie_root\n            if fork.header_requests_required(0, 0)\n            else None,\n        )\n\n        return (\n            pre_alloc,\n            FixtureBlockBase(\n                header=genesis,\n                withdrawals=None if env.withdrawals is None else [],\n                deposit_requests=[] if fork.header_requests_required(0, 0) else None,\n                withdrawal_requests=[] if fork.header_requests_required(0, 0) else None,\n            ).with_rlp(\n                txs=[], requests=Requests() if fork.header_requests_required(0, 0) else None\n            ),\n        )\n\n    def generate_block_data(\n        self,\n        t8n: TransitionTool,\n        fork: Fork,\n        block: Block,\n        previous_env: Environment,\n        previous_alloc: Alloc,\n        eips: Optional[List[int]] = None,\n    ) -&gt; Tuple[FixtureHeader, List[Transaction], Requests | None, Alloc, Environment]:\n        \"\"\"\n        Generate common block data for both make_fixture and make_hive_fixture.\n        \"\"\"\n        if block.rlp and block.exception is not None:\n            raise Exception(\n                \"test correctness: post-state cannot be verified if the \"\n                + \"block's rlp is supplied and the block is not supposed \"\n                + \"to produce an exception\"\n            )\n\n        env = block.set_environment(previous_env)\n        env = env.set_fork_requirements(fork)\n\n        txs = [tx.with_signature_and_sender() for tx in block.txs]\n\n        if failing_tx_count := len([tx for tx in txs if tx.error]) &gt; 0:\n            if failing_tx_count &gt; 1:\n                raise Exception(\n                    \"test correctness: only one transaction can produce an exception in a block\"\n                )\n            if not txs[-1].error:\n                raise Exception(\n                    \"test correctness: the transaction that produces an exception \"\n                    + \"must be the last transaction in the block\"\n                )\n\n        transition_tool_output = TransitionToolOutput(\n            **t8n.evaluate(\n                alloc=to_json(previous_alloc),\n                txs=[to_json(tx) for tx in txs],\n                env=to_json(env),\n                fork_name=fork.transition_tool_name(\n                    block_number=env.number, timestamp=env.timestamp\n                ),\n                chain_id=self.chain_id,\n                reward=fork.get_reward(env.number, env.timestamp),\n                eips=eips,\n                debug_output_path=self.get_next_transition_tool_output_path(),\n            )\n        )\n\n        try:\n            rejected_txs = verify_transactions(txs, transition_tool_output.result)\n            verify_result(transition_tool_output.result, env)\n        except Exception as e:\n            print_traces(t8n.get_traces())\n            pprint(transition_tool_output.result)\n            pprint(previous_alloc)\n            pprint(transition_tool_output.alloc)\n            raise e\n\n        if len(rejected_txs) &gt; 0 and block.exception is None:\n            print_traces(t8n.get_traces())\n            raise Exception(\n                \"one or more transactions in `BlockchainTest` are \"\n                + \"intrinsically invalid, but the block was not expected \"\n                + \"to be invalid. Please verify whether the transaction \"\n                + \"was indeed expected to fail and add the proper \"\n                + \"`block.exception`\"\n            )\n\n        # One special case of the invalid transactions is the blob gas used, since this value\n        # is not included in the transition tool result, but it is included in the block header,\n        # and some clients check it before executing the block by simply counting the type-3 txs,\n        # we need to set the correct value by default.\n        blob_gas_used: int | None = None\n        if (blob_gas_per_blob := fork.blob_gas_per_blob(env.number, env.timestamp)) &gt; 0:\n            blob_gas_used = blob_gas_per_blob * count_blobs(txs)\n\n        header = FixtureHeader(\n            **(\n                transition_tool_output.result.model_dump(\n                    exclude_none=True, exclude={\"blob_gas_used\", \"transactions_trie\"}\n                )\n                | env.model_dump(exclude_none=True, exclude={\"blob_gas_used\"})\n            ),\n            blob_gas_used=blob_gas_used,\n            transactions_trie=Transaction.list_root(txs),\n            extra_data=block.extra_data if block.extra_data is not None else b\"\",\n            fork=fork,\n        )\n\n        if block.header_verify is not None:\n            # Verify the header after transition tool processing.\n            header.verify(block.header_verify)\n\n        if block.rlp_modifier is not None:\n            # Modify any parameter specified in the `rlp_modifier` after\n            # transition tool processing.\n            header = header.join(block.rlp_modifier)\n\n        requests = None\n        if fork.header_requests_required(header.number, header.timestamp):\n            requests_list: List[DepositRequest | WithdrawalRequest] = []\n            if transition_tool_output.result.deposit_requests is not None:\n                requests_list += transition_tool_output.result.deposit_requests\n            if transition_tool_output.result.withdrawal_requests is not None:\n                requests_list += transition_tool_output.result.withdrawal_requests\n            requests = Requests(root=requests_list)\n\n        if requests is not None and requests.trie_root != header.requests_root:\n            raise Exception(\n                f\"Requests root in header does not match the requests root in the transition tool \"\n                \"output: \"\n                f\"{header.requests_root} != {requests.trie_root}\"\n            )\n\n        if block.requests is not None:\n            requests = Requests(root=block.requests)\n            header.requests_root = requests.trie_root\n\n        return (\n            header,\n            txs,\n            requests,\n            transition_tool_output.alloc,\n            env,\n        )\n\n    def network_info(self, fork: Fork, eips: Optional[List[int]] = None):\n        \"\"\"\n        Returns fixture network information for the fork &amp; EIP/s.\n        \"\"\"\n        return (\n            \"+\".join([fork.blockchain_test_network_name()] + [str(eip) for eip in eips])\n            if eips\n            else fork.blockchain_test_network_name()\n        )\n\n    def verify_post_state(self, t8n, alloc: Alloc):\n        \"\"\"\n        Verifies the post alloc after all block/s or payload/s are generated.\n        \"\"\"\n        try:\n            self.post.verify_post_alloc(alloc)\n        except Exception as e:\n            print_traces(t8n.get_traces())\n            raise e\n\n    def make_fixture(\n        self,\n        t8n: TransitionTool,\n        fork: Fork,\n        eips: Optional[List[int]] = None,\n    ) -&gt; Fixture:\n        \"\"\"\n        Create a fixture from the blockchain test definition.\n        \"\"\"\n        fixture_blocks: List[FixtureBlock | InvalidFixtureBlock] = []\n\n        pre, genesis = self.make_genesis(fork)\n\n        alloc = pre\n        env = environment_from_parent_header(genesis.header)\n        head = genesis.header.block_hash\n\n        for block in self.blocks:\n            if block.rlp is None:\n                # This is the most common case, the RLP needs to be constructed\n                # based on the transactions to be included in the block.\n                # Set the environment according to the block to execute.\n                header, txs, requests, new_alloc, new_env = self.generate_block_data(\n                    t8n=t8n,\n                    fork=fork,\n                    block=block,\n                    previous_env=env,\n                    previous_alloc=alloc,\n                    eips=eips,\n                )\n                fixture_block = FixtureBlockBase(\n                    header=header,\n                    txs=[FixtureTransaction.from_transaction(tx) for tx in txs],\n                    ommers=[],\n                    withdrawals=[FixtureWithdrawal.from_withdrawal(w) for w in new_env.withdrawals]\n                    if new_env.withdrawals is not None\n                    else None,\n                    deposit_requests=[\n                        FixtureDepositRequest.from_deposit_request(d)\n                        for d in requests.deposit_requests()\n                    ]\n                    if requests is not None\n                    else None,\n                    withdrawal_requests=[\n                        FixtureWithdrawalRequest.from_withdrawal_request(w)\n                        for w in requests.withdrawal_requests()\n                    ]\n                    if requests is not None\n                    else None,\n                ).with_rlp(txs=txs, requests=requests)\n                if block.exception is None:\n                    fixture_blocks.append(fixture_block)\n                    # Update env, alloc and last block hash for the next block.\n                    alloc = new_alloc\n                    env = apply_new_parent(new_env, header)\n                    head = header.block_hash\n                else:\n                    fixture_blocks.append(\n                        InvalidFixtureBlock(\n                            rlp=fixture_block.rlp,\n                            expect_exception=block.exception,\n                            rlp_decoded=(\n                                None\n                                if BlockException.RLP_STRUCTURES_ENCODING in block.exception\n                                else fixture_block.without_rlp()\n                            ),\n                        ),\n                    )\n            else:\n                assert block.exception is not None, (\n                    \"test correctness: if the block's rlp is hard-coded, \"\n                    + \"the block is expected to produce an exception\"\n                )\n                fixture_blocks.append(\n                    InvalidFixtureBlock(\n                        rlp=block.rlp,\n                        expect_exception=block.exception,\n                    ),\n                )\n\n        self.verify_post_state(t8n, alloc)\n        return Fixture(\n            fork=self.network_info(fork, eips),\n            genesis=genesis.header,\n            genesis_rlp=genesis.rlp,\n            blocks=fixture_blocks,\n            last_block_hash=head,\n            pre=pre,\n            post_state=alloc,\n        )\n\n    def make_hive_fixture(\n        self,\n        t8n: TransitionTool,\n        fork: Fork,\n        eips: Optional[List[int]] = None,\n    ) -&gt; HiveFixture:\n        \"\"\"\n        Create a hive fixture from the blocktest definition.\n        \"\"\"\n        fixture_payloads: List[FixtureEngineNewPayload] = []\n\n        pre, genesis = self.make_genesis(fork)\n        alloc = pre\n        env = environment_from_parent_header(genesis.header)\n        head_hash = genesis.header.block_hash\n\n        for block in self.blocks:\n            header, txs, requests, new_alloc, new_env = self.generate_block_data(\n                t8n=t8n, fork=fork, block=block, previous_env=env, previous_alloc=alloc, eips=eips\n            )\n            if block.rlp is None:\n                fixture_payloads.append(\n                    FixtureEngineNewPayload.from_fixture_header(\n                        fork=fork,\n                        header=header,\n                        transactions=txs,\n                        withdrawals=new_env.withdrawals,\n                        requests=requests,\n                        validation_error=block.exception,\n                        error_code=block.engine_api_error_code,\n                    )\n                )\n                if block.exception is None:\n                    alloc = new_alloc\n                    env = apply_new_parent(env, header)\n                    head_hash = header.block_hash\n        fcu_version = fork.engine_forkchoice_updated_version(header.number, header.timestamp)\n        assert (\n            fcu_version is not None\n        ), \"A hive fixture was requested but no forkchoice update is defined. The framework should\"\n        \" never try to execute this test case.\"\n\n        self.verify_post_state(t8n, alloc)\n\n        sync_payload: Optional[FixtureEngineNewPayload] = None\n        if self.verify_sync:\n            # Test is marked for syncing verification.\n            assert (\n                genesis.header.block_hash != head_hash\n            ), \"Invalid payload tests negative test via sync is not supported yet.\"\n\n            # Most clients require the header to start the sync process, so we create an empty\n            # block on top of the last block of the test to send it as new payload and trigger the\n            # sync process.\n            sync_header, _, requests, _, _ = self.generate_block_data(\n                t8n=t8n,\n                fork=fork,\n                block=Block(),\n                previous_env=env,\n                previous_alloc=alloc,\n                eips=eips,\n            )\n            sync_payload = FixtureEngineNewPayload.from_fixture_header(\n                fork=fork,\n                header=sync_header,\n                transactions=[],\n                withdrawals=[],\n                requests=requests,\n                validation_error=None,\n                error_code=None,\n            )\n\n        return HiveFixture(\n            fork=self.network_info(fork, eips),\n            genesis=genesis.header,\n            payloads=fixture_payloads,\n            fcu_version=fcu_version,\n            pre=pre,\n            post_state=alloc,\n            sync_payload=sync_payload,\n        )\n\n    def generate(\n        self,\n        t8n: TransitionTool,\n        fork: Fork,\n        fixture_format: FixtureFormats,\n        eips: Optional[List[int]] = None,\n    ) -&gt; BaseFixture:\n        \"\"\"\n        Generate the BlockchainTest fixture.\n        \"\"\"\n        t8n.reset_traces()\n        if fixture_format == FixtureFormats.BLOCKCHAIN_TEST_HIVE:\n            return self.make_hive_fixture(t8n, fork, eips)\n        elif fixture_format == FixtureFormats.BLOCKCHAIN_TEST:\n            return self.make_fixture(t8n, fork, eips)\n\n        raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.make_genesis","title":"<code>make_genesis(fork)</code>","text":"<p>Create a genesis block from the blockchain test definition.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def make_genesis(\n    self,\n    fork: Fork,\n) -&gt; Tuple[Alloc, FixtureBlock]:\n    \"\"\"\n    Create a genesis block from the blockchain test definition.\n    \"\"\"\n    env = self.genesis_environment.set_fork_requirements(fork)\n    assert (\n        env.withdrawals is None or len(env.withdrawals) == 0\n    ), \"withdrawals must be empty at genesis\"\n    assert env.parent_beacon_block_root is None or env.parent_beacon_block_root == Hash(\n        0\n    ), \"parent_beacon_block_root must be empty at genesis\"\n\n    pre_alloc = Alloc.merge(\n        Alloc.model_validate(fork.pre_allocation_blockchain()),\n        self.pre,\n    )\n    if empty_accounts := pre_alloc.empty_accounts():\n        raise Exception(f\"Empty accounts in pre state: {empty_accounts}\")\n    state_root = pre_alloc.state_root()\n    genesis = FixtureHeader(\n        parent_hash=0,\n        ommers_hash=EmptyOmmersRoot,\n        fee_recipient=0,\n        state_root=state_root,\n        transactions_trie=EmptyTrieRoot,\n        receipts_root=EmptyTrieRoot,\n        logs_bloom=0,\n        difficulty=0x20000 if env.difficulty is None else env.difficulty,\n        number=0,\n        gas_limit=env.gas_limit,\n        gas_used=0,\n        timestamp=0,\n        extra_data=b\"\\x00\",\n        prev_randao=0,\n        nonce=0,\n        base_fee_per_gas=env.base_fee_per_gas,\n        blob_gas_used=env.blob_gas_used,\n        excess_blob_gas=env.excess_blob_gas,\n        withdrawals_root=Withdrawal.list_root(env.withdrawals)\n        if env.withdrawals is not None\n        else None,\n        parent_beacon_block_root=env.parent_beacon_block_root,\n        requests_root=Requests(root=[]).trie_root\n        if fork.header_requests_required(0, 0)\n        else None,\n    )\n\n    return (\n        pre_alloc,\n        FixtureBlockBase(\n            header=genesis,\n            withdrawals=None if env.withdrawals is None else [],\n            deposit_requests=[] if fork.header_requests_required(0, 0) else None,\n            withdrawal_requests=[] if fork.header_requests_required(0, 0) else None,\n        ).with_rlp(\n            txs=[], requests=Requests() if fork.header_requests_required(0, 0) else None\n        ),\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.generate_block_data","title":"<code>generate_block_data(t8n, fork, block, previous_env, previous_alloc, eips=None)</code>","text":"<p>Generate common block data for both make_fixture and make_hive_fixture.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def generate_block_data(\n    self,\n    t8n: TransitionTool,\n    fork: Fork,\n    block: Block,\n    previous_env: Environment,\n    previous_alloc: Alloc,\n    eips: Optional[List[int]] = None,\n) -&gt; Tuple[FixtureHeader, List[Transaction], Requests | None, Alloc, Environment]:\n    \"\"\"\n    Generate common block data for both make_fixture and make_hive_fixture.\n    \"\"\"\n    if block.rlp and block.exception is not None:\n        raise Exception(\n            \"test correctness: post-state cannot be verified if the \"\n            + \"block's rlp is supplied and the block is not supposed \"\n            + \"to produce an exception\"\n        )\n\n    env = block.set_environment(previous_env)\n    env = env.set_fork_requirements(fork)\n\n    txs = [tx.with_signature_and_sender() for tx in block.txs]\n\n    if failing_tx_count := len([tx for tx in txs if tx.error]) &gt; 0:\n        if failing_tx_count &gt; 1:\n            raise Exception(\n                \"test correctness: only one transaction can produce an exception in a block\"\n            )\n        if not txs[-1].error:\n            raise Exception(\n                \"test correctness: the transaction that produces an exception \"\n                + \"must be the last transaction in the block\"\n            )\n\n    transition_tool_output = TransitionToolOutput(\n        **t8n.evaluate(\n            alloc=to_json(previous_alloc),\n            txs=[to_json(tx) for tx in txs],\n            env=to_json(env),\n            fork_name=fork.transition_tool_name(\n                block_number=env.number, timestamp=env.timestamp\n            ),\n            chain_id=self.chain_id,\n            reward=fork.get_reward(env.number, env.timestamp),\n            eips=eips,\n            debug_output_path=self.get_next_transition_tool_output_path(),\n        )\n    )\n\n    try:\n        rejected_txs = verify_transactions(txs, transition_tool_output.result)\n        verify_result(transition_tool_output.result, env)\n    except Exception as e:\n        print_traces(t8n.get_traces())\n        pprint(transition_tool_output.result)\n        pprint(previous_alloc)\n        pprint(transition_tool_output.alloc)\n        raise e\n\n    if len(rejected_txs) &gt; 0 and block.exception is None:\n        print_traces(t8n.get_traces())\n        raise Exception(\n            \"one or more transactions in `BlockchainTest` are \"\n            + \"intrinsically invalid, but the block was not expected \"\n            + \"to be invalid. Please verify whether the transaction \"\n            + \"was indeed expected to fail and add the proper \"\n            + \"`block.exception`\"\n        )\n\n    # One special case of the invalid transactions is the blob gas used, since this value\n    # is not included in the transition tool result, but it is included in the block header,\n    # and some clients check it before executing the block by simply counting the type-3 txs,\n    # we need to set the correct value by default.\n    blob_gas_used: int | None = None\n    if (blob_gas_per_blob := fork.blob_gas_per_blob(env.number, env.timestamp)) &gt; 0:\n        blob_gas_used = blob_gas_per_blob * count_blobs(txs)\n\n    header = FixtureHeader(\n        **(\n            transition_tool_output.result.model_dump(\n                exclude_none=True, exclude={\"blob_gas_used\", \"transactions_trie\"}\n            )\n            | env.model_dump(exclude_none=True, exclude={\"blob_gas_used\"})\n        ),\n        blob_gas_used=blob_gas_used,\n        transactions_trie=Transaction.list_root(txs),\n        extra_data=block.extra_data if block.extra_data is not None else b\"\",\n        fork=fork,\n    )\n\n    if block.header_verify is not None:\n        # Verify the header after transition tool processing.\n        header.verify(block.header_verify)\n\n    if block.rlp_modifier is not None:\n        # Modify any parameter specified in the `rlp_modifier` after\n        # transition tool processing.\n        header = header.join(block.rlp_modifier)\n\n    requests = None\n    if fork.header_requests_required(header.number, header.timestamp):\n        requests_list: List[DepositRequest | WithdrawalRequest] = []\n        if transition_tool_output.result.deposit_requests is not None:\n            requests_list += transition_tool_output.result.deposit_requests\n        if transition_tool_output.result.withdrawal_requests is not None:\n            requests_list += transition_tool_output.result.withdrawal_requests\n        requests = Requests(root=requests_list)\n\n    if requests is not None and requests.trie_root != header.requests_root:\n        raise Exception(\n            f\"Requests root in header does not match the requests root in the transition tool \"\n            \"output: \"\n            f\"{header.requests_root} != {requests.trie_root}\"\n        )\n\n    if block.requests is not None:\n        requests = Requests(root=block.requests)\n        header.requests_root = requests.trie_root\n\n    return (\n        header,\n        txs,\n        requests,\n        transition_tool_output.alloc,\n        env,\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.network_info","title":"<code>network_info(fork, eips=None)</code>","text":"<p>Returns fixture network information for the fork &amp; EIP/s.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def network_info(self, fork: Fork, eips: Optional[List[int]] = None):\n    \"\"\"\n    Returns fixture network information for the fork &amp; EIP/s.\n    \"\"\"\n    return (\n        \"+\".join([fork.blockchain_test_network_name()] + [str(eip) for eip in eips])\n        if eips\n        else fork.blockchain_test_network_name()\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.verify_post_state","title":"<code>verify_post_state(t8n, alloc)</code>","text":"<p>Verifies the post alloc after all block/s or payload/s are generated.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def verify_post_state(self, t8n, alloc: Alloc):\n    \"\"\"\n    Verifies the post alloc after all block/s or payload/s are generated.\n    \"\"\"\n    try:\n        self.post.verify_post_alloc(alloc)\n    except Exception as e:\n        print_traces(t8n.get_traces())\n        raise e\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.make_fixture","title":"<code>make_fixture(t8n, fork, eips=None)</code>","text":"<p>Create a fixture from the blockchain test definition.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def make_fixture(\n    self,\n    t8n: TransitionTool,\n    fork: Fork,\n    eips: Optional[List[int]] = None,\n) -&gt; Fixture:\n    \"\"\"\n    Create a fixture from the blockchain test definition.\n    \"\"\"\n    fixture_blocks: List[FixtureBlock | InvalidFixtureBlock] = []\n\n    pre, genesis = self.make_genesis(fork)\n\n    alloc = pre\n    env = environment_from_parent_header(genesis.header)\n    head = genesis.header.block_hash\n\n    for block in self.blocks:\n        if block.rlp is None:\n            # This is the most common case, the RLP needs to be constructed\n            # based on the transactions to be included in the block.\n            # Set the environment according to the block to execute.\n            header, txs, requests, new_alloc, new_env = self.generate_block_data(\n                t8n=t8n,\n                fork=fork,\n                block=block,\n                previous_env=env,\n                previous_alloc=alloc,\n                eips=eips,\n            )\n            fixture_block = FixtureBlockBase(\n                header=header,\n                txs=[FixtureTransaction.from_transaction(tx) for tx in txs],\n                ommers=[],\n                withdrawals=[FixtureWithdrawal.from_withdrawal(w) for w in new_env.withdrawals]\n                if new_env.withdrawals is not None\n                else None,\n                deposit_requests=[\n                    FixtureDepositRequest.from_deposit_request(d)\n                    for d in requests.deposit_requests()\n                ]\n                if requests is not None\n                else None,\n                withdrawal_requests=[\n                    FixtureWithdrawalRequest.from_withdrawal_request(w)\n                    for w in requests.withdrawal_requests()\n                ]\n                if requests is not None\n                else None,\n            ).with_rlp(txs=txs, requests=requests)\n            if block.exception is None:\n                fixture_blocks.append(fixture_block)\n                # Update env, alloc and last block hash for the next block.\n                alloc = new_alloc\n                env = apply_new_parent(new_env, header)\n                head = header.block_hash\n            else:\n                fixture_blocks.append(\n                    InvalidFixtureBlock(\n                        rlp=fixture_block.rlp,\n                        expect_exception=block.exception,\n                        rlp_decoded=(\n                            None\n                            if BlockException.RLP_STRUCTURES_ENCODING in block.exception\n                            else fixture_block.without_rlp()\n                        ),\n                    ),\n                )\n        else:\n            assert block.exception is not None, (\n                \"test correctness: if the block's rlp is hard-coded, \"\n                + \"the block is expected to produce an exception\"\n            )\n            fixture_blocks.append(\n                InvalidFixtureBlock(\n                    rlp=block.rlp,\n                    expect_exception=block.exception,\n                ),\n            )\n\n    self.verify_post_state(t8n, alloc)\n    return Fixture(\n        fork=self.network_info(fork, eips),\n        genesis=genesis.header,\n        genesis_rlp=genesis.rlp,\n        blocks=fixture_blocks,\n        last_block_hash=head,\n        pre=pre,\n        post_state=alloc,\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.make_hive_fixture","title":"<code>make_hive_fixture(t8n, fork, eips=None)</code>","text":"<p>Create a hive fixture from the blocktest definition.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def make_hive_fixture(\n    self,\n    t8n: TransitionTool,\n    fork: Fork,\n    eips: Optional[List[int]] = None,\n) -&gt; HiveFixture:\n    \"\"\"\n    Create a hive fixture from the blocktest definition.\n    \"\"\"\n    fixture_payloads: List[FixtureEngineNewPayload] = []\n\n    pre, genesis = self.make_genesis(fork)\n    alloc = pre\n    env = environment_from_parent_header(genesis.header)\n    head_hash = genesis.header.block_hash\n\n    for block in self.blocks:\n        header, txs, requests, new_alloc, new_env = self.generate_block_data(\n            t8n=t8n, fork=fork, block=block, previous_env=env, previous_alloc=alloc, eips=eips\n        )\n        if block.rlp is None:\n            fixture_payloads.append(\n                FixtureEngineNewPayload.from_fixture_header(\n                    fork=fork,\n                    header=header,\n                    transactions=txs,\n                    withdrawals=new_env.withdrawals,\n                    requests=requests,\n                    validation_error=block.exception,\n                    error_code=block.engine_api_error_code,\n                )\n            )\n            if block.exception is None:\n                alloc = new_alloc\n                env = apply_new_parent(env, header)\n                head_hash = header.block_hash\n    fcu_version = fork.engine_forkchoice_updated_version(header.number, header.timestamp)\n    assert (\n        fcu_version is not None\n    ), \"A hive fixture was requested but no forkchoice update is defined. The framework should\"\n    \" never try to execute this test case.\"\n\n    self.verify_post_state(t8n, alloc)\n\n    sync_payload: Optional[FixtureEngineNewPayload] = None\n    if self.verify_sync:\n        # Test is marked for syncing verification.\n        assert (\n            genesis.header.block_hash != head_hash\n        ), \"Invalid payload tests negative test via sync is not supported yet.\"\n\n        # Most clients require the header to start the sync process, so we create an empty\n        # block on top of the last block of the test to send it as new payload and trigger the\n        # sync process.\n        sync_header, _, requests, _, _ = self.generate_block_data(\n            t8n=t8n,\n            fork=fork,\n            block=Block(),\n            previous_env=env,\n            previous_alloc=alloc,\n            eips=eips,\n        )\n        sync_payload = FixtureEngineNewPayload.from_fixture_header(\n            fork=fork,\n            header=sync_header,\n            transactions=[],\n            withdrawals=[],\n            requests=requests,\n            validation_error=None,\n            error_code=None,\n        )\n\n    return HiveFixture(\n        fork=self.network_info(fork, eips),\n        genesis=genesis.header,\n        payloads=fixture_payloads,\n        fcu_version=fcu_version,\n        pre=pre,\n        post_state=alloc,\n        sync_payload=sync_payload,\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.BlockchainTest.generate","title":"<code>generate(t8n, fork, fixture_format, eips=None)</code>","text":"<p>Generate the BlockchainTest fixture.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/blockchain_test.py</code> <pre><code>def generate(\n    self,\n    t8n: TransitionTool,\n    fork: Fork,\n    fixture_format: FixtureFormats,\n    eips: Optional[List[int]] = None,\n) -&gt; BaseFixture:\n    \"\"\"\n    Generate the BlockchainTest fixture.\n    \"\"\"\n    t8n.reset_traces()\n    if fixture_format == FixtureFormats.BLOCKCHAIN_TEST_HIVE:\n        return self.make_hive_fixture(t8n, fork, eips)\n    elif fixture_format == FixtureFormats.BLOCKCHAIN_TEST:\n        return self.make_fixture(t8n, fork, eips)\n\n    raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFStateTest","title":"<code>EOFStateTest</code>","text":"<p>               Bases: <code>EOFTest</code></p> <p>Filler type that tests EOF containers and also generates a state/blockchain test.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>class EOFStateTest(EOFTest):\n    \"\"\"\n    Filler type that tests EOF containers and also generates a state/blockchain test.\n    \"\"\"\n\n    tx_gas_limit: int = 10_000_000\n    tx_data: Bytes = Bytes(b\"\")\n    env: Environment = Field(default_factory=Environment)\n    container_post: Account = Field(default_factory=Account)\n\n    supported_fixture_formats: ClassVar[List[FixtureFormats]] = [\n        FixtureFormats.EOF_TEST,\n        FixtureFormats.STATE_TEST,\n        FixtureFormats.BLOCKCHAIN_TEST,\n        FixtureFormats.BLOCKCHAIN_TEST_HIVE,\n    ]\n\n    @classmethod\n    def pytest_parameter_name(cls) -&gt; str:\n        \"\"\"\n        Workaround for pytest parameter name.\n        \"\"\"\n        return \"eof_state_test\"\n\n    def generate_state_test(self) -&gt; StateTest:\n        \"\"\"\n        Generate the StateTest filler.\n        \"\"\"\n        pre = Alloc()\n        container_address = Address(0x100)\n        pre[container_address] = Account(code=self.data, nonce=1)\n        pre[TestAddress] = Account(balance=1_000_000_000_000_000_000_000, nonce=0)\n        tx = Transaction(\n            nonce=0,\n            to=container_address,\n            gas_limit=self.tx_gas_limit,\n            gas_price=10,\n            protected=False,\n            data=self.tx_data,\n        )\n        post = Alloc()\n        post[container_address] = self.container_post\n        return StateTest(\n            pre=pre,\n            tx=tx,\n            env=self.env,\n            post=post,\n        )\n\n    def generate(\n        self,\n        *,\n        t8n: TransitionTool,\n        fork: Fork,\n        eips: Optional[List[int]] = None,\n        fixture_format: FixtureFormats,\n        **_,\n    ) -&gt; BaseFixture:\n        \"\"\"\n        Generate the BlockchainTest fixture.\n        \"\"\"\n        if fixture_format == FixtureFormats.EOF_TEST:\n            return self.make_eof_test_fixture(fork=fork, eips=eips)\n        elif fixture_format in (\n            FixtureFormats.STATE_TEST,\n            FixtureFormats.BLOCKCHAIN_TEST,\n            FixtureFormats.BLOCKCHAIN_TEST_HIVE,\n        ):\n            if self.expect_exception is not None:\n                pytest.skip(\"State tests can't be generated for invalid EOF code yet.\")\n            return self.generate_state_test().generate(\n                t8n=t8n, fork=fork, fixture_format=fixture_format, eips=eips\n            )\n\n        raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFStateTest.pytest_parameter_name","title":"<code>pytest_parameter_name()</code>  <code>classmethod</code>","text":"<p>Workaround for pytest parameter name.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>@classmethod\ndef pytest_parameter_name(cls) -&gt; str:\n    \"\"\"\n    Workaround for pytest parameter name.\n    \"\"\"\n    return \"eof_state_test\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFStateTest.generate_state_test","title":"<code>generate_state_test()</code>","text":"<p>Generate the StateTest filler.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>def generate_state_test(self) -&gt; StateTest:\n    \"\"\"\n    Generate the StateTest filler.\n    \"\"\"\n    pre = Alloc()\n    container_address = Address(0x100)\n    pre[container_address] = Account(code=self.data, nonce=1)\n    pre[TestAddress] = Account(balance=1_000_000_000_000_000_000_000, nonce=0)\n    tx = Transaction(\n        nonce=0,\n        to=container_address,\n        gas_limit=self.tx_gas_limit,\n        gas_price=10,\n        protected=False,\n        data=self.tx_data,\n    )\n    post = Alloc()\n    post[container_address] = self.container_post\n    return StateTest(\n        pre=pre,\n        tx=tx,\n        env=self.env,\n        post=post,\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFStateTest.generate","title":"<code>generate(*, t8n, fork, eips=None, fixture_format, **_)</code>","text":"<p>Generate the BlockchainTest fixture.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>def generate(\n    self,\n    *,\n    t8n: TransitionTool,\n    fork: Fork,\n    eips: Optional[List[int]] = None,\n    fixture_format: FixtureFormats,\n    **_,\n) -&gt; BaseFixture:\n    \"\"\"\n    Generate the BlockchainTest fixture.\n    \"\"\"\n    if fixture_format == FixtureFormats.EOF_TEST:\n        return self.make_eof_test_fixture(fork=fork, eips=eips)\n    elif fixture_format in (\n        FixtureFormats.STATE_TEST,\n        FixtureFormats.BLOCKCHAIN_TEST,\n        FixtureFormats.BLOCKCHAIN_TEST_HIVE,\n    ):\n        if self.expect_exception is not None:\n            pytest.skip(\"State tests can't be generated for invalid EOF code yet.\")\n        return self.generate_state_test().generate(\n            t8n=t8n, fork=fork, fixture_format=fixture_format, eips=eips\n        )\n\n    raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFTest","title":"<code>EOFTest</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>Filler type that tests EOF containers.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>class EOFTest(BaseTest):\n    \"\"\"\n    Filler type that tests EOF containers.\n    \"\"\"\n\n    data: Bytes\n    expect_exception: EOFException | None = None\n\n    supported_fixture_formats: ClassVar[List[FixtureFormats]] = [\n        FixtureFormats.EOF_TEST,\n    ]\n\n    @model_validator(mode=\"before\")\n    @classmethod\n    def check_container_exception(cls, data: Any) -&gt; Any:\n        \"\"\"\n        Check if the container exception matches the expected exception.\n        \"\"\"\n        if isinstance(data, dict):\n            container = data.get(\"data\")\n            expect_exception = data.get(\"expect_exception\")\n            if container is not None and isinstance(container, Container):\n                if container.validity_error is not None:\n                    if expect_exception is not None:\n                        assert container.validity_error == expect_exception, (\n                            f\"Container validity error {container.validity_error} \"\n                            f\"does not match expected exception {expect_exception}.\"\n                        )\n                    if expect_exception is None:\n                        data[\"expect_exception\"] = container.validity_error\n        return data\n\n    @classmethod\n    def pytest_parameter_name(cls) -&gt; str:\n        \"\"\"\n        Workaround for pytest parameter name.\n        \"\"\"\n        return \"eof_test\"\n\n    def make_eof_test_fixture(\n        self,\n        *,\n        fork: Fork,\n        eips: Optional[List[int]],\n    ) -&gt; Fixture:\n        \"\"\"\n        Generate the EOF test fixture.\n        \"\"\"\n        fixture = Fixture(\n            vectors={\n                \"0\": {\n                    \"code\": self.data,\n                    \"results\": {\n                        fork.blockchain_test_network_name(): {\n                            \"exception\": self.expect_exception,\n                            \"valid\": self.expect_exception is None,\n                        }\n                    },\n                }\n            }\n        )\n        try:\n            eof_parse = EOFParse()\n        except FileNotFoundError as e:\n            warnings.warn(f\"{e} Skipping EOF fixture verification. Fixtures may be invalid!\")\n            return fixture\n\n        for _, vector in fixture.vectors.items():\n            expected_result = vector.results.get(fork.blockchain_test_network_name())\n            if expected_result is None:\n                raise Exception(f\"EOF Fixture missing vector result for fork: {fork}\")\n            result = eof_parse.run(input=str(vector.code))\n            self.verify_result(result, expected_result, vector.code)\n\n        return fixture\n\n    def verify_result(self, result: CompletedProcess, expected_result: Result, code: Bytes):\n        \"\"\"\n        Checks that the reported exception string matches the expected error.\n        \"\"\"\n        parser = EvmoneExceptionMapper()\n        actual_message = result.stdout.strip()\n        actual_exception = parser.message_to_exception(actual_message)\n\n        if expected_result.exception is None:\n            if \"OK\" in actual_message:\n                return\n            else:\n                raise UnexpectedEOFException(\n                    code=code, got=f\"{actual_exception} ({actual_message})\"\n                )\n\n        expected_exception = expected_result.exception\n        expected_message = parser.exception_to_message(expected_exception)\n\n        if \"OK\" in actual_message:\n            raise ExpectedEOFException(\n                code=code, expected=f\"{expected_exception} ({expected_message})\"\n            )\n\n        if expected_exception != actual_exception:\n            raise EOFExceptionMismatch(\n                code=code,\n                expected=f\"{expected_exception} ({expected_message})\",\n                got=f\"{actual_exception} ({actual_message})\",\n            )\n\n    def generate(\n        self,\n        *,\n        t8n: TransitionTool,\n        fork: Fork,\n        eips: Optional[List[int]] = None,\n        fixture_format: FixtureFormats,\n        **_,\n    ) -&gt; BaseFixture:\n        \"\"\"\n        Generate the BlockchainTest fixture.\n        \"\"\"\n        if fixture_format == FixtureFormats.EOF_TEST:\n            return self.make_eof_test_fixture(fork=fork, eips=eips)\n\n        raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFTest.check_container_exception","title":"<code>check_container_exception(data)</code>  <code>classmethod</code>","text":"<p>Check if the container exception matches the expected exception.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>@model_validator(mode=\"before\")\n@classmethod\ndef check_container_exception(cls, data: Any) -&gt; Any:\n    \"\"\"\n    Check if the container exception matches the expected exception.\n    \"\"\"\n    if isinstance(data, dict):\n        container = data.get(\"data\")\n        expect_exception = data.get(\"expect_exception\")\n        if container is not None and isinstance(container, Container):\n            if container.validity_error is not None:\n                if expect_exception is not None:\n                    assert container.validity_error == expect_exception, (\n                        f\"Container validity error {container.validity_error} \"\n                        f\"does not match expected exception {expect_exception}.\"\n                    )\n                if expect_exception is None:\n                    data[\"expect_exception\"] = container.validity_error\n    return data\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFTest.pytest_parameter_name","title":"<code>pytest_parameter_name()</code>  <code>classmethod</code>","text":"<p>Workaround for pytest parameter name.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>@classmethod\ndef pytest_parameter_name(cls) -&gt; str:\n    \"\"\"\n    Workaround for pytest parameter name.\n    \"\"\"\n    return \"eof_test\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFTest.make_eof_test_fixture","title":"<code>make_eof_test_fixture(*, fork, eips)</code>","text":"<p>Generate the EOF test fixture.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>def make_eof_test_fixture(\n    self,\n    *,\n    fork: Fork,\n    eips: Optional[List[int]],\n) -&gt; Fixture:\n    \"\"\"\n    Generate the EOF test fixture.\n    \"\"\"\n    fixture = Fixture(\n        vectors={\n            \"0\": {\n                \"code\": self.data,\n                \"results\": {\n                    fork.blockchain_test_network_name(): {\n                        \"exception\": self.expect_exception,\n                        \"valid\": self.expect_exception is None,\n                    }\n                },\n            }\n        }\n    )\n    try:\n        eof_parse = EOFParse()\n    except FileNotFoundError as e:\n        warnings.warn(f\"{e} Skipping EOF fixture verification. Fixtures may be invalid!\")\n        return fixture\n\n    for _, vector in fixture.vectors.items():\n        expected_result = vector.results.get(fork.blockchain_test_network_name())\n        if expected_result is None:\n            raise Exception(f\"EOF Fixture missing vector result for fork: {fork}\")\n        result = eof_parse.run(input=str(vector.code))\n        self.verify_result(result, expected_result, vector.code)\n\n    return fixture\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFTest.verify_result","title":"<code>verify_result(result, expected_result, code)</code>","text":"<p>Checks that the reported exception string matches the expected error.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>def verify_result(self, result: CompletedProcess, expected_result: Result, code: Bytes):\n    \"\"\"\n    Checks that the reported exception string matches the expected error.\n    \"\"\"\n    parser = EvmoneExceptionMapper()\n    actual_message = result.stdout.strip()\n    actual_exception = parser.message_to_exception(actual_message)\n\n    if expected_result.exception is None:\n        if \"OK\" in actual_message:\n            return\n        else:\n            raise UnexpectedEOFException(\n                code=code, got=f\"{actual_exception} ({actual_message})\"\n            )\n\n    expected_exception = expected_result.exception\n    expected_message = parser.exception_to_message(expected_exception)\n\n    if \"OK\" in actual_message:\n        raise ExpectedEOFException(\n            code=code, expected=f\"{expected_exception} ({expected_message})\"\n        )\n\n    if expected_exception != actual_exception:\n        raise EOFExceptionMismatch(\n            code=code,\n            expected=f\"{expected_exception} ({expected_message})\",\n            got=f\"{actual_exception} ({actual_message})\",\n        )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.EOFTest.generate","title":"<code>generate(*, t8n, fork, eips=None, fixture_format, **_)</code>","text":"<p>Generate the BlockchainTest fixture.</p> Source code in <code>src/ethereum_test_tools/spec/eof/eof_test.py</code> <pre><code>def generate(\n    self,\n    *,\n    t8n: TransitionTool,\n    fork: Fork,\n    eips: Optional[List[int]] = None,\n    fixture_format: FixtureFormats,\n    **_,\n) -&gt; BaseFixture:\n    \"\"\"\n    Generate the BlockchainTest fixture.\n    \"\"\"\n    if fixture_format == FixtureFormats.EOF_TEST:\n        return self.make_eof_test_fixture(fork=fork, eips=eips)\n\n    raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.FixtureCollector","title":"<code>FixtureCollector</code>  <code>dataclass</code>","text":"<p>Collects all fixtures generated by the test cases.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>@dataclass(kw_only=True)\nclass FixtureCollector:\n    \"\"\"\n    Collects all fixtures generated by the test cases.\n    \"\"\"\n\n    output_dir: str\n    flat_output: bool\n    single_fixture_per_file: bool\n    filler_path: Path\n    base_dump_dir: Optional[Path] = None\n\n    # Internal state\n    all_fixtures: Dict[Path, Fixtures] = field(default_factory=dict)\n    json_path_to_test_item: Dict[Path, TestInfo] = field(default_factory=dict)\n\n    def get_fixture_basename(self, info: TestInfo) -&gt; Path:\n        \"\"\"\n        Returns the basename of the fixture file for a given test case.\n        \"\"\"\n        if self.flat_output:\n            if self.single_fixture_per_file:\n                return Path(strip_test_prefix(info.get_single_test_name()))\n            return Path(strip_test_prefix(info.original_name))\n        else:\n            relative_fixture_output_dir = Path(info.path).parent / strip_test_prefix(\n                Path(info.path).stem\n            )\n            module_relative_output_dir = get_module_relative_output_dir(\n                relative_fixture_output_dir, self.filler_path\n            )\n\n            if self.single_fixture_per_file:\n                return module_relative_output_dir / strip_test_prefix(info.get_single_test_name())\n            return module_relative_output_dir / strip_test_prefix(info.original_name)\n\n    def add_fixture(self, info: TestInfo, fixture: BaseFixture) -&gt; Path:\n        \"\"\"\n        Adds a fixture to the list of fixtures of a given test case.\n        \"\"\"\n        fixture_basename = self.get_fixture_basename(info)\n\n        fixture_path = (\n            self.output_dir\n            / fixture.format.output_base_dir_name\n            / fixture_basename.with_suffix(fixture.format.output_file_extension)\n        )\n        if fixture_path not in self.all_fixtures.keys():  # relevant when we group by test function\n            self.all_fixtures[fixture_path] = Fixtures(root={})\n            self.json_path_to_test_item[fixture_path] = info\n\n        self.all_fixtures[fixture_path][info.id] = fixture\n\n        return fixture_path\n\n    def dump_fixtures(self) -&gt; None:\n        \"\"\"\n        Dumps all collected fixtures to their respective files.\n        \"\"\"\n        if self.output_dir == \"stdout\":\n            combined_fixtures = {\n                k: to_json(v) for fixture in self.all_fixtures.values() for k, v in fixture.items()\n            }\n            json.dump(combined_fixtures, sys.stdout, indent=4)\n            return\n        os.makedirs(self.output_dir, exist_ok=True)\n        for fixture_path, fixtures in self.all_fixtures.items():\n            os.makedirs(fixture_path.parent, exist_ok=True)\n            if len({fixture.format for fixture in fixtures.values()}) != 1:\n                raise TypeError(\"All fixtures in a single file must have the same format.\")\n            fixtures.collect_into_file(fixture_path)\n\n    def verify_fixture_files(self, evm_fixture_verification: TransitionTool) -&gt; None:\n        \"\"\"\n        Runs `evm [state|block]test` on each fixture.\n        \"\"\"\n        for fixture_path, name_fixture_dict in self.all_fixtures.items():\n            for fixture_name, fixture in name_fixture_dict.items():\n                if FixtureFormats.is_verifiable(fixture.format):\n                    info = self.json_path_to_test_item[fixture_path]\n                    verify_fixtures_dump_dir = self._get_verify_fixtures_dump_dir(info)\n                    evm_fixture_verification.verify_fixture(\n                        fixture.format,\n                        fixture_path,\n                        fixture_name=None,\n                        debug_output_path=verify_fixtures_dump_dir,\n                    )\n\n    def _get_verify_fixtures_dump_dir(\n        self,\n        info: TestInfo,\n    ):\n        \"\"\"\n        The directory to dump the current test function's fixture.json and fixture\n        verification debug output.\n        \"\"\"\n        if not self.base_dump_dir:\n            return None\n        if self.single_fixture_per_file:\n            return info.get_dump_dir_path(\n                self.base_dump_dir, self.filler_path, level=\"test_parameter\"\n            )\n        else:\n            return info.get_dump_dir_path(\n                self.base_dump_dir, self.filler_path, level=\"test_function\"\n            )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.FixtureCollector.get_fixture_basename","title":"<code>get_fixture_basename(info)</code>","text":"<p>Returns the basename of the fixture file for a given test case.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def get_fixture_basename(self, info: TestInfo) -&gt; Path:\n    \"\"\"\n    Returns the basename of the fixture file for a given test case.\n    \"\"\"\n    if self.flat_output:\n        if self.single_fixture_per_file:\n            return Path(strip_test_prefix(info.get_single_test_name()))\n        return Path(strip_test_prefix(info.original_name))\n    else:\n        relative_fixture_output_dir = Path(info.path).parent / strip_test_prefix(\n            Path(info.path).stem\n        )\n        module_relative_output_dir = get_module_relative_output_dir(\n            relative_fixture_output_dir, self.filler_path\n        )\n\n        if self.single_fixture_per_file:\n            return module_relative_output_dir / strip_test_prefix(info.get_single_test_name())\n        return module_relative_output_dir / strip_test_prefix(info.original_name)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.FixtureCollector.add_fixture","title":"<code>add_fixture(info, fixture)</code>","text":"<p>Adds a fixture to the list of fixtures of a given test case.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def add_fixture(self, info: TestInfo, fixture: BaseFixture) -&gt; Path:\n    \"\"\"\n    Adds a fixture to the list of fixtures of a given test case.\n    \"\"\"\n    fixture_basename = self.get_fixture_basename(info)\n\n    fixture_path = (\n        self.output_dir\n        / fixture.format.output_base_dir_name\n        / fixture_basename.with_suffix(fixture.format.output_file_extension)\n    )\n    if fixture_path not in self.all_fixtures.keys():  # relevant when we group by test function\n        self.all_fixtures[fixture_path] = Fixtures(root={})\n        self.json_path_to_test_item[fixture_path] = info\n\n    self.all_fixtures[fixture_path][info.id] = fixture\n\n    return fixture_path\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.FixtureCollector.dump_fixtures","title":"<code>dump_fixtures()</code>","text":"<p>Dumps all collected fixtures to their respective files.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def dump_fixtures(self) -&gt; None:\n    \"\"\"\n    Dumps all collected fixtures to their respective files.\n    \"\"\"\n    if self.output_dir == \"stdout\":\n        combined_fixtures = {\n            k: to_json(v) for fixture in self.all_fixtures.values() for k, v in fixture.items()\n        }\n        json.dump(combined_fixtures, sys.stdout, indent=4)\n        return\n    os.makedirs(self.output_dir, exist_ok=True)\n    for fixture_path, fixtures in self.all_fixtures.items():\n        os.makedirs(fixture_path.parent, exist_ok=True)\n        if len({fixture.format for fixture in fixtures.values()}) != 1:\n            raise TypeError(\"All fixtures in a single file must have the same format.\")\n        fixtures.collect_into_file(fixture_path)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.FixtureCollector.verify_fixture_files","title":"<code>verify_fixture_files(evm_fixture_verification)</code>","text":"<p>Runs <code>evm [state|block]test</code> on each fixture.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def verify_fixture_files(self, evm_fixture_verification: TransitionTool) -&gt; None:\n    \"\"\"\n    Runs `evm [state|block]test` on each fixture.\n    \"\"\"\n    for fixture_path, name_fixture_dict in self.all_fixtures.items():\n        for fixture_name, fixture in name_fixture_dict.items():\n            if FixtureFormats.is_verifiable(fixture.format):\n                info = self.json_path_to_test_item[fixture_path]\n                verify_fixtures_dump_dir = self._get_verify_fixtures_dump_dir(info)\n                evm_fixture_verification.verify_fixture(\n                    fixture.format,\n                    fixture_path,\n                    fixture_name=None,\n                    debug_output_path=verify_fixtures_dump_dir,\n                )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.StateTest","title":"<code>StateTest</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>Filler type that tests transactions over the period of a single block.</p> Source code in <code>src/ethereum_test_tools/spec/state/state_test.py</code> <pre><code>class StateTest(BaseTest):\n    \"\"\"\n    Filler type that tests transactions over the period of a single block.\n    \"\"\"\n\n    env: Environment\n    pre: Alloc\n    post: Alloc\n    tx: Transaction\n    engine_api_error_code: Optional[EngineAPIError] = None\n    blockchain_test_header_verify: Optional[Header] = None\n    blockchain_test_rlp_modifier: Optional[Header] = None\n    chain_id: int = 1\n\n    supported_fixture_formats: ClassVar[List[FixtureFormats]] = [\n        FixtureFormats.BLOCKCHAIN_TEST,\n        FixtureFormats.BLOCKCHAIN_TEST_HIVE,\n        FixtureFormats.STATE_TEST,\n    ]\n\n    def _generate_blockchain_genesis_environment(self) -&gt; Environment:\n        \"\"\"\n        Generate the genesis environment for the BlockchainTest formatted test.\n        \"\"\"\n        assert (\n            self.env.number &gt;= 1\n        ), \"genesis block number cannot be negative, set state test env.number to 1\"\n\n        # Modify values to the proper values for the genesis block\n        # TODO: All of this can be moved to a new method in `Fork`\n        updated_values: Dict[str, Any] = {\n            \"withdrawals\": None,\n            \"parent_beacon_block_root\": None,\n            \"number\": self.env.number - 1,\n        }\n        if self.env.excess_blob_gas:\n            # The excess blob gas environment value means the value of the context (block header)\n            # where the transaction is executed. In a blockchain test, we need to indirectly\n            # set the excess blob gas by setting the excess blob gas of the genesis block\n            # to the expected value plus the TARGET_BLOB_GAS_PER_BLOCK, which is the value\n            # that will be subtracted from the excess blob gas when the first block is mined.\n            updated_values[\"excess_blob_gas\"] = (\n                self.env.excess_blob_gas + TARGET_BLOB_GAS_PER_BLOCK\n            )\n\n        return self.env.copy(**updated_values)\n\n    def _generate_blockchain_blocks(self) -&gt; List[Block]:\n        \"\"\"\n        Generate the single block that represents this state test in a BlockchainTest format.\n        \"\"\"\n        return [\n            Block(\n                number=self.env.number,\n                timestamp=self.env.timestamp,\n                fee_recipient=self.env.fee_recipient,\n                difficulty=self.env.difficulty,\n                gas_limit=self.env.gas_limit,\n                extra_data=self.env.extra_data,\n                withdrawals=self.env.withdrawals,\n                parent_beacon_block_root=self.env.parent_beacon_block_root,\n                txs=[self.tx],\n                ommers=[],\n                exception=self.tx.error,\n                header_verify=self.blockchain_test_header_verify,\n                rlp_modifier=self.blockchain_test_rlp_modifier,\n            )\n        ]\n\n    def generate_blockchain_test(self) -&gt; BlockchainTest:\n        \"\"\"\n        Generate a BlockchainTest fixture from this StateTest fixture.\n        \"\"\"\n        return BlockchainTest(\n            genesis_environment=self._generate_blockchain_genesis_environment(),\n            pre=self.pre,\n            post=self.post,\n            blocks=self._generate_blockchain_blocks(),\n            t8n_dump_dir=self.t8n_dump_dir,\n        )\n\n    def make_state_test_fixture(\n        self,\n        t8n: TransitionTool,\n        fork: Fork,\n        eips: Optional[List[int]] = None,\n    ) -&gt; Fixture:\n        \"\"\"\n        Create a fixture from the state test definition.\n        \"\"\"\n        # We can't generate a state test fixture that names a transition fork,\n        # so we get the fork at the block number and timestamp of the state test\n        fork = fork.fork_at(self.env.number, self.env.timestamp)\n\n        env = self.env.set_fork_requirements(fork)\n        tx = self.tx.with_signature_and_sender(keep_secret_key=True)\n        pre_alloc = Alloc.merge(\n            Alloc.model_validate(fork.pre_allocation()),\n            self.pre,\n        )\n        if empty_accounts := pre_alloc.empty_accounts():\n            raise Exception(f\"Empty accounts in pre state: {empty_accounts}\")\n        transition_tool_name = fork.transition_tool_name(\n            block_number=self.env.number,\n            timestamp=self.env.timestamp,\n        )\n        fork_name = (\n            \"+\".join([transition_tool_name] + [str(eip) for eip in eips])\n            if eips\n            else transition_tool_name\n        )\n        transition_tool_output = TransitionToolOutput(\n            **t8n.evaluate(\n                alloc=to_json(pre_alloc),\n                txs=[to_json(tx)],\n                env=to_json(env),\n                fork_name=fork_name,\n                chain_id=self.chain_id,\n                reward=0,  # Reward on state tests is always zero\n                eips=eips,\n                debug_output_path=self.get_next_transition_tool_output_path(),\n            )\n        )\n\n        try:\n            self.post.verify_post_alloc(transition_tool_output.alloc)\n        except Exception as e:\n            print_traces(t8n.get_traces())\n            raise e\n\n        return Fixture(\n            env=FixtureEnvironment(**env.model_dump(exclude_none=True)),\n            pre=pre_alloc,\n            post={\n                fork.blockchain_test_network_name(): [\n                    FixtureForkPost(\n                        state_root=transition_tool_output.result.state_root,\n                        logs_hash=transition_tool_output.result.logs_hash,\n                        tx_bytes=tx.rlp,\n                        expect_exception=tx.error,\n                    )\n                ]\n            },\n            transaction=FixtureTransaction.from_transaction(tx),\n        )\n\n    def generate(\n        self,\n        t8n: TransitionTool,\n        fork: Fork,\n        fixture_format: FixtureFormats,\n        eips: Optional[List[int]] = None,\n    ) -&gt; BaseFixture:\n        \"\"\"\n        Generate the BlockchainTest fixture.\n        \"\"\"\n        if fixture_format in BlockchainTest.supported_fixture_formats:\n            return self.generate_blockchain_test().generate(\n                t8n=t8n, fork=fork, fixture_format=fixture_format, eips=eips\n            )\n        elif fixture_format == FixtureFormats.STATE_TEST:\n            return self.make_state_test_fixture(t8n, fork, eips)\n\n        raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.StateTest.generate_blockchain_test","title":"<code>generate_blockchain_test()</code>","text":"<p>Generate a BlockchainTest fixture from this StateTest fixture.</p> Source code in <code>src/ethereum_test_tools/spec/state/state_test.py</code> <pre><code>def generate_blockchain_test(self) -&gt; BlockchainTest:\n    \"\"\"\n    Generate a BlockchainTest fixture from this StateTest fixture.\n    \"\"\"\n    return BlockchainTest(\n        genesis_environment=self._generate_blockchain_genesis_environment(),\n        pre=self.pre,\n        post=self.post,\n        blocks=self._generate_blockchain_blocks(),\n        t8n_dump_dir=self.t8n_dump_dir,\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.StateTest.make_state_test_fixture","title":"<code>make_state_test_fixture(t8n, fork, eips=None)</code>","text":"<p>Create a fixture from the state test definition.</p> Source code in <code>src/ethereum_test_tools/spec/state/state_test.py</code> <pre><code>def make_state_test_fixture(\n    self,\n    t8n: TransitionTool,\n    fork: Fork,\n    eips: Optional[List[int]] = None,\n) -&gt; Fixture:\n    \"\"\"\n    Create a fixture from the state test definition.\n    \"\"\"\n    # We can't generate a state test fixture that names a transition fork,\n    # so we get the fork at the block number and timestamp of the state test\n    fork = fork.fork_at(self.env.number, self.env.timestamp)\n\n    env = self.env.set_fork_requirements(fork)\n    tx = self.tx.with_signature_and_sender(keep_secret_key=True)\n    pre_alloc = Alloc.merge(\n        Alloc.model_validate(fork.pre_allocation()),\n        self.pre,\n    )\n    if empty_accounts := pre_alloc.empty_accounts():\n        raise Exception(f\"Empty accounts in pre state: {empty_accounts}\")\n    transition_tool_name = fork.transition_tool_name(\n        block_number=self.env.number,\n        timestamp=self.env.timestamp,\n    )\n    fork_name = (\n        \"+\".join([transition_tool_name] + [str(eip) for eip in eips])\n        if eips\n        else transition_tool_name\n    )\n    transition_tool_output = TransitionToolOutput(\n        **t8n.evaluate(\n            alloc=to_json(pre_alloc),\n            txs=[to_json(tx)],\n            env=to_json(env),\n            fork_name=fork_name,\n            chain_id=self.chain_id,\n            reward=0,  # Reward on state tests is always zero\n            eips=eips,\n            debug_output_path=self.get_next_transition_tool_output_path(),\n        )\n    )\n\n    try:\n        self.post.verify_post_alloc(transition_tool_output.alloc)\n    except Exception as e:\n        print_traces(t8n.get_traces())\n        raise e\n\n    return Fixture(\n        env=FixtureEnvironment(**env.model_dump(exclude_none=True)),\n        pre=pre_alloc,\n        post={\n            fork.blockchain_test_network_name(): [\n                FixtureForkPost(\n                    state_root=transition_tool_output.result.state_root,\n                    logs_hash=transition_tool_output.result.logs_hash,\n                    tx_bytes=tx.rlp,\n                    expect_exception=tx.error,\n                )\n            ]\n        },\n        transaction=FixtureTransaction.from_transaction(tx),\n    )\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.StateTest.generate","title":"<code>generate(t8n, fork, fixture_format, eips=None)</code>","text":"<p>Generate the BlockchainTest fixture.</p> Source code in <code>src/ethereum_test_tools/spec/state/state_test.py</code> <pre><code>def generate(\n    self,\n    t8n: TransitionTool,\n    fork: Fork,\n    fixture_format: FixtureFormats,\n    eips: Optional[List[int]] = None,\n) -&gt; BaseFixture:\n    \"\"\"\n    Generate the BlockchainTest fixture.\n    \"\"\"\n    if fixture_format in BlockchainTest.supported_fixture_formats:\n        return self.generate_blockchain_test().generate(\n            t8n=t8n, fork=fork, fixture_format=fixture_format, eips=eips\n        )\n    elif fixture_format == FixtureFormats.STATE_TEST:\n        return self.make_state_test_fixture(t8n, fork, eips)\n\n    raise Exception(f\"Unknown fixture format: {fixture_format}\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TestInfo","title":"<code>TestInfo</code>  <code>dataclass</code>","text":"<p>Contains test information from the current node.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>@dataclass(kw_only=True)\nclass TestInfo:\n    \"\"\"\n    Contains test information from the current node.\n    \"\"\"\n\n    name: str  # pytest: Item.name\n    id: str  # pytest: Item.nodeid\n    original_name: str  # pytest: Item.originalname\n    path: Path  # pytest: Item.path\n\n    def get_name_and_parameters(self) -&gt; Tuple[str, str]:\n        \"\"\"\n        Converts a test name to a tuple containing the test name and test parameters.\n\n        Example:\n        test_push0_key_sstore[fork_Shanghai] -&gt; test_push0_key_sstore, fork_Shanghai\n        \"\"\"\n        test_name, parameters = self.name.split(\"[\")\n        return test_name, re.sub(r\"[\\[\\-]\", \"_\", parameters).replace(\"]\", \"\")\n\n    def get_single_test_name(self) -&gt; str:\n        \"\"\"\n        Converts a test name to a single test name.\n        \"\"\"\n        test_name, test_parameters = self.get_name_and_parameters()\n        return f\"{test_name}__{test_parameters}\"\n\n    def get_dump_dir_path(\n        self,\n        base_dump_dir: Optional[Path],\n        filler_path: Path,\n        level: Literal[\"test_module\", \"test_function\", \"test_parameter\"] = \"test_parameter\",\n    ) -&gt; Optional[Path]:\n        \"\"\"\n        The path to dump the debug output as defined by the level to dump at.\n        \"\"\"\n        if not base_dump_dir:\n            return None\n        test_module_relative_dir = get_module_relative_output_dir(self.path, filler_path)\n        if level == \"test_module\":\n            return Path(base_dump_dir) / Path(str(test_module_relative_dir).replace(os.sep, \"__\"))\n        test_name, test_parameter_string = self.get_name_and_parameters()\n        flat_path = f\"{str(test_module_relative_dir).replace(os.sep, '__')}__{test_name}\"\n        if level == \"test_function\":\n            return Path(base_dump_dir) / flat_path\n        elif level == \"test_parameter\":\n            return Path(base_dump_dir) / flat_path / test_parameter_string\n        raise Exception(\"Unexpected level.\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TestInfo.get_name_and_parameters","title":"<code>get_name_and_parameters()</code>","text":"<p>Converts a test name to a tuple containing the test name and test parameters.</p> <p>Example: test_push0_key_sstore[fork_Shanghai] -&gt; test_push0_key_sstore, fork_Shanghai</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def get_name_and_parameters(self) -&gt; Tuple[str, str]:\n    \"\"\"\n    Converts a test name to a tuple containing the test name and test parameters.\n\n    Example:\n    test_push0_key_sstore[fork_Shanghai] -&gt; test_push0_key_sstore, fork_Shanghai\n    \"\"\"\n    test_name, parameters = self.name.split(\"[\")\n    return test_name, re.sub(r\"[\\[\\-]\", \"_\", parameters).replace(\"]\", \"\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TestInfo.get_single_test_name","title":"<code>get_single_test_name()</code>","text":"<p>Converts a test name to a single test name.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def get_single_test_name(self) -&gt; str:\n    \"\"\"\n    Converts a test name to a single test name.\n    \"\"\"\n    test_name, test_parameters = self.get_name_and_parameters()\n    return f\"{test_name}__{test_parameters}\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.TestInfo.get_dump_dir_path","title":"<code>get_dump_dir_path(base_dump_dir, filler_path, level='test_parameter')</code>","text":"<p>The path to dump the debug output as defined by the level to dump at.</p> Source code in <code>src/ethereum_test_tools/spec/fixture_collector.py</code> <pre><code>def get_dump_dir_path(\n    self,\n    base_dump_dir: Optional[Path],\n    filler_path: Path,\n    level: Literal[\"test_module\", \"test_function\", \"test_parameter\"] = \"test_parameter\",\n) -&gt; Optional[Path]:\n    \"\"\"\n    The path to dump the debug output as defined by the level to dump at.\n    \"\"\"\n    if not base_dump_dir:\n        return None\n    test_module_relative_dir = get_module_relative_output_dir(self.path, filler_path)\n    if level == \"test_module\":\n        return Path(base_dump_dir) / Path(str(test_module_relative_dir).replace(os.sep, \"__\"))\n    test_name, test_parameter_string = self.get_name_and_parameters()\n    flat_path = f\"{str(test_module_relative_dir).replace(os.sep, '__')}__{test_name}\"\n    if level == \"test_function\":\n        return Path(base_dump_dir) / flat_path\n    elif level == \"test_parameter\":\n        return Path(base_dump_dir) / flat_path / test_parameter_string\n    raise Exception(\"Unexpected level.\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block","title":"<code>Block</code>","text":"<p>               Bases: <code>Header</code></p> <p>Block type used to describe block properties in test specs</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/types.py</code> <pre><code>class Block(Header):\n    \"\"\"\n    Block type used to describe block properties in test specs\n    \"\"\"\n\n    rlp: Bytes | None = None\n    \"\"\"\n    If set, blockchain test will skip generating the block and will pass this value directly to\n    the Fixture.\n\n    Only meant to be used to simulate blocks with bad formats, and therefore\n    requires the block to produce an exception.\n    \"\"\"\n    header_verify: Header | None = None\n    \"\"\"\n    If set, the block header will be verified against the specified values.\n    \"\"\"\n    rlp_modifier: Header | None = None\n    \"\"\"\n    An RLP modifying header which values would be used to override the ones\n    returned by the  `evm_transition_tool`.\n    \"\"\"\n    exception: List[\n        TransactionException | BlockException\n    ] | TransactionException | BlockException | None = None\n    \"\"\"\n    If set, the block is expected to be rejected by the client.\n    \"\"\"\n    engine_api_error_code: EngineAPIError | None = None\n    \"\"\"\n    If set, the block is expected to produce an error response from the Engine API.\n    \"\"\"\n    txs: List[Transaction] = Field(default_factory=list)\n    \"\"\"\n    List of transactions included in the block.\n    \"\"\"\n    ommers: List[Header] | None = None\n    \"\"\"\n    List of ommer headers included in the block.\n    \"\"\"\n    withdrawals: List[Withdrawal] | None = None\n    \"\"\"\n    List of withdrawals to perform for this block.\n    \"\"\"\n    requests: List[DepositRequest | WithdrawalRequest] | None = None\n    \"\"\"\n    Custom list of requests to embed in this block.\n    \"\"\"\n\n    def set_environment(self, env: Environment) -&gt; Environment:\n        \"\"\"\n        Creates a copy of the environment with the characteristics of this\n        specific block.\n        \"\"\"\n        new_env_values: Dict[str, Any] = {}\n\n        \"\"\"\n        Values that need to be set in the environment and are `None` for\n        this block need to be set to their defaults.\n        \"\"\"\n        new_env_values[\"difficulty\"] = self.difficulty\n        new_env_values[\"fee_recipient\"] = (\n            self.fee_recipient if self.fee_recipient is not None else Environment().fee_recipient\n        )\n        new_env_values[\"gas_limit\"] = (\n            self.gas_limit or env.parent_gas_limit or Environment().gas_limit\n        )\n        if not isinstance(self.base_fee_per_gas, Removable):\n            new_env_values[\"base_fee_per_gas\"] = self.base_fee_per_gas\n        new_env_values[\"withdrawals\"] = self.withdrawals\n        if not isinstance(self.excess_blob_gas, Removable):\n            new_env_values[\"excess_blob_gas\"] = self.excess_blob_gas\n        if not isinstance(self.blob_gas_used, Removable):\n            new_env_values[\"blob_gas_used\"] = self.blob_gas_used\n        if not isinstance(self.parent_beacon_block_root, Removable):\n            new_env_values[\"parent_beacon_block_root\"] = self.parent_beacon_block_root\n        \"\"\"\n        These values are required, but they depend on the previous environment,\n        so they can be calculated here.\n        \"\"\"\n        if self.number is not None:\n            new_env_values[\"number\"] = self.number\n        else:\n            # calculate the next block number for the environment\n            if len(env.block_hashes) == 0:\n                new_env_values[\"number\"] = 0\n            else:\n                new_env_values[\"number\"] = max([Number(n) for n in env.block_hashes.keys()]) + 1\n\n        if self.timestamp is not None:\n            new_env_values[\"timestamp\"] = self.timestamp\n        else:\n            assert env.parent_timestamp is not None\n            new_env_values[\"timestamp\"] = int(Number(env.parent_timestamp) + 12)\n\n        return env.copy(**new_env_values)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.rlp","title":"<code>rlp: Bytes | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set, blockchain test will skip generating the block and will pass this value directly to the Fixture.</p> <p>Only meant to be used to simulate blocks with bad formats, and therefore requires the block to produce an exception.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.header_verify","title":"<code>header_verify: Header | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set, the block header will be verified against the specified values.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.rlp_modifier","title":"<code>rlp_modifier: Header | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An RLP modifying header which values would be used to override the ones returned by the  <code>evm_transition_tool</code>.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.exception","title":"<code>exception: List[TransactionException | BlockException] | TransactionException | BlockException | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set, the block is expected to be rejected by the client.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.engine_api_error_code","title":"<code>engine_api_error_code: EngineAPIError | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set, the block is expected to produce an error response from the Engine API.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.txs","title":"<code>txs: List[Transaction] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of transactions included in the block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.ommers","title":"<code>ommers: List[Header] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of ommer headers included in the block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.withdrawals","title":"<code>withdrawals: List[Withdrawal] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of withdrawals to perform for this block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.requests","title":"<code>requests: List[DepositRequest | WithdrawalRequest] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Custom list of requests to embed in this block.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Block.set_environment","title":"<code>set_environment(env)</code>","text":"<p>Creates a copy of the environment with the characteristics of this specific block.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/types.py</code> <pre><code>def set_environment(self, env: Environment) -&gt; Environment:\n    \"\"\"\n    Creates a copy of the environment with the characteristics of this\n    specific block.\n    \"\"\"\n    new_env_values: Dict[str, Any] = {}\n\n    \"\"\"\n    Values that need to be set in the environment and are `None` for\n    this block need to be set to their defaults.\n    \"\"\"\n    new_env_values[\"difficulty\"] = self.difficulty\n    new_env_values[\"fee_recipient\"] = (\n        self.fee_recipient if self.fee_recipient is not None else Environment().fee_recipient\n    )\n    new_env_values[\"gas_limit\"] = (\n        self.gas_limit or env.parent_gas_limit or Environment().gas_limit\n    )\n    if not isinstance(self.base_fee_per_gas, Removable):\n        new_env_values[\"base_fee_per_gas\"] = self.base_fee_per_gas\n    new_env_values[\"withdrawals\"] = self.withdrawals\n    if not isinstance(self.excess_blob_gas, Removable):\n        new_env_values[\"excess_blob_gas\"] = self.excess_blob_gas\n    if not isinstance(self.blob_gas_used, Removable):\n        new_env_values[\"blob_gas_used\"] = self.blob_gas_used\n    if not isinstance(self.parent_beacon_block_root, Removable):\n        new_env_values[\"parent_beacon_block_root\"] = self.parent_beacon_block_root\n    \"\"\"\n    These values are required, but they depend on the previous environment,\n    so they can be calculated here.\n    \"\"\"\n    if self.number is not None:\n        new_env_values[\"number\"] = self.number\n    else:\n        # calculate the next block number for the environment\n        if len(env.block_hashes) == 0:\n            new_env_values[\"number\"] = 0\n        else:\n            new_env_values[\"number\"] = max([Number(n) for n in env.block_hashes.keys()]) + 1\n\n    if self.timestamp is not None:\n        new_env_values[\"timestamp\"] = self.timestamp\n    else:\n        assert env.parent_timestamp is not None\n        new_env_values[\"timestamp\"] = int(Number(env.parent_timestamp) + 12)\n\n    return env.copy(**new_env_values)\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Header","title":"<code>Header</code>","text":"<p>               Bases: <code>CamelModel</code></p> <p>Header type used to describe block header properties in test specs.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/types.py</code> <pre><code>class Header(CamelModel):\n    \"\"\"\n    Header type used to describe block header properties in test specs.\n    \"\"\"\n\n    parent_hash: Hash | None = None\n    ommers_hash: Hash | None = None\n    fee_recipient: Address | None = None\n    state_root: Hash | None = None\n    transactions_trie: Hash | None = None\n    receipts_root: Hash | None = None\n    logs_bloom: Bloom | None = None\n    difficulty: HexNumber | None = None\n    number: HexNumber | None = None\n    gas_limit: HexNumber | None = None\n    gas_used: HexNumber | None = None\n    timestamp: HexNumber | None = None\n    extra_data: Bytes | None = None\n    prev_randao: Hash | None = None\n    nonce: HeaderNonce | None = None\n    base_fee_per_gas: Removable | HexNumber | None = None\n    withdrawals_root: Removable | Hash | None = None\n    blob_gas_used: Removable | HexNumber | None = None\n    excess_blob_gas: Removable | HexNumber | None = None\n    parent_beacon_block_root: Removable | Hash | None = None\n    requests_root: Removable | Hash | None = None\n\n    REMOVE_FIELD: ClassVar[Removable] = Removable()\n    \"\"\"\n    Sentinel object used to specify that a header field should be removed.\n    \"\"\"\n    EMPTY_FIELD: ClassVar[Removable] = Removable()\n    \"\"\"\n    Sentinel object used to specify that a header field must be empty during verification.\n\n    This can be used in a test to explicitly skip a field in a block's RLP encoding.\n    included in the (json) output when the model is serialized. For example:\n    ```\n    header_modifier = Header(\n        excess_blob_gas=Header.REMOVE_FIELD,\n    )\n    block = Block(\n        timestamp=TIMESTAMP,\n        rlp_modifier=header_modifier,\n        exception=BlockException.INCORRECT_BLOCK_FORMAT,\n        engine_api_error_code=EngineAPIError.InvalidParams,\n    )\n    ```\n    \"\"\"\n\n    model_config = ConfigDict(\n        arbitrary_types_allowed=True,\n        # explicitly set Removable items to None so they are not included in the serialization\n        # (in combination with exclude_None=True in model.dump()).\n        json_encoders={\n            Removable: lambda x: None,\n        },\n    )\n\n    @field_validator(\"withdrawals_root\", mode=\"before\")\n    @classmethod\n    def validate_withdrawals_root(cls, value):\n        \"\"\"\n        Helper validator to convert a list of withdrawals into the withdrawals root hash.\n        \"\"\"\n        if isinstance(value, list):\n            return Withdrawal.list_root(value)\n        return value\n\n    @field_validator(\"requests_root\", mode=\"before\")\n    @classmethod\n    def validate_requests_root(cls, value):\n        \"\"\"\n        Helper validator to convert a list of requests into the requests root hash.\n        \"\"\"\n        if isinstance(value, list):\n            return Requests(root=value).trie_root\n        return value\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Header.REMOVE_FIELD","title":"<code>REMOVE_FIELD: Removable = Removable()</code>  <code>class-attribute</code>","text":"<p>Sentinel object used to specify that a header field should be removed.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Header.EMPTY_FIELD","title":"<code>EMPTY_FIELD: Removable = Removable()</code>  <code>class-attribute</code>","text":"<p>Sentinel object used to specify that a header field must be empty during verification.</p> <p>This can be used in a test to explicitly skip a field in a block's RLP encoding. included in the (json) output when the model is serialized. For example: <pre><code>header_modifier = Header(\n    excess_blob_gas=Header.REMOVE_FIELD,\n)\nblock = Block(\n    timestamp=TIMESTAMP,\n    rlp_modifier=header_modifier,\n    exception=BlockException.INCORRECT_BLOCK_FORMAT,\n    engine_api_error_code=EngineAPIError.InvalidParams,\n)\n</code></pre></p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Header.validate_withdrawals_root","title":"<code>validate_withdrawals_root(value)</code>  <code>classmethod</code>","text":"<p>Helper validator to convert a list of withdrawals into the withdrawals root hash.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/types.py</code> <pre><code>@field_validator(\"withdrawals_root\", mode=\"before\")\n@classmethod\ndef validate_withdrawals_root(cls, value):\n    \"\"\"\n    Helper validator to convert a list of withdrawals into the withdrawals root hash.\n    \"\"\"\n    if isinstance(value, list):\n        return Withdrawal.list_root(value)\n    return value\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Header.validate_requests_root","title":"<code>validate_requests_root(value)</code>  <code>classmethod</code>","text":"<p>Helper validator to convert a list of requests into the requests root hash.</p> Source code in <code>src/ethereum_test_tools/spec/blockchain/types.py</code> <pre><code>@field_validator(\"requests_root\", mode=\"before\")\n@classmethod\ndef validate_requests_root(cls, value):\n    \"\"\"\n    Helper validator to convert a list of requests into the requests root hash.\n    \"\"\"\n    if isinstance(value, list):\n        return Requests(root=value).trie_root\n    return value\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macro","title":"<code>Macro</code>","text":"<p>               Bases: <code>OpcodeMacroBase</code></p> <p>Represents opcode macro replacement, basically holds bytes</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>class Macro(OpcodeMacroBase):\n    \"\"\"\n    Represents opcode macro replacement, basically holds bytes\n    \"\"\"\n\n    def __new__(\n        cls,\n        macro_or_bytes: \"bytes | Macro\",\n    ):\n        \"\"\"\n        Creates a new opcode macro instance.\n        \"\"\"\n        if isinstance(macro_or_bytes, Macro):\n            # Required because Enum class calls the base class with the instantiated object as\n            # parameter.\n            return macro_or_bytes\n        else:\n            instance = super().__new__(cls)\n            instance._bytes_ = macro_or_bytes\n            return instance\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macro.__new__","title":"<code>__new__(macro_or_bytes)</code>","text":"<p>Creates a new opcode macro instance.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>def __new__(\n    cls,\n    macro_or_bytes: \"bytes | Macro\",\n):\n    \"\"\"\n    Creates a new opcode macro instance.\n    \"\"\"\n    if isinstance(macro_or_bytes, Macro):\n        # Required because Enum class calls the base class with the instantiated object as\n        # parameter.\n        return macro_or_bytes\n    else:\n        instance = super().__new__(cls)\n        instance._bytes_ = macro_or_bytes\n        return instance\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros","title":"<code>Macros</code>","text":"<p>               Bases: <code>Macro</code>, <code>Enum</code></p> <p>Enum containing all macros.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>class Macros(Macro, Enum):\n    \"\"\"\n    Enum containing all macros.\n    \"\"\"\n\n    OOG = Macro(Opcodes.SHA3(0, 100000000000))\n    \"\"\"\n    OOG(args)\n    ----\n\n    Halt execution by consuming all available gas.\n\n    Inputs\n    ----\n    - any input arguments are ignored\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    `SHA3(0, 100000000000)` results in 19073514453125027 gas used and an OOG\n    exception.\n\n    Note:\n    If a value &gt; `100000000000` is used as second argument, the resulting geth\n     trace reports gas `30` and an OOG exception.\n    `SHA3(0, SUB(0, 1))` causes a gas &gt; u64 exception and an OOG exception.\n\n    Bytecode\n    ----\n    SHA3(0, 100000000000)\n    \"\"\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros.OOG","title":"<code>OOG = Macro(Opcodes.SHA3(0, 100000000000))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros.OOG--oogargs","title":"OOG(args)","text":"<p>Halt execution by consuming all available gas.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros.OOG--inputs","title":"Inputs","text":"<ul> <li>any input arguments are ignored</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros.OOG--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros.OOG--gas","title":"Gas","text":"<p><code>SHA3(0, 100000000000)</code> results in 19073514453125027 gas used and an OOG exception.</p> <p>Note: If a value &gt; <code>100000000000</code> is used as second argument, the resulting geth  trace reports gas <code>30</code> and an OOG exception. <code>SHA3(0, SUB(0, 1))</code> causes a gas &gt; u64 exception and an OOG exception.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Macros.OOG--bytecode","title":"Bytecode","text":"<p>SHA3(0, 100000000000)</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode","title":"<code>Opcode</code>","text":"<p>               Bases: <code>OpcodeMacroBase</code></p> <p>Represents a single Opcode instruction in the EVM, with extra metadata useful to parametrize tests.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode--parameters","title":"Parameters","text":"<ul> <li>popped_stack_items: number of items the opcode pops from the stack</li> <li>pushed_stack_items: number of items the opcode pushes to the stack</li> <li>min_stack_height: minimum stack height required by the opcode</li> <li>data_portion_length: number of bytes after the opcode in the bytecode     that represent data</li> </ul> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>class Opcode(OpcodeMacroBase):\n    \"\"\"\n    Represents a single Opcode instruction in the EVM, with extra metadata useful to parametrize\n    tests.\n\n    Parameters\n    ----------\n    - popped_stack_items: number of items the opcode pops from the stack\n    - pushed_stack_items: number of items the opcode pushes to the stack\n    - min_stack_height: minimum stack height required by the opcode\n    - data_portion_length: number of bytes after the opcode in the bytecode\n        that represent data\n    \"\"\"\n\n    popped_stack_items: int\n    pushed_stack_items: int\n    min_stack_height: int\n    data_portion_length: int\n    data_portion_formatter: Optional[Callable[[Any], bytes]]\n    unchecked_stack: bool = False\n\n    def __new__(\n        cls,\n        opcode_or_byte: \"int | bytes | Opcode\",\n        *,\n        popped_stack_items: int = 0,\n        pushed_stack_items: int = 0,\n        min_stack_height: int = 0,\n        data_portion_length: int = 0,\n        data_portion_formatter=None,\n        unchecked_stack=False,\n    ):\n        \"\"\"\n        Creates a new opcode instance.\n        \"\"\"\n        if type(opcode_or_byte) is Opcode:\n            # Required because Enum class calls the base class with the instantiated object as\n            # parameter.\n            return opcode_or_byte\n        elif isinstance(opcode_or_byte, int) or isinstance(opcode_or_byte, bytes):\n            obj = super().__new__(cls)\n            obj._bytes_ = (\n                bytes([opcode_or_byte]) if isinstance(opcode_or_byte, int) else opcode_or_byte\n            )\n            obj.popped_stack_items = popped_stack_items\n            obj.pushed_stack_items = pushed_stack_items\n            obj.min_stack_height = min_stack_height\n            obj.data_portion_length = data_portion_length\n            obj.data_portion_formatter = data_portion_formatter\n            obj.unchecked_stack = unchecked_stack\n            return obj\n        raise TypeError(\"Opcode constructor '__new__' didn't return an instance!\")\n\n    def __getitem__(\n        self, *args: \"int | bytes | str | Opcode | FixedSizeBytes | Iterable[int]\"\n    ) -&gt; \"Opcode\":\n        \"\"\"\n        Initialize a new instance of the opcode with the data portion set, and also clear\n        the data portion variables to avoid reusing them.\n        \"\"\"\n        if self.data_portion_formatter is None and self.data_portion_length == 0:\n            raise ValueError(\"Opcode does not have a data portion or has already been set\")\n        data_portion = bytes()\n\n        if self.data_portion_formatter is not None:\n            if len(args) == 1 and isinstance(args[0], Iterable) and not isinstance(args[0], bytes):\n                data_portion = self.data_portion_formatter(*args[0])\n            else:\n                data_portion = self.data_portion_formatter(*args)\n        elif self.data_portion_length &gt; 0:\n            # For opcodes with a data portion, the first argument is the data and the rest of the\n            # arguments form the stack.\n            assert len(args) == 1, \"Opcode with data portion requires exactly one argument\"\n            data = args[0]\n            if isinstance(data, bytes) or isinstance(data, SupportsBytes) or isinstance(data, str):\n                if isinstance(data, str):\n                    if data.startswith(\"0x\"):\n                        data = data[2:]\n                    data = bytes.fromhex(data)\n                elif isinstance(data, SupportsBytes):\n                    data = bytes(data)\n                assert len(data) &lt;= self.data_portion_length\n                data_portion = data.rjust(self.data_portion_length, b\"\\x00\")\n            elif isinstance(data, int):\n                signed = data &lt; 0\n                data_portion = data.to_bytes(\n                    length=self.data_portion_length,\n                    byteorder=\"big\",\n                    signed=signed,\n                )\n            else:\n                raise TypeError(\"Opcode data portion must be either an int or bytes/hex string\")\n\n        new_opcode = Opcode(\n            bytes(self) + data_portion,\n            popped_stack_items=self.popped_stack_items,\n            pushed_stack_items=self.pushed_stack_items,\n            min_stack_height=self.min_stack_height,\n            data_portion_length=0,\n            data_portion_formatter=None,\n            unchecked_stack=self.unchecked_stack,\n        )\n        new_opcode._name_ = self._name_\n        return new_opcode\n\n    def __call__(\n        self,\n        *args_t: \"int | bytes | str | Opcode | FixedSizeBytes | Iterable[int]\",\n        unchecked: bool = False,\n    ) -&gt; bytes:\n        \"\"\"\n        Makes all opcode instances callable to return formatted bytecode, which constitutes a data\n        portion, that is located after the opcode byte, and pre-opcode bytecode, which is normally\n        used to set up the stack.\n\n        This useful to automatically format, e.g., push opcodes and their data sections as\n        `Opcodes.PUSH1(0x00)`.\n\n        Data sign is automatically detected but for this reason the range of the input must be:\n        `[-2^(data_portion_bits-1), 2^(data_portion_bits)]` where: `data_portion_bits ==\n        data_portion_length * 8`\n\n        For the stack, the arguments are set up in the opposite order they are given, so the first\n        argument is the last item pushed to the stack.\n\n        The resulting stack arrangement does not take into account opcode stack element\n        consumption, so the stack height is not guaranteed to be correct and the user must take\n        this into consideration.\n\n        Integers can also be used as stack elements, in which case they are automatically converted\n        to PUSH operations, and negative numbers always use a PUSH32 operation.\n\n        `FixedSizeBytes` can also be used as stack elements, which includes `Address` and `Hash`\n        types, for each of which a PUSH operation is automatically generated, `PUSH20` and `PUSH32`\n        respectively.\n\n        Hex-strings will automatically be converted to bytes.\n\n        \"\"\"\n        args: List[\"int | bytes | str | Opcode | FixedSizeBytes | Iterable[int]\"] = list(args_t)\n        pre_opcode_bytecode = bytes()\n        data_portion = bytes()\n\n        if (self.data_portion_formatter is not None or self.data_portion_length &gt; 0) and len(\n            args\n        ) == 0:\n            raise ValueError(\"Opcode with data portion requires at least one argument\")\n        if self.data_portion_formatter is not None:\n            data_portion_arg = args.pop(0)\n            if isinstance(data_portion_arg, Iterable) and not isinstance(data_portion_arg, bytes):\n                data_portion = self.data_portion_formatter(*data_portion_arg)\n            else:\n                data_portion = self.data_portion_formatter(data_portion_arg)\n        elif self.data_portion_length &gt; 0:\n            # For opcodes with a data portion, the first argument is the data and the rest of the\n            # arguments form the stack.\n            data = args.pop(0)\n            if isinstance(data, bytes) or isinstance(data, str):\n                if isinstance(data, str):\n                    if data.startswith(\"0x\"):\n                        data = data[2:]\n                    data = bytes.fromhex(data)\n                elif isinstance(data, SupportsBytes):\n                    data = bytes(data)\n                assert len(data) &lt;= self.data_portion_length\n                data_portion = data.rjust(self.data_portion_length, b\"\\x00\")\n            elif isinstance(data, int):\n                signed = data &lt; 0\n                data_portion = data.to_bytes(\n                    length=self.data_portion_length,\n                    byteorder=\"big\",\n                    signed=signed,\n                )\n            else:\n                raise TypeError(\"Opcode data portion must be either an int or bytes/hex string\")\n\n        # The rest of the arguments conform the stack.\n        if len(args) != self.popped_stack_items and not (unchecked or self.unchecked_stack):\n            raise ValueError(\n                f\"Opcode {self._name_} requires {self.popped_stack_items} stack elements, but \"\n                f\"{len(args)} were provided. Use 'unchecked=True' parameter to ignore this check.\"\n            )\n\n        while len(args) &gt; 0:\n            data = args.pop()\n            if isinstance(data, int) or isinstance(data, FixedSizeBytes):\n                # We are going to push a constant to the stack.\n                data_size = 0\n                if isinstance(data, int):\n                    signed = data &lt; 0\n                    data_size = _get_int_size(data)\n                    if data_size &gt; 32:\n                        raise ValueError(\"Opcode stack data must be less than 32 bytes\")\n                    elif data_size == 0:\n                        # Pushing 0 is done with the PUSH1 opcode for compatibility reasons.\n                        data_size = 1\n                    data = data.to_bytes(\n                        length=data_size,\n                        byteorder=\"big\",\n                        signed=signed,\n                    )\n                elif isinstance(data, FixedSizeBytes):\n                    data_size = data.byte_length\n\n                assert isinstance(data, bytes)\n                assert data_size &gt; 0\n                pre_opcode_bytecode += _push_opcodes_byte_list[data_size]\n                pre_opcode_bytecode += data\n            elif (\n                isinstance(data, bytes) or isinstance(data, SupportsBytes) or isinstance(data, str)\n            ):\n                if isinstance(data, str):\n                    if data.startswith(\"0x\"):\n                        data = data[2:]\n                    data = bytes.fromhex(data)\n                elif isinstance(data, SupportsBytes):\n                    data = bytes(data)\n                pre_opcode_bytecode += data\n\n            else:\n                raise TypeError(\"Opcode stack data must be either an int or a bytes/hex string\")\n\n        return pre_opcode_bytecode + self._bytes_ + data_portion\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        Returns the total bytecode length of the opcode, taking into account its data portion.\n        \"\"\"\n        return self.data_portion_length + 1\n\n    def int(self) -&gt; int:\n        \"\"\"\n        Returns the integer representation of the opcode.\n        \"\"\"\n        return int.from_bytes(self, byteorder=\"big\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode.__new__","title":"<code>__new__(opcode_or_byte, *, popped_stack_items=0, pushed_stack_items=0, min_stack_height=0, data_portion_length=0, data_portion_formatter=None, unchecked_stack=False)</code>","text":"<p>Creates a new opcode instance.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>def __new__(\n    cls,\n    opcode_or_byte: \"int | bytes | Opcode\",\n    *,\n    popped_stack_items: int = 0,\n    pushed_stack_items: int = 0,\n    min_stack_height: int = 0,\n    data_portion_length: int = 0,\n    data_portion_formatter=None,\n    unchecked_stack=False,\n):\n    \"\"\"\n    Creates a new opcode instance.\n    \"\"\"\n    if type(opcode_or_byte) is Opcode:\n        # Required because Enum class calls the base class with the instantiated object as\n        # parameter.\n        return opcode_or_byte\n    elif isinstance(opcode_or_byte, int) or isinstance(opcode_or_byte, bytes):\n        obj = super().__new__(cls)\n        obj._bytes_ = (\n            bytes([opcode_or_byte]) if isinstance(opcode_or_byte, int) else opcode_or_byte\n        )\n        obj.popped_stack_items = popped_stack_items\n        obj.pushed_stack_items = pushed_stack_items\n        obj.min_stack_height = min_stack_height\n        obj.data_portion_length = data_portion_length\n        obj.data_portion_formatter = data_portion_formatter\n        obj.unchecked_stack = unchecked_stack\n        return obj\n    raise TypeError(\"Opcode constructor '__new__' didn't return an instance!\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode.__getitem__","title":"<code>__getitem__(*args)</code>","text":"<p>Initialize a new instance of the opcode with the data portion set, and also clear the data portion variables to avoid reusing them.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>def __getitem__(\n    self, *args: \"int | bytes | str | Opcode | FixedSizeBytes | Iterable[int]\"\n) -&gt; \"Opcode\":\n    \"\"\"\n    Initialize a new instance of the opcode with the data portion set, and also clear\n    the data portion variables to avoid reusing them.\n    \"\"\"\n    if self.data_portion_formatter is None and self.data_portion_length == 0:\n        raise ValueError(\"Opcode does not have a data portion or has already been set\")\n    data_portion = bytes()\n\n    if self.data_portion_formatter is not None:\n        if len(args) == 1 and isinstance(args[0], Iterable) and not isinstance(args[0], bytes):\n            data_portion = self.data_portion_formatter(*args[0])\n        else:\n            data_portion = self.data_portion_formatter(*args)\n    elif self.data_portion_length &gt; 0:\n        # For opcodes with a data portion, the first argument is the data and the rest of the\n        # arguments form the stack.\n        assert len(args) == 1, \"Opcode with data portion requires exactly one argument\"\n        data = args[0]\n        if isinstance(data, bytes) or isinstance(data, SupportsBytes) or isinstance(data, str):\n            if isinstance(data, str):\n                if data.startswith(\"0x\"):\n                    data = data[2:]\n                data = bytes.fromhex(data)\n            elif isinstance(data, SupportsBytes):\n                data = bytes(data)\n            assert len(data) &lt;= self.data_portion_length\n            data_portion = data.rjust(self.data_portion_length, b\"\\x00\")\n        elif isinstance(data, int):\n            signed = data &lt; 0\n            data_portion = data.to_bytes(\n                length=self.data_portion_length,\n                byteorder=\"big\",\n                signed=signed,\n            )\n        else:\n            raise TypeError(\"Opcode data portion must be either an int or bytes/hex string\")\n\n    new_opcode = Opcode(\n        bytes(self) + data_portion,\n        popped_stack_items=self.popped_stack_items,\n        pushed_stack_items=self.pushed_stack_items,\n        min_stack_height=self.min_stack_height,\n        data_portion_length=0,\n        data_portion_formatter=None,\n        unchecked_stack=self.unchecked_stack,\n    )\n    new_opcode._name_ = self._name_\n    return new_opcode\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode.__call__","title":"<code>__call__(*args_t, unchecked=False)</code>","text":"<p>Makes all opcode instances callable to return formatted bytecode, which constitutes a data portion, that is located after the opcode byte, and pre-opcode bytecode, which is normally used to set up the stack.</p> <p>This useful to automatically format, e.g., push opcodes and their data sections as <code>Opcodes.PUSH1(0x00)</code>.</p> <p>Data sign is automatically detected but for this reason the range of the input must be: <code>[-2^(data_portion_bits-1), 2^(data_portion_bits)]</code> where: <code>data_portion_bits == data_portion_length * 8</code></p> <p>For the stack, the arguments are set up in the opposite order they are given, so the first argument is the last item pushed to the stack.</p> <p>The resulting stack arrangement does not take into account opcode stack element consumption, so the stack height is not guaranteed to be correct and the user must take this into consideration.</p> <p>Integers can also be used as stack elements, in which case they are automatically converted to PUSH operations, and negative numbers always use a PUSH32 operation.</p> <p><code>FixedSizeBytes</code> can also be used as stack elements, which includes <code>Address</code> and <code>Hash</code> types, for each of which a PUSH operation is automatically generated, <code>PUSH20</code> and <code>PUSH32</code> respectively.</p> <p>Hex-strings will automatically be converted to bytes.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>def __call__(\n    self,\n    *args_t: \"int | bytes | str | Opcode | FixedSizeBytes | Iterable[int]\",\n    unchecked: bool = False,\n) -&gt; bytes:\n    \"\"\"\n    Makes all opcode instances callable to return formatted bytecode, which constitutes a data\n    portion, that is located after the opcode byte, and pre-opcode bytecode, which is normally\n    used to set up the stack.\n\n    This useful to automatically format, e.g., push opcodes and their data sections as\n    `Opcodes.PUSH1(0x00)`.\n\n    Data sign is automatically detected but for this reason the range of the input must be:\n    `[-2^(data_portion_bits-1), 2^(data_portion_bits)]` where: `data_portion_bits ==\n    data_portion_length * 8`\n\n    For the stack, the arguments are set up in the opposite order they are given, so the first\n    argument is the last item pushed to the stack.\n\n    The resulting stack arrangement does not take into account opcode stack element\n    consumption, so the stack height is not guaranteed to be correct and the user must take\n    this into consideration.\n\n    Integers can also be used as stack elements, in which case they are automatically converted\n    to PUSH operations, and negative numbers always use a PUSH32 operation.\n\n    `FixedSizeBytes` can also be used as stack elements, which includes `Address` and `Hash`\n    types, for each of which a PUSH operation is automatically generated, `PUSH20` and `PUSH32`\n    respectively.\n\n    Hex-strings will automatically be converted to bytes.\n\n    \"\"\"\n    args: List[\"int | bytes | str | Opcode | FixedSizeBytes | Iterable[int]\"] = list(args_t)\n    pre_opcode_bytecode = bytes()\n    data_portion = bytes()\n\n    if (self.data_portion_formatter is not None or self.data_portion_length &gt; 0) and len(\n        args\n    ) == 0:\n        raise ValueError(\"Opcode with data portion requires at least one argument\")\n    if self.data_portion_formatter is not None:\n        data_portion_arg = args.pop(0)\n        if isinstance(data_portion_arg, Iterable) and not isinstance(data_portion_arg, bytes):\n            data_portion = self.data_portion_formatter(*data_portion_arg)\n        else:\n            data_portion = self.data_portion_formatter(data_portion_arg)\n    elif self.data_portion_length &gt; 0:\n        # For opcodes with a data portion, the first argument is the data and the rest of the\n        # arguments form the stack.\n        data = args.pop(0)\n        if isinstance(data, bytes) or isinstance(data, str):\n            if isinstance(data, str):\n                if data.startswith(\"0x\"):\n                    data = data[2:]\n                data = bytes.fromhex(data)\n            elif isinstance(data, SupportsBytes):\n                data = bytes(data)\n            assert len(data) &lt;= self.data_portion_length\n            data_portion = data.rjust(self.data_portion_length, b\"\\x00\")\n        elif isinstance(data, int):\n            signed = data &lt; 0\n            data_portion = data.to_bytes(\n                length=self.data_portion_length,\n                byteorder=\"big\",\n                signed=signed,\n            )\n        else:\n            raise TypeError(\"Opcode data portion must be either an int or bytes/hex string\")\n\n    # The rest of the arguments conform the stack.\n    if len(args) != self.popped_stack_items and not (unchecked or self.unchecked_stack):\n        raise ValueError(\n            f\"Opcode {self._name_} requires {self.popped_stack_items} stack elements, but \"\n            f\"{len(args)} were provided. Use 'unchecked=True' parameter to ignore this check.\"\n        )\n\n    while len(args) &gt; 0:\n        data = args.pop()\n        if isinstance(data, int) or isinstance(data, FixedSizeBytes):\n            # We are going to push a constant to the stack.\n            data_size = 0\n            if isinstance(data, int):\n                signed = data &lt; 0\n                data_size = _get_int_size(data)\n                if data_size &gt; 32:\n                    raise ValueError(\"Opcode stack data must be less than 32 bytes\")\n                elif data_size == 0:\n                    # Pushing 0 is done with the PUSH1 opcode for compatibility reasons.\n                    data_size = 1\n                data = data.to_bytes(\n                    length=data_size,\n                    byteorder=\"big\",\n                    signed=signed,\n                )\n            elif isinstance(data, FixedSizeBytes):\n                data_size = data.byte_length\n\n            assert isinstance(data, bytes)\n            assert data_size &gt; 0\n            pre_opcode_bytecode += _push_opcodes_byte_list[data_size]\n            pre_opcode_bytecode += data\n        elif (\n            isinstance(data, bytes) or isinstance(data, SupportsBytes) or isinstance(data, str)\n        ):\n            if isinstance(data, str):\n                if data.startswith(\"0x\"):\n                    data = data[2:]\n                data = bytes.fromhex(data)\n            elif isinstance(data, SupportsBytes):\n                data = bytes(data)\n            pre_opcode_bytecode += data\n\n        else:\n            raise TypeError(\"Opcode stack data must be either an int or a bytes/hex string\")\n\n    return pre_opcode_bytecode + self._bytes_ + data_portion\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode.__len__","title":"<code>__len__()</code>","text":"<p>Returns the total bytecode length of the opcode, taking into account its data portion.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    Returns the total bytecode length of the opcode, taking into account its data portion.\n    \"\"\"\n    return self.data_portion_length + 1\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcode.int","title":"<code>int()</code>","text":"<p>Returns the integer representation of the opcode.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>def int(self) -&gt; int:\n    \"\"\"\n    Returns the integer representation of the opcode.\n    \"\"\"\n    return int.from_bytes(self, byteorder=\"big\")\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes","title":"<code>Opcodes</code>","text":"<p>               Bases: <code>Opcode</code>, <code>Enum</code></p> <p>Enum containing all known opcodes.</p> <p>Contains deprecated and not yet implemented opcodes.</p> <p>This enum is !! NOT !! meant to be iterated over by the tests. Instead, create a list with cherry-picked opcodes from this Enum within the test if iteration is needed.</p> <p>Do !! NOT !! remove or modify existing opcodes from this list.</p> Source code in <code>src/ethereum_test_tools/vm/opcode.py</code> <pre><code>class Opcodes(Opcode, Enum):\n    \"\"\"\n    Enum containing all known opcodes.\n\n    Contains deprecated and not yet implemented opcodes.\n\n    This enum is !! NOT !! meant to be iterated over by the tests. Instead, create a list with\n    cherry-picked opcodes from this Enum within the test if iteration is needed.\n\n    Do !! NOT !! remove or modify existing opcodes from this list.\n    \"\"\"\n\n    STOP = Opcode(0x00)\n    \"\"\"\n    STOP()\n    ----\n\n    Description\n    ----\n    Stop execution\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    0\n\n    Source: [evm.codes/#00](https://www.evm.codes/#00)\n    \"\"\"\n\n    ADD = Opcode(0x01, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    ADD(a, b) = c\n    ----\n\n    Description\n    ----\n    Addition operation\n\n    Inputs\n    ----\n    - a: first integer value to add\n    - b: second integer value to add\n\n    Outputs\n    ----\n    - c: integer result of the addition modulo 2**256\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#01](https://www.evm.codes/#01)\n    \"\"\"\n\n    MUL = Opcode(0x02, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    MUL(a, b) = c\n    ----\n\n    Description\n    ----\n    Multiplication operation\n\n    Inputs\n    ----\n    - a: first integer value to multiply\n    - b: second integer value to multiply\n\n    Outputs\n    ----\n    - c: integer result of the multiplication modulo 2**256\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#02](https://www.evm.codes/#02)\n    \"\"\"\n\n    SUB = Opcode(0x03, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SUB(a, b) = c\n    ----\n\n    Description\n    ----\n    Subtraction operation\n\n    Inputs\n    ----\n    - a: first integer value\n    - b: second integer value\n\n    Outputs\n    ----\n    - c: integer result of the subtraction modulo 2**256\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#03](https://www.evm.codes/#03)\n    \"\"\"\n\n    DIV = Opcode(0x04, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    DIV(a, b) = c\n    ----\n\n    Description\n    ----\n    Division operation\n\n    Inputs\n    ----\n    - a: numerator\n    - b: denominator (must be non-zero)\n\n    Outputs\n    ----\n    - c: integer result of the division\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#04](https://www.evm.codes/#04)\n    \"\"\"\n\n    SDIV = Opcode(0x05, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SDIV(a, b) = c\n    ----\n\n    Description\n    ----\n    Signed division operation\n\n    Inputs\n    ----\n    - a: signed numerator\n    - b: signed denominator\n\n    Outputs\n    ----\n    - c: signed integer result of the division. If the denominator is 0, the result will be 0\n    ----\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#05](https://www.evm.codes/#05)\n    \"\"\"\n\n    MOD = Opcode(0x06, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    MOD(a, b) = c\n    ----\n\n    Description\n    ----\n    Modulo operation\n\n    Inputs\n    ----\n    - a: integer numerator\n    - b: integer denominator\n\n    Outputs\n    ----\n    - a % b: integer result of the integer modulo. If the denominator is 0, the result will be 0\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#06](https://www.evm.codes/#06)\n    \"\"\"\n\n    SMOD = Opcode(0x07, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SMOD(a, b) = c\n    ----\n\n    Description\n    ----\n    Signed modulo remainder operation\n\n    Inputs\n    ----\n    - a: integer numerator\n    - b: integer denominator\n\n    Outputs\n    ----\n    - a % b: integer result of the signed integer modulo. If the denominator is 0, the result will\n        be 0\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#07](https://www.evm.codes/#07)\n    \"\"\"\n\n    ADDMOD = Opcode(0x08, popped_stack_items=3, pushed_stack_items=1)\n    \"\"\"\n    ADDMOD(a, b, c) = d\n    ----\n\n    Description\n    ----\n    Modular addition operation with overflow check\n\n    Inputs\n    ----\n    - a: first integer value\n    - b: second integer value\n    - c: integer denominator\n\n    Outputs\n    ----\n    - (a + b) % N: integer result of the addition followed by a modulo. If the denominator is 0,\n        the result will be 0\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    8\n\n    Source: [evm.codes/#08](https://www.evm.codes/#08)\n    \"\"\"\n\n    MULMOD = Opcode(0x09, popped_stack_items=3, pushed_stack_items=1)\n    \"\"\"\n    MULMOD(a, b, N) = d\n    ----\n\n    Description\n    ----\n    Modulo multiplication operation\n\n    Inputs\n    ----\n    - a: first integer value to multiply\n    - b: second integer value to multiply\n    - N: integer denominator\n\n    Outputs\n    ----\n    - (a * b) % N: integer result of the multiplication followed by a modulo. If the denominator\n        is 0, the result will be 0\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    8\n\n    Source: [evm.codes/#09](https://www.evm.codes/#09)\n    \"\"\"\n\n    EXP = Opcode(0x0A, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    EXP(a, exponent) = a ** exponent\n    ----\n\n    Description\n    ----\n    Exponential operation\n\n    Inputs\n    ----\n    - a: integer base\n    - exponent: integer exponent\n\n    Outputs\n    ----\n    - a ** exponent: integer result of the exponential operation modulo 2**256\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 10\n    - dynamic_gas = 50 * exponent_byte_size\n\n    Source: [evm.codes/#0A](https://www.evm.codes/#0A)\n    \"\"\"\n\n    SIGNEXTEND = Opcode(0x0B, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SIGNEXTEND(b, x) = y\n    ----\n\n    Description\n    ----\n    Sign extension operation\n\n    Inputs\n    ----\n    - b: size in byte - 1 of the integer to sign extend\n    - x: integer value to sign extend\n\n    Outputs\n    ----\n    - y: integer result of the sign extend\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#0B](https://www.evm.codes/#0B)\n    \"\"\"\n\n    LT = Opcode(0x10, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    LT(a, b) = a &lt; b\n    ----\n\n    Description\n    ----\n    Less-than comparison\n\n    Inputs\n    ----\n    - a: left side integer value\n    - b: right side integer value\n\n    Outputs\n    ----\n    - a &lt; b: 1 if the left side is smaller, 0 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#10](https://www.evm.codes/#10)\n    \"\"\"\n\n    GT = Opcode(0x11, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    GT(a, b) = a &gt; b\n    ----\n\n    Description\n    ----\n    Greater-than comparison\n\n    Inputs\n    ----\n    - a: left side integer\n    - b: right side integer\n\n    Outputs\n    ----\n    - a &gt; b: 1 if the left side is bigger, 0 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#11](https://www.evm.codes/#11)\n    \"\"\"\n\n    SLT = Opcode(0x12, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SLT(a, b) = a &lt; b\n    ----\n\n    Description\n    ----\n    Signed less-than comparison\n\n    Inputs\n    ----\n    - a: left side signed integer\n    - b: right side signed integer\n\n    Outputs\n    ----\n    - a &lt; b: 1 if the left side is smaller, 0 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#12](https://www.evm.codes/#12)\n    \"\"\"\n\n    SGT = Opcode(0x13, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SGT(a, b) = a &gt; b\n    ----\n\n    Description\n    ----\n    Signed greater-than comparison\n\n    Inputs\n    ----\n    - a: left side signed integer\n    - b: right side signed integer\n\n    Outputs\n    ----\n    - a &gt; b: 1 if the left side is bigger, 0 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#13](https://www.evm.codes/#13)\n    \"\"\"\n\n    EQ = Opcode(0x14, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    EQ(a, b) = a == b\n    ----\n\n    Description\n    ----\n    Equality comparison\n\n    Inputs\n    ----\n    - a: left side integer\n    - b: right side integer\n\n    Outputs\n    ----\n    - a == b: 1 if the left side is equal to the right side, 0 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#14](https://www.evm.codes/#14)\n    \"\"\"\n\n    ISZERO = Opcode(0x15, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    ISZERO(a) = a == 0\n    ----\n\n    Description\n    ----\n    Is-zero comparison\n\n    Inputs\n    ----\n    - a: integer\n\n    Outputs\n    ----\n    - a == 0: 1 if a is 0, 0 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#15](https://www.evm.codes/#15)\n    \"\"\"\n\n    AND = Opcode(0x16, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    AND(a, b) = a &amp; b\n    ----\n\n    Description\n    ----\n    Bitwise AND operation\n\n    Inputs\n    ----\n    - a: first binary value\n    - b: second binary value\n\n    Outputs\n    ----\n    - a &amp; b: the bitwise AND result\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#16](https://www.evm.codes/#16)\n    \"\"\"\n\n    OR = Opcode(0x17, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    OR(a, b) = a | b\n    ----\n\n    Description\n    ----\n    Bitwise OR operation\n\n    Inputs\n    ----\n    - a: first binary value\n    - b: second binary value\n\n    Outputs\n    ----\n    - a | b: the bitwise OR result\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#17](https://www.evm.codes/#17)\n    \"\"\"\n\n    XOR = Opcode(0x18, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    XOR(a, b) = a ^ b\n    ----\n\n    Description\n    ----\n    Bitwise XOR operation\n\n    Inputs\n    ----\n    - a: first binary value\n    - b: second binary value\n\n    Outputs\n    ----\n    - a ^ b: the bitwise XOR result\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#18](https://www.evm.codes/#18)\n    \"\"\"\n\n    NOT = Opcode(0x19, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    NOT(a) = ~a\n    ----\n\n    Description\n    ----\n    Bitwise NOT operation\n\n    Inputs\n    ----\n    - a: binary value\n\n    Outputs\n    ----\n    - ~a: the bitwise NOT result\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#19](https://www.evm.codes/#19)\n    \"\"\"\n\n    BYTE = Opcode(0x1A, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    BYTE(i, x) = y\n    ----\n\n    Description\n    ----\n    Extract a byte from the given position in the value\n\n    Inputs\n    ----\n    - i: byte offset starting from the most significant byte\n    - x: 32-byte value\n\n    Outputs\n    ----\n    - y: the indicated byte at the least significant position. If the byte offset is out of range,\n        the result is 0\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#1A](https://www.evm.codes/#1A)\n    \"\"\"\n\n    SHL = Opcode(0x1B, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SHL(shift, value) = value &lt;&lt; shift\n    ----\n\n    Description\n    ----\n    Shift left operation\n\n    Inputs\n    ----\n    - shift: number of bits to shift to the left\n    - value: 32 bytes to shift\n\n    Outputs\n    ----\n    - value &lt;&lt; shift: the shifted value. If shift is bigger than 255, returns 0\n\n    Fork\n    ----\n    Constantinople\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#1B](https://www.evm.codes/#1B)\n    \"\"\"\n\n    SHR = Opcode(0x1C, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SHR(shift, value) = value &gt;&gt; shift\n    ----\n\n    Description\n    ----\n    Logical shift right operation\n\n    Inputs\n    ----\n    - shift: number of bits to shift to the right.\n    - value: 32 bytes to shift\n\n    Outputs\n    ----\n    - value &gt;&gt; shift: the shifted value. If shift is bigger than 255, returns 0\n\n    Fork\n    ----\n    Constantinople\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#1C](https://www.evm.codes/#1C)\n    \"\"\"\n\n    SAR = Opcode(0x1D, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SAR(shift, value) = value &gt;&gt; shift\n    ----\n\n    Description\n    ----\n    Arithmetic shift right operation\n\n    Inputs\n    ----\n    - shift: number of bits to shift to the right\n    - value: integer to shift\n\n    Outputs\n    ----\n    - value &gt;&gt; shift: the shifted value\n\n    Fork\n    ----\n    Constantinople\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#1D](https://www.evm.codes/#1D)\n    \"\"\"\n\n    SHA3 = Opcode(0x20, popped_stack_items=2, pushed_stack_items=1)\n    \"\"\"\n    SHA3(start, length) = hash\n    ----\n\n    Description\n    ----\n    Compute Keccak-256 hash\n\n    Inputs\n    ----\n    - offset: byte offset in the memory\n    - size: byte size to read in the memory\n\n    Outputs\n    ----\n    - hash: Keccak-256 hash of the given data in memory\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - minimum_word_size = (size + 31) / 32\n    - static_gas = 30\n    - dynamic_gas = 6 * minimum_word_size + memory_expansion_cost\n\n    Source: [evm.codes/#20](https://www.evm.codes/#20)\n    \"\"\"\n\n    ADDRESS = Opcode(0x30, pushed_stack_items=1)\n    \"\"\"\n    ADDRESS() = address\n    ----\n\n    Description\n    ----\n    Get address of currently executing account\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - address: the 20-byte address of the current account\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#30](https://www.evm.codes/#30)\n    \"\"\"\n\n    BALANCE = Opcode(0x31, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    BALANCE(address) = balance\n    ----\n\n    Description\n    ----\n    Get the balance of the specified account\n\n    Inputs\n    ----\n    - address: 20-byte address of the account to check\n\n    Outputs\n    ----\n    - balance: balance of the given account in wei. Returns 0 if the account doesn't exist\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = 100 if warm_address, 2600 if cold_address\n\n    Source: [evm.codes/#31](https://www.evm.codes/#31)\n    \"\"\"\n\n    ORIGIN = Opcode(0x32, pushed_stack_items=1)\n    \"\"\"\n    ORIGIN() = address\n    ----\n\n    Description\n    ----\n    Get execution origination address\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - address: the 20-byte address of the sender of the transaction. It can only be an account\n        without code\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#32](https://www.evm.codes/#32)\n    \"\"\"\n\n    CALLER = Opcode(0x33, pushed_stack_items=1)\n    \"\"\"\n    CALLER() = address\n    ----\n\n    Description\n    ----\n    Get caller address\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - address: the 20-byte address of the caller account. This is the account that did the last\n        call (except delegate call)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#33](https://www.evm.codes/#33)\n    \"\"\"\n\n    CALLVALUE = Opcode(0x34, pushed_stack_items=1)\n    \"\"\"\n    CALLVALUE() = value\n    ----\n\n    Description\n    ----\n    Get deposited value by the instruction/transaction responsible for this execution\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: the value of the current call in wei\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#34](https://www.evm.codes/#34)\n    \"\"\"\n\n    CALLDATALOAD = Opcode(0x35, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    CALLDATALOAD(i) = data[i]\n    ----\n\n    Description\n    ----\n    Get input data of current environment\n\n    Inputs\n    ----\n    - i: byte offset in the calldata\n\n    Outputs\n    ----\n    - data[i]: 32-byte value starting from the given offset of the calldata. All bytes after the\n        end of the calldata are set to 0\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#35](https://www.evm.codes/#35)\n    \"\"\"\n\n    CALLDATASIZE = Opcode(0x36, pushed_stack_items=1)\n    \"\"\"\n    CALLDATASIZE() = size\n    ----\n\n    Description\n    ----\n    Get size of input data in current environment\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - size: byte size of the calldata\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#36](https://www.evm.codes/#36)\n    \"\"\"\n\n    CALLDATACOPY = Opcode(0x37, popped_stack_items=3)\n    \"\"\"\n    CALLDATACOPY(destOffset, offset, size)\n    ----\n\n    Description\n    ----\n    Copy input data in current environment to memory\n\n    Inputs\n    ----\n    - destOffset: byte offset in the memory where the result will be copied\n    - offset: byte offset in the calldata to copy\n    - size: byte size to copy\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - minimum_word_size = (size + 31) / 32\n    - static_gas = 3\n    - dynamic_gas = 3 * minimum_word_size + memory_expansion_cost\n\n    Source: [evm.codes/#37](https://www.evm.codes/#37)\n    \"\"\"\n\n    CODESIZE = Opcode(0x38, pushed_stack_items=1)\n    \"\"\"\n    CODESIZE() = size\n    ----\n\n    Description\n    ----\n    Get size of code running in current environment\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - size: byte size of the code\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#38](https://www.evm.codes/#38)\n    \"\"\"\n\n    CODECOPY = Opcode(0x39, popped_stack_items=3)\n    \"\"\"\n    CODECOPY(destOffset, offset, size)\n    ----\n\n    Description\n    ----\n    Copy code running in current environment to memory\n\n    Inputs\n    ----\n    - destOffset: byte offset in the memory where the result will be copied.\n    - offset: byte offset in the code to copy.\n    - size: byte size to copy\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - minimum_word_size = (size + 31) / 32\n    - static_gas = 3\n    - dynamic_gas = 3 * minimum_word_size + memory_expansion_cost\n\n    Source: [evm.codes/#39](https://www.evm.codes/#39)\n    \"\"\"\n\n    GASPRICE = Opcode(0x3A, pushed_stack_items=1)\n    \"\"\"\n    GASPRICE() = price\n    ----\n\n    Description\n    ----\n    Get price of gas in current environment\n\n    Outputs\n    ----\n    - price: gas price in wei per gas\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#3A](https://www.evm.codes/#3A)\n    \"\"\"\n\n    EXTCODESIZE = Opcode(0x3B, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    EXTCODESIZE(account) = size\n    ----\n\n    Description\n    ----\n    Get size of an account's code\n\n    Inputs\n    ----\n    - address: 20-byte address of the contract to query\n\n    Outputs\n    ----\n    - size: byte size of the code\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = 100 if warm_address, 2600 if cold_address\n\n    Source: [evm.codes/#3B](https://www.evm.codes/#3B)\n    \"\"\"\n\n    EXTCODECOPY = Opcode(0x3C, popped_stack_items=4)\n    \"\"\"\n    EXTCODECOPY(addr, destOffset, offset, size)\n    ----\n\n    Description\n    ----\n    Copy an account's code to memory\n\n    Inputs\n    ----\n    - address: 20-byte address of the contract to query\n    - destOffset: byte offset in the memory where the result will be copied\n    - offset: byte offset in the code to copy\n    - size: byte size to copy\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - minimum_word_size = (size + 31) / 32\n    - static_gas = 0\n    - dynamic_gas = 3 * minimum_word_size + memory_expansion_cost + address_access_cost\n\n    Source: [evm.codes/#3C](https://www.evm.codes/#3C)\n    \"\"\"\n\n    RETURNDATASIZE = Opcode(0x3D, pushed_stack_items=1)\n    \"\"\"\n    RETURNDATASIZE() = size\n    ----\n\n    Description\n    ----\n    Get size of output data from the previous call from the current environment\n\n    Outputs\n    ----\n    - size: byte size of the return data from the last executed sub context\n\n    Fork\n    ----\n    Byzantium\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#3D](https://www.evm.codes/#3D)\n    \"\"\"\n\n    RETURNDATACOPY = Opcode(0x3E, popped_stack_items=3)\n    \"\"\"\n    RETURNDATACOPY(destOffset, offset, size)\n    ----\n\n    Description\n    ----\n    Copy output data from the previous call to memory\n\n    Inputs\n    ----\n    - destOffset: byte offset in the memory where the result will be copied\n    - offset: byte offset in the return data from the last executed sub context to copy\n    - size: byte size to copy\n\n    Fork\n    ----\n    Byzantium\n\n    Gas\n    ----\n    - minimum_word_size = (size + 31) / 32\n    - static_gas = 3\n    - dynamic_gas = 3 * minimum_word_size + memory_expansion_cost\n\n    Source: [evm.codes/#3E](https://www.evm.codes/#3E)\n    \"\"\"\n\n    EXTCODEHASH = Opcode(0x3F, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    EXTCODEHASH(address) = hash\n    ----\n\n    Description\n    ----\n    Get hash of an account's code\n\n    Inputs\n    ----\n    - address: 20-byte address of the account\n\n    Outputs\n    ----\n    - hash: hash of the chosen account's code, the empty hash (0xc5d24601...) if the account has no\n        code, or 0 if the account does not exist or has been destroyed\n\n    Fork\n    ----\n    Constantinople\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = 100 if warm_address, 2600 if cold_address\n\n    Source: [evm.codes/#3F](https://www.evm.codes/#3F)\n    \"\"\"\n\n    BLOCKHASH = Opcode(0x40, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    BLOCKHASH(block_number) = hash\n    ----\n\n    Description\n    ----\n    Get the hash of one of the 256 most recent complete blocks\n\n    Inputs\n    ----\n    - blockNumber: block number to get the hash from. Valid range is the last 256 blocks (not\n        including the current one). Current block number can be queried with NUMBER\n\n    Outputs\n    ----\n    - hash: hash of the chosen block, or 0 if the block number is not in the valid range\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    20\n\n    Source: [evm.codes/#40](https://www.evm.codes/#40)\n    \"\"\"\n\n    COINBASE = Opcode(0x41, pushed_stack_items=1)\n    \"\"\"\n    COINBASE() = address\n    ----\n\n    Description\n    ----\n    Get the block's beneficiary address\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - address: miner's 20-byte address\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#41](https://www.evm.codes/#41)\n    \"\"\"\n\n    TIMESTAMP = Opcode(0x42, pushed_stack_items=1)\n    \"\"\"\n    TIMESTAMP() = timestamp\n    ----\n\n    Description\n    ----\n    Get the block's timestamp\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - timestamp: unix timestamp of the current block\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#42](https://www.evm.codes/#42)\n    \"\"\"\n\n    NUMBER = Opcode(0x43, pushed_stack_items=1)\n    \"\"\"\n    NUMBER() = blockNumber\n    ----\n\n    Description\n    ----\n    Get the block's number\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - blockNumber: current block number\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#43](https://www.evm.codes/#43)\n    \"\"\"\n\n    PREVRANDAO = Opcode(0x44, pushed_stack_items=1)\n    \"\"\"\n    PREVRANDAO() = prevRandao\n    ----\n\n    Description\n    ----\n    Get the previous block's RANDAO mix\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - prevRandao: previous block's RANDAO mix\n\n    Fork\n    ----\n    Merge\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#44](https://www.evm.codes/#44)\n    \"\"\"\n\n    GASLIMIT = Opcode(0x45, pushed_stack_items=1)\n    \"\"\"\n    GASLIMIT() = gasLimit\n    ----\n\n    Description\n    ----\n    Get the block's gas limit\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - gasLimit: gas limit\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#45](https://www.evm.codes/#45)\n    \"\"\"\n\n    CHAINID = Opcode(0x46, pushed_stack_items=1)\n    \"\"\"\n    CHAINID() = chainId\n    ----\n\n    Description\n    ----\n    Get the chain ID\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - chainId: chain id of the network\n\n    Fork\n    ----\n    Istanbul\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#46](https://www.evm.codes/#46)\n    \"\"\"\n\n    SELFBALANCE = Opcode(0x47, pushed_stack_items=1)\n    \"\"\"\n    SELFBALANCE() = balance\n    ----\n\n    Description\n    ----\n    Get balance of currently executing account\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - balance: balance of the current account in wei\n\n    Fork\n    ----\n    Istanbul\n\n    Gas\n    ----\n    5\n\n    Source: [evm.codes/#47](https://www.evm.codes/#47)\n    \"\"\"\n\n    BASEFEE = Opcode(0x48, pushed_stack_items=1)\n    \"\"\"\n    BASEFEE() = baseFee\n    ----\n\n    Description\n    ----\n    Get the base fee\n\n    Outputs\n    ----\n    - baseFee: base fee in wei\n\n    Fork\n    ----\n    London\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#48](https://www.evm.codes/#48)\n    \"\"\"\n\n    BLOBHASH = Opcode(0x49, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    BLOBHASH(index) = versionedHash\n    ----\n\n    Description\n    ----\n    Returns the versioned hash of a single blob contained in the type-3 transaction\n\n    Inputs\n    ----\n    - index: index of the blob\n\n    Outputs\n    ----\n    - versionedHash: versioned hash of the blob\n\n    Fork\n    ----\n    Cancun\n\n    Gas\n    ----\n    3\n\n    Source: [eips.ethereum.org/EIPS/eip-4844](https://eips.ethereum.org/EIPS/eip-4844)\n    \"\"\"\n\n    BLOBBASEFEE = Opcode(0x4A, popped_stack_items=0, pushed_stack_items=1)\n    \"\"\"\n    BLOBBASEFEE() = fee\n    ----\n\n    Description\n    ----\n    Returns the value of the blob base fee of the block it is executing in\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - baseFeePerBlobGas: base fee for the blob gas in wei\n\n    Fork\n    ----\n    Cancun\n\n    Gas\n    ----\n    2\n\n    Source: [eips.ethereum.org/EIPS/eip-7516](https://eips.ethereum.org/EIPS/eip-7516)\n    \"\"\"\n\n    POP = Opcode(0x50, popped_stack_items=1)\n    \"\"\"\n    POP()\n    ----\n\n    Description\n    ----\n    Remove item from stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#50](https://www.evm.codes/#50)\n    \"\"\"\n\n    MLOAD = Opcode(0x51, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    MLOAD(offset) = value\n    ----\n\n    Description\n    ----\n    Load word from memory\n\n    Inputs\n    ----\n    - offset: offset in the memory in bytes\n\n    Outputs\n    ----\n    - value: the 32 bytes in memory starting at that offset. If it goes beyond its current size\n        (see MSIZE), writes 0s\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 3\n    - dynamic_gas = memory_expansion_cost\n\n    Source: [evm.codes/#51](https://www.evm.codes/#51)\n    \"\"\"\n\n    MSTORE = Opcode(0x52, popped_stack_items=2)\n    \"\"\"\n    MSTORE(offset, value)\n    ----\n\n    Description\n    ----\n    Save word to memory\n\n    Inputs\n    ----\n    - offset: offset in the memory in bytes\n    - value: 32-byte value to write in the memory\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 3\n    - dynamic_gas = memory_expansion_cost\n\n    Source: [evm.codes/#52](https://www.evm.codes/#52)\n    \"\"\"\n\n    MSTORE8 = Opcode(0x53, popped_stack_items=2)\n    \"\"\"\n    MSTORE8(offset, value)\n    ----\n\n    Description\n    ----\n    Save byte to memory\n\n    Inputs\n    ----\n    - offset: offset in the memory in bytes\n    - value: 1-byte value to write in the memory (the least significant byte of the 32-byte stack\n        value)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 3\n    - dynamic_gas = memory_expansion_cost\n\n    Source: [evm.codes/#53](https://www.evm.codes/#53)\n    \"\"\"\n\n    SLOAD = Opcode(0x54, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    SLOAD(key) = value\n    ----\n\n    Description\n    ----\n    Load word from storage\n\n    Inputs\n    ----\n    - key: 32-byte key in storage\n\n    Outputs\n    ----\n    - value: 32-byte value corresponding to that key. 0 if that key was never written before\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = 100 if warm_address, 2600 if cold_address\n\n    Source: [evm.codes/#54](https://www.evm.codes/#54)\n    \"\"\"\n\n    SSTORE = Opcode(0x55, popped_stack_items=2)\n    \"\"\"\n    SSTORE(key, value)\n    ----\n\n    Description\n    ----\n    Save word to storage\n\n    Inputs\n    ----\n    - key: 32-byte key in storage\n    - value: 32-byte value to store\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    ```\n    static_gas = 0\n\n    if value == current_value\n        if key is warm\n            base_dynamic_gas = 100\n        else\n            base_dynamic_gas = 100\n    else if current_value == original_value\n        if original_value == 0\n            base_dynamic_gas = 20000\n        else\n            base_dynamic_gas = 2900\n    else\n        base_dynamic_gas = 100\n\n    if key is cold:\n        base_dynamic_gas += 2100\n    ```\n\n    Source: [evm.codes/#55](https://www.evm.codes/#55)\n    \"\"\"\n\n    JUMP = Opcode(0x56, popped_stack_items=1)\n    \"\"\"\n    JUMP(counter)\n    ----\n\n    Description\n    ----\n    Alter the program counter\n\n    Inputs\n    ----\n    - counter: byte offset in the deployed code where execution will continue from. Must be a\n        JUMPDEST instruction\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    8\n\n    Source: [evm.codes/#56](https://www.evm.codes/#56)\n    \"\"\"\n\n    JUMPI = Opcode(0x57, popped_stack_items=2)\n    \"\"\"\n    JUMPI(counter, b)\n    ----\n\n    Description\n    ----\n    Conditionally alter the program counter\n\n    Inputs\n    ----\n    - counter: byte offset in the deployed code where execution will continue from. Must be a\n        JUMPDEST instruction\n    - b: the program counter will be altered with the new value only if this value is different\n        from 0. Otherwise, the program counter is simply incremented and the next instruction will\n        be executed\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    10\n\n    Source: [evm.codes/#57](https://www.evm.codes/#57)\n    \"\"\"\n\n    PC = Opcode(0x58, pushed_stack_items=1)\n    \"\"\"\n    PC() = counter\n    ----\n\n    Description\n    ----\n    Get the value of the program counter prior to the increment corresponding to this instruction\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - counter: PC of this instruction in the current program.\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#58](https://www.evm.codes/#58)\n    \"\"\"\n\n    MSIZE = Opcode(0x59, pushed_stack_items=1)\n    \"\"\"\n    MSIZE() = size\n    ----\n\n    Description\n    ----\n    Get the size of active memory in bytes\n\n    Outputs\n    ----\n    - size: current memory size in bytes (higher offset accessed until now + 1)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#59](https://www.evm.codes/#59)\n    \"\"\"\n\n    GAS = Opcode(0x5A, pushed_stack_items=1)\n    \"\"\"\n    GAS() = gas_remaining\n    ----\n\n    Description\n    ----\n    Get the amount of available gas, including the corresponding reduction for the cost of this\n    instruction\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - gas: remaining gas (after this instruction)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#5A](https://www.evm.codes/#5A)\n    \"\"\"\n\n    JUMPDEST = Opcode(0x5B)\n    \"\"\"\n    JUMPDEST()\n    ----\n\n    Description\n    ----\n    Mark a valid destination for jumps\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    1\n\n    Source: [evm.codes/#5B](https://www.evm.codes/#5B)\n    \"\"\"\n\n    NOOP = Opcode(0x5B)\n    \"\"\"\n    NOOP()\n    ----\n\n    Description\n    ----\n    Synonym for JUMPDEST. Performs no operation.\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    1\n\n    Source: [evm.codes/#5B](https://www.evm.codes/#5B)\n    \"\"\"\n\n    TLOAD = Opcode(0x5C, popped_stack_items=1, pushed_stack_items=1)\n    \"\"\"\n    TLOAD(key) = value\n    ----\n\n    Description\n    ----\n    Load word from transient storage\n\n    Inputs\n    ----\n    - key: 32-byte key in transient storage\n\n    Outputs\n    ----\n    - value: 32-byte value corresponding to that key. 0 if that key was never written\n\n    Fork\n    ----\n    Cancun\n\n    Gas\n    ----\n    100\n\n    Source: [eips.ethereum.org/EIPS/eip-1153](https://eips.ethereum.org/EIPS/eip-1153)\n    \"\"\"\n\n    TSTORE = Opcode(0x5D, popped_stack_items=2)\n    \"\"\"\n    TSTORE(key, value)\n    ----\n\n    Description\n    ----\n    Save word to transient storage\n\n    Inputs\n    ----\n    - key: 32-byte key in transient storage\n    - value: 32-byte value to store\n\n    Fork\n    ----\n    Cancun\n\n    Gas\n    ----\n    100\n\n    Source: [eips.ethereum.org/EIPS/eip-1153](https://eips.ethereum.org/EIPS/eip-1153)\n    \"\"\"\n\n    MCOPY = Opcode(0x5E, popped_stack_items=3)\n    \"\"\"\n    MCOPY(dst, src, length)\n    ----\n\n    Description\n    ----\n    Copies areas in memory\n\n    Inputs\n    ----\n    - dst: byte offset in the memory where the result will be copied\n    - src: byte offset in the calldata to copy\n    - length: byte size to copy\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Cancun\n\n    Gas\n    ----\n    - minimum_word_size = (length + 31) / 32\n    - static_gas = 3\n    - dynamic_gas = 3 * minimum_word_size + memory_expansion_cost\n\n    Source: [eips.ethereum.org/EIPS/eip-5656](https://eips.ethereum.org/EIPS/eip-5656)\n    \"\"\"\n\n    PUSH0 = Opcode(0x5F, pushed_stack_items=1)\n    \"\"\"\n    PUSH0() = value\n    ----\n\n    Description\n    ----\n    Place value 0 on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, equal to 0\n\n    Fork\n    ----\n    Shanghai\n\n    Gas\n    ----\n    2\n\n    Source: [evm.codes/#5F](https://www.evm.codes/#5F)\n    \"\"\"\n\n    PUSH1 = Opcode(0x60, pushed_stack_items=1, data_portion_length=1)\n    \"\"\"\n    PUSH1() = value\n    ----\n\n    Description\n    ----\n    Place 1 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#60](https://www.evm.codes/#60)\n    \"\"\"\n\n    PUSH2 = Opcode(0x61, pushed_stack_items=1, data_portion_length=2)\n    \"\"\"\n    PUSH2() = value\n    ----\n\n    Description\n    ----\n    Place 2 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#61](https://www.evm.codes/#61)\n    \"\"\"\n\n    PUSH3 = Opcode(0x62, pushed_stack_items=1, data_portion_length=3)\n    \"\"\"\n    PUSH3() = value\n    ----\n\n    Description\n    ----\n    Place 3 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#62](https://www.evm.codes/#62)\n    \"\"\"\n\n    PUSH4 = Opcode(0x63, pushed_stack_items=1, data_portion_length=4)\n    \"\"\"\n    PUSH4() = value\n    ----\n\n    Description\n    ----\n    Place 4 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#63](https://www.evm.codes/#63)\n    \"\"\"\n\n    PUSH5 = Opcode(0x64, pushed_stack_items=1, data_portion_length=5)\n    \"\"\"\n    PUSH5() = value\n    ----\n\n    Description\n    ----\n    Place 5 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#64](https://www.evm.codes/#64)\n    \"\"\"\n\n    PUSH6 = Opcode(0x65, pushed_stack_items=1, data_portion_length=6)\n    \"\"\"\n    PUSH6() = value\n    ----\n\n    Description\n    ----\n    Place 6 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#65](https://www.evm.codes/#65)\n    \"\"\"\n\n    PUSH7 = Opcode(0x66, pushed_stack_items=1, data_portion_length=7)\n    \"\"\"\n    PUSH7() = value\n    ----\n\n    Description\n    ----\n    Place 7 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#66](https://www.evm.codes/#66)\n    \"\"\"\n\n    PUSH8 = Opcode(0x67, pushed_stack_items=1, data_portion_length=8)\n    \"\"\"\n    PUSH8() = value\n    ----\n\n    Description\n    ----\n    Place 8 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#67](https://www.evm.codes/#67)\n    \"\"\"\n\n    PUSH9 = Opcode(0x68, pushed_stack_items=1, data_portion_length=9)\n    \"\"\"\n    PUSH9() = value\n    ----\n\n    Description\n    ----\n    Place 9 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#68](https://www.evm.codes/#68)\n    \"\"\"\n\n    PUSH10 = Opcode(0x69, pushed_stack_items=1, data_portion_length=10)\n    \"\"\"\n    PUSH10() = value\n    ----\n\n    Description\n    ----\n    Place 10 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#69](https://www.evm.codes/#69)\n    \"\"\"\n\n    PUSH11 = Opcode(0x6A, pushed_stack_items=1, data_portion_length=11)\n    \"\"\"\n    PUSH11() = value\n    ----\n\n    Description\n    ----\n    Place 11 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#6A](https://www.evm.codes/#6A)\n    \"\"\"\n\n    PUSH12 = Opcode(0x6B, pushed_stack_items=1, data_portion_length=12)\n    \"\"\"\n    PUSH12() = value\n    ----\n\n    Description\n    ----\n    Place 12 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#6B](https://www.evm.codes/#6B)\n    \"\"\"\n\n    PUSH13 = Opcode(0x6C, pushed_stack_items=1, data_portion_length=13)\n    \"\"\"\n    PUSH13() = value\n    ----\n\n    Description\n    ----\n    Place 13 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#6C](https://www.evm.codes/#6C)\n    \"\"\"\n\n    PUSH14 = Opcode(0x6D, pushed_stack_items=1, data_portion_length=14)\n    \"\"\"\n    PUSH14() = value\n    ----\n\n    Description\n    ----\n    Place 14 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#6D](https://www.evm.codes/#6D)\n    \"\"\"\n\n    PUSH15 = Opcode(0x6E, pushed_stack_items=1, data_portion_length=15)\n    \"\"\"\n    PUSH15() = value\n    ----\n\n    Description\n    ----\n    Place 15 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#6E](https://www.evm.codes/#6E)\n    \"\"\"\n\n    PUSH16 = Opcode(0x6F, pushed_stack_items=1, data_portion_length=16)\n    \"\"\"\n    PUSH16() = value\n    ----\n\n    Description\n    ----\n    Place 16 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#6F](https://www.evm.codes/#6F)\n    \"\"\"\n\n    PUSH17 = Opcode(0x70, pushed_stack_items=1, data_portion_length=17)\n    \"\"\"\n    PUSH17() = value\n    ----\n\n    Description\n    ----\n    Place 17 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#70](https://www.evm.codes/#70)\n    \"\"\"\n\n    PUSH18 = Opcode(0x71, pushed_stack_items=1, data_portion_length=18)\n    \"\"\"\n    PUSH18() = value\n    ----\n\n    Description\n    ----\n    Place 18 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#71](https://www.evm.codes/#71)\n    \"\"\"\n\n    PUSH19 = Opcode(0x72, pushed_stack_items=1, data_portion_length=19)\n    \"\"\"\n    PUSH19() = value\n    ----\n\n    Description\n    ----\n    Place 19 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#72](https://www.evm.codes/#72)\n    \"\"\"\n\n    PUSH20 = Opcode(0x73, pushed_stack_items=1, data_portion_length=20)\n    \"\"\"\n    PUSH20() = value\n    ----\n\n    Description\n    ----\n    Place 20 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#73](https://www.evm.codes/#73)\n    \"\"\"\n\n    PUSH21 = Opcode(0x74, pushed_stack_items=1, data_portion_length=21)\n    \"\"\"\n    PUSH21() = value\n    ----\n\n    Description\n    ----\n    Place 21 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#74](https://www.evm.codes/#74)\n    \"\"\"\n\n    PUSH22 = Opcode(0x75, pushed_stack_items=1, data_portion_length=22)\n    \"\"\"\n    PUSH22() = value\n    ----\n\n    Description\n    ----\n    Place 22 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#75](https://www.evm.codes/#75)\n    \"\"\"\n\n    PUSH23 = Opcode(0x76, pushed_stack_items=1, data_portion_length=23)\n    \"\"\"\n    PUSH23() = value\n    ----\n\n    Description\n    ----\n    Place 23 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#76](https://www.evm.codes/#76)\n    \"\"\"\n\n    PUSH24 = Opcode(0x77, pushed_stack_items=1, data_portion_length=24)\n    \"\"\"\n    PUSH24() = value\n    ----\n\n    Description\n    ----\n    Place 24 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#77](https://www.evm.codes/#77)\n    \"\"\"\n\n    PUSH25 = Opcode(0x78, pushed_stack_items=1, data_portion_length=25)\n    \"\"\"\n    PUSH25() = value\n    ----\n\n    Description\n    ----\n    Place 25 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#78](https://www.evm.codes/#78)\n    \"\"\"\n\n    PUSH26 = Opcode(0x79, pushed_stack_items=1, data_portion_length=26)\n    \"\"\"\n    PUSH26() = value\n    ----\n\n    Description\n    ----\n    Place 26 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#79](https://www.evm.codes/#79)\n    \"\"\"\n\n    PUSH27 = Opcode(0x7A, pushed_stack_items=1, data_portion_length=27)\n    \"\"\"\n    PUSH27() = value\n    ----\n\n    Description\n    ----\n    Place 27 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#7A](https://www.evm.codes/#7A)\n    \"\"\"\n\n    PUSH28 = Opcode(0x7B, pushed_stack_items=1, data_portion_length=28)\n    \"\"\"\n    PUSH28() = value\n    ----\n\n    Description\n    ----\n    Place 28 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#7B](https://www.evm.codes/#7B)\n    \"\"\"\n\n    PUSH29 = Opcode(0x7C, pushed_stack_items=1, data_portion_length=29)\n    \"\"\"\n    PUSH29() = value\n    ----\n\n    Description\n    ----\n    Place 29 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#7C](https://www.evm.codes/#7C)\n    \"\"\"\n\n    PUSH30 = Opcode(0x7D, pushed_stack_items=1, data_portion_length=30)\n    \"\"\"\n    PUSH30() = value\n    ----\n\n    Description\n    ----\n    Place 30 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#7D](https://www.evm.codes/#7D)\n    \"\"\"\n\n    PUSH31 = Opcode(0x7E, pushed_stack_items=1, data_portion_length=31)\n    \"\"\"\n    PUSH31() = value\n    ----\n\n    Description\n    ----\n    Place 31 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#7E](https://www.evm.codes/#7E)\n    \"\"\"\n\n    PUSH32 = Opcode(0x7F, pushed_stack_items=1, data_portion_length=32)\n    \"\"\"\n    PUSH32() = value\n    ----\n\n    Description\n    ----\n    Place 32 byte item on stack\n\n    Inputs\n    ----\n    - None\n\n    Outputs\n    ----\n    - value: pushed value, aligned to the right (put in the lowest significant bytes)\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#7F](https://www.evm.codes/#7F)\n    \"\"\"\n\n    DUP1 = Opcode(0x80, pushed_stack_items=1, min_stack_height=1)\n    \"\"\"\n    DUP1(value) = value, value\n    ----\n\n    Description\n    ----\n    Duplicate 1st stack item\n\n    Inputs\n    ----\n    - value: value to duplicate\n\n    Outputs\n    ----\n    - value: duplicated value\n    - value: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#80](https://www.evm.codes/#80)\n    \"\"\"\n\n    DUP2 = Opcode(0x81, pushed_stack_items=1, min_stack_height=2)\n    \"\"\"\n    DUP2(v1, v2) = v2, v1, v2\n    ----\n\n    Description\n    ----\n    Duplicate 2nd stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: value to duplicate\n\n    Outputs\n    ----\n    - v2: duplicated value\n    - v1: ignored value\n    - v2: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#81](https://www.evm.codes/#81)\n    \"\"\"\n\n    DUP3 = Opcode(0x82, pushed_stack_items=1, min_stack_height=3)\n    \"\"\"\n    DUP3(v1, v2, v3) = v3, v1, v2, v3\n    ----\n\n    Description\n    ----\n    Duplicate 3rd stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - v3: value to duplicate\n\n    Outputs\n    ----\n    - v3: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - v3: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#82](https://www.evm.codes/#82)\n    \"\"\"\n\n    DUP4 = Opcode(0x83, pushed_stack_items=1, min_stack_height=4)\n    \"\"\"\n    DUP4(v1, v2, v3, v4) = v4, v1, v2, v3, v4\n    ----\n\n    Description\n    ----\n    Duplicate 4th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - v3: ignored value\n    - v4: value to duplicate\n\n    Outputs\n    ----\n    - v4: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - v3: ignored value\n    - v4: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#83](https://www.evm.codes/#83)\n    \"\"\"\n\n    DUP5 = Opcode(0x84, pushed_stack_items=1, min_stack_height=5)\n    \"\"\"\n    DUP5(v1, v2, v3, v4, v5) = v5, v1, v2, v3, v4, v5\n    ----\n\n    Description\n    ----\n    Duplicate 5th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - v3: ignored value\n    - v4: ignored value\n    - v5: value to duplicate\n\n    Outputs\n    ----\n    - v5: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - v3: ignored value\n    - v4: ignored value\n    - v5: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#84](https://www.evm.codes/#84)\n    \"\"\"\n\n    DUP6 = Opcode(0x85, pushed_stack_items=1, min_stack_height=6)\n    \"\"\"\n    DUP6(v1, v2, ..., v5, v6) = v6, v1, v2, ..., v5, v6\n    ----\n\n    Description\n    ----\n    Duplicate 6th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v5: ignored value\n    - v6: value to duplicate\n\n    Outputs\n    ----\n    - v6: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v5: ignored value\n    - v6: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#85](https://www.evm.codes/#85)\n    \"\"\"\n\n    DUP7 = Opcode(0x86, pushed_stack_items=1, min_stack_height=7)\n    \"\"\"\n    DUP7(v1, v2, ..., v6, v7) = v7, v1, v2, ..., v6, v7\n    ----\n\n    Description\n    ----\n    Duplicate 7th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v6: ignored value\n    - v7: value to duplicate\n\n    Outputs\n    ----\n    - v7: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v6: ignored value\n    - v7: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#86](https://www.evm.codes/#86)\n    \"\"\"\n\n    DUP8 = Opcode(0x87, pushed_stack_items=1, min_stack_height=8)\n    \"\"\"\n    DUP8(v1, v2, ..., v7, v8) = v8, v1, v2, ..., v7, v8\n    ----\n\n    Description\n    ----\n    Duplicate 8th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v7: ignored value\n    - v8: value to duplicate\n\n    Outputs\n    ----\n    - v8: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v7: ignored value\n    - v8: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#87](https://www.evm.codes/#87)\n    \"\"\"\n\n    DUP9 = Opcode(0x88, pushed_stack_items=1, min_stack_height=9)\n    \"\"\"\n    DUP9(v1, v2, ..., v8, v9) = v9, v1, v2, ..., v8, v9\n    ----\n\n    Description\n    ----\n    Duplicate 9th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v8: ignored value\n    - v9: value to duplicate\n\n    Outputs\n    ----\n    - v9: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v8: ignored value\n    - v9: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#88](https://www.evm.codes/#88)\n    \"\"\"\n    DUP10 = Opcode(0x89, pushed_stack_items=1, min_stack_height=10)\n    \"\"\"\n    DUP10(v1, v2, ..., v9, v10) = v10, v1, v2, ..., v9, v10\n    ----\n\n    Description\n    ----\n    Duplicate 10th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v9: ignored value\n    - v10: value to duplicate\n\n    Outputs\n    ----\n    - v10: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v9: ignored value\n    - v10: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#89](https://www.evm.codes/#89)\n    \"\"\"\n\n    DUP11 = Opcode(0x8A, pushed_stack_items=1, min_stack_height=11)\n    \"\"\"\n    DUP11(v1, v2, ..., v10, v11) = v11, v1, v2, ..., v10, v11\n    ----\n\n    Description\n    ----\n    Duplicate 11th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v10: ignored value\n    - v11: value to duplicate\n\n    Outputs\n    ----\n    - v11: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v10: ignored value\n    - v11: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#8A](https://www.evm.codes/#8A)\n    \"\"\"\n\n    DUP12 = Opcode(0x8B, pushed_stack_items=1, min_stack_height=12)\n    \"\"\"\n    DUP12(v1, v2, ..., v11, v12) = v12, v1, v2, ..., v11, v12\n    ----\n\n    Description\n    ----\n    Duplicate 12th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v11: ignored value\n    - v12: value to duplicate\n\n    Outputs\n    ----\n    - v12: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v11: ignored value\n    - v12: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#8B](https://www.evm.codes/#8B)\n    \"\"\"\n\n    DUP13 = Opcode(0x8C, pushed_stack_items=1, min_stack_height=13)\n    \"\"\"\n    DUP13(v1, v2, ..., v12, v13) = v13, v1, v2, ..., v12, v13\n    ----\n\n    Description\n    ----\n    Duplicate 13th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v12: ignored value\n    - v13: value to duplicate\n\n    Outputs\n    ----\n    - v13: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v12: ignored value\n    - v13: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#8C](https://www.evm.codes/#8C)\n    \"\"\"\n\n    DUP14 = Opcode(0x8D, pushed_stack_items=1, min_stack_height=14)\n    \"\"\"\n    DUP14(v1, v2, ..., v13, v14) = v14, v1, v2, ..., v13, v14\n    ----\n\n    Description\n    ----\n    Duplicate 14th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v13: ignored value\n    - v14: value to duplicate\n\n    Outputs\n    ----\n    - v14: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v13: ignored value\n    - v14: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#8D](https://www.evm.codes/#8D)\n    \"\"\"\n\n    DUP15 = Opcode(0x8E, pushed_stack_items=1, min_stack_height=15)\n    \"\"\"\n    DUP15(v1, v2, ..., v14, v15) = v15, v1, v2, ..., v14, v15\n    ----\n\n    Description\n    ----\n    Duplicate 15th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v14: ignored value\n    - v15: value to duplicate\n\n    Outputs\n    ----\n    - v15: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v14: ignored value\n    - v15: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#8E](https://www.evm.codes/#8E)\n    \"\"\"\n\n    DUP16 = Opcode(0x8F, pushed_stack_items=1, min_stack_height=16)\n    \"\"\"\n    DUP16(v1, v2, ..., v15, v16) = v16, v1, v2, ..., v15, v16\n    ----\n\n    Description\n    ----\n    Duplicate 16th stack item\n\n    Inputs\n    ----\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v15: ignored value\n    - v16: value to duplicate\n\n    Outputs\n    ----\n    - v16: duplicated value\n    - v1: ignored value\n    - v2: ignored value\n    - ...\n    - v15: ignored value\n    - v16: original value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#8F](https://www.evm.codes/#8F)\n    \"\"\"\n\n    SWAP1 = Opcode(0x90, min_stack_height=2)\n    \"\"\"\n    SWAP1(v1, v2) = v2, v1\n    ----\n\n    Description\n    ----\n    Exchange the top stack item with the second stack item.\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: value to swap\n\n    Outputs\n    ----\n    - v1: swapped value\n    - v2: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#90](https://www.evm.codes/#90)\n    \"\"\"\n\n    SWAP2 = Opcode(0x91, min_stack_height=3)\n    \"\"\"\n    SWAP2(v1, v2, v3) = v3, v2, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 3rd stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - v3: value to swap\n\n    Outputs\n    ----\n    - v3: swapped value\n    - v2: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#91](https://www.evm.codes/#91)\n    \"\"\"\n\n    SWAP3 = Opcode(0x92, min_stack_height=4)\n    \"\"\"\n    SWAP3(v1, v2, v3, v4) = v4, v2, v3, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 4th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - v3: ignored value\n    - v4: value to swap\n\n    Outputs\n    ----\n    - v4: swapped value\n    - v2: ignored value\n    - v3: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#92](https://www.evm.codes/#92)\n    \"\"\"\n\n    SWAP4 = Opcode(0x93, min_stack_height=5)\n    \"\"\"\n    SWAP4(v1, v2, ..., v4, v5) = v5, v2, ..., v4, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 5th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v4: ignored value\n    - v5: value to swap\n\n    Outputs\n    ----\n    - v5: swapped value\n    - v2: ignored value\n    - ...\n    - v4: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#93](https://www.evm.codes/#93)\n    \"\"\"\n\n    SWAP5 = Opcode(0x94, min_stack_height=6)\n    \"\"\"\n    SWAP5(v1, v2, ..., v5, v6) = v6, v2, ..., v5, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 6th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v5: ignored value\n    - v6: value to swap\n\n    Outputs\n    ----\n    - v6: swapped value\n    - v2: ignored value\n    - ...\n    - v5: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#94](https://www.evm.codes/#94)\n    \"\"\"\n\n    SWAP6 = Opcode(0x95, min_stack_height=7)\n    \"\"\"\n    SWAP6(v1, v2, ..., v6, v7) = v7, v2, ..., v6, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 7th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v6: ignored value\n    - v7: value to swap\n\n    Outputs\n    ----\n    - v7: swapped value\n    - v2: ignored value\n    - ...\n    - v6: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#95](https://www.evm.codes/#95)\n    \"\"\"\n\n    SWAP7 = Opcode(0x96, min_stack_height=8)\n    \"\"\"\n    SWAP7(v1, v2, ..., v7, v8) = v8, v2, ..., v7, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 8th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v7: ignored value\n    - v8: value to swap\n\n    Outputs\n    ----\n    - v8: swapped value\n    - v2: ignored value\n    - ...\n    - v7: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#96](https://www.evm.codes/#96)\n    \"\"\"\n\n    SWAP8 = Opcode(0x97, min_stack_height=9)\n    \"\"\"\n    SWAP8(v1, v2, ..., v8, v9) = v9, v2, ..., v8, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 9th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v8: ignored value\n    - v9: value to swap\n\n    Outputs\n    ----\n    - v9: swapped value\n    - v2: ignored value\n    - ...\n    - v8: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#97](https://www.evm.codes/#97)\n    \"\"\"\n\n    SWAP9 = Opcode(0x98, min_stack_height=10)\n    \"\"\"\n    SWAP9(v1, v2, ..., v9, v10) = v10, v2, ..., v9, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 10th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v9: ignored value\n    - v10: value to swap\n\n    Outputs\n    ----\n    - v10: swapped value\n    - v2: ignored value\n    - ...\n    - v9: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#98](https://www.evm.codes/#98)\n    \"\"\"\n\n    SWAP10 = Opcode(0x99, min_stack_height=11)\n    \"\"\"\n    SWAP10(v1, v2, ..., v10, v11) = v11, v2, ..., v10, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 11th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v10: ignored value\n    - v11: value to swap\n\n    Outputs\n    ----\n    - v11: swapped value\n    - v2: ignored value\n    - ...\n    - v10: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#99](https://www.evm.codes/#99)\n    \"\"\"\n\n    SWAP11 = Opcode(0x9A, min_stack_height=12)\n    \"\"\"\n    SWAP11(v1, v2, ..., v11, v12) = v12, v2, ..., v11, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 12th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v11: ignored value\n    - v12: value to swap\n\n    Outputs\n    ----\n    - v12: swapped value\n    - v2: ignored value\n    - ...\n    - v11: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#9A](https://www.evm.codes/#9A)\n    \"\"\"\n\n    SWAP12 = Opcode(0x9B, min_stack_height=13)\n    \"\"\"\n    SWAP12(v1, v2, ..., v12, v13) = v13, v2, ..., v12, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 13th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v12: ignored value\n    - v13: value to swap\n\n    Outputs\n    ----\n    - v13: swapped value\n    - v2: ignored value\n    - ...\n    - v12: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#9B](https://www.evm.codes/#9B)\n    \"\"\"\n\n    SWAP13 = Opcode(0x9C, min_stack_height=14)\n    \"\"\"\n    SWAP13(v1, v2, ..., v13, v14) = v14, v2, ..., v13, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 14th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v13: ignored value\n    - v14: value to swap\n\n    Outputs\n    ----\n    - v14: swapped value\n    - v2: ignored value\n    - ...\n    - v13: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#9C](https://www.evm.codes/#9C)\n    \"\"\"\n\n    SWAP14 = Opcode(0x9D, min_stack_height=15)\n    \"\"\"\n    SWAP14(v1, v2, ..., v14, v15) = v15, v2, ..., v14, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 15th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v14: ignored value\n    - v15: value to swap\n\n    Outputs\n    ----\n    - v15: swapped value\n    - v2: ignored value\n    - ...\n    - v14: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#9D](https://www.evm.codes/#9D)\n    \"\"\"\n\n    SWAP15 = Opcode(0x9E, min_stack_height=16)\n    \"\"\"\n    SWAP15(v1, v2, ..., v15, v16) = v16, v2, ..., v15, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 16th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v15: ignored value\n    - v16: value to swap\n\n    Outputs\n    ----\n    - v16: swapped value\n    - v2: ignored value\n    - ...\n    - v15: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#9E](https://www.evm.codes/#9E)\n    \"\"\"\n\n    SWAP16 = Opcode(0x9F, min_stack_height=17)\n    \"\"\"\n    SWAP16(v1, v2, ..., v16, v17) = v17, v2, ..., v16, v1\n    ----\n\n    Description\n    ----\n    Exchange 1st and 17th stack items\n\n    Inputs\n    ----\n    - v1: value to swap\n    - v2: ignored value\n    - ...\n    - v16: ignored value\n    - v17: value to swap\n\n    Outputs\n    ----\n    - v17: swapped value\n    - v2: ignored value\n    - ...\n    - v16: ignored value\n    - v1: swapped value\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    3\n\n    Source: [evm.codes/#9F](https://www.evm.codes/#9F)\n    \"\"\"\n\n    LOG0 = Opcode(0xA0, popped_stack_items=2)\n    \"\"\"\n    LOG0(offset, size)\n    ----\n\n    Description\n    ----\n    Append log record with no topics\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes\n    - size: byte size to copy\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 375\n    - dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost\n\n    Source: [evm.codes/#A0](https://www.evm.codes/#A0)\n    \"\"\"\n\n    LOG1 = Opcode(0xA1, popped_stack_items=3)\n    \"\"\"\n    LOG1(offset, size, topic1)\n    ----\n\n    Description\n    ----\n    Append log record with one topic\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes\n    - size: byte size to copy\n    - topic1: 32-byte value\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 375\n    - dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost\n\n    Source: [evm.codes/#A1](https://www.evm.codes/#A1)\n    \"\"\"\n\n    LOG2 = Opcode(0xA2, popped_stack_items=4)\n    \"\"\"\n    LOG2(offset, size, topic1, topic2)\n    ----\n\n    Description\n    ----\n    Append log record with two topics\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes\n    - size: byte size to copy\n    - topic1: 32-byte value\n    - topic2: 32-byte value\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 375\n    - dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost\n\n    Source: [evm.codes/#A2](https://www.evm.codes/#A2)\n    \"\"\"\n\n    LOG3 = Opcode(0xA3, popped_stack_items=5)\n    \"\"\"\n    LOG3(offset, size, topic1, topic2, topic3)\n    ----\n\n    Description\n    ----\n    Append log record with three topics\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes\n    - size: byte size to copy\n    - topic1: 32-byte value\n    - topic2: 32-byte value\n    - topic3: 32-byte value\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 375\n    - dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost\n\n    Source: [evm.codes/#A3](https://www.evm.codes/#A3)\n    \"\"\"\n\n    LOG4 = Opcode(0xA4, popped_stack_items=6)\n    \"\"\"\n    LOG4(offset, size, topic1, topic2, topic3, topic4)\n    ----\n\n    Description\n    ----\n    Append log record with four topics\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes\n    - size: byte size to copy\n    - topic1: 32-byte value\n    - topic2: 32-byte value\n    - topic3: 32-byte value\n    - topic4: 32-byte value\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 375\n    - dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost\n\n    Source: [evm.codes/#A4](https://www.evm.codes/#A4)\n    \"\"\"\n\n    RJUMP = Opcode(0xE0, data_portion_length=2)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    RJUMP()\n    ----\n\n    Description\n    ----\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n\n    Source: [eips.ethereum.org/EIPS/eip-4200](https://eips.ethereum.org/EIPS/eip-4200)\n    \"\"\"\n\n    DATALOAD = Opcode(0xD0, popped_stack_items=1)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    DATALOAD(offset)\n    ----\n\n    Description\n    ----\n    Reads 32 bytes of data at offset onto the stack\n\n    Inputs\n    ----\n    - offset: offset within the data section to start copying\n\n    Outputs\n    ----\n    none\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    4\n\n    Source: [eips.ethereum.org/EIPS/eip-7480](https://eips.ethereum.org/EIPS/eip-7480)\n    \"\"\"\n\n    DATALOADN = Opcode(0xD1, popped_stack_items=0, data_portion_length=2)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    DATALOADN()\n    ----\n\n    Description\n    ----\n    Reads 32 bytes of data at offset onto the stack\n\n    Immediates\n    ----\n    2 bytes forming a UInt16, which is the offset into the data section.\n\n    Inputs\n    ----\n    none\n\n    Outputs\n    ----\n    none\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    3\n\n    Source: [eips.ethereum.org/EIPS/eip-7480](https://eips.ethereum.org/EIPS/eip-7480)\n    \"\"\"\n\n    DATASIZE = Opcode(0xD2, pushed_stack_items=1)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    DATASIZE()\n    ----\n\n    Description\n    ----\n    Returns the size of the data section\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n    The size of the data section. If there is no data section, returns 0.\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    2\n\n    Source: [eips.ethereum.org/EIPS/eip-7480](https://eips.ethereum.org/EIPS/eip-7480)\n    \"\"\"\n\n    DATACOPY = Opcode(0xD3, popped_stack_items=3)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    DATACOPY(mem_offset, offset, size)\n    ----\n\n    Description\n    ----\n    Copies data from the data section into call frame memory\n\n    Inputs\n    ----\n    - mem_offset: The offset within the memory section to start copying to\n    - offset: The offset within the data section to start copying from\n    - size: The number of bytes to copy\n\n    Outputs\n    ----\n    none\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    - minimum_word_size = (size + 31) / 32\n    - static_gas = 3\n    - dynamic_gas = 3 * minimum_word_size + memory_expansion_cost\n\n    Source: [eips.ethereum.org/EIPS/eip-7480](https://eips.ethereum.org/EIPS/eip-7480)\n    \"\"\"\n\n    RJUMPI = Opcode(0xE1, popped_stack_items=1, data_portion_length=2)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    RJUMPI()\n    ----\n\n    Description\n    ----\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n\n    Source: [eips.ethereum.org/EIPS/eip-4200](https://eips.ethereum.org/EIPS/eip-4200)\n    \"\"\"\n\n    RJUMPV = Opcode(\n        0xE2,\n        popped_stack_items=1,\n        data_portion_formatter=_rjumpv_encoder,\n    )\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    RJUMPV()\n    ----\n\n    Description\n    ----\n    Relative jump with variable offset.\n\n    When calling this opcode to generate bytecode, the first argument is used to format the data\n    portion of the opcode, and it can be either of two types:\n    - A bytes type, and in this instance the bytes are used verbatim as the data portion.\n    - An integer iterable, list or tuple or any other iterable, where each element is a\n        jump offset.\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n\n    Source: [eips.ethereum.org/EIPS/eip-4200](https://eips.ethereum.org/EIPS/eip-4200)\n    \"\"\"\n\n    CALLF = Opcode(0xE3, data_portion_length=2, unchecked_stack=True)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    CALLF()\n    ----\n\n    Description\n    ----\n\n    - deduct 5 gas\n    - read uint16 operand idx\n    - if 1024 &lt; len(stack) + types[idx].max_stack_height - types[idx].inputs, execution results in\n        an exceptional halt\n    - if 1024 &lt;= len(return_stack), execution results in an exceptional halt\n    - push new element to return_stack (current_code_idx, pc+3)\n    - update current_code_idx to idx and set pc to 0\n\n    Inputs\n    ----\n    Any: The inputs are not checked because we cannot know how many inputs the callee\n    function/section requires\n\n    Outputs\n    ----\n    Any: The outputs are variable because we cannot know how many outputs the callee\n    function/section produces\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    5\n\n    Source:\n    [ipsilon/eof/blob/main/spec/eof.md](https://github.com/ipsilon/eof/blob/main/spec/eof.md)\n    \"\"\"\n\n    RETF = Opcode(0xE4)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    RETF()\n    ----\n\n    Description\n    ----\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    3\n    \"\"\"\n\n    JUMPF = Opcode(0xE5, data_portion_length=2)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    JUMPF()\n    ----\n\n    Description\n    ----\n\n    - deduct 5 gas\n    - read uint16 operand idx\n    - if 1024 &lt; len(stack) + types[idx].max_stack_height - types[idx].inputs, execution results in\n        an exceptional halt\n    - set current_code_idx to idx\n    - set pc = 0\n\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n    5\n\n    \"\"\"\n\n    DUPN = Opcode(0xE6, pushed_stack_items=1, data_portion_length=1)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    DUPN()\n    ----\n\n    Description\n    ----\n\n    - deduct 3 gas\n    - read uint8 operand imm\n    - n = imm + 1\n    - n\u2018th (1-based) stack item is duplicated at the top of the stack\n    - Stack validation: stack_height &gt;= n\n\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n\n    \"\"\"\n\n    SWAPN = Opcode(0xE7, data_portion_length=1)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    SWAPN()\n    ----\n\n    Description\n    ----\n\n    - deduct 3 gas\n    - read uint8 operand imm\n    - n = imm + 1\n    - n + 1th stack item is swapped with the top stack item (1-based).\n    - Stack validation: stack_height &gt;= n + 1\n\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n    EOF Fork\n\n    Gas\n    ----\n\n    \"\"\"\n\n    EXCHANGE = Opcode(0xE8, data_portion_formatter=_exchange_encoder)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    EXCHANGE[x, y]\n    ----\n\n    Description\n    ----\n    Exchanges two stack positions.  Two nybbles, n is high 4 bits + 1, then  m is 4 low bits + 1.\n    Exchanges tne n+1'th item with the n + m + 1 item.\n\n    Inputs x and y when the opcode is used as `EXCHANGE[x, y]`, are equal to:\n    - x = n + 1\n    - y = n + m + 1\n    Which each equals to 1-based stack positions swapped.\n\n    Inputs\n    ----\n    n + m + 1, or ((imm &gt;&gt; 4) + (imm &amp;0x0F) + 3) from the raw immediate,\n\n    Outputs\n    ----\n    n + m + 1, or ((imm &gt;&gt; 4) + (imm &amp;0x0F) + 3) from the raw immediate,\n\n    Fork\n    ----\n    EOF_FORK\n\n    Gas\n    ----\n    3\n\n    \"\"\"\n\n    EOFCREATE = Opcode(0xEC, popped_stack_items=4, pushed_stack_items=1, data_portion_length=1)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    EOFCREATE[initcontainer_index](value, salt, input_offset, input_size)\n    ----\n\n    Description\n    ----\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n\n    Gas\n    ----\n\n    \"\"\"\n\n    RETURNCONTRACT = Opcode(\n        0xEE, popped_stack_items=2, pushed_stack_items=1, data_portion_length=1\n    )\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    RETURNCONTRACT()\n    ----\n\n    Description\n    ----\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n\n    Gas\n    ----\n\n    \"\"\"\n\n    CREATE = Opcode(0xF0, popped_stack_items=3, pushed_stack_items=1)\n    \"\"\"\n    CREATE(value, offset, length) = address\n    ----\n\n    Description\n    ----\n    Create a new contract with the given code\n\n    Inputs\n    ----\n    - value: value in wei to send to the new account\n    - offset: byte offset in the memory in bytes, the initialization code for the new account\n    - size: byte size to copy (size of the initialization code)\n\n    Outputs\n    ----\n    - address: the address of the deployed contract, 0 if the deployment failed\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    ```\n    minimum_word_size = (size + 31) / 32\n    init_code_cost = 2 * minimum_word_size\n    code_deposit_cost = 200 * deployed_code_size\n\n    static_gas = 32000\n    dynamic_gas = init_code_cost + memory_expansion_cost + deployment_code_execution_cost\n        + code_deposit_cost\n    ```\n\n    Source: [evm.codes/#F0](https://www.evm.codes/#F0)\n    \"\"\"\n\n    CALL = Opcode(0xF1, popped_stack_items=7, pushed_stack_items=1)\n    \"\"\"\n    CALL(gas, address, value, argsOffset, argsSize, retOffset, retSize) = success\n    ----\n\n    Description\n    ----\n    Message-call into an account\n\n    Inputs\n    ----\n    - gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub\n        context is returned to this one\n    - address: the account which context to execute\n    - value: value in wei to send to the account\n    - argsOffset: byte offset in the memory in bytes, the calldata of the sub context\n    - argsSize: byte size to copy (size of the calldata)\n    - retOffset: byte offset in the memory in bytes, where to store the return data of the sub\n        context\n    - retSize: byte size to copy (size of the return data)\n\n    Outputs\n    ----\n    - success: return 0 if the sub context reverted, 1 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    ```\n    static_gas = 0\n    dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n        + positive_value_cost + value_to_empty_account_cost\n    ```\n\n    Source: [evm.codes/#F1](https://www.evm.codes/#F1)\n    \"\"\"\n\n    CALLCODE = Opcode(0xF2, popped_stack_items=7, pushed_stack_items=1)\n    \"\"\"\n    CALLCODE(gas, address, value, argsOffset, argsSize, retOffset, retSize) = success\n    ----\n\n    Description\n    ----\n    Message-call into this account with an alternative account's code. Executes code starting at\n    the address to which the call is made.\n\n    Inputs\n    ----\n    - gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub\n        context is returned to this one\n    - address: the account which code to execute\n    - value: value in wei to send to the account\n    - argsOffset: byte offset in the memory in bytes, the calldata of the sub context\n    - argsSize: byte size to copy (size of the calldata)\n    - retOffset: byte offset in the memory in bytes, where to store the return data of the sub\n        context\n    - retSize: byte size to copy (size of the return data)\n\n    Outputs\n    ----\n    - success: return 0 if the sub context reverted, 1 otherwise\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    ```\n    static_gas = 0\n    dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n        + positive_value_cost\n    ```\n\n    Source: [evm.codes/#F2](https://www.evm.codes/#F2)\n    \"\"\"\n\n    RETURN = Opcode(0xF3, popped_stack_items=2)\n    \"\"\"\n    RETURN(offset, size)\n    ----\n\n    Description\n    ----\n    Halt execution returning output data\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes, to copy what will be the return data of this\n        context\n    - size: byte size to copy (size of the return data)\n\n    Outputs\n    ----\n    - None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = memory_expansion_cost\n\n    Source: [evm.codes/#F3](https://www.evm.codes/#F3)\n    \"\"\"\n\n    DELEGATECALL = Opcode(0xF4, popped_stack_items=6, pushed_stack_items=1)\n    \"\"\"\n    DELEGATECALL(gas, address, argsOffset, argsSize, retOffset, retSize) = success\n    ----\n\n    Description\n    ----\n    Message-call into this account with an alternative account's code, but persisting the current\n    values for sender and value\n\n    Inputs\n    ----\n    - gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub\n        context is returned to this one\n    - address: the account which code to execute\n    - argsOffset: byte offset in the memory in bytes, the calldata of the sub context\n    - argsSize: byte size to copy (size of the calldata)\n    - retOffset: byte offset in the memory in bytes, where to store the return data of the sub\n        context\n    - retSize: byte size to copy (size of the return data)\n\n    Outputs\n    ----\n    - success: return 0 if the sub context reverted, 1 otherwise\n\n    Fork\n    ----\n    Byzantium\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n\n    Source: [evm.codes/#F4](https://www.evm.codes/#F4)\n    \"\"\"\n\n    CREATE2 = Opcode(0xF5, popped_stack_items=4, pushed_stack_items=1)\n    \"\"\"\n    CREATE2(value, offset, size, salt) = address\n    ----\n\n    Description\n    ----\n    Creates a new contract\n\n    Inputs\n    ----\n    - value: value in wei to send to the new account\n    - offset: byte offset in the memory in bytes, the initialization code of the new account\n    - size: byte size to copy (size of the initialization code)\n    - salt: 32-byte value used to create the new account at a deterministic address\n\n    Outputs\n    ----\n    - address: the address of the deployed contract, 0 if the deployment failed\n\n    Fork\n    ----\n    Constantinople\n\n    Gas\n    ----\n    ```\n    minimum_word_size = (size + 31) / 32\n    init_code_cost = 2 * minimum_word_size\n    hash_cost = 6 * minimum_word_size\n    code_deposit_cost = 200 * deployed_code_size\n\n    static_gas = 32000\n    dynamic_gas = init_code_cost + hash_cost + memory_expansion_cost\n        + deployment_code_execution_cost + code_deposit_cost\n    ```\n\n    Source: [evm.codes/#F5](https://www.evm.codes/#F5)\n    \"\"\"\n\n    EXTCALL = Opcode(0xF8, popped_stack_items=4, pushed_stack_items=1)\n    \"\"\"\n    EXTCALL(target_address, input_offset, input_size, value) = address\n    ----\n\n    Description\n    ----\n    Message-call into an account\n\n    Inputs\n    ----\n    - target_address: the account which context to execute\n    - input_offset: byte offset in the memory in bytes, the calldata of the sub context\n    - input_size: byte size to copy (size of the calldata)\n    - value: value in wei to send to the account\n\n    Outputs\n    ----\n    - success:\n        - `0` if the call was successful.\n        - `1` if the call has reverted (also can be pushed earlier in a light failure scenario).\n        - `2` if the call has failed.\n\n    Fork\n    ----\n    Prague\n\n    Gas\n    ----\n    ```\n    static_gas = 0\n    dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n        + positive_value_cost + value_to_empty_account_cost\n    ```\n\n    Source: [EIP-7069](https://eips.ethereum.org/EIPS/eip-7069)\n    \"\"\"\n\n    EXTDELEGATECALL = Opcode(0xF9, popped_stack_items=3, pushed_stack_items=1)\n    \"\"\"\n    EXTDELEGATECALL(target_address, input_offset, input_size) = address\n    ----\n\n    Description\n    ----\n    Message-call into this account with an alternative account's code, but persisting the current\n    values for sender and value\n\n    Inputs\n    ----\n    - target_address: the account which context to execute\n    - input_offset: byte offset in the memory in bytes, the calldata of the sub context\n    - input_size: byte size to copy (size of the calldata)\n\n    Outputs\n    ----\n    - success:\n        - `0` if the call was successful.\n        - `1` if the call has reverted (also can be pushed earlier in a light failure scenario).\n        - `2` if the call has failed.\n\n    Fork\n    ----\n    Prague\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n\n    Source: [EIP-7069](https://eips.ethereum.org/EIPS/eip-7069)\n    \"\"\"\n\n    STATICCALL = Opcode(0xFA, popped_stack_items=6, pushed_stack_items=1)\n    \"\"\"\n    STATICCALL(gas, address, argsOffset, argsSize, retOffset, retSize) = success\n    ----\n\n    Description\n    ----\n    Static message-call into an account\n\n    Inputs\n    ----\n    - gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub\n        context is returned to this one\n    - address: the account which context to execute\n    - argsOffset: byte offset in the memory in bytes, the calldata of the sub context\n    - argsSize: byte size to copy (size of the calldata)\n    - retOffset: byte offset in the memory in bytes, where to store the return data of the sub\n        context\n    - retSize: byte size to copy (size of the return data)\n\n    Outputs\n    ----\n    - success: return 0 if the sub context reverted, 1 otherwise\n\n    Fork\n    ----\n    Byzantium\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n\n    Source: [evm.codes/#FA](https://www.evm.codes/#FA)\n    \"\"\"\n\n    EXTSTATICCALL = Opcode(0xFB, popped_stack_items=4, pushed_stack_items=1)\n    \"\"\"\n    EXTSTATICCALL(target_address, input_offset, input_size) = address\n    ----\n\n    Description\n    ----\n    Static message-call into an account\n\n    Inputs\n    ----\n    - target_address: the account which context to execute\n    - input_offset: byte offset in the memory in bytes, the calldata of the sub context\n    - input_size: byte size to copy (size of the calldata)\n\n    Outputs\n    ----\n    - success:\n        - `0` if the call was successful.\n        - `1` if the call has reverted (also can be pushed earlier in a light failure scenario).\n        - `2` if the call has failed.\n\n    Fork\n    ----\n    Prague\n\n    Gas\n    ----\n    - static_gas = 0\n    - dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n\n    Source: [EIP-7069](https://eips.ethereum.org/EIPS/eip-7069)\n    \"\"\"\n\n    CREATE4 = Opcode(0xF7, popped_stack_items=5, pushed_stack_items=1)\n    \"\"\"\n    !!! Note: This opcode is under development\n\n    CREATE4()\n    ----\n\n    Description\n    ----\n\n    Inputs\n    ----\n\n    Outputs\n    ----\n\n    Fork\n    ----\n\n    Gas\n    ----\n\n    \"\"\"\n\n    REVERT = Opcode(0xFD, popped_stack_items=2)\n    \"\"\"\n    REVERT(offset, size)\n    ----\n\n    Description\n    ----\n    Halt execution reverting state changes but returning data and remaining gas\n\n    Inputs\n    ----\n    - offset: byte offset in the memory in bytes. The return data of the calling context\n    - size: byte size to copy (size of the return data)\n\n    Fork\n    ----\n    Byzantium\n\n    Gas\n    ----\n    static_gas = 0\n    dynamic_gas = memory_expansion_cost\n\n    Source: [evm.codes/#FD](https://www.evm.codes/#FD)\n    \"\"\"\n\n    INVALID = Opcode(0xFE)\n    \"\"\"\n    INVALID()\n    ----\n\n    Description\n    ----\n    Designated invalid instruction\n\n    Inputs\n    ----\n    None\n\n    Outputs\n    ----\n    None\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    All the remaining gas in this context is consumed\n\n    Source: [evm.codes/#FE](https://www.evm.codes/#FE)\n    \"\"\"\n\n    SELFDESTRUCT = Opcode(0xFF, popped_stack_items=1)\n    \"\"\"\n    SELFDESTRUCT(address)\n    ----\n\n    Description\n    ----\n    Halt execution and register the account for later deletion\n\n    Inputs\n    ----\n    - address: account to send the current balance to\n\n    Fork\n    ----\n    Frontier\n\n    Gas\n    ----\n    5000\n\n    Source: [evm.codes/#FF](https://www.evm.codes/#FF)\n    \"\"\"\n</code></pre>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP","title":"<code>STOP = Opcode(0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP--stop","title":"STOP()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP--description","title":"Description","text":"<p>Stop execution</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STOP--gas","title":"Gas","text":"<p>0</p> <p>Source: evm.codes/#00</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD","title":"<code>ADD = Opcode(1, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD--adda-b-c","title":"ADD(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD--description","title":"Description","text":"<p>Addition operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD--inputs","title":"Inputs","text":"<ul> <li>a: first integer value to add</li> <li>b: second integer value to add</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD--outputs","title":"Outputs","text":"<ul> <li>c: integer result of the addition modulo 2**256</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADD--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#01</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL","title":"<code>MUL = Opcode(2, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL--mula-b-c","title":"MUL(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL--description","title":"Description","text":"<p>Multiplication operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL--inputs","title":"Inputs","text":"<ul> <li>a: first integer value to multiply</li> <li>b: second integer value to multiply</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL--outputs","title":"Outputs","text":"<ul> <li>c: integer result of the multiplication modulo 2**256</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MUL--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#02</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB","title":"<code>SUB = Opcode(3, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB--suba-b-c","title":"SUB(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB--description","title":"Description","text":"<p>Subtraction operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB--inputs","title":"Inputs","text":"<ul> <li>a: first integer value</li> <li>b: second integer value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB--outputs","title":"Outputs","text":"<ul> <li>c: integer result of the subtraction modulo 2**256</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SUB--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#03</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV","title":"<code>DIV = Opcode(4, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV--diva-b-c","title":"DIV(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV--description","title":"Description","text":"<p>Division operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV--inputs","title":"Inputs","text":"<ul> <li>a: numerator</li> <li>b: denominator (must be non-zero)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV--outputs","title":"Outputs","text":"<ul> <li>c: integer result of the division</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DIV--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#04</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV","title":"<code>SDIV = Opcode(5, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV--sdiva-b-c","title":"SDIV(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV--description","title":"Description","text":"<p>Signed division operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV--inputs","title":"Inputs","text":"<ul> <li>a: signed numerator</li> <li>b: signed denominator</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV---c-signed-integer-result-of-the-division-if-the-denominator-is-0-the-result-will-be-0","title":"- c: signed integer result of the division. If the denominator is 0, the result will be 0","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SDIV--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#05</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD","title":"<code>MOD = Opcode(6, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD--moda-b-c","title":"MOD(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD--description","title":"Description","text":"<p>Modulo operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD--inputs","title":"Inputs","text":"<ul> <li>a: integer numerator</li> <li>b: integer denominator</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD--outputs","title":"Outputs","text":"<ul> <li>a % b: integer result of the integer modulo. If the denominator is 0, the result will be 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MOD--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#06</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD","title":"<code>SMOD = Opcode(7, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD--smoda-b-c","title":"SMOD(a, b) = c","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD--description","title":"Description","text":"<p>Signed modulo remainder operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD--inputs","title":"Inputs","text":"<ul> <li>a: integer numerator</li> <li>b: integer denominator</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD--outputs","title":"Outputs","text":"<ul> <li>a % b: integer result of the signed integer modulo. If the denominator is 0, the result will     be 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SMOD--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#07</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD","title":"<code>ADDMOD = Opcode(8, popped_stack_items=3, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD--addmoda-b-c-d","title":"ADDMOD(a, b, c) = d","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD--description","title":"Description","text":"<p>Modular addition operation with overflow check</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD--inputs","title":"Inputs","text":"<ul> <li>a: first integer value</li> <li>b: second integer value</li> <li>c: integer denominator</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD--outputs","title":"Outputs","text":"<ul> <li>(a + b) % N: integer result of the addition followed by a modulo. If the denominator is 0,     the result will be 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDMOD--gas","title":"Gas","text":"<p>8</p> <p>Source: evm.codes/#08</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD","title":"<code>MULMOD = Opcode(9, popped_stack_items=3, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD--mulmoda-b-n-d","title":"MULMOD(a, b, N) = d","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD--description","title":"Description","text":"<p>Modulo multiplication operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD--inputs","title":"Inputs","text":"<ul> <li>a: first integer value to multiply</li> <li>b: second integer value to multiply</li> <li>N: integer denominator</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD--outputs","title":"Outputs","text":"<ul> <li>(a * b) % N: integer result of the multiplication followed by a modulo. If the denominator     is 0, the result will be 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MULMOD--gas","title":"Gas","text":"<p>8</p> <p>Source: evm.codes/#09</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP","title":"<code>EXP = Opcode(10, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP--expa-exponent-a-exponent","title":"EXP(a, exponent) = a ** exponent","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP--description","title":"Description","text":"<p>Exponential operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP--inputs","title":"Inputs","text":"<ul> <li>a: integer base</li> <li>exponent: integer exponent</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP--outputs","title":"Outputs","text":"<ul> <li>a ** exponent: integer result of the exponential operation modulo 2**256</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXP--gas","title":"Gas","text":"<ul> <li>static_gas = 10</li> <li>dynamic_gas = 50 * exponent_byte_size</li> </ul> <p>Source: evm.codes/#0A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND","title":"<code>SIGNEXTEND = Opcode(11, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND--signextendb-x-y","title":"SIGNEXTEND(b, x) = y","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND--description","title":"Description","text":"<p>Sign extension operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND--inputs","title":"Inputs","text":"<ul> <li>b: size in byte - 1 of the integer to sign extend</li> <li>x: integer value to sign extend</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND--outputs","title":"Outputs","text":"<ul> <li>y: integer result of the sign extend</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SIGNEXTEND--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#0B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT","title":"<code>LT = Opcode(16, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT--lta-b-a-b","title":"LT(a, b) = a &lt; b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT--description","title":"Description","text":"<p>Less-than comparison</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT--inputs","title":"Inputs","text":"<ul> <li>a: left side integer value</li> <li>b: right side integer value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT--outputs","title":"Outputs","text":"<ul> <li>a &lt; b: 1 if the left side is smaller, 0 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LT--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#10</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT","title":"<code>GT = Opcode(17, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT--gta-b-a-b","title":"GT(a, b) = a &gt; b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT--description","title":"Description","text":"<p>Greater-than comparison</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT--inputs","title":"Inputs","text":"<ul> <li>a: left side integer</li> <li>b: right side integer</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT--outputs","title":"Outputs","text":"<ul> <li>a &gt; b: 1 if the left side is bigger, 0 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GT--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#11</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT","title":"<code>SLT = Opcode(18, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT--slta-b-a-b","title":"SLT(a, b) = a &lt; b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT--description","title":"Description","text":"<p>Signed less-than comparison</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT--inputs","title":"Inputs","text":"<ul> <li>a: left side signed integer</li> <li>b: right side signed integer</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT--outputs","title":"Outputs","text":"<ul> <li>a &lt; b: 1 if the left side is smaller, 0 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLT--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#12</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT","title":"<code>SGT = Opcode(19, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT--sgta-b-a-b","title":"SGT(a, b) = a &gt; b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT--description","title":"Description","text":"<p>Signed greater-than comparison</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT--inputs","title":"Inputs","text":"<ul> <li>a: left side signed integer</li> <li>b: right side signed integer</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT--outputs","title":"Outputs","text":"<ul> <li>a &gt; b: 1 if the left side is bigger, 0 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SGT--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#13</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ","title":"<code>EQ = Opcode(20, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ--eqa-b-a-b","title":"EQ(a, b) = a == b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ--description","title":"Description","text":"<p>Equality comparison</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ--inputs","title":"Inputs","text":"<ul> <li>a: left side integer</li> <li>b: right side integer</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ--outputs","title":"Outputs","text":"<ul> <li>a == b: 1 if the left side is equal to the right side, 0 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EQ--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#14</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO","title":"<code>ISZERO = Opcode(21, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO--iszeroa-a-0","title":"ISZERO(a) = a == 0","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO--description","title":"Description","text":"<p>Is-zero comparison</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO--inputs","title":"Inputs","text":"<ul> <li>a: integer</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO--outputs","title":"Outputs","text":"<ul> <li>a == 0: 1 if a is 0, 0 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ISZERO--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#15</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND","title":"<code>AND = Opcode(22, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND--anda-b-a-b","title":"AND(a, b) = a &amp; b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND--description","title":"Description","text":"<p>Bitwise AND operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND--inputs","title":"Inputs","text":"<ul> <li>a: first binary value</li> <li>b: second binary value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND--outputs","title":"Outputs","text":"<ul> <li>a &amp; b: the bitwise AND result</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.AND--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#16</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR","title":"<code>OR = Opcode(23, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR--ora-b-a-b","title":"OR(a, b) = a | b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR--description","title":"Description","text":"<p>Bitwise OR operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR--inputs","title":"Inputs","text":"<ul> <li>a: first binary value</li> <li>b: second binary value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR--outputs","title":"Outputs","text":"<ul> <li>a | b: the bitwise OR result</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.OR--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#17</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR","title":"<code>XOR = Opcode(24, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR--xora-b-a-b","title":"XOR(a, b) = a ^ b","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR--description","title":"Description","text":"<p>Bitwise XOR operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR--inputs","title":"Inputs","text":"<ul> <li>a: first binary value</li> <li>b: second binary value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR--outputs","title":"Outputs","text":"<ul> <li>a ^ b: the bitwise XOR result</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.XOR--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#18</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT","title":"<code>NOT = Opcode(25, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT--nota-a","title":"NOT(a) = ~a","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT--description","title":"Description","text":"<p>Bitwise NOT operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT--inputs","title":"Inputs","text":"<ul> <li>a: binary value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT--outputs","title":"Outputs","text":"<ul> <li>~a: the bitwise NOT result</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOT--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#19</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE","title":"<code>BYTE = Opcode(26, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE--bytei-x-y","title":"BYTE(i, x) = y","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE--description","title":"Description","text":"<p>Extract a byte from the given position in the value</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE--inputs","title":"Inputs","text":"<ul> <li>i: byte offset starting from the most significant byte</li> <li>x: 32-byte value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE--outputs","title":"Outputs","text":"<ul> <li>y: the indicated byte at the least significant position. If the byte offset is out of range,     the result is 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BYTE--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#1A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL","title":"<code>SHL = Opcode(27, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL--shlshift-value-value-shift","title":"SHL(shift, value) = value &lt;&lt; shift","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL--description","title":"Description","text":"<p>Shift left operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL--inputs","title":"Inputs","text":"<ul> <li>shift: number of bits to shift to the left</li> <li>value: 32 bytes to shift</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL--outputs","title":"Outputs","text":"<ul> <li>value &lt;&lt; shift: the shifted value. If shift is bigger than 255, returns 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL--fork","title":"Fork","text":"<p>Constantinople</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHL--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#1B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR","title":"<code>SHR = Opcode(28, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR--shrshift-value-value-shift","title":"SHR(shift, value) = value &gt;&gt; shift","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR--description","title":"Description","text":"<p>Logical shift right operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR--inputs","title":"Inputs","text":"<ul> <li>shift: number of bits to shift to the right.</li> <li>value: 32 bytes to shift</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR--outputs","title":"Outputs","text":"<ul> <li>value &gt;&gt; shift: the shifted value. If shift is bigger than 255, returns 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR--fork","title":"Fork","text":"<p>Constantinople</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHR--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#1C</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR","title":"<code>SAR = Opcode(29, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR--sarshift-value-value-shift","title":"SAR(shift, value) = value &gt;&gt; shift","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR--description","title":"Description","text":"<p>Arithmetic shift right operation</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR--inputs","title":"Inputs","text":"<ul> <li>shift: number of bits to shift to the right</li> <li>value: integer to shift</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR--outputs","title":"Outputs","text":"<ul> <li>value &gt;&gt; shift: the shifted value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR--fork","title":"Fork","text":"<p>Constantinople</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SAR--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#1D</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3","title":"<code>SHA3 = Opcode(32, popped_stack_items=2, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3--sha3start-length-hash","title":"SHA3(start, length) = hash","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3--description","title":"Description","text":"<p>Compute Keccak-256 hash</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory</li> <li>size: byte size to read in the memory</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3--outputs","title":"Outputs","text":"<ul> <li>hash: Keccak-256 hash of the given data in memory</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SHA3--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (size + 31) / 32</li> <li>static_gas = 30</li> <li>dynamic_gas = 6 * minimum_word_size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#20</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS","title":"<code>ADDRESS = Opcode(48, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS--address-address","title":"ADDRESS() = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS--description","title":"Description","text":"<p>Get address of currently executing account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS--outputs","title":"Outputs","text":"<ul> <li>address: the 20-byte address of the current account</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ADDRESS--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#30</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE","title":"<code>BALANCE = Opcode(49, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE--balanceaddress-balance","title":"BALANCE(address) = balance","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE--description","title":"Description","text":"<p>Get the balance of the specified account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE--inputs","title":"Inputs","text":"<ul> <li>address: 20-byte address of the account to check</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE--outputs","title":"Outputs","text":"<ul> <li>balance: balance of the given account in wei. Returns 0 if the account doesn't exist</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BALANCE--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = 100 if warm_address, 2600 if cold_address</li> </ul> <p>Source: evm.codes/#31</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN","title":"<code>ORIGIN = Opcode(50, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN--origin-address","title":"ORIGIN() = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN--description","title":"Description","text":"<p>Get execution origination address</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN--outputs","title":"Outputs","text":"<ul> <li>address: the 20-byte address of the sender of the transaction. It can only be an account     without code</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.ORIGIN--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#32</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER","title":"<code>CALLER = Opcode(51, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER--caller-address","title":"CALLER() = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER--description","title":"Description","text":"<p>Get caller address</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER--outputs","title":"Outputs","text":"<ul> <li>address: the 20-byte address of the caller account. This is the account that did the last     call (except delegate call)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLER--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#33</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE","title":"<code>CALLVALUE = Opcode(52, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE--callvalue-value","title":"CALLVALUE() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE--description","title":"Description","text":"<p>Get deposited value by the instruction/transaction responsible for this execution</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE--outputs","title":"Outputs","text":"<ul> <li>value: the value of the current call in wei</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLVALUE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#34</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD","title":"<code>CALLDATALOAD = Opcode(53, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD--calldataloadi-datai","title":"CALLDATALOAD(i) = data[i]","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD--description","title":"Description","text":"<p>Get input data of current environment</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD--inputs","title":"Inputs","text":"<ul> <li>i: byte offset in the calldata</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD--outputs","title":"Outputs","text":"<ul> <li>data[i]: 32-byte value starting from the given offset of the calldata. All bytes after the     end of the calldata are set to 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATALOAD--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#35</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE","title":"<code>CALLDATASIZE = Opcode(54, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE--calldatasize-size","title":"CALLDATASIZE() = size","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE--description","title":"Description","text":"<p>Get size of input data in current environment</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE--outputs","title":"Outputs","text":"<ul> <li>size: byte size of the calldata</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATASIZE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#36</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY","title":"<code>CALLDATACOPY = Opcode(55, popped_stack_items=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY--calldatacopydestoffset-offset-size","title":"CALLDATACOPY(destOffset, offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY--description","title":"Description","text":"<p>Copy input data in current environment to memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY--inputs","title":"Inputs","text":"<ul> <li>destOffset: byte offset in the memory where the result will be copied</li> <li>offset: byte offset in the calldata to copy</li> <li>size: byte size to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLDATACOPY--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (size + 31) / 32</li> <li>static_gas = 3</li> <li>dynamic_gas = 3 * minimum_word_size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#37</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE","title":"<code>CODESIZE = Opcode(56, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE--codesize-size","title":"CODESIZE() = size","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE--description","title":"Description","text":"<p>Get size of code running in current environment</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE--outputs","title":"Outputs","text":"<ul> <li>size: byte size of the code</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODESIZE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#38</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODECOPY","title":"<code>CODECOPY = Opcode(57, popped_stack_items=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODECOPY--codecopydestoffset-offset-size","title":"CODECOPY(destOffset, offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODECOPY--description","title":"Description","text":"<p>Copy code running in current environment to memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODECOPY--inputs","title":"Inputs","text":"<ul> <li>destOffset: byte offset in the memory where the result will be copied.</li> <li>offset: byte offset in the code to copy.</li> <li>size: byte size to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODECOPY--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CODECOPY--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (size + 31) / 32</li> <li>static_gas = 3</li> <li>dynamic_gas = 3 * minimum_word_size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#39</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASPRICE","title":"<code>GASPRICE = Opcode(58, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASPRICE--gasprice-price","title":"GASPRICE() = price","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASPRICE--description","title":"Description","text":"<p>Get price of gas in current environment</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASPRICE--outputs","title":"Outputs","text":"<ul> <li>price: gas price in wei per gas</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASPRICE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASPRICE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#3A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE","title":"<code>EXTCODESIZE = Opcode(59, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE--extcodesizeaccount-size","title":"EXTCODESIZE(account) = size","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE--description","title":"Description","text":"<p>Get size of an account's code</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE--inputs","title":"Inputs","text":"<ul> <li>address: 20-byte address of the contract to query</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE--outputs","title":"Outputs","text":"<ul> <li>size: byte size of the code</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODESIZE--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = 100 if warm_address, 2600 if cold_address</li> </ul> <p>Source: evm.codes/#3B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY","title":"<code>EXTCODECOPY = Opcode(60, popped_stack_items=4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY--extcodecopyaddr-destoffset-offset-size","title":"EXTCODECOPY(addr, destOffset, offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY--description","title":"Description","text":"<p>Copy an account's code to memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY--inputs","title":"Inputs","text":"<ul> <li>address: 20-byte address of the contract to query</li> <li>destOffset: byte offset in the memory where the result will be copied</li> <li>offset: byte offset in the code to copy</li> <li>size: byte size to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODECOPY--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (size + 31) / 32</li> <li>static_gas = 0</li> <li>dynamic_gas = 3 * minimum_word_size + memory_expansion_cost + address_access_cost</li> </ul> <p>Source: evm.codes/#3C</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATASIZE","title":"<code>RETURNDATASIZE = Opcode(61, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATASIZE--returndatasize-size","title":"RETURNDATASIZE() = size","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATASIZE--description","title":"Description","text":"<p>Get size of output data from the previous call from the current environment</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATASIZE--outputs","title":"Outputs","text":"<ul> <li>size: byte size of the return data from the last executed sub context</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATASIZE--fork","title":"Fork","text":"<p>Byzantium</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATASIZE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#3D</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATACOPY","title":"<code>RETURNDATACOPY = Opcode(62, popped_stack_items=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATACOPY--returndatacopydestoffset-offset-size","title":"RETURNDATACOPY(destOffset, offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATACOPY--description","title":"Description","text":"<p>Copy output data from the previous call to memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATACOPY--inputs","title":"Inputs","text":"<ul> <li>destOffset: byte offset in the memory where the result will be copied</li> <li>offset: byte offset in the return data from the last executed sub context to copy</li> <li>size: byte size to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATACOPY--fork","title":"Fork","text":"<p>Byzantium</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNDATACOPY--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (size + 31) / 32</li> <li>static_gas = 3</li> <li>dynamic_gas = 3 * minimum_word_size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#3E</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH","title":"<code>EXTCODEHASH = Opcode(63, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH--extcodehashaddress-hash","title":"EXTCODEHASH(address) = hash","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH--description","title":"Description","text":"<p>Get hash of an account's code</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH--inputs","title":"Inputs","text":"<ul> <li>address: 20-byte address of the account</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH--outputs","title":"Outputs","text":"<ul> <li>hash: hash of the chosen account's code, the empty hash (0xc5d24601...) if the account has no     code, or 0 if the account does not exist or has been destroyed</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH--fork","title":"Fork","text":"<p>Constantinople</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCODEHASH--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = 100 if warm_address, 2600 if cold_address</li> </ul> <p>Source: evm.codes/#3F</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH","title":"<code>BLOCKHASH = Opcode(64, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH--blockhashblock_number-hash","title":"BLOCKHASH(block_number) = hash","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH--description","title":"Description","text":"<p>Get the hash of one of the 256 most recent complete blocks</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH--inputs","title":"Inputs","text":"<ul> <li>blockNumber: block number to get the hash from. Valid range is the last 256 blocks (not     including the current one). Current block number can be queried with NUMBER</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH--outputs","title":"Outputs","text":"<ul> <li>hash: hash of the chosen block, or 0 if the block number is not in the valid range</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOCKHASH--gas","title":"Gas","text":"<p>20</p> <p>Source: evm.codes/#40</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE","title":"<code>COINBASE = Opcode(65, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE--coinbase-address","title":"COINBASE() = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE--description","title":"Description","text":"<p>Get the block's beneficiary address</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE--outputs","title":"Outputs","text":"<ul> <li>address: miner's 20-byte address</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.COINBASE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#41</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP","title":"<code>TIMESTAMP = Opcode(66, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP--timestamp-timestamp","title":"TIMESTAMP() = timestamp","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP--description","title":"Description","text":"<p>Get the block's timestamp</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP--outputs","title":"Outputs","text":"<ul> <li>timestamp: unix timestamp of the current block</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TIMESTAMP--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#42</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER","title":"<code>NUMBER = Opcode(67, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER--number-blocknumber","title":"NUMBER() = blockNumber","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER--description","title":"Description","text":"<p>Get the block's number</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER--outputs","title":"Outputs","text":"<ul> <li>blockNumber: current block number</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NUMBER--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#43</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO","title":"<code>PREVRANDAO = Opcode(68, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO--prevrandao-prevrandao","title":"PREVRANDAO() = prevRandao","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO--description","title":"Description","text":"<p>Get the previous block's RANDAO mix</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO--outputs","title":"Outputs","text":"<ul> <li>prevRandao: previous block's RANDAO mix</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO--fork","title":"Fork","text":"<p>Merge</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PREVRANDAO--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#44</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT","title":"<code>GASLIMIT = Opcode(69, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT--gaslimit-gaslimit","title":"GASLIMIT() = gasLimit","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT--description","title":"Description","text":"<p>Get the block's gas limit</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT--outputs","title":"Outputs","text":"<ul> <li>gasLimit: gas limit</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GASLIMIT--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#45</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID","title":"<code>CHAINID = Opcode(70, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID--chainid-chainid","title":"CHAINID() = chainId","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID--description","title":"Description","text":"<p>Get the chain ID</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID--outputs","title":"Outputs","text":"<ul> <li>chainId: chain id of the network</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID--fork","title":"Fork","text":"<p>Istanbul</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CHAINID--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#46</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE","title":"<code>SELFBALANCE = Opcode(71, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE--selfbalance-balance","title":"SELFBALANCE() = balance","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE--description","title":"Description","text":"<p>Get balance of currently executing account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE--outputs","title":"Outputs","text":"<ul> <li>balance: balance of the current account in wei</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE--fork","title":"Fork","text":"<p>Istanbul</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFBALANCE--gas","title":"Gas","text":"<p>5</p> <p>Source: evm.codes/#47</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BASEFEE","title":"<code>BASEFEE = Opcode(72, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BASEFEE--basefee-basefee","title":"BASEFEE() = baseFee","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BASEFEE--description","title":"Description","text":"<p>Get the base fee</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BASEFEE--outputs","title":"Outputs","text":"<ul> <li>baseFee: base fee in wei</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BASEFEE--fork","title":"Fork","text":"<p>London</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BASEFEE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#48</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH","title":"<code>BLOBHASH = Opcode(73, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH--blobhashindex-versionedhash","title":"BLOBHASH(index) = versionedHash","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH--description","title":"Description","text":"<p>Returns the versioned hash of a single blob contained in the type-3 transaction</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH--inputs","title":"Inputs","text":"<ul> <li>index: index of the blob</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH--outputs","title":"Outputs","text":"<ul> <li>versionedHash: versioned hash of the blob</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH--fork","title":"Fork","text":"<p>Cancun</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBHASH--gas","title":"Gas","text":"<p>3</p> <p>Source: eips.ethereum.org/EIPS/eip-4844</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE","title":"<code>BLOBBASEFEE = Opcode(74, popped_stack_items=0, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE--blobbasefee-fee","title":"BLOBBASEFEE() = fee","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE--description","title":"Description","text":"<p>Returns the value of the blob base fee of the block it is executing in</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE--outputs","title":"Outputs","text":"<ul> <li>baseFeePerBlobGas: base fee for the blob gas in wei</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE--fork","title":"Fork","text":"<p>Cancun</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.BLOBBASEFEE--gas","title":"Gas","text":"<p>2</p> <p>Source: eips.ethereum.org/EIPS/eip-7516</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP","title":"<code>POP = Opcode(80, popped_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP--pop","title":"POP()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP--description","title":"Description","text":"<p>Remove item from stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.POP--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#50</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD","title":"<code>MLOAD = Opcode(81, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD--mloadoffset-value","title":"MLOAD(offset) = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD--description","title":"Description","text":"<p>Load word from memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD--inputs","title":"Inputs","text":"<ul> <li>offset: offset in the memory in bytes</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD--outputs","title":"Outputs","text":"<ul> <li>value: the 32 bytes in memory starting at that offset. If it goes beyond its current size     (see MSIZE), writes 0s</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MLOAD--gas","title":"Gas","text":"<ul> <li>static_gas = 3</li> <li>dynamic_gas = memory_expansion_cost</li> </ul> <p>Source: evm.codes/#51</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE","title":"<code>MSTORE = Opcode(82, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE--mstoreoffset-value","title":"MSTORE(offset, value)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE--description","title":"Description","text":"<p>Save word to memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE--inputs","title":"Inputs","text":"<ul> <li>offset: offset in the memory in bytes</li> <li>value: 32-byte value to write in the memory</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE--gas","title":"Gas","text":"<ul> <li>static_gas = 3</li> <li>dynamic_gas = memory_expansion_cost</li> </ul> <p>Source: evm.codes/#52</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE8","title":"<code>MSTORE8 = Opcode(83, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE8--mstore8offset-value","title":"MSTORE8(offset, value)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE8--description","title":"Description","text":"<p>Save byte to memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE8--inputs","title":"Inputs","text":"<ul> <li>offset: offset in the memory in bytes</li> <li>value: 1-byte value to write in the memory (the least significant byte of the 32-byte stack     value)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE8--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSTORE8--gas","title":"Gas","text":"<ul> <li>static_gas = 3</li> <li>dynamic_gas = memory_expansion_cost</li> </ul> <p>Source: evm.codes/#53</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD","title":"<code>SLOAD = Opcode(84, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD--sloadkey-value","title":"SLOAD(key) = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD--description","title":"Description","text":"<p>Load word from storage</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD--inputs","title":"Inputs","text":"<ul> <li>key: 32-byte key in storage</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD--outputs","title":"Outputs","text":"<ul> <li>value: 32-byte value corresponding to that key. 0 if that key was never written before</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SLOAD--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = 100 if warm_address, 2600 if cold_address</li> </ul> <p>Source: evm.codes/#54</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE","title":"<code>SSTORE = Opcode(85, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE--sstorekey-value","title":"SSTORE(key, value)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE--description","title":"Description","text":"<p>Save word to storage</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE--inputs","title":"Inputs","text":"<ul> <li>key: 32-byte key in storage</li> <li>value: 32-byte value to store</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SSTORE--gas","title":"Gas","text":"<pre><code>static_gas = 0\n\nif value == current_value\n    if key is warm\n        base_dynamic_gas = 100\n    else\n        base_dynamic_gas = 100\nelse if current_value == original_value\n    if original_value == 0\n        base_dynamic_gas = 20000\n    else\n        base_dynamic_gas = 2900\nelse\n    base_dynamic_gas = 100\n\nif key is cold:\n    base_dynamic_gas += 2100\n</code></pre> <p>Source: evm.codes/#55</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP","title":"<code>JUMP = Opcode(86, popped_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP--jumpcounter","title":"JUMP(counter)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP--description","title":"Description","text":"<p>Alter the program counter</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP--inputs","title":"Inputs","text":"<ul> <li>counter: byte offset in the deployed code where execution will continue from. Must be a     JUMPDEST instruction</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMP--gas","title":"Gas","text":"<p>8</p> <p>Source: evm.codes/#56</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPI","title":"<code>JUMPI = Opcode(87, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPI--jumpicounter-b","title":"JUMPI(counter, b)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPI--description","title":"Description","text":"<p>Conditionally alter the program counter</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPI--inputs","title":"Inputs","text":"<ul> <li>counter: byte offset in the deployed code where execution will continue from. Must be a     JUMPDEST instruction</li> <li>b: the program counter will be altered with the new value only if this value is different     from 0. Otherwise, the program counter is simply incremented and the next instruction will     be executed</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPI--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPI--gas","title":"Gas","text":"<p>10</p> <p>Source: evm.codes/#57</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC","title":"<code>PC = Opcode(88, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC--pc-counter","title":"PC() = counter","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC--description","title":"Description","text":"<p>Get the value of the program counter prior to the increment corresponding to this instruction</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC--outputs","title":"Outputs","text":"<ul> <li>counter: PC of this instruction in the current program.</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PC--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#58</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSIZE","title":"<code>MSIZE = Opcode(89, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSIZE--msize-size","title":"MSIZE() = size","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSIZE--description","title":"Description","text":"<p>Get the size of active memory in bytes</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSIZE--outputs","title":"Outputs","text":"<ul> <li>size: current memory size in bytes (higher offset accessed until now + 1)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSIZE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MSIZE--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#59</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS","title":"<code>GAS = Opcode(90, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS--gas-gas_remaining","title":"GAS() = gas_remaining","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS--description","title":"Description","text":"<p>Get the amount of available gas, including the corresponding reduction for the cost of this instruction</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS--outputs","title":"Outputs","text":"<ul> <li>gas: remaining gas (after this instruction)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.GAS--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#5A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST","title":"<code>JUMPDEST = Opcode(91)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST--jumpdest","title":"JUMPDEST()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST--description","title":"Description","text":"<p>Mark a valid destination for jumps</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPDEST--gas","title":"Gas","text":"<p>1</p> <p>Source: evm.codes/#5B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP","title":"<code>NOOP = Opcode(91)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP--noop","title":"NOOP()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP--description","title":"Description","text":"<p>Synonym for JUMPDEST. Performs no operation.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.NOOP--gas","title":"Gas","text":"<p>1</p> <p>Source: evm.codes/#5B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD","title":"<code>TLOAD = Opcode(92, popped_stack_items=1, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD--tloadkey-value","title":"TLOAD(key) = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD--description","title":"Description","text":"<p>Load word from transient storage</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD--inputs","title":"Inputs","text":"<ul> <li>key: 32-byte key in transient storage</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD--outputs","title":"Outputs","text":"<ul> <li>value: 32-byte value corresponding to that key. 0 if that key was never written</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD--fork","title":"Fork","text":"<p>Cancun</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TLOAD--gas","title":"Gas","text":"<p>100</p> <p>Source: eips.ethereum.org/EIPS/eip-1153</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TSTORE","title":"<code>TSTORE = Opcode(93, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TSTORE--tstorekey-value","title":"TSTORE(key, value)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TSTORE--description","title":"Description","text":"<p>Save word to transient storage</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TSTORE--inputs","title":"Inputs","text":"<ul> <li>key: 32-byte key in transient storage</li> <li>value: 32-byte value to store</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TSTORE--fork","title":"Fork","text":"<p>Cancun</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.TSTORE--gas","title":"Gas","text":"<p>100</p> <p>Source: eips.ethereum.org/EIPS/eip-1153</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY","title":"<code>MCOPY = Opcode(94, popped_stack_items=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY--mcopydst-src-length","title":"MCOPY(dst, src, length)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY--description","title":"Description","text":"<p>Copies areas in memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY--inputs","title":"Inputs","text":"<ul> <li>dst: byte offset in the memory where the result will be copied</li> <li>src: byte offset in the calldata to copy</li> <li>length: byte size to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY--fork","title":"Fork","text":"<p>Cancun</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.MCOPY--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (length + 31) / 32</li> <li>static_gas = 3</li> <li>dynamic_gas = 3 * minimum_word_size + memory_expansion_cost</li> </ul> <p>Source: eips.ethereum.org/EIPS/eip-5656</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0","title":"<code>PUSH0 = Opcode(95, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0--push0-value","title":"PUSH0() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0--description","title":"Description","text":"<p>Place value 0 on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, equal to 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0--fork","title":"Fork","text":"<p>Shanghai</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH0--gas","title":"Gas","text":"<p>2</p> <p>Source: evm.codes/#5F</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1","title":"<code>PUSH1 = Opcode(96, pushed_stack_items=1, data_portion_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1--push1-value","title":"PUSH1() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1--description","title":"Description","text":"<p>Place 1 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH1--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#60</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2","title":"<code>PUSH2 = Opcode(97, pushed_stack_items=1, data_portion_length=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2--push2-value","title":"PUSH2() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2--description","title":"Description","text":"<p>Place 2 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH2--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#61</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3","title":"<code>PUSH3 = Opcode(98, pushed_stack_items=1, data_portion_length=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3--push3-value","title":"PUSH3() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3--description","title":"Description","text":"<p>Place 3 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH3--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#62</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4","title":"<code>PUSH4 = Opcode(99, pushed_stack_items=1, data_portion_length=4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4--push4-value","title":"PUSH4() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4--description","title":"Description","text":"<p>Place 4 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH4--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#63</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5","title":"<code>PUSH5 = Opcode(100, pushed_stack_items=1, data_portion_length=5)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5--push5-value","title":"PUSH5() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5--description","title":"Description","text":"<p>Place 5 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH5--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#64</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6","title":"<code>PUSH6 = Opcode(101, pushed_stack_items=1, data_portion_length=6)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6--push6-value","title":"PUSH6() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6--description","title":"Description","text":"<p>Place 6 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH6--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#65</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7","title":"<code>PUSH7 = Opcode(102, pushed_stack_items=1, data_portion_length=7)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7--push7-value","title":"PUSH7() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7--description","title":"Description","text":"<p>Place 7 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH7--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#66</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8","title":"<code>PUSH8 = Opcode(103, pushed_stack_items=1, data_portion_length=8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8--push8-value","title":"PUSH8() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8--description","title":"Description","text":"<p>Place 8 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH8--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#67</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9","title":"<code>PUSH9 = Opcode(104, pushed_stack_items=1, data_portion_length=9)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9--push9-value","title":"PUSH9() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9--description","title":"Description","text":"<p>Place 9 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH9--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#68</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10","title":"<code>PUSH10 = Opcode(105, pushed_stack_items=1, data_portion_length=10)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10--push10-value","title":"PUSH10() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10--description","title":"Description","text":"<p>Place 10 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH10--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#69</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11","title":"<code>PUSH11 = Opcode(106, pushed_stack_items=1, data_portion_length=11)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11--push11-value","title":"PUSH11() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11--description","title":"Description","text":"<p>Place 11 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH11--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#6A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12","title":"<code>PUSH12 = Opcode(107, pushed_stack_items=1, data_portion_length=12)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12--push12-value","title":"PUSH12() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12--description","title":"Description","text":"<p>Place 12 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH12--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#6B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13","title":"<code>PUSH13 = Opcode(108, pushed_stack_items=1, data_portion_length=13)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13--push13-value","title":"PUSH13() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13--description","title":"Description","text":"<p>Place 13 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH13--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#6C</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14","title":"<code>PUSH14 = Opcode(109, pushed_stack_items=1, data_portion_length=14)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14--push14-value","title":"PUSH14() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14--description","title":"Description","text":"<p>Place 14 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH14--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#6D</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15","title":"<code>PUSH15 = Opcode(110, pushed_stack_items=1, data_portion_length=15)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15--push15-value","title":"PUSH15() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15--description","title":"Description","text":"<p>Place 15 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH15--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#6E</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16","title":"<code>PUSH16 = Opcode(111, pushed_stack_items=1, data_portion_length=16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16--push16-value","title":"PUSH16() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16--description","title":"Description","text":"<p>Place 16 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH16--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#6F</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17","title":"<code>PUSH17 = Opcode(112, pushed_stack_items=1, data_portion_length=17)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17--push17-value","title":"PUSH17() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17--description","title":"Description","text":"<p>Place 17 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH17--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#70</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18","title":"<code>PUSH18 = Opcode(113, pushed_stack_items=1, data_portion_length=18)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18--push18-value","title":"PUSH18() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18--description","title":"Description","text":"<p>Place 18 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH18--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#71</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19","title":"<code>PUSH19 = Opcode(114, pushed_stack_items=1, data_portion_length=19)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19--push19-value","title":"PUSH19() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19--description","title":"Description","text":"<p>Place 19 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH19--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#72</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20","title":"<code>PUSH20 = Opcode(115, pushed_stack_items=1, data_portion_length=20)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20--push20-value","title":"PUSH20() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20--description","title":"Description","text":"<p>Place 20 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH20--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#73</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21","title":"<code>PUSH21 = Opcode(116, pushed_stack_items=1, data_portion_length=21)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21--push21-value","title":"PUSH21() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21--description","title":"Description","text":"<p>Place 21 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH21--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#74</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22","title":"<code>PUSH22 = Opcode(117, pushed_stack_items=1, data_portion_length=22)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22--push22-value","title":"PUSH22() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22--description","title":"Description","text":"<p>Place 22 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH22--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#75</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23","title":"<code>PUSH23 = Opcode(118, pushed_stack_items=1, data_portion_length=23)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23--push23-value","title":"PUSH23() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23--description","title":"Description","text":"<p>Place 23 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH23--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#76</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24","title":"<code>PUSH24 = Opcode(119, pushed_stack_items=1, data_portion_length=24)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24--push24-value","title":"PUSH24() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24--description","title":"Description","text":"<p>Place 24 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH24--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#77</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25","title":"<code>PUSH25 = Opcode(120, pushed_stack_items=1, data_portion_length=25)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25--push25-value","title":"PUSH25() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25--description","title":"Description","text":"<p>Place 25 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH25--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#78</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26","title":"<code>PUSH26 = Opcode(121, pushed_stack_items=1, data_portion_length=26)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26--push26-value","title":"PUSH26() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26--description","title":"Description","text":"<p>Place 26 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH26--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#79</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27","title":"<code>PUSH27 = Opcode(122, pushed_stack_items=1, data_portion_length=27)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27--push27-value","title":"PUSH27() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27--description","title":"Description","text":"<p>Place 27 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH27--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#7A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28","title":"<code>PUSH28 = Opcode(123, pushed_stack_items=1, data_portion_length=28)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28--push28-value","title":"PUSH28() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28--description","title":"Description","text":"<p>Place 28 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH28--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#7B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29","title":"<code>PUSH29 = Opcode(124, pushed_stack_items=1, data_portion_length=29)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29--push29-value","title":"PUSH29() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29--description","title":"Description","text":"<p>Place 29 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH29--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#7C</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30","title":"<code>PUSH30 = Opcode(125, pushed_stack_items=1, data_portion_length=30)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30--push30-value","title":"PUSH30() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30--description","title":"Description","text":"<p>Place 30 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH30--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#7D</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31","title":"<code>PUSH31 = Opcode(126, pushed_stack_items=1, data_portion_length=31)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31--push31-value","title":"PUSH31() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31--description","title":"Description","text":"<p>Place 31 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH31--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#7E</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32","title":"<code>PUSH32 = Opcode(127, pushed_stack_items=1, data_portion_length=32)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32--push32-value","title":"PUSH32() = value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32--description","title":"Description","text":"<p>Place 32 byte item on stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32--inputs","title":"Inputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32--outputs","title":"Outputs","text":"<ul> <li>value: pushed value, aligned to the right (put in the lowest significant bytes)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.PUSH32--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#7F</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1","title":"<code>DUP1 = Opcode(128, pushed_stack_items=1, min_stack_height=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1--dup1value-value-value","title":"DUP1(value) = value, value","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1--description","title":"Description","text":"<p>Duplicate 1<sup>st</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1--inputs","title":"Inputs","text":"<ul> <li>value: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1--outputs","title":"Outputs","text":"<ul> <li>value: duplicated value</li> <li>value: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP1--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#80</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2","title":"<code>DUP2 = Opcode(129, pushed_stack_items=1, min_stack_height=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2--dup2v1-v2-v2-v1-v2","title":"DUP2(v1, v2) = v2, v1, v2","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2--description","title":"Description","text":"<p>Duplicate 2<sup>nd</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2--outputs","title":"Outputs","text":"<ul> <li>v2: duplicated value</li> <li>v1: ignored value</li> <li>v2: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP2--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#81</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3","title":"<code>DUP3 = Opcode(130, pushed_stack_items=1, min_stack_height=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3--dup3v1-v2-v3-v3-v1-v2-v3","title":"DUP3(v1, v2, v3) = v3, v1, v2, v3","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3--description","title":"Description","text":"<p>Duplicate 3<sup>rd</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>v3: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3--outputs","title":"Outputs","text":"<ul> <li>v3: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>v3: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP3--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#82</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4","title":"<code>DUP4 = Opcode(131, pushed_stack_items=1, min_stack_height=4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4--dup4v1-v2-v3-v4-v4-v1-v2-v3-v4","title":"DUP4(v1, v2, v3, v4) = v4, v1, v2, v3, v4","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4--description","title":"Description","text":"<p>Duplicate 4<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>v3: ignored value</li> <li>v4: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4--outputs","title":"Outputs","text":"<ul> <li>v4: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>v3: ignored value</li> <li>v4: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP4--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#83</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5","title":"<code>DUP5 = Opcode(132, pushed_stack_items=1, min_stack_height=5)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5--dup5v1-v2-v3-v4-v5-v5-v1-v2-v3-v4-v5","title":"DUP5(v1, v2, v3, v4, v5) = v5, v1, v2, v3, v4, v5","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5--description","title":"Description","text":"<p>Duplicate 5<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>v3: ignored value</li> <li>v4: ignored value</li> <li>v5: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5--outputs","title":"Outputs","text":"<ul> <li>v5: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>v3: ignored value</li> <li>v4: ignored value</li> <li>v5: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP5--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#84</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6","title":"<code>DUP6 = Opcode(133, pushed_stack_items=1, min_stack_height=6)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6--dup6v1-v2-v5-v6-v6-v1-v2-v5-v6","title":"DUP6(v1, v2, ..., v5, v6) = v6, v1, v2, ..., v5, v6","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6--description","title":"Description","text":"<p>Duplicate 6<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v5: ignored value</li> <li>v6: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6--outputs","title":"Outputs","text":"<ul> <li>v6: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v5: ignored value</li> <li>v6: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP6--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#85</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7","title":"<code>DUP7 = Opcode(134, pushed_stack_items=1, min_stack_height=7)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7--dup7v1-v2-v6-v7-v7-v1-v2-v6-v7","title":"DUP7(v1, v2, ..., v6, v7) = v7, v1, v2, ..., v6, v7","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7--description","title":"Description","text":"<p>Duplicate 7<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v6: ignored value</li> <li>v7: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7--outputs","title":"Outputs","text":"<ul> <li>v7: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v6: ignored value</li> <li>v7: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP7--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#86</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8","title":"<code>DUP8 = Opcode(135, pushed_stack_items=1, min_stack_height=8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8--dup8v1-v2-v7-v8-v8-v1-v2-v7-v8","title":"DUP8(v1, v2, ..., v7, v8) = v8, v1, v2, ..., v7, v8","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8--description","title":"Description","text":"<p>Duplicate 8<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v7: ignored value</li> <li>v8: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8--outputs","title":"Outputs","text":"<ul> <li>v8: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v7: ignored value</li> <li>v8: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP8--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#87</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9","title":"<code>DUP9 = Opcode(136, pushed_stack_items=1, min_stack_height=9)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9--dup9v1-v2-v8-v9-v9-v1-v2-v8-v9","title":"DUP9(v1, v2, ..., v8, v9) = v9, v1, v2, ..., v8, v9","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9--description","title":"Description","text":"<p>Duplicate 9<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v8: ignored value</li> <li>v9: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9--outputs","title":"Outputs","text":"<ul> <li>v9: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v8: ignored value</li> <li>v9: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP9--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#88</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10","title":"<code>DUP10 = Opcode(137, pushed_stack_items=1, min_stack_height=10)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10--dup10v1-v2-v9-v10-v10-v1-v2-v9-v10","title":"DUP10(v1, v2, ..., v9, v10) = v10, v1, v2, ..., v9, v10","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10--description","title":"Description","text":"<p>Duplicate 10<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v9: ignored value</li> <li>v10: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10--outputs","title":"Outputs","text":"<ul> <li>v10: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v9: ignored value</li> <li>v10: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP10--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#89</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11","title":"<code>DUP11 = Opcode(138, pushed_stack_items=1, min_stack_height=11)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11--dup11v1-v2-v10-v11-v11-v1-v2-v10-v11","title":"DUP11(v1, v2, ..., v10, v11) = v11, v1, v2, ..., v10, v11","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11--description","title":"Description","text":"<p>Duplicate 11<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v10: ignored value</li> <li>v11: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11--outputs","title":"Outputs","text":"<ul> <li>v11: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v10: ignored value</li> <li>v11: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP11--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#8A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12","title":"<code>DUP12 = Opcode(139, pushed_stack_items=1, min_stack_height=12)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12--dup12v1-v2-v11-v12-v12-v1-v2-v11-v12","title":"DUP12(v1, v2, ..., v11, v12) = v12, v1, v2, ..., v11, v12","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12--description","title":"Description","text":"<p>Duplicate 12<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v11: ignored value</li> <li>v12: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12--outputs","title":"Outputs","text":"<ul> <li>v12: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v11: ignored value</li> <li>v12: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP12--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#8B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13","title":"<code>DUP13 = Opcode(140, pushed_stack_items=1, min_stack_height=13)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13--dup13v1-v2-v12-v13-v13-v1-v2-v12-v13","title":"DUP13(v1, v2, ..., v12, v13) = v13, v1, v2, ..., v12, v13","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13--description","title":"Description","text":"<p>Duplicate 13<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v12: ignored value</li> <li>v13: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13--outputs","title":"Outputs","text":"<ul> <li>v13: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v12: ignored value</li> <li>v13: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP13--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#8C</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14","title":"<code>DUP14 = Opcode(141, pushed_stack_items=1, min_stack_height=14)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14--dup14v1-v2-v13-v14-v14-v1-v2-v13-v14","title":"DUP14(v1, v2, ..., v13, v14) = v14, v1, v2, ..., v13, v14","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14--description","title":"Description","text":"<p>Duplicate 14<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v13: ignored value</li> <li>v14: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14--outputs","title":"Outputs","text":"<ul> <li>v14: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v13: ignored value</li> <li>v14: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP14--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#8D</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15","title":"<code>DUP15 = Opcode(142, pushed_stack_items=1, min_stack_height=15)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15--dup15v1-v2-v14-v15-v15-v1-v2-v14-v15","title":"DUP15(v1, v2, ..., v14, v15) = v15, v1, v2, ..., v14, v15","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15--description","title":"Description","text":"<p>Duplicate 15<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v14: ignored value</li> <li>v15: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15--outputs","title":"Outputs","text":"<ul> <li>v15: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v14: ignored value</li> <li>v15: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP15--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#8E</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16","title":"<code>DUP16 = Opcode(143, pushed_stack_items=1, min_stack_height=16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16--dup16v1-v2-v15-v16-v16-v1-v2-v15-v16","title":"DUP16(v1, v2, ..., v15, v16) = v16, v1, v2, ..., v15, v16","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16--description","title":"Description","text":"<p>Duplicate 16<sup>th</sup> stack item</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16--inputs","title":"Inputs","text":"<ul> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v15: ignored value</li> <li>v16: value to duplicate</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16--outputs","title":"Outputs","text":"<ul> <li>v16: duplicated value</li> <li>v1: ignored value</li> <li>v2: ignored value</li> <li>...</li> <li>v15: ignored value</li> <li>v16: original value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUP16--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#8F</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1","title":"<code>SWAP1 = Opcode(144, min_stack_height=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1--swap1v1-v2-v2-v1","title":"SWAP1(v1, v2) = v2, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1--description","title":"Description","text":"<p>Exchange the top stack item with the second stack item.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1--outputs","title":"Outputs","text":"<ul> <li>v1: swapped value</li> <li>v2: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP1--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#90</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2","title":"<code>SWAP2 = Opcode(145, min_stack_height=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2--swap2v1-v2-v3-v3-v2-v1","title":"SWAP2(v1, v2, v3) = v3, v2, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 3<sup>rd</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>v3: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2--outputs","title":"Outputs","text":"<ul> <li>v3: swapped value</li> <li>v2: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP2--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#91</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3","title":"<code>SWAP3 = Opcode(146, min_stack_height=4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3--swap3v1-v2-v3-v4-v4-v2-v3-v1","title":"SWAP3(v1, v2, v3, v4) = v4, v2, v3, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 4<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>v3: ignored value</li> <li>v4: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3--outputs","title":"Outputs","text":"<ul> <li>v4: swapped value</li> <li>v2: ignored value</li> <li>v3: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP3--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#92</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4","title":"<code>SWAP4 = Opcode(147, min_stack_height=5)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4--swap4v1-v2-v4-v5-v5-v2-v4-v1","title":"SWAP4(v1, v2, ..., v4, v5) = v5, v2, ..., v4, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 5<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v4: ignored value</li> <li>v5: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4--outputs","title":"Outputs","text":"<ul> <li>v5: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v4: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP4--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#93</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5","title":"<code>SWAP5 = Opcode(148, min_stack_height=6)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5--swap5v1-v2-v5-v6-v6-v2-v5-v1","title":"SWAP5(v1, v2, ..., v5, v6) = v6, v2, ..., v5, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 6<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v5: ignored value</li> <li>v6: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5--outputs","title":"Outputs","text":"<ul> <li>v6: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v5: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP5--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#94</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6","title":"<code>SWAP6 = Opcode(149, min_stack_height=7)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6--swap6v1-v2-v6-v7-v7-v2-v6-v1","title":"SWAP6(v1, v2, ..., v6, v7) = v7, v2, ..., v6, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 7<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v6: ignored value</li> <li>v7: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6--outputs","title":"Outputs","text":"<ul> <li>v7: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v6: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP6--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#95</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7","title":"<code>SWAP7 = Opcode(150, min_stack_height=8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7--swap7v1-v2-v7-v8-v8-v2-v7-v1","title":"SWAP7(v1, v2, ..., v7, v8) = v8, v2, ..., v7, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 8<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v7: ignored value</li> <li>v8: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7--outputs","title":"Outputs","text":"<ul> <li>v8: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v7: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP7--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#96</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8","title":"<code>SWAP8 = Opcode(151, min_stack_height=9)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8--swap8v1-v2-v8-v9-v9-v2-v8-v1","title":"SWAP8(v1, v2, ..., v8, v9) = v9, v2, ..., v8, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 9<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v8: ignored value</li> <li>v9: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8--outputs","title":"Outputs","text":"<ul> <li>v9: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v8: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP8--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#97</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9","title":"<code>SWAP9 = Opcode(152, min_stack_height=10)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9--swap9v1-v2-v9-v10-v10-v2-v9-v1","title":"SWAP9(v1, v2, ..., v9, v10) = v10, v2, ..., v9, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 10<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v9: ignored value</li> <li>v10: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9--outputs","title":"Outputs","text":"<ul> <li>v10: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v9: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP9--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#98</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10","title":"<code>SWAP10 = Opcode(153, min_stack_height=11)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10--swap10v1-v2-v10-v11-v11-v2-v10-v1","title":"SWAP10(v1, v2, ..., v10, v11) = v11, v2, ..., v10, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 11<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v10: ignored value</li> <li>v11: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10--outputs","title":"Outputs","text":"<ul> <li>v11: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v10: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP10--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#99</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11","title":"<code>SWAP11 = Opcode(154, min_stack_height=12)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11--swap11v1-v2-v11-v12-v12-v2-v11-v1","title":"SWAP11(v1, v2, ..., v11, v12) = v12, v2, ..., v11, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 12<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v11: ignored value</li> <li>v12: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11--outputs","title":"Outputs","text":"<ul> <li>v12: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v11: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP11--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#9A</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12","title":"<code>SWAP12 = Opcode(155, min_stack_height=13)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12--swap12v1-v2-v12-v13-v13-v2-v12-v1","title":"SWAP12(v1, v2, ..., v12, v13) = v13, v2, ..., v12, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 13<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v12: ignored value</li> <li>v13: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12--outputs","title":"Outputs","text":"<ul> <li>v13: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v12: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP12--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#9B</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13","title":"<code>SWAP13 = Opcode(156, min_stack_height=14)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13--swap13v1-v2-v13-v14-v14-v2-v13-v1","title":"SWAP13(v1, v2, ..., v13, v14) = v14, v2, ..., v13, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 14<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v13: ignored value</li> <li>v14: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13--outputs","title":"Outputs","text":"<ul> <li>v14: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v13: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP13--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#9C</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14","title":"<code>SWAP14 = Opcode(157, min_stack_height=15)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14--swap14v1-v2-v14-v15-v15-v2-v14-v1","title":"SWAP14(v1, v2, ..., v14, v15) = v15, v2, ..., v14, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 15<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v14: ignored value</li> <li>v15: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14--outputs","title":"Outputs","text":"<ul> <li>v15: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v14: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP14--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#9D</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15","title":"<code>SWAP15 = Opcode(158, min_stack_height=16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15--swap15v1-v2-v15-v16-v16-v2-v15-v1","title":"SWAP15(v1, v2, ..., v15, v16) = v16, v2, ..., v15, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 16<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v15: ignored value</li> <li>v16: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15--outputs","title":"Outputs","text":"<ul> <li>v16: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v15: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP15--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#9E</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16","title":"<code>SWAP16 = Opcode(159, min_stack_height=17)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16--swap16v1-v2-v16-v17-v17-v2-v16-v1","title":"SWAP16(v1, v2, ..., v16, v17) = v17, v2, ..., v16, v1","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16--description","title":"Description","text":"<p>Exchange 1<sup>st</sup> and 17<sup>th</sup> stack items</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16--inputs","title":"Inputs","text":"<ul> <li>v1: value to swap</li> <li>v2: ignored value</li> <li>...</li> <li>v16: ignored value</li> <li>v17: value to swap</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16--outputs","title":"Outputs","text":"<ul> <li>v17: swapped value</li> <li>v2: ignored value</li> <li>...</li> <li>v16: ignored value</li> <li>v1: swapped value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAP16--gas","title":"Gas","text":"<p>3</p> <p>Source: evm.codes/#9F</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0","title":"<code>LOG0 = Opcode(160, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0--log0offset-size","title":"LOG0(offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0--description","title":"Description","text":"<p>Append log record with no topics</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes</li> <li>size: byte size to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG0--gas","title":"Gas","text":"<ul> <li>static_gas = 375</li> <li>dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#A0</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1","title":"<code>LOG1 = Opcode(161, popped_stack_items=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1--log1offset-size-topic1","title":"LOG1(offset, size, topic1)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1--description","title":"Description","text":"<p>Append log record with one topic</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes</li> <li>size: byte size to copy</li> <li>topic1: 32-byte value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG1--gas","title":"Gas","text":"<ul> <li>static_gas = 375</li> <li>dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#A1</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2","title":"<code>LOG2 = Opcode(162, popped_stack_items=4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2--log2offset-size-topic1-topic2","title":"LOG2(offset, size, topic1, topic2)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2--description","title":"Description","text":"<p>Append log record with two topics</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes</li> <li>size: byte size to copy</li> <li>topic1: 32-byte value</li> <li>topic2: 32-byte value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG2--gas","title":"Gas","text":"<ul> <li>static_gas = 375</li> <li>dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#A2</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3","title":"<code>LOG3 = Opcode(163, popped_stack_items=5)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3--log3offset-size-topic1-topic2-topic3","title":"LOG3(offset, size, topic1, topic2, topic3)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3--description","title":"Description","text":"<p>Append log record with three topics</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes</li> <li>size: byte size to copy</li> <li>topic1: 32-byte value</li> <li>topic2: 32-byte value</li> <li>topic3: 32-byte value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG3--gas","title":"Gas","text":"<ul> <li>static_gas = 375</li> <li>dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#A3</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4","title":"<code>LOG4 = Opcode(164, popped_stack_items=6)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4--log4offset-size-topic1-topic2-topic3-topic4","title":"LOG4(offset, size, topic1, topic2, topic3, topic4)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4--description","title":"Description","text":"<p>Append log record with four topics</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes</li> <li>size: byte size to copy</li> <li>topic1: 32-byte value</li> <li>topic2: 32-byte value</li> <li>topic3: 32-byte value</li> <li>topic4: 32-byte value</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.LOG4--gas","title":"Gas","text":"<ul> <li>static_gas = 375</li> <li>dynamic_gas = 375 * topic_count + 8 * size + memory_expansion_cost</li> </ul> <p>Source: evm.codes/#A4</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP","title":"<code>RJUMP = Opcode(224, data_portion_length=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP--rjump","title":"RJUMP()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP--description","title":"Description","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMP--gas","title":"Gas","text":"<p>Source: eips.ethereum.org/EIPS/eip-4200</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD","title":"<code>DATALOAD = Opcode(208, popped_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD--dataloadoffset","title":"DATALOAD(offset)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD--description","title":"Description","text":"<p>Reads 32 bytes of data at offset onto the stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD--inputs","title":"Inputs","text":"<ul> <li>offset: offset within the data section to start copying</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD--outputs","title":"Outputs","text":"<p>none</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOAD--gas","title":"Gas","text":"<p>4</p> <p>Source: eips.ethereum.org/EIPS/eip-7480</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN","title":"<code>DATALOADN = Opcode(209, popped_stack_items=0, data_portion_length=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--dataloadn","title":"DATALOADN()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--description","title":"Description","text":"<p>Reads 32 bytes of data at offset onto the stack</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--immediates","title":"Immediates","text":"<p>2 bytes forming a UInt16, which is the offset into the data section.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--inputs","title":"Inputs","text":"<p>none</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--outputs","title":"Outputs","text":"<p>none</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATALOADN--gas","title":"Gas","text":"<p>3</p> <p>Source: eips.ethereum.org/EIPS/eip-7480</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE","title":"<code>DATASIZE = Opcode(210, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE--datasize","title":"DATASIZE()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE--description","title":"Description","text":"<p>Returns the size of the data section</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE--outputs","title":"Outputs","text":"<p>The size of the data section. If there is no data section, returns 0.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATASIZE--gas","title":"Gas","text":"<p>2</p> <p>Source: eips.ethereum.org/EIPS/eip-7480</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY","title":"<code>DATACOPY = Opcode(211, popped_stack_items=3)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY--datacopymem_offset-offset-size","title":"DATACOPY(mem_offset, offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY--description","title":"Description","text":"<p>Copies data from the data section into call frame memory</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY--inputs","title":"Inputs","text":"<ul> <li>mem_offset: The offset within the memory section to start copying to</li> <li>offset: The offset within the data section to start copying from</li> <li>size: The number of bytes to copy</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY--outputs","title":"Outputs","text":"<p>none</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DATACOPY--gas","title":"Gas","text":"<ul> <li>minimum_word_size = (size + 31) / 32</li> <li>static_gas = 3</li> <li>dynamic_gas = 3 * minimum_word_size + memory_expansion_cost</li> </ul> <p>Source: eips.ethereum.org/EIPS/eip-7480</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI","title":"<code>RJUMPI = Opcode(225, popped_stack_items=1, data_portion_length=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI--rjumpi","title":"RJUMPI()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI--description","title":"Description","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPI--gas","title":"Gas","text":"<p>Source: eips.ethereum.org/EIPS/eip-4200</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV","title":"<code>RJUMPV = Opcode(226, popped_stack_items=1, data_portion_formatter=_rjumpv_encoder)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV--rjumpv","title":"RJUMPV()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV--description","title":"Description","text":"<p>Relative jump with variable offset.</p> <p>When calling this opcode to generate bytecode, the first argument is used to format the data portion of the opcode, and it can be either of two types: - A bytes type, and in this instance the bytes are used verbatim as the data portion. - An integer iterable, list or tuple or any other iterable, where each element is a     jump offset.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RJUMPV--gas","title":"Gas","text":"<p>Source: eips.ethereum.org/EIPS/eip-4200</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF","title":"<code>CALLF = Opcode(227, data_portion_length=2, unchecked_stack=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF--callf","title":"CALLF()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF--description","title":"Description","text":"<ul> <li>deduct 5 gas</li> <li>read uint16 operand idx</li> <li>if 1024 &lt; len(stack) + types[idx].max_stack_height - types[idx].inputs, execution results in     an exceptional halt</li> <li>if 1024 &lt;= len(return_stack), execution results in an exceptional halt</li> <li>push new element to return_stack (current_code_idx, pc+3)</li> <li>update current_code_idx to idx and set pc to 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF--inputs","title":"Inputs","text":"<p>Any: The inputs are not checked because we cannot know how many inputs the callee function/section requires</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF--outputs","title":"Outputs","text":"<p>Any: The outputs are variable because we cannot know how many outputs the callee function/section produces</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLF--gas","title":"Gas","text":"<p>5</p> <p>Source: ipsilon/eof/blob/main/spec/eof.md</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF","title":"<code>RETF = Opcode(228)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF--retf","title":"RETF()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF--description","title":"Description","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETF--gas","title":"Gas","text":"<p>3</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF","title":"<code>JUMPF = Opcode(229, data_portion_length=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF--jumpf","title":"JUMPF()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF--description","title":"Description","text":"<ul> <li>deduct 5 gas</li> <li>read uint16 operand idx</li> <li>if 1024 &lt; len(stack) + types[idx].max_stack_height - types[idx].inputs, execution results in     an exceptional halt</li> <li>set current_code_idx to idx</li> <li>set pc = 0</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.JUMPF--gas","title":"Gas","text":"<p>5</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN","title":"<code>DUPN = Opcode(230, pushed_stack_items=1, data_portion_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN--dupn","title":"DUPN()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN--description","title":"Description","text":"<ul> <li>deduct 3 gas</li> <li>read uint8 operand imm</li> <li>n = imm + 1</li> <li>n\u2018th (1-based) stack item is duplicated at the top of the stack</li> <li>Stack validation: stack_height &gt;= n</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DUPN--gas","title":"Gas","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN","title":"<code>SWAPN = Opcode(231, data_portion_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN--swapn","title":"SWAPN()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN--description","title":"Description","text":"<ul> <li>deduct 3 gas</li> <li>read uint8 operand imm</li> <li>n = imm + 1</li> <li>n + 1th stack item is swapped with the top stack item (1-based).</li> <li>Stack validation: stack_height &gt;= n + 1</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN--fork","title":"Fork","text":"<p>EOF Fork</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SWAPN--gas","title":"Gas","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE","title":"<code>EXCHANGE = Opcode(232, data_portion_formatter=_exchange_encoder)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE--exchangex-y","title":"EXCHANGE[x, y]","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE--description","title":"Description","text":"<p>Exchanges two stack positions.  Two nybbles, n is high 4 bits + 1, then  m is 4 low bits + 1. Exchanges tne n+1'th item with the n + m + 1 item.</p> <p>Inputs x and y when the opcode is used as <code>EXCHANGE[x, y]</code>, are equal to: - x = n + 1 - y = n + m + 1 Which each equals to 1-based stack positions swapped.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE--inputs","title":"Inputs","text":"<p>n + m + 1, or ((imm &gt;&gt; 4) + (imm &amp;0x0F) + 3) from the raw immediate,</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE--outputs","title":"Outputs","text":"<p>n + m + 1, or ((imm &gt;&gt; 4) + (imm &amp;0x0F) + 3) from the raw immediate,</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE--fork","title":"Fork","text":"<p>EOF_FORK</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXCHANGE--gas","title":"Gas","text":"<p>3</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE","title":"<code>EOFCREATE = Opcode(236, popped_stack_items=4, pushed_stack_items=1, data_portion_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE--eofcreateinitcontainer_index","title":"EOFCREATEinitcontainer_index","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE--description","title":"Description","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE--fork","title":"Fork","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EOFCREATE--gas","title":"Gas","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT","title":"<code>RETURNCONTRACT = Opcode(238, popped_stack_items=2, pushed_stack_items=1, data_portion_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT--returncontract","title":"RETURNCONTRACT()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT--description","title":"Description","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT--fork","title":"Fork","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURNCONTRACT--gas","title":"Gas","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE","title":"<code>CREATE = Opcode(240, popped_stack_items=3, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE--createvalue-offset-length-address","title":"CREATE(value, offset, length) = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE--description","title":"Description","text":"<p>Create a new contract with the given code</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE--inputs","title":"Inputs","text":"<ul> <li>value: value in wei to send to the new account</li> <li>offset: byte offset in the memory in bytes, the initialization code for the new account</li> <li>size: byte size to copy (size of the initialization code)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE--outputs","title":"Outputs","text":"<ul> <li>address: the address of the deployed contract, 0 if the deployment failed</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE--gas","title":"Gas","text":"<pre><code>minimum_word_size = (size + 31) / 32\ninit_code_cost = 2 * minimum_word_size\ncode_deposit_cost = 200 * deployed_code_size\n\nstatic_gas = 32000\ndynamic_gas = init_code_cost + memory_expansion_cost + deployment_code_execution_cost\n    + code_deposit_cost\n</code></pre> <p>Source: evm.codes/#F0</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL","title":"<code>CALL = Opcode(241, popped_stack_items=7, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL--callgas-address-value-argsoffset-argssize-retoffset-retsize-success","title":"CALL(gas, address, value, argsOffset, argsSize, retOffset, retSize) = success","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL--description","title":"Description","text":"<p>Message-call into an account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL--inputs","title":"Inputs","text":"<ul> <li>gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub     context is returned to this one</li> <li>address: the account which context to execute</li> <li>value: value in wei to send to the account</li> <li>argsOffset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>argsSize: byte size to copy (size of the calldata)</li> <li>retOffset: byte offset in the memory in bytes, where to store the return data of the sub     context</li> <li>retSize: byte size to copy (size of the return data)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL--outputs","title":"Outputs","text":"<ul> <li>success: return 0 if the sub context reverted, 1 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALL--gas","title":"Gas","text":"<pre><code>static_gas = 0\ndynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n    + positive_value_cost + value_to_empty_account_cost\n</code></pre> <p>Source: evm.codes/#F1</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE","title":"<code>CALLCODE = Opcode(242, popped_stack_items=7, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE--callcodegas-address-value-argsoffset-argssize-retoffset-retsize-success","title":"CALLCODE(gas, address, value, argsOffset, argsSize, retOffset, retSize) = success","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE--description","title":"Description","text":"<p>Message-call into this account with an alternative account's code. Executes code starting at the address to which the call is made.</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE--inputs","title":"Inputs","text":"<ul> <li>gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub     context is returned to this one</li> <li>address: the account which code to execute</li> <li>value: value in wei to send to the account</li> <li>argsOffset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>argsSize: byte size to copy (size of the calldata)</li> <li>retOffset: byte offset in the memory in bytes, where to store the return data of the sub     context</li> <li>retSize: byte size to copy (size of the return data)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE--outputs","title":"Outputs","text":"<ul> <li>success: return 0 if the sub context reverted, 1 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CALLCODE--gas","title":"Gas","text":"<pre><code>static_gas = 0\ndynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n    + positive_value_cost\n</code></pre> <p>Source: evm.codes/#F2</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN","title":"<code>RETURN = Opcode(243, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN--returnoffset-size","title":"RETURN(offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN--description","title":"Description","text":"<p>Halt execution returning output data</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes, to copy what will be the return data of this     context</li> <li>size: byte size to copy (size of the return data)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN--outputs","title":"Outputs","text":"<ul> <li>None</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.RETURN--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = memory_expansion_cost</li> </ul> <p>Source: evm.codes/#F3</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL","title":"<code>DELEGATECALL = Opcode(244, popped_stack_items=6, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL--delegatecallgas-address-argsoffset-argssize-retoffset-retsize-success","title":"DELEGATECALL(gas, address, argsOffset, argsSize, retOffset, retSize) = success","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL--description","title":"Description","text":"<p>Message-call into this account with an alternative account's code, but persisting the current values for sender and value</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL--inputs","title":"Inputs","text":"<ul> <li>gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub     context is returned to this one</li> <li>address: the account which code to execute</li> <li>argsOffset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>argsSize: byte size to copy (size of the calldata)</li> <li>retOffset: byte offset in the memory in bytes, where to store the return data of the sub     context</li> <li>retSize: byte size to copy (size of the return data)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL--outputs","title":"Outputs","text":"<ul> <li>success: return 0 if the sub context reverted, 1 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL--fork","title":"Fork","text":"<p>Byzantium</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.DELEGATECALL--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost</li> </ul> <p>Source: evm.codes/#F4</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2","title":"<code>CREATE2 = Opcode(245, popped_stack_items=4, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2--create2value-offset-size-salt-address","title":"CREATE2(value, offset, size, salt) = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2--description","title":"Description","text":"<p>Creates a new contract</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2--inputs","title":"Inputs","text":"<ul> <li>value: value in wei to send to the new account</li> <li>offset: byte offset in the memory in bytes, the initialization code of the new account</li> <li>size: byte size to copy (size of the initialization code)</li> <li>salt: 32-byte value used to create the new account at a deterministic address</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2--outputs","title":"Outputs","text":"<ul> <li>address: the address of the deployed contract, 0 if the deployment failed</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2--fork","title":"Fork","text":"<p>Constantinople</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE2--gas","title":"Gas","text":"<pre><code>minimum_word_size = (size + 31) / 32\ninit_code_cost = 2 * minimum_word_size\nhash_cost = 6 * minimum_word_size\ncode_deposit_cost = 200 * deployed_code_size\n\nstatic_gas = 32000\ndynamic_gas = init_code_cost + hash_cost + memory_expansion_cost\n    + deployment_code_execution_cost + code_deposit_cost\n</code></pre> <p>Source: evm.codes/#F5</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL","title":"<code>EXTCALL = Opcode(248, popped_stack_items=4, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL--extcalltarget_address-input_offset-input_size-value-address","title":"EXTCALL(target_address, input_offset, input_size, value) = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL--description","title":"Description","text":"<p>Message-call into an account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL--inputs","title":"Inputs","text":"<ul> <li>target_address: the account which context to execute</li> <li>input_offset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>input_size: byte size to copy (size of the calldata)</li> <li>value: value in wei to send to the account</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL--outputs","title":"Outputs","text":"<ul> <li>success:<ul> <li><code>0</code> if the call was successful.</li> <li><code>1</code> if the call has reverted (also can be pushed earlier in a light failure scenario).</li> <li><code>2</code> if the call has failed.</li> </ul> </li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL--fork","title":"Fork","text":"<p>Prague</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTCALL--gas","title":"Gas","text":"<pre><code>static_gas = 0\ndynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost\n    + positive_value_cost + value_to_empty_account_cost\n</code></pre> <p>Source: EIP-7069</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL","title":"<code>EXTDELEGATECALL = Opcode(249, popped_stack_items=3, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL--extdelegatecalltarget_address-input_offset-input_size-address","title":"EXTDELEGATECALL(target_address, input_offset, input_size) = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL--description","title":"Description","text":"<p>Message-call into this account with an alternative account's code, but persisting the current values for sender and value</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL--inputs","title":"Inputs","text":"<ul> <li>target_address: the account which context to execute</li> <li>input_offset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>input_size: byte size to copy (size of the calldata)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL--outputs","title":"Outputs","text":"<ul> <li>success:<ul> <li><code>0</code> if the call was successful.</li> <li><code>1</code> if the call has reverted (also can be pushed earlier in a light failure scenario).</li> <li><code>2</code> if the call has failed.</li> </ul> </li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL--fork","title":"Fork","text":"<p>Prague</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTDELEGATECALL--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost</li> </ul> <p>Source: EIP-7069</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL","title":"<code>STATICCALL = Opcode(250, popped_stack_items=6, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL--staticcallgas-address-argsoffset-argssize-retoffset-retsize-success","title":"STATICCALL(gas, address, argsOffset, argsSize, retOffset, retSize) = success","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL--description","title":"Description","text":"<p>Static message-call into an account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL--inputs","title":"Inputs","text":"<ul> <li>gas: amount of gas to send to the sub context to execute. The gas that is not used by the sub     context is returned to this one</li> <li>address: the account which context to execute</li> <li>argsOffset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>argsSize: byte size to copy (size of the calldata)</li> <li>retOffset: byte offset in the memory in bytes, where to store the return data of the sub     context</li> <li>retSize: byte size to copy (size of the return data)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL--outputs","title":"Outputs","text":"<ul> <li>success: return 0 if the sub context reverted, 1 otherwise</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL--fork","title":"Fork","text":"<p>Byzantium</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.STATICCALL--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost</li> </ul> <p>Source: evm.codes/#FA</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL","title":"<code>EXTSTATICCALL = Opcode(251, popped_stack_items=4, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL--extstaticcalltarget_address-input_offset-input_size-address","title":"EXTSTATICCALL(target_address, input_offset, input_size) = address","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL--description","title":"Description","text":"<p>Static message-call into an account</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL--inputs","title":"Inputs","text":"<ul> <li>target_address: the account which context to execute</li> <li>input_offset: byte offset in the memory in bytes, the calldata of the sub context</li> <li>input_size: byte size to copy (size of the calldata)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL--outputs","title":"Outputs","text":"<ul> <li>success:<ul> <li><code>0</code> if the call was successful.</li> <li><code>1</code> if the call has reverted (also can be pushed earlier in a light failure scenario).</li> <li><code>2</code> if the call has failed.</li> </ul> </li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL--fork","title":"Fork","text":"<p>Prague</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.EXTSTATICCALL--gas","title":"Gas","text":"<ul> <li>static_gas = 0</li> <li>dynamic_gas = memory_expansion_cost + code_execution_cost + address_access_cost</li> </ul> <p>Source: EIP-7069</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4","title":"<code>CREATE4 = Opcode(247, popped_stack_items=5, pushed_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>!!! Note: This opcode is under development</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4--create4","title":"CREATE4()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4--description","title":"Description","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4--inputs","title":"Inputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4--outputs","title":"Outputs","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4--fork","title":"Fork","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.CREATE4--gas","title":"Gas","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.REVERT","title":"<code>REVERT = Opcode(253, popped_stack_items=2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.REVERT--revertoffset-size","title":"REVERT(offset, size)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.REVERT--description","title":"Description","text":"<p>Halt execution reverting state changes but returning data and remaining gas</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.REVERT--inputs","title":"Inputs","text":"<ul> <li>offset: byte offset in the memory in bytes. The return data of the calling context</li> <li>size: byte size to copy (size of the return data)</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.REVERT--fork","title":"Fork","text":"<p>Byzantium</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.REVERT--gas","title":"Gas","text":"<p>static_gas = 0 dynamic_gas = memory_expansion_cost</p> <p>Source: evm.codes/#FD</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID","title":"<code>INVALID = Opcode(254)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID--invalid","title":"INVALID()","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID--description","title":"Description","text":"<p>Designated invalid instruction</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID--inputs","title":"Inputs","text":"<p>None</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID--outputs","title":"Outputs","text":"<p>None</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.INVALID--gas","title":"Gas","text":"<p>All the remaining gas in this context is consumed</p> <p>Source: evm.codes/#FE</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFDESTRUCT","title":"<code>SELFDESTRUCT = Opcode(255, popped_stack_items=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFDESTRUCT--selfdestructaddress","title":"SELFDESTRUCT(address)","text":""},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFDESTRUCT--description","title":"Description","text":"<p>Halt execution and register the account for later deletion</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFDESTRUCT--inputs","title":"Inputs","text":"<ul> <li>address: account to send the current balance to</li> </ul>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFDESTRUCT--fork","title":"Fork","text":"<p>Frontier</p>"},{"location":"library/ethereum_test_tools/#ethereum_test_tools.Opcodes.SELFDESTRUCT--gas","title":"Gas","text":"<p>5000</p> <p>Source: evm.codes/#FF</p>"},{"location":"library/evm_transition_tool/","title":"EVM Transition Tool Package","text":"<p>Library of Python wrappers for the different implementations of transition tools.</p>"},{"location":"library/evm_transition_tool/#evm_transition_tool.BesuTransitionTool","title":"<code>BesuTransitionTool</code>","text":"<p>               Bases: <code>TransitionTool</code></p> <p>Besu EvmTool Transition tool frontend wrapper class.</p> Source code in <code>src/evm_transition_tool/besu.py</code> <pre><code>class BesuTransitionTool(TransitionTool):\n    \"\"\"\n    Besu EvmTool Transition tool frontend wrapper class.\n    \"\"\"\n\n    default_binary = Path(\"evm\")\n    detect_binary_pattern = compile(r\"^Hyperledger Besu evm .*$\")\n\n    binary: Path\n    cached_version: Optional[str] = None\n    trace: bool\n    process: Optional[subprocess.Popen] = None\n    server_url: str\n    besu_trace_dir: Optional[tempfile.TemporaryDirectory]\n\n    def __init__(\n        self,\n        *,\n        binary: Optional[Path] = None,\n        trace: bool = False,\n    ):\n        super().__init__(binary=binary, trace=trace)\n        args = [str(self.binary), \"t8n\", \"--help\"]\n        try:\n            result = subprocess.run(args, capture_output=True, text=True)\n        except subprocess.CalledProcessError as e:\n            raise Exception(\"evm process unexpectedly returned a non-zero status code: \" f\"{e}.\")\n        except Exception as e:\n            raise Exception(f\"Unexpected exception calling evm tool: {e}.\")\n        self.help_string = result.stdout\n        self.besu_trace_dir = tempfile.TemporaryDirectory() if self.trace else None\n\n    def start_server(self):\n        \"\"\"\n        Starts the t8n-server process, extracts the port, and leaves it running for future re-use.\n        \"\"\"\n        args = [\n            str(self.binary),\n            \"t8n-server\",\n            \"--port=0\",  # OS assigned server port\n        ]\n\n        if self.trace:\n            args.append(\"--trace\")\n            args.append(f\"--output.basedir={self.besu_trace_dir.name}\")\n\n        self.process = subprocess.Popen(\n            args=args,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )\n\n        while True:\n            line = str(self.process.stdout.readline())\n\n            if not line or \"Failed to start transition server\" in line:\n                raise Exception(\"Failed starting Besu subprocess\\n\" + line)\n            if \"Transition server listening on\" in line:\n                port = re.search(\"Transition server listening on (\\\\d+)\", line).group(1)\n                self.server_url = f\"http://localhost:{port}/\"\n                break\n\n    def shutdown(self):\n        \"\"\"\n        Stops the t8n-server process if it was started\n        \"\"\"\n        if self.process:\n            self.process.kill()\n        if self.besu_trace_dir:\n            self.besu_trace_dir.cleanup()\n\n    def evaluate(\n        self,\n        alloc: Any,\n        txs: Any,\n        env: Any,\n        fork_name: str,\n        chain_id: int = 1,\n        reward: int = 0,\n        eips: Optional[List[int]] = None,\n        debug_output_path: str = \"\",\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Executes `evm t8n` with the specified arguments.\n        \"\"\"\n        if not self.process:\n            self.start_server()\n\n        if eips is not None:\n            fork_name = \"+\".join([fork_name] + [str(eip) for eip in eips])\n\n        input_json = {\n            \"alloc\": alloc,\n            \"txs\": txs,\n            \"env\": env,\n        }\n        state_json = {\n            \"fork\": fork_name,\n            \"chainid\": chain_id,\n            \"reward\": reward,\n        }\n\n        post_data = {\"state\": state_json, \"input\": input_json}\n\n        if debug_output_path:\n            post_data_string = json.dumps(post_data, indent=4)\n            additional_indent = \" \" * 16  # for pretty indentation in t8n.sh\n            indented_post_data_string = \"{\\n\" + \"\\n\".join(\n                additional_indent + line for line in post_data_string[1:].splitlines()\n            )\n            t8n_script = textwrap.dedent(\n                f\"\"\"\\\n                #!/bin/bash\n                # Use $1 as t8n-server port if provided, else default to 3000\n                PORT=${{1:-3000}}\n                curl http://localhost:${{PORT}}/ -X POST -H \"Content-Type: application/json\" \\\\\n                --data '{indented_post_data_string}'\n                \"\"\"  # noqa: E221\n            )\n            dump_files_to_directory(\n                debug_output_path,\n                {\n                    \"state.json\": state_json,\n                    \"input/alloc.json\": input_json[\"alloc\"],\n                    \"input/env.json\": input_json[\"env\"],\n                    \"input/txs.json\": input_json[\"txs\"],\n                    \"t8n.sh+x\": t8n_script,\n                },\n            )\n\n        response = requests.post(self.server_url, json=post_data, timeout=5)\n        response.raise_for_status()  # exception visible in pytest failure output\n        output = response.json()\n\n        if debug_output_path:\n            dump_files_to_directory(\n                debug_output_path,\n                {\n                    \"response.txt\": response.text,\n                    \"status_code.txt\": response.status_code,\n                    \"time_elapsed_seconds.txt\": response.elapsed.total_seconds(),\n                },\n            )\n\n        if response.status_code != 200:\n            raise Exception(\n                f\"t8n-server returned status code {response.status_code}, \"\n                f\"response: {response.text}\"\n            )\n        if not all([x in output for x in [\"alloc\", \"result\", \"body\"]]):\n            raise Exception(\n                \"Malformed t8n output: missing 'alloc', 'result' or 'body', server response: \"\n                f\"{response.text}\"\n            )\n\n        if debug_output_path:\n            dump_files_to_directory(\n                debug_output_path,\n                {\n                    \"output/alloc.json\": output[\"alloc\"],\n                    \"output/result.json\": output[\"result\"],\n                    \"output/txs.rlp\": output[\"body\"],\n                },\n            )\n\n        if self.trace and self.besu_trace_dir:\n            self.collect_traces(\n                output[\"result\"][\"receipts\"], self.besu_trace_dir, debug_output_path\n            )\n            for i, r in enumerate(output[\"result\"][\"receipts\"]):\n                trace_file_name = f\"trace-{i}-{r['transactionHash']}.jsonl\"\n                os.remove(os.path.join(self.besu_trace_dir.name, trace_file_name))\n\n        return output\n\n    def is_fork_supported(self, fork: Fork) -&gt; bool:\n        \"\"\"\n        Returns True if the fork is supported by the tool\n        \"\"\"\n        return fork.transition_tool_name() in self.help_string\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.BesuTransitionTool.start_server","title":"<code>start_server()</code>","text":"<p>Starts the t8n-server process, extracts the port, and leaves it running for future re-use.</p> Source code in <code>src/evm_transition_tool/besu.py</code> <pre><code>def start_server(self):\n    \"\"\"\n    Starts the t8n-server process, extracts the port, and leaves it running for future re-use.\n    \"\"\"\n    args = [\n        str(self.binary),\n        \"t8n-server\",\n        \"--port=0\",  # OS assigned server port\n    ]\n\n    if self.trace:\n        args.append(\"--trace\")\n        args.append(f\"--output.basedir={self.besu_trace_dir.name}\")\n\n    self.process = subprocess.Popen(\n        args=args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n    )\n\n    while True:\n        line = str(self.process.stdout.readline())\n\n        if not line or \"Failed to start transition server\" in line:\n            raise Exception(\"Failed starting Besu subprocess\\n\" + line)\n        if \"Transition server listening on\" in line:\n            port = re.search(\"Transition server listening on (\\\\d+)\", line).group(1)\n            self.server_url = f\"http://localhost:{port}/\"\n            break\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.BesuTransitionTool.shutdown","title":"<code>shutdown()</code>","text":"<p>Stops the t8n-server process if it was started</p> Source code in <code>src/evm_transition_tool/besu.py</code> <pre><code>def shutdown(self):\n    \"\"\"\n    Stops the t8n-server process if it was started\n    \"\"\"\n    if self.process:\n        self.process.kill()\n    if self.besu_trace_dir:\n        self.besu_trace_dir.cleanup()\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.BesuTransitionTool.evaluate","title":"<code>evaluate(alloc, txs, env, fork_name, chain_id=1, reward=0, eips=None, debug_output_path='')</code>","text":"<p>Executes <code>evm t8n</code> with the specified arguments.</p> Source code in <code>src/evm_transition_tool/besu.py</code> <pre><code>def evaluate(\n    self,\n    alloc: Any,\n    txs: Any,\n    env: Any,\n    fork_name: str,\n    chain_id: int = 1,\n    reward: int = 0,\n    eips: Optional[List[int]] = None,\n    debug_output_path: str = \"\",\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Executes `evm t8n` with the specified arguments.\n    \"\"\"\n    if not self.process:\n        self.start_server()\n\n    if eips is not None:\n        fork_name = \"+\".join([fork_name] + [str(eip) for eip in eips])\n\n    input_json = {\n        \"alloc\": alloc,\n        \"txs\": txs,\n        \"env\": env,\n    }\n    state_json = {\n        \"fork\": fork_name,\n        \"chainid\": chain_id,\n        \"reward\": reward,\n    }\n\n    post_data = {\"state\": state_json, \"input\": input_json}\n\n    if debug_output_path:\n        post_data_string = json.dumps(post_data, indent=4)\n        additional_indent = \" \" * 16  # for pretty indentation in t8n.sh\n        indented_post_data_string = \"{\\n\" + \"\\n\".join(\n            additional_indent + line for line in post_data_string[1:].splitlines()\n        )\n        t8n_script = textwrap.dedent(\n            f\"\"\"\\\n            #!/bin/bash\n            # Use $1 as t8n-server port if provided, else default to 3000\n            PORT=${{1:-3000}}\n            curl http://localhost:${{PORT}}/ -X POST -H \"Content-Type: application/json\" \\\\\n            --data '{indented_post_data_string}'\n            \"\"\"  # noqa: E221\n        )\n        dump_files_to_directory(\n            debug_output_path,\n            {\n                \"state.json\": state_json,\n                \"input/alloc.json\": input_json[\"alloc\"],\n                \"input/env.json\": input_json[\"env\"],\n                \"input/txs.json\": input_json[\"txs\"],\n                \"t8n.sh+x\": t8n_script,\n            },\n        )\n\n    response = requests.post(self.server_url, json=post_data, timeout=5)\n    response.raise_for_status()  # exception visible in pytest failure output\n    output = response.json()\n\n    if debug_output_path:\n        dump_files_to_directory(\n            debug_output_path,\n            {\n                \"response.txt\": response.text,\n                \"status_code.txt\": response.status_code,\n                \"time_elapsed_seconds.txt\": response.elapsed.total_seconds(),\n            },\n        )\n\n    if response.status_code != 200:\n        raise Exception(\n            f\"t8n-server returned status code {response.status_code}, \"\n            f\"response: {response.text}\"\n        )\n    if not all([x in output for x in [\"alloc\", \"result\", \"body\"]]):\n        raise Exception(\n            \"Malformed t8n output: missing 'alloc', 'result' or 'body', server response: \"\n            f\"{response.text}\"\n        )\n\n    if debug_output_path:\n        dump_files_to_directory(\n            debug_output_path,\n            {\n                \"output/alloc.json\": output[\"alloc\"],\n                \"output/result.json\": output[\"result\"],\n                \"output/txs.rlp\": output[\"body\"],\n            },\n        )\n\n    if self.trace and self.besu_trace_dir:\n        self.collect_traces(\n            output[\"result\"][\"receipts\"], self.besu_trace_dir, debug_output_path\n        )\n        for i, r in enumerate(output[\"result\"][\"receipts\"]):\n            trace_file_name = f\"trace-{i}-{r['transactionHash']}.jsonl\"\n            os.remove(os.path.join(self.besu_trace_dir.name, trace_file_name))\n\n    return output\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.BesuTransitionTool.is_fork_supported","title":"<code>is_fork_supported(fork)</code>","text":"<p>Returns True if the fork is supported by the tool</p> Source code in <code>src/evm_transition_tool/besu.py</code> <pre><code>def is_fork_supported(self, fork: Fork) -&gt; bool:\n    \"\"\"\n    Returns True if the fork is supported by the tool\n    \"\"\"\n    return fork.transition_tool_name() in self.help_string\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.EvmOneTransitionTool","title":"<code>EvmOneTransitionTool</code>","text":"<p>               Bases: <code>TransitionTool</code></p> <p>Evmone <code>evmone-t8n</code> Transition tool interface wrapper class.</p> Source code in <code>src/evm_transition_tool/evmone.py</code> <pre><code>class EvmOneTransitionTool(TransitionTool):\n    \"\"\"\n    Evmone `evmone-t8n` Transition tool interface wrapper class.\n    \"\"\"\n\n    default_binary = Path(\"evmone-t8n\")\n    detect_binary_pattern = compile(r\"^evmone-t8n\\b\")\n    t8n_use_stream = False\n\n    binary: Path\n    cached_version: Optional[str] = None\n    trace: bool\n\n    def __init__(\n        self,\n        *,\n        binary: Optional[Path] = None,\n        trace: bool = False,\n    ):\n        super().__init__(binary=binary, trace=trace)\n\n    def is_fork_supported(self, fork: Fork) -&gt; bool:\n        \"\"\"\n        Returns True if the fork is supported by the tool.\n        Currently, evmone-t8n provides no way to determine supported forks.\n        \"\"\"\n        return True\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.EvmOneTransitionTool.is_fork_supported","title":"<code>is_fork_supported(fork)</code>","text":"<p>Returns True if the fork is supported by the tool. Currently, evmone-t8n provides no way to determine supported forks.</p> Source code in <code>src/evm_transition_tool/evmone.py</code> <pre><code>def is_fork_supported(self, fork: Fork) -&gt; bool:\n    \"\"\"\n    Returns True if the fork is supported by the tool.\n    Currently, evmone-t8n provides no way to determine supported forks.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.ExecutionSpecsTransitionTool","title":"<code>ExecutionSpecsTransitionTool</code>","text":"<p>               Bases: <code>GethTransitionTool</code></p> <p>Ethereum Specs <code>ethereum-spec-evm</code> Transition tool interface wrapper class.</p> <p>The behavior of this tool is almost identical to go-ethereum's <code>evm t8n</code> command.</p> <p>note: Using the latest version of the <code>ethereum-spec-evm</code> tool:</p> <pre><code>As the `ethereum` package provided by `execution-specs` is a requirement of\n`execution-spec-tests`, the `ethereum-spec-evm` is already installed in the\nvirtual environment where `execution-spec-tests` is installed\n(via `pip install -e .`). Therefore, the `ethereum-spec-evm` transition tool\ncan be used to fill tests via:\n\n```console\n    fill --evm-bin=ethereum-spec-evm\n```\n\nTo ensure you're using the latest version of `ethereum-spec-evm` you can run:\n\n```\npip install --force-reinstall -e .\n```\n\nor\n\n```\npip install --force-reinstall -e .[docs,lint,tests]\n```\n\nas appropriate.\n</code></pre> <p>note: Using a specific version of the <code>ethereum-spec-evm</code> tool:</p> <pre><code>1. Create a virtual environment and activate it:\n    ```\n    python -m venv venv-execution-specs\n    source venv-execution-specs/bin/activate\n    ```\n2. Clone the ethereum/execution-specs repository, change working directory to it and\n    retrieve the desired version of the repository:\n    ```\n    git clone git@github.com:ethereum/execution-specs.git\n    cd execution-specs\n    git checkout &lt;version&gt;\n    ```\n3. Install the packages provided by the repository:\n    ```\n    pip install -e .\n    ```\n    Check that the `ethereum-spec-evm` command is available:\n    ```\n    ethereum-spec-evm --help\n    ```\n4. Clone the ethereum/execution-specs-tests repository and change working directory to it:\n    ```\n    cd ..\n    git clone git@github.com:ethereum/execution-spec-tests.git\n    cd execution-spec-tests\n    ```\n5. Install the packages provided by the ethereum/execution-spec-tests repository:\n    ```\n    pip install -e .\n    ```\n6. Run the tests, specifying the `ethereum-spec-evm` command as the transition tool:\n    ```\n    fill --evm-bin=path/to/venv-execution-specs/ethereum-spec-evm\n    ```\n</code></pre> Source code in <code>src/evm_transition_tool/execution_specs.py</code> <pre><code>class ExecutionSpecsTransitionTool(GethTransitionTool):\n    \"\"\"\n    Ethereum Specs `ethereum-spec-evm` Transition tool interface wrapper class.\n\n    The behavior of this tool is almost identical to go-ethereum's `evm t8n` command.\n\n    note: Using the latest version of the `ethereum-spec-evm` tool:\n\n        As the `ethereum` package provided by `execution-specs` is a requirement of\n        `execution-spec-tests`, the `ethereum-spec-evm` is already installed in the\n        virtual environment where `execution-spec-tests` is installed\n        (via `pip install -e .`). Therefore, the `ethereum-spec-evm` transition tool\n        can be used to fill tests via:\n\n        ```console\n            fill --evm-bin=ethereum-spec-evm\n        ```\n\n        To ensure you're using the latest version of `ethereum-spec-evm` you can run:\n\n        ```\n        pip install --force-reinstall -e .\n        ```\n\n        or\n\n        ```\n        pip install --force-reinstall -e .[docs,lint,tests]\n        ```\n\n        as appropriate.\n\n    note: Using a specific version of the `ethereum-spec-evm` tool:\n\n        1. Create a virtual environment and activate it:\n            ```\n            python -m venv venv-execution-specs\n            source venv-execution-specs/bin/activate\n            ```\n        2. Clone the ethereum/execution-specs repository, change working directory to it and\n            retrieve the desired version of the repository:\n            ```\n            git clone git@github.com:ethereum/execution-specs.git\n            cd execution-specs\n            git checkout &lt;version&gt;\n            ```\n        3. Install the packages provided by the repository:\n            ```\n            pip install -e .\n            ```\n            Check that the `ethereum-spec-evm` command is available:\n            ```\n            ethereum-spec-evm --help\n            ```\n        4. Clone the ethereum/execution-specs-tests repository and change working directory to it:\n            ```\n            cd ..\n            git clone git@github.com:ethereum/execution-spec-tests.git\n            cd execution-spec-tests\n            ```\n        5. Install the packages provided by the ethereum/execution-spec-tests repository:\n            ```\n            pip install -e .\n            ```\n        6. Run the tests, specifying the `ethereum-spec-evm` command as the transition tool:\n            ```\n            fill --evm-bin=path/to/venv-execution-specs/ethereum-spec-evm\n            ```\n    \"\"\"\n\n    default_binary = Path(\"ethereum-spec-evm\")\n    detect_binary_pattern = compile(r\"^ethereum-spec-evm\\b\")\n    statetest_subcommand: Optional[str] = None\n    blocktest_subcommand: Optional[str] = None\n\n    def is_fork_supported(self, fork: Fork) -&gt; bool:\n        \"\"\"\n        Returns True if the fork is supported by the tool.\n        Currently, ethereum-spec-evm provides no way to determine supported forks.\n        \"\"\"\n        return fork not in UNSUPPORTED_FORKS\n\n    def get_blocktest_help(self) -&gt; str:\n        \"\"\"\n        Return the help string for the blocktest subcommand.\n        \"\"\"\n        raise NotImplementedError(\n            \"The `blocktest` command is not supported by the ethereum-spec-evm. \"\n            \"Use geth's evm tool.\"\n        )\n\n    def verify_fixture(\n        self,\n        fixture_format: FixtureFormats,\n        fixture_path: Path,\n        fixture_name: Optional[str] = None,\n        debug_output_path: Optional[Path] = None,\n    ):\n        \"\"\"\n        Executes `evm [state|block]test` to verify the fixture at `fixture_path`.\n\n        Currently only implemented by geth's evm.\n        \"\"\"\n        raise NotImplementedError(\n            \"The `verify_fixture()` function is not supported by the ethereum-spec-evm. \"\n            \"Use geth's evm tool.\"\n        )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.ExecutionSpecsTransitionTool.is_fork_supported","title":"<code>is_fork_supported(fork)</code>","text":"<p>Returns True if the fork is supported by the tool. Currently, ethereum-spec-evm provides no way to determine supported forks.</p> Source code in <code>src/evm_transition_tool/execution_specs.py</code> <pre><code>def is_fork_supported(self, fork: Fork) -&gt; bool:\n    \"\"\"\n    Returns True if the fork is supported by the tool.\n    Currently, ethereum-spec-evm provides no way to determine supported forks.\n    \"\"\"\n    return fork not in UNSUPPORTED_FORKS\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.ExecutionSpecsTransitionTool.get_blocktest_help","title":"<code>get_blocktest_help()</code>","text":"<p>Return the help string for the blocktest subcommand.</p> Source code in <code>src/evm_transition_tool/execution_specs.py</code> <pre><code>def get_blocktest_help(self) -&gt; str:\n    \"\"\"\n    Return the help string for the blocktest subcommand.\n    \"\"\"\n    raise NotImplementedError(\n        \"The `blocktest` command is not supported by the ethereum-spec-evm. \"\n        \"Use geth's evm tool.\"\n    )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.ExecutionSpecsTransitionTool.verify_fixture","title":"<code>verify_fixture(fixture_format, fixture_path, fixture_name=None, debug_output_path=None)</code>","text":"<p>Executes <code>evm [state|block]test</code> to verify the fixture at <code>fixture_path</code>.</p> <p>Currently only implemented by geth's evm.</p> Source code in <code>src/evm_transition_tool/execution_specs.py</code> <pre><code>def verify_fixture(\n    self,\n    fixture_format: FixtureFormats,\n    fixture_path: Path,\n    fixture_name: Optional[str] = None,\n    debug_output_path: Optional[Path] = None,\n):\n    \"\"\"\n    Executes `evm [state|block]test` to verify the fixture at `fixture_path`.\n\n    Currently only implemented by geth's evm.\n    \"\"\"\n    raise NotImplementedError(\n        \"The `verify_fixture()` function is not supported by the ethereum-spec-evm. \"\n        \"Use geth's evm tool.\"\n    )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.GethTransitionTool","title":"<code>GethTransitionTool</code>","text":"<p>               Bases: <code>TransitionTool</code></p> <p>Go-ethereum <code>evm</code> Transition tool interface wrapper class.</p> Source code in <code>src/evm_transition_tool/geth.py</code> <pre><code>class GethTransitionTool(TransitionTool):\n    \"\"\"\n    Go-ethereum `evm` Transition tool interface wrapper class.\n    \"\"\"\n\n    default_binary = Path(\"evm\")\n    detect_binary_pattern = compile(r\"^evm version\\b\")\n    t8n_subcommand: Optional[str] = \"t8n\"\n    statetest_subcommand: Optional[str] = \"statetest\"\n    blocktest_subcommand: Optional[str] = \"blocktest\"\n\n    binary: Path\n    cached_version: Optional[str] = None\n    trace: bool\n\n    def __init__(\n        self,\n        *,\n        binary: Optional[Path] = None,\n        trace: bool = False,\n    ):\n        super().__init__(binary=binary, trace=trace)\n        args = [str(self.binary), str(self.t8n_subcommand), \"--help\"]\n        try:\n            result = subprocess.run(args, capture_output=True, text=True)\n        except subprocess.CalledProcessError as e:\n            raise Exception(\"evm process unexpectedly returned a non-zero status code: \" f\"{e}.\")\n        except Exception as e:\n            raise Exception(f\"Unexpected exception calling evm tool: {e}.\")\n        self.help_string = result.stdout\n\n    def is_fork_supported(self, fork: Fork) -&gt; bool:\n        \"\"\"\n        Returns True if the fork is supported by the tool.\n\n        If the fork is a transition fork, we want to check the fork it transitions to.\n        \"\"\"\n        return fork.transition_tool_name() in self.help_string\n\n    def get_blocktest_help(self) -&gt; str:\n        \"\"\"\n        Return the help string for the blocktest subcommand.\n        \"\"\"\n        args = [str(self.binary), \"blocktest\", \"--help\"]\n        try:\n            result = subprocess.run(args, capture_output=True, text=True)\n        except subprocess.CalledProcessError as e:\n            raise Exception(\"evm process unexpectedly returned a non-zero status code: \" f\"{e}.\")\n        except Exception as e:\n            raise Exception(f\"Unexpected exception calling evm tool: {e}.\")\n        return result.stdout\n\n    def verify_fixture(\n        self,\n        fixture_format: FixtureFormats,\n        fixture_path: Path,\n        fixture_name: Optional[str] = None,\n        debug_output_path: Optional[Path] = None,\n    ):\n        \"\"\"\n        Executes `evm [state|block]test` to verify the fixture at `fixture_path`.\n        \"\"\"\n        command: list[str] = [str(self.binary)]\n\n        if debug_output_path:\n            command += [\"--debug\", \"--json\", \"--verbosity\", \"100\"]\n\n        if FixtureFormats.is_state_test(fixture_format):\n            assert self.statetest_subcommand, \"statetest subcommand not set\"\n            command.append(self.statetest_subcommand)\n        elif FixtureFormats.is_blockchain_test(fixture_format):\n            assert self.blocktest_subcommand, \"blocktest subcommand not set\"\n            command.append(self.blocktest_subcommand)\n        else:\n            raise Exception(f\"Invalid test fixture format: {fixture_format}\")\n\n        if fixture_name and fixture_format == FixtureFormats.BLOCKCHAIN_TEST:\n            assert isinstance(fixture_name, str), \"fixture_name must be a string\"\n            command.append(\"--run\")\n            command.append(fixture_name)\n        command.append(str(fixture_path))\n\n        result = subprocess.run(\n            command,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n\n        if debug_output_path:\n            debug_fixture_path = debug_output_path / \"fixtures.json\"\n            # Use the local copy of the fixture in the debug directory\n            verify_fixtures_call = \" \".join(command[:-1]) + f\" {debug_fixture_path}\"\n            verify_fixtures_script = textwrap.dedent(\n                f\"\"\"\\\n                #!/bin/bash\n                {verify_fixtures_call}\n                \"\"\"\n            )\n            dump_files_to_directory(\n                str(debug_output_path),\n                {\n                    \"verify_fixtures_args.py\": command,\n                    \"verify_fixtures_returncode.txt\": result.returncode,\n                    \"verify_fixtures_stdout.txt\": result.stdout.decode(),\n                    \"verify_fixtures_stderr.txt\": result.stderr.decode(),\n                    \"verify_fixtures.sh+x\": verify_fixtures_script,\n                },\n            )\n            shutil.copyfile(fixture_path, debug_fixture_path)\n\n        if result.returncode != 0:\n            raise Exception(\n                f\"EVM test failed.\\n{' '.join(command)}\\n\\n Error:\\n{result.stderr.decode()}\"\n            )\n\n        if FixtureFormats.is_state_test(fixture_format):\n            result_json = json.loads(result.stdout.decode())\n            if not isinstance(result_json, list):\n                raise Exception(f\"Unexpected result from evm statetest: {result_json}\")\n        else:\n            result_json = []  # there is no parseable format for blocktest output\n        return result_json\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.GethTransitionTool.is_fork_supported","title":"<code>is_fork_supported(fork)</code>","text":"<p>Returns True if the fork is supported by the tool.</p> <p>If the fork is a transition fork, we want to check the fork it transitions to.</p> Source code in <code>src/evm_transition_tool/geth.py</code> <pre><code>def is_fork_supported(self, fork: Fork) -&gt; bool:\n    \"\"\"\n    Returns True if the fork is supported by the tool.\n\n    If the fork is a transition fork, we want to check the fork it transitions to.\n    \"\"\"\n    return fork.transition_tool_name() in self.help_string\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.GethTransitionTool.get_blocktest_help","title":"<code>get_blocktest_help()</code>","text":"<p>Return the help string for the blocktest subcommand.</p> Source code in <code>src/evm_transition_tool/geth.py</code> <pre><code>def get_blocktest_help(self) -&gt; str:\n    \"\"\"\n    Return the help string for the blocktest subcommand.\n    \"\"\"\n    args = [str(self.binary), \"blocktest\", \"--help\"]\n    try:\n        result = subprocess.run(args, capture_output=True, text=True)\n    except subprocess.CalledProcessError as e:\n        raise Exception(\"evm process unexpectedly returned a non-zero status code: \" f\"{e}.\")\n    except Exception as e:\n        raise Exception(f\"Unexpected exception calling evm tool: {e}.\")\n    return result.stdout\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.GethTransitionTool.verify_fixture","title":"<code>verify_fixture(fixture_format, fixture_path, fixture_name=None, debug_output_path=None)</code>","text":"<p>Executes <code>evm [state|block]test</code> to verify the fixture at <code>fixture_path</code>.</p> Source code in <code>src/evm_transition_tool/geth.py</code> <pre><code>def verify_fixture(\n    self,\n    fixture_format: FixtureFormats,\n    fixture_path: Path,\n    fixture_name: Optional[str] = None,\n    debug_output_path: Optional[Path] = None,\n):\n    \"\"\"\n    Executes `evm [state|block]test` to verify the fixture at `fixture_path`.\n    \"\"\"\n    command: list[str] = [str(self.binary)]\n\n    if debug_output_path:\n        command += [\"--debug\", \"--json\", \"--verbosity\", \"100\"]\n\n    if FixtureFormats.is_state_test(fixture_format):\n        assert self.statetest_subcommand, \"statetest subcommand not set\"\n        command.append(self.statetest_subcommand)\n    elif FixtureFormats.is_blockchain_test(fixture_format):\n        assert self.blocktest_subcommand, \"blocktest subcommand not set\"\n        command.append(self.blocktest_subcommand)\n    else:\n        raise Exception(f\"Invalid test fixture format: {fixture_format}\")\n\n    if fixture_name and fixture_format == FixtureFormats.BLOCKCHAIN_TEST:\n        assert isinstance(fixture_name, str), \"fixture_name must be a string\"\n        command.append(\"--run\")\n        command.append(fixture_name)\n    command.append(str(fixture_path))\n\n    result = subprocess.run(\n        command,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n\n    if debug_output_path:\n        debug_fixture_path = debug_output_path / \"fixtures.json\"\n        # Use the local copy of the fixture in the debug directory\n        verify_fixtures_call = \" \".join(command[:-1]) + f\" {debug_fixture_path}\"\n        verify_fixtures_script = textwrap.dedent(\n            f\"\"\"\\\n            #!/bin/bash\n            {verify_fixtures_call}\n            \"\"\"\n        )\n        dump_files_to_directory(\n            str(debug_output_path),\n            {\n                \"verify_fixtures_args.py\": command,\n                \"verify_fixtures_returncode.txt\": result.returncode,\n                \"verify_fixtures_stdout.txt\": result.stdout.decode(),\n                \"verify_fixtures_stderr.txt\": result.stderr.decode(),\n                \"verify_fixtures.sh+x\": verify_fixtures_script,\n            },\n        )\n        shutil.copyfile(fixture_path, debug_fixture_path)\n\n    if result.returncode != 0:\n        raise Exception(\n            f\"EVM test failed.\\n{' '.join(command)}\\n\\n Error:\\n{result.stderr.decode()}\"\n        )\n\n    if FixtureFormats.is_state_test(fixture_format):\n        result_json = json.loads(result.stdout.decode())\n        if not isinstance(result_json, list):\n            raise Exception(f\"Unexpected result from evm statetest: {result_json}\")\n    else:\n        result_json = []  # there is no parseable format for blocktest output\n    return result_json\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.NimbusTransitionTool","title":"<code>NimbusTransitionTool</code>","text":"<p>               Bases: <code>TransitionTool</code></p> <p>Nimbus <code>evm</code> Transition tool interface wrapper class.</p> Source code in <code>src/evm_transition_tool/nimbus.py</code> <pre><code>class NimbusTransitionTool(TransitionTool):\n    \"\"\"\n    Nimbus `evm` Transition tool interface wrapper class.\n    \"\"\"\n\n    default_binary = Path(\"t8n\")\n    detect_binary_pattern = compile(r\"^Nimbus-t8n\\b\")\n    version_flag: str = \"--version\"\n\n    binary: Path\n    cached_version: Optional[str] = None\n    trace: bool\n\n    def __init__(\n        self,\n        *,\n        binary: Optional[Path] = None,\n        trace: bool = False,\n    ):\n        super().__init__(binary=binary, trace=trace)\n        args = [str(self.binary), \"--help\"]\n        try:\n            result = subprocess.run(args, capture_output=True, text=True)\n        except subprocess.CalledProcessError as e:\n            raise Exception(\"evm process unexpectedly returned a non-zero status code: \" f\"{e}.\")\n        except Exception as e:\n            raise Exception(f\"Unexpected exception calling evm tool: {e}.\")\n        self.help_string = result.stdout\n\n    def version(self) -&gt; str:\n        \"\"\"\n        Gets `evm` binary version.\n        \"\"\"\n        if self.cached_version is None:\n            self.cached_version = re.sub(r\"\\x1b\\[0m\", \"\", super().version()).strip()\n\n        return self.cached_version\n\n    def is_fork_supported(self, fork: Fork) -&gt; bool:\n        \"\"\"\n        Returns True if the fork is supported by the tool.\n\n        If the fork is a transition fork, we want to check the fork it transitions to.\n        \"\"\"\n        return fork.transition_tool_name() in self.help_string\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.NimbusTransitionTool.version","title":"<code>version()</code>","text":"<p>Gets <code>evm</code> binary version.</p> Source code in <code>src/evm_transition_tool/nimbus.py</code> <pre><code>def version(self) -&gt; str:\n    \"\"\"\n    Gets `evm` binary version.\n    \"\"\"\n    if self.cached_version is None:\n        self.cached_version = re.sub(r\"\\x1b\\[0m\", \"\", super().version()).strip()\n\n    return self.cached_version\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.NimbusTransitionTool.is_fork_supported","title":"<code>is_fork_supported(fork)</code>","text":"<p>Returns True if the fork is supported by the tool.</p> <p>If the fork is a transition fork, we want to check the fork it transitions to.</p> Source code in <code>src/evm_transition_tool/nimbus.py</code> <pre><code>def is_fork_supported(self, fork: Fork) -&gt; bool:\n    \"\"\"\n    Returns True if the fork is supported by the tool.\n\n    If the fork is a transition fork, we want to check the fork it transitions to.\n    \"\"\"\n    return fork.transition_tool_name() in self.help_string\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.FixtureFormats","title":"<code>FixtureFormats</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Helper class to define fixture formats.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>class FixtureFormats(Enum):\n    \"\"\"\n    Helper class to define fixture formats.\n    \"\"\"\n\n    UNSET_TEST_FORMAT = \"unset_test_format\"\n    STATE_TEST = \"state_test\"\n    BLOCKCHAIN_TEST = \"blockchain_test\"\n    BLOCKCHAIN_TEST_HIVE = \"blockchain_test_hive\"\n    EOF_TEST = \"eof_test\"\n\n    @classmethod\n    def is_state_test(cls, format):  # noqa: D102\n        return format == cls.STATE_TEST\n\n    @classmethod\n    def is_blockchain_test(cls, format):  # noqa: D102\n        return format in (cls.BLOCKCHAIN_TEST, cls.BLOCKCHAIN_TEST_HIVE)\n\n    @classmethod\n    def is_hive_format(cls, format):  # noqa: D102\n        return format == cls.BLOCKCHAIN_TEST_HIVE\n\n    @classmethod\n    def is_standard_format(cls, format):  # noqa: D102\n        return format in (cls.STATE_TEST, cls.BLOCKCHAIN_TEST)\n\n    @classmethod\n    def is_verifiable(cls, format):  # noqa: D102\n        return format in (cls.STATE_TEST, cls.BLOCKCHAIN_TEST)\n\n    @classmethod\n    def get_format_description(cls, format):\n        \"\"\"\n        Returns a description of the fixture format.\n\n        Used to add a description to the generated pytest marks.\n        \"\"\"\n        if format == cls.UNSET_TEST_FORMAT:\n            return \"Unknown fixture format; it has not been set.\"\n        elif format == cls.STATE_TEST:\n            return \"Tests that generate a state test fixture.\"\n        elif format == cls.BLOCKCHAIN_TEST:\n            return \"Tests that generate a blockchain test fixture.\"\n        elif format == cls.BLOCKCHAIN_TEST_HIVE:\n            return \"Tests that generate a blockchain test fixture in hive format.\"\n        elif format == cls.EOF_TEST:\n            return \"Tests that generate an EOF test fixture.\"\n        raise Exception(f\"Unknown fixture format: {format}.\")\n\n    @property\n    def output_base_dir_name(self) -&gt; Path:\n        \"\"\"\n        Returns the name of the subdirectory where this type of fixture should be dumped to.\n        \"\"\"\n        return Path(self.value.replace(\"test\", \"tests\"))\n\n    @property\n    def output_file_extension(self) -&gt; str:\n        \"\"\"\n        Returns the file extension for this type of fixture.\n\n        By default, fixtures are dumped as JSON files.\n        \"\"\"\n        return \".json\"\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.FixtureFormats.get_format_description","title":"<code>get_format_description(format)</code>  <code>classmethod</code>","text":"<p>Returns a description of the fixture format.</p> <p>Used to add a description to the generated pytest marks.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@classmethod\ndef get_format_description(cls, format):\n    \"\"\"\n    Returns a description of the fixture format.\n\n    Used to add a description to the generated pytest marks.\n    \"\"\"\n    if format == cls.UNSET_TEST_FORMAT:\n        return \"Unknown fixture format; it has not been set.\"\n    elif format == cls.STATE_TEST:\n        return \"Tests that generate a state test fixture.\"\n    elif format == cls.BLOCKCHAIN_TEST:\n        return \"Tests that generate a blockchain test fixture.\"\n    elif format == cls.BLOCKCHAIN_TEST_HIVE:\n        return \"Tests that generate a blockchain test fixture in hive format.\"\n    elif format == cls.EOF_TEST:\n        return \"Tests that generate an EOF test fixture.\"\n    raise Exception(f\"Unknown fixture format: {format}.\")\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.FixtureFormats.output_base_dir_name","title":"<code>output_base_dir_name: Path</code>  <code>property</code>","text":"<p>Returns the name of the subdirectory where this type of fixture should be dumped to.</p>"},{"location":"library/evm_transition_tool/#evm_transition_tool.FixtureFormats.output_file_extension","title":"<code>output_file_extension: str</code>  <code>property</code>","text":"<p>Returns the file extension for this type of fixture.</p> <p>By default, fixtures are dumped as JSON files.</p>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool","title":"<code>TransitionTool</code>","text":"<p>Transition tool abstract base class which should be inherited by all transition tool implementations.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>class TransitionTool:\n    \"\"\"\n    Transition tool abstract base class which should be inherited by all transition tool\n    implementations.\n    \"\"\"\n\n    traces: List[List[List[Dict]]] | None = None\n\n    registered_tools: List[Type[\"TransitionTool\"]] = []\n    default_tool: Optional[Type[\"TransitionTool\"]] = None\n    default_binary: Path\n    detect_binary_pattern: Pattern\n    version_flag: str = \"-v\"\n    t8n_subcommand: Optional[str] = None\n    statetest_subcommand: Optional[str] = None\n    blocktest_subcommand: Optional[str] = None\n    cached_version: Optional[str] = None\n    t8n_use_stream: bool = True\n\n    # Abstract methods that each tool must implement\n\n    @abstractmethod\n    def __init__(\n        self,\n        *,\n        binary: Optional[Path] = None,\n        trace: bool = False,\n    ):\n        \"\"\"\n        Abstract initialization method that all subclasses must implement.\n        \"\"\"\n        if binary is None:\n            binary = self.default_binary\n        else:\n            # improve behavior of which by resolving the path: ~/relative paths don't work\n            resolved_path = Path(os.path.expanduser(binary)).resolve()\n            if resolved_path.exists():\n                binary = resolved_path\n        binary = shutil.which(binary)  # type: ignore\n        if not binary:\n            raise TransitionToolNotFoundInPath(binary=binary)\n        self.binary = Path(binary)\n        self.trace = trace\n\n    def __init_subclass__(cls):\n        \"\"\"\n        Registers all subclasses of TransitionTool as possible tools.\n        \"\"\"\n        TransitionTool.register_tool(cls)\n\n    @classmethod\n    def register_tool(cls, tool_subclass: Type[\"TransitionTool\"]):\n        \"\"\"\n        Registers a given subclass as tool option.\n        \"\"\"\n        cls.registered_tools.append(tool_subclass)\n\n    @classmethod\n    def set_default_tool(cls, tool_subclass: Type[\"TransitionTool\"]):\n        \"\"\"\n        Registers the default tool subclass.\n        \"\"\"\n        cls.default_tool = tool_subclass\n\n    @classmethod\n    def from_binary_path(cls, *, binary_path: Optional[Path], **kwargs) -&gt; \"TransitionTool\":\n        \"\"\"\n        Instantiates the appropriate TransitionTool subclass derived from the\n        tool's binary path.\n        \"\"\"\n        assert cls.default_tool is not None, \"default transition tool was never set\"\n\n        if binary_path is None:\n            return cls.default_tool(binary=binary_path, **kwargs)\n\n        resolved_path = Path(os.path.expanduser(binary_path)).resolve()\n        if resolved_path.exists():\n            binary_path = resolved_path\n        binary = shutil.which(binary_path)  # type: ignore\n\n        if not binary:\n            raise TransitionToolNotFoundInPath(binary=binary)\n\n        binary = Path(binary)\n\n        # Group the tools by version flag, so we only have to call the tool once for all the\n        # classes that share the same version flag\n        for version_flag, subclasses in groupby(\n            cls.registered_tools, key=lambda x: x.version_flag\n        ):\n            try:\n                result = subprocess.run(\n                    [binary, version_flag], stdout=subprocess.PIPE, stderr=subprocess.PIPE\n                )\n                if result.returncode != 0:\n                    raise Exception(f\"Non-zero return code: {result.returncode}\")\n\n                if result.stderr:\n                    raise Exception(f\"Tool wrote to stderr: {result.stderr.decode()}\")\n\n                binary_output = \"\"\n                if result.stdout:\n                    binary_output = result.stdout.decode().strip()\n            except Exception:\n                # If the tool doesn't support the version flag,\n                # we'll get an non-zero exit code.\n                continue\n            for subclass in subclasses:\n                if subclass.detect_binary(binary_output):\n                    return subclass(binary=binary, **kwargs)\n\n        raise UnknownTransitionTool(f\"Unknown transition tool binary: {binary_path}\")\n\n    @classmethod\n    def detect_binary(cls, binary_output: str) -&gt; bool:\n        \"\"\"\n        Returns True if the binary matches the tool\n        \"\"\"\n        assert cls.detect_binary_pattern is not None\n\n        return cls.detect_binary_pattern.match(binary_output) is not None\n\n    def version(self) -&gt; str:\n        \"\"\"\n        Return name and version of tool used to state transition\n        \"\"\"\n        if self.cached_version is None:\n            result = subprocess.run(\n                [str(self.binary), self.version_flag],\n                stdout=subprocess.PIPE,\n            )\n\n            if result.returncode != 0:\n                raise Exception(\"failed to evaluate: \" + result.stderr.decode())\n\n            self.cached_version = result.stdout.decode().strip()\n\n        return self.cached_version\n\n    @abstractmethod\n    def is_fork_supported(self, fork: Fork) -&gt; bool:\n        \"\"\"\n        Returns True if the fork is supported by the tool\n        \"\"\"\n        pass\n\n    def shutdown(self):\n        \"\"\"\n        Perform any cleanup tasks related to the tested tool.\n        \"\"\"\n        pass\n\n    def reset_traces(self):\n        \"\"\"\n        Resets the internal trace storage for a new test to begin\n        \"\"\"\n        self.traces = None\n\n    def append_traces(self, new_traces: List[List[Dict]]):\n        \"\"\"\n        Appends a list of traces of a state transition to the current list\n        \"\"\"\n        if self.traces is None:\n            self.traces = []\n        self.traces.append(new_traces)\n\n    def get_traces(self) -&gt; List[List[List[Dict]]] | None:\n        \"\"\"\n        Returns the accumulated traces\n        \"\"\"\n        return self.traces\n\n    def collect_traces(\n        self,\n        receipts: List[Any],\n        temp_dir: tempfile.TemporaryDirectory,\n        debug_output_path: str = \"\",\n    ) -&gt; None:\n        \"\"\"\n        Collect the traces from the t8n tool output and store them in the traces list.\n        \"\"\"\n        traces: List[List[Dict]] = []\n        for i, r in enumerate(receipts):\n            trace_file_name = f\"trace-{i}-{r['transactionHash']}.jsonl\"\n            if debug_output_path:\n                shutil.copy(\n                    os.path.join(temp_dir.name, trace_file_name),\n                    os.path.join(debug_output_path, trace_file_name),\n                )\n            with open(os.path.join(temp_dir.name, trace_file_name), \"r\") as trace_file:\n                tx_traces: List[Dict] = []\n                for trace_line in trace_file.readlines():\n                    tx_traces.append(json.loads(trace_line))\n                traces.append(tx_traces)\n        self.append_traces(traces)\n\n    @dataclass\n    class TransitionToolData:\n        \"\"\"\n        Transition tool files and data to pass between methods\n        \"\"\"\n\n        alloc: Any\n        txs: Any\n        env: Any\n        fork_name: str\n        chain_id: int = field(default=1)\n        reward: int = field(default=0)\n\n    def _evaluate_filesystem(\n        self,\n        *,\n        t8n_data: TransitionToolData,\n        debug_output_path: str = \"\",\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Executes a transition tool using the filesystem for its inputs and outputs.\n        \"\"\"\n        temp_dir = tempfile.TemporaryDirectory()\n        os.mkdir(os.path.join(temp_dir.name, \"input\"))\n        os.mkdir(os.path.join(temp_dir.name, \"output\"))\n\n        input_contents = {\n            \"alloc\": t8n_data.alloc,\n            \"env\": t8n_data.env,\n            \"txs\": t8n_data.txs,\n        }\n\n        input_paths = {\n            k: os.path.join(temp_dir.name, \"input\", f\"{k}.json\") for k in input_contents.keys()\n        }\n        for key, file_path in input_paths.items():\n            write_json_file(input_contents[key], file_path)\n\n        output_paths = {\n            output: os.path.join(\"output\", f\"{output}.json\") for output in [\"alloc\", \"result\"]\n        }\n        output_paths[\"body\"] = os.path.join(\"output\", \"txs.rlp\")\n\n        # Construct args for evmone-t8n binary\n        args = [\n            str(self.binary),\n            \"--state.fork\",\n            t8n_data.fork_name,\n            \"--input.alloc\",\n            input_paths[\"alloc\"],\n            \"--input.env\",\n            input_paths[\"env\"],\n            \"--input.txs\",\n            input_paths[\"txs\"],\n            \"--output.basedir\",\n            temp_dir.name,\n            \"--output.result\",\n            output_paths[\"result\"],\n            \"--output.alloc\",\n            output_paths[\"alloc\"],\n            \"--output.body\",\n            output_paths[\"body\"],\n            \"--state.reward\",\n            str(t8n_data.reward),\n            \"--state.chainid\",\n            str(t8n_data.chain_id),\n        ]\n\n        if self.trace:\n            args.append(\"--trace\")\n\n        result = subprocess.run(\n            args,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n\n        if debug_output_path:\n            if os.path.exists(debug_output_path):\n                shutil.rmtree(debug_output_path)\n            shutil.copytree(temp_dir.name, debug_output_path)\n            t8n_output_base_dir = os.path.join(debug_output_path, \"t8n.sh.out\")\n            t8n_call = \" \".join(args)\n            for file_path in input_paths.values():  # update input paths\n                t8n_call = t8n_call.replace(\n                    os.path.dirname(file_path), os.path.join(debug_output_path, \"input\")\n                )\n            t8n_call = t8n_call.replace(  # use a new output path for basedir and outputs\n                temp_dir.name,\n                t8n_output_base_dir,\n            )\n            t8n_script = textwrap.dedent(\n                f\"\"\"\\\n                #!/bin/bash\n                rm -rf {debug_output_path}/t8n.sh.out  # hard-coded to avoid surprises\n                mkdir -p {debug_output_path}/t8n.sh.out/output\n                {t8n_call}\n                \"\"\"\n            )\n            dump_files_to_directory(\n                debug_output_path,\n                {\n                    \"args.py\": args,\n                    \"returncode.txt\": result.returncode,\n                    \"stdout.txt\": result.stdout.decode(),\n                    \"stderr.txt\": result.stderr.decode(),\n                    \"t8n.sh+x\": t8n_script,\n                },\n            )\n\n        if result.returncode != 0:\n            raise Exception(\"failed to evaluate: \" + result.stderr.decode())\n\n        for key, file_path in output_paths.items():\n            output_paths[key] = os.path.join(temp_dir.name, file_path)\n\n        output_contents = {}\n        for key, file_path in output_paths.items():\n            if \"txs.rlp\" in file_path:\n                continue\n            with open(file_path, \"r+\") as file:\n                output_contents[key] = json.load(file)\n\n        if self.trace:\n            self.collect_traces(output_contents[\"result\"][\"receipts\"], temp_dir, debug_output_path)\n\n        temp_dir.cleanup()\n\n        return output_contents\n\n    def _evaluate_stream(\n        self,\n        *,\n        t8n_data: TransitionToolData,\n        debug_output_path: str = \"\",\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Executes a transition tool using stdin and stdout for its inputs and outputs.\n        \"\"\"\n        temp_dir = tempfile.TemporaryDirectory()\n        args = self.construct_args_stream(t8n_data, temp_dir)\n\n        stdin = {\n            \"alloc\": t8n_data.alloc,\n            \"txs\": t8n_data.txs,\n            \"env\": t8n_data.env,\n        }\n\n        result = subprocess.run(\n            args,\n            input=str.encode(json.dumps(stdin)),\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n\n        self.dump_debug_stream(debug_output_path, temp_dir, stdin, args, result)\n\n        if result.returncode != 0:\n            raise Exception(\"failed to evaluate: \" + result.stderr.decode())\n\n        output = json.loads(result.stdout)\n\n        if not all([x in output for x in [\"alloc\", \"result\", \"body\"]]):\n            raise Exception(\"Malformed t8n output: missing 'alloc', 'result' or 'body'.\")\n\n        if debug_output_path:\n            dump_files_to_directory(\n                debug_output_path,\n                {\n                    \"output/alloc.json\": output[\"alloc\"],\n                    \"output/result.json\": output[\"result\"],\n                    \"output/txs.rlp\": output[\"body\"],\n                },\n            )\n\n        if self.trace:\n            self.collect_traces(output[\"result\"][\"receipts\"], temp_dir, debug_output_path)\n            temp_dir.cleanup()\n\n        return output\n\n    def construct_args_stream(\n        self, t8n_data: TransitionToolData, temp_dir: tempfile.TemporaryDirectory\n    ) -&gt; List[str]:\n        \"\"\"\n        Construct arguments for t8n interaction via streams\n        \"\"\"\n        command: list[str] = [str(self.binary)]\n        if self.t8n_subcommand:\n            command.append(self.t8n_subcommand)\n\n        args = command + [\n            \"--input.alloc=stdin\",\n            \"--input.txs=stdin\",\n            \"--input.env=stdin\",\n            \"--output.result=stdout\",\n            \"--output.alloc=stdout\",\n            \"--output.body=stdout\",\n            f\"--state.fork={t8n_data.fork_name}\",\n            f\"--state.chainid={t8n_data.chain_id}\",\n            f\"--state.reward={t8n_data.reward}\",\n        ]\n\n        if self.trace:\n            args.append(\"--trace\")\n            args.append(f\"--output.basedir={temp_dir.name}\")\n        return args\n\n    def dump_debug_stream(\n        self,\n        debug_output_path: str,\n        temp_dir: tempfile.TemporaryDirectory,\n        stdin: Dict[str, Any],\n        args: List[str],\n        result: subprocess.CompletedProcess,\n    ):\n        \"\"\"\n        Export debug files if requested when interacting with t8n via streams\n        \"\"\"\n        if not debug_output_path:\n            return\n\n        t8n_call = \" \".join(args)\n        t8n_output_base_dir = os.path.join(debug_output_path, \"t8n.sh.out\")\n        if self.trace:\n            t8n_call = t8n_call.replace(temp_dir.name, t8n_output_base_dir)\n        t8n_script = textwrap.dedent(\n            f\"\"\"\\\n            #!/bin/bash\n            rm -rf {debug_output_path}/t8n.sh.out  # hard-coded to avoid surprises\n            mkdir {debug_output_path}/t8n.sh.out  # unused if tracing is not enabled\n            {t8n_call} &lt; {debug_output_path}/stdin.txt\n            \"\"\"\n        )\n        dump_files_to_directory(\n            debug_output_path,\n            {\n                \"args.py\": args,\n                \"input/alloc.json\": stdin[\"alloc\"],\n                \"input/env.json\": stdin[\"env\"],\n                \"input/txs.json\": stdin[\"txs\"],\n                \"returncode.txt\": result.returncode,\n                \"stdin.txt\": stdin,\n                \"stdout.txt\": result.stdout.decode(),\n                \"stderr.txt\": result.stderr.decode(),\n                \"t8n.sh+x\": t8n_script,\n            },\n        )\n\n    def evaluate(\n        self,\n        *,\n        alloc: Any,\n        txs: Any,\n        env: Any,\n        fork_name: str,\n        chain_id: int = 1,\n        reward: int = 0,\n        eips: Optional[List[int]] = None,\n        debug_output_path: str = \"\",\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Executes the relevant evaluate method as required by the `t8n` tool.\n\n        If a client's `t8n` tool varies from the default behavior, this method\n        can be overridden.\n        \"\"\"\n        if eips is not None:\n            fork_name = \"+\".join([fork_name] + [str(eip) for eip in eips])\n        if int(env[\"currentNumber\"], 0) == 0:\n            reward = -1\n        t8n_data = TransitionTool.TransitionToolData(\n            alloc=alloc, txs=txs, env=env, fork_name=fork_name, chain_id=chain_id, reward=reward\n        )\n\n        if self.t8n_use_stream:\n            return self._evaluate_stream(t8n_data=t8n_data, debug_output_path=debug_output_path)\n        else:\n            return self._evaluate_filesystem(\n                t8n_data=t8n_data,\n                debug_output_path=debug_output_path,\n            )\n\n    def verify_fixture(\n        self,\n        fixture_format: FixtureFormats,\n        fixture_path: Path,\n        fixture_name: Optional[str] = None,\n        debug_output_path: Optional[Path] = None,\n    ):\n        \"\"\"\n        Executes `evm [state|block]test` to verify the fixture at `fixture_path`.\n\n        Currently only implemented by geth's evm.\n        \"\"\"\n        raise NotImplementedError(\n            \"The `verify_fixture()` function is not supported by this tool. Use geth's evm tool.\"\n        )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.__init__","title":"<code>__init__(*, binary=None, trace=False)</code>  <code>abstractmethod</code>","text":"<p>Abstract initialization method that all subclasses must implement.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@abstractmethod\ndef __init__(\n    self,\n    *,\n    binary: Optional[Path] = None,\n    trace: bool = False,\n):\n    \"\"\"\n    Abstract initialization method that all subclasses must implement.\n    \"\"\"\n    if binary is None:\n        binary = self.default_binary\n    else:\n        # improve behavior of which by resolving the path: ~/relative paths don't work\n        resolved_path = Path(os.path.expanduser(binary)).resolve()\n        if resolved_path.exists():\n            binary = resolved_path\n    binary = shutil.which(binary)  # type: ignore\n    if not binary:\n        raise TransitionToolNotFoundInPath(binary=binary)\n    self.binary = Path(binary)\n    self.trace = trace\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.__init_subclass__","title":"<code>__init_subclass__()</code>","text":"<p>Registers all subclasses of TransitionTool as possible tools.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def __init_subclass__(cls):\n    \"\"\"\n    Registers all subclasses of TransitionTool as possible tools.\n    \"\"\"\n    TransitionTool.register_tool(cls)\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.register_tool","title":"<code>register_tool(tool_subclass)</code>  <code>classmethod</code>","text":"<p>Registers a given subclass as tool option.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@classmethod\ndef register_tool(cls, tool_subclass: Type[\"TransitionTool\"]):\n    \"\"\"\n    Registers a given subclass as tool option.\n    \"\"\"\n    cls.registered_tools.append(tool_subclass)\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.set_default_tool","title":"<code>set_default_tool(tool_subclass)</code>  <code>classmethod</code>","text":"<p>Registers the default tool subclass.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@classmethod\ndef set_default_tool(cls, tool_subclass: Type[\"TransitionTool\"]):\n    \"\"\"\n    Registers the default tool subclass.\n    \"\"\"\n    cls.default_tool = tool_subclass\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.from_binary_path","title":"<code>from_binary_path(*, binary_path, **kwargs)</code>  <code>classmethod</code>","text":"<p>Instantiates the appropriate TransitionTool subclass derived from the tool's binary path.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@classmethod\ndef from_binary_path(cls, *, binary_path: Optional[Path], **kwargs) -&gt; \"TransitionTool\":\n    \"\"\"\n    Instantiates the appropriate TransitionTool subclass derived from the\n    tool's binary path.\n    \"\"\"\n    assert cls.default_tool is not None, \"default transition tool was never set\"\n\n    if binary_path is None:\n        return cls.default_tool(binary=binary_path, **kwargs)\n\n    resolved_path = Path(os.path.expanduser(binary_path)).resolve()\n    if resolved_path.exists():\n        binary_path = resolved_path\n    binary = shutil.which(binary_path)  # type: ignore\n\n    if not binary:\n        raise TransitionToolNotFoundInPath(binary=binary)\n\n    binary = Path(binary)\n\n    # Group the tools by version flag, so we only have to call the tool once for all the\n    # classes that share the same version flag\n    for version_flag, subclasses in groupby(\n        cls.registered_tools, key=lambda x: x.version_flag\n    ):\n        try:\n            result = subprocess.run(\n                [binary, version_flag], stdout=subprocess.PIPE, stderr=subprocess.PIPE\n            )\n            if result.returncode != 0:\n                raise Exception(f\"Non-zero return code: {result.returncode}\")\n\n            if result.stderr:\n                raise Exception(f\"Tool wrote to stderr: {result.stderr.decode()}\")\n\n            binary_output = \"\"\n            if result.stdout:\n                binary_output = result.stdout.decode().strip()\n        except Exception:\n            # If the tool doesn't support the version flag,\n            # we'll get an non-zero exit code.\n            continue\n        for subclass in subclasses:\n            if subclass.detect_binary(binary_output):\n                return subclass(binary=binary, **kwargs)\n\n    raise UnknownTransitionTool(f\"Unknown transition tool binary: {binary_path}\")\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.detect_binary","title":"<code>detect_binary(binary_output)</code>  <code>classmethod</code>","text":"<p>Returns True if the binary matches the tool</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@classmethod\ndef detect_binary(cls, binary_output: str) -&gt; bool:\n    \"\"\"\n    Returns True if the binary matches the tool\n    \"\"\"\n    assert cls.detect_binary_pattern is not None\n\n    return cls.detect_binary_pattern.match(binary_output) is not None\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.version","title":"<code>version()</code>","text":"<p>Return name and version of tool used to state transition</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def version(self) -&gt; str:\n    \"\"\"\n    Return name and version of tool used to state transition\n    \"\"\"\n    if self.cached_version is None:\n        result = subprocess.run(\n            [str(self.binary), self.version_flag],\n            stdout=subprocess.PIPE,\n        )\n\n        if result.returncode != 0:\n            raise Exception(\"failed to evaluate: \" + result.stderr.decode())\n\n        self.cached_version = result.stdout.decode().strip()\n\n    return self.cached_version\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.is_fork_supported","title":"<code>is_fork_supported(fork)</code>  <code>abstractmethod</code>","text":"<p>Returns True if the fork is supported by the tool</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@abstractmethod\ndef is_fork_supported(self, fork: Fork) -&gt; bool:\n    \"\"\"\n    Returns True if the fork is supported by the tool\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.shutdown","title":"<code>shutdown()</code>","text":"<p>Perform any cleanup tasks related to the tested tool.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def shutdown(self):\n    \"\"\"\n    Perform any cleanup tasks related to the tested tool.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.reset_traces","title":"<code>reset_traces()</code>","text":"<p>Resets the internal trace storage for a new test to begin</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def reset_traces(self):\n    \"\"\"\n    Resets the internal trace storage for a new test to begin\n    \"\"\"\n    self.traces = None\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.append_traces","title":"<code>append_traces(new_traces)</code>","text":"<p>Appends a list of traces of a state transition to the current list</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def append_traces(self, new_traces: List[List[Dict]]):\n    \"\"\"\n    Appends a list of traces of a state transition to the current list\n    \"\"\"\n    if self.traces is None:\n        self.traces = []\n    self.traces.append(new_traces)\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.get_traces","title":"<code>get_traces()</code>","text":"<p>Returns the accumulated traces</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def get_traces(self) -&gt; List[List[List[Dict]]] | None:\n    \"\"\"\n    Returns the accumulated traces\n    \"\"\"\n    return self.traces\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.collect_traces","title":"<code>collect_traces(receipts, temp_dir, debug_output_path='')</code>","text":"<p>Collect the traces from the t8n tool output and store them in the traces list.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def collect_traces(\n    self,\n    receipts: List[Any],\n    temp_dir: tempfile.TemporaryDirectory,\n    debug_output_path: str = \"\",\n) -&gt; None:\n    \"\"\"\n    Collect the traces from the t8n tool output and store them in the traces list.\n    \"\"\"\n    traces: List[List[Dict]] = []\n    for i, r in enumerate(receipts):\n        trace_file_name = f\"trace-{i}-{r['transactionHash']}.jsonl\"\n        if debug_output_path:\n            shutil.copy(\n                os.path.join(temp_dir.name, trace_file_name),\n                os.path.join(debug_output_path, trace_file_name),\n            )\n        with open(os.path.join(temp_dir.name, trace_file_name), \"r\") as trace_file:\n            tx_traces: List[Dict] = []\n            for trace_line in trace_file.readlines():\n                tx_traces.append(json.loads(trace_line))\n            traces.append(tx_traces)\n    self.append_traces(traces)\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.TransitionToolData","title":"<code>TransitionToolData</code>  <code>dataclass</code>","text":"<p>Transition tool files and data to pass between methods</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>@dataclass\nclass TransitionToolData:\n    \"\"\"\n    Transition tool files and data to pass between methods\n    \"\"\"\n\n    alloc: Any\n    txs: Any\n    env: Any\n    fork_name: str\n    chain_id: int = field(default=1)\n    reward: int = field(default=0)\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.construct_args_stream","title":"<code>construct_args_stream(t8n_data, temp_dir)</code>","text":"<p>Construct arguments for t8n interaction via streams</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def construct_args_stream(\n    self, t8n_data: TransitionToolData, temp_dir: tempfile.TemporaryDirectory\n) -&gt; List[str]:\n    \"\"\"\n    Construct arguments for t8n interaction via streams\n    \"\"\"\n    command: list[str] = [str(self.binary)]\n    if self.t8n_subcommand:\n        command.append(self.t8n_subcommand)\n\n    args = command + [\n        \"--input.alloc=stdin\",\n        \"--input.txs=stdin\",\n        \"--input.env=stdin\",\n        \"--output.result=stdout\",\n        \"--output.alloc=stdout\",\n        \"--output.body=stdout\",\n        f\"--state.fork={t8n_data.fork_name}\",\n        f\"--state.chainid={t8n_data.chain_id}\",\n        f\"--state.reward={t8n_data.reward}\",\n    ]\n\n    if self.trace:\n        args.append(\"--trace\")\n        args.append(f\"--output.basedir={temp_dir.name}\")\n    return args\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.dump_debug_stream","title":"<code>dump_debug_stream(debug_output_path, temp_dir, stdin, args, result)</code>","text":"<p>Export debug files if requested when interacting with t8n via streams</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def dump_debug_stream(\n    self,\n    debug_output_path: str,\n    temp_dir: tempfile.TemporaryDirectory,\n    stdin: Dict[str, Any],\n    args: List[str],\n    result: subprocess.CompletedProcess,\n):\n    \"\"\"\n    Export debug files if requested when interacting with t8n via streams\n    \"\"\"\n    if not debug_output_path:\n        return\n\n    t8n_call = \" \".join(args)\n    t8n_output_base_dir = os.path.join(debug_output_path, \"t8n.sh.out\")\n    if self.trace:\n        t8n_call = t8n_call.replace(temp_dir.name, t8n_output_base_dir)\n    t8n_script = textwrap.dedent(\n        f\"\"\"\\\n        #!/bin/bash\n        rm -rf {debug_output_path}/t8n.sh.out  # hard-coded to avoid surprises\n        mkdir {debug_output_path}/t8n.sh.out  # unused if tracing is not enabled\n        {t8n_call} &lt; {debug_output_path}/stdin.txt\n        \"\"\"\n    )\n    dump_files_to_directory(\n        debug_output_path,\n        {\n            \"args.py\": args,\n            \"input/alloc.json\": stdin[\"alloc\"],\n            \"input/env.json\": stdin[\"env\"],\n            \"input/txs.json\": stdin[\"txs\"],\n            \"returncode.txt\": result.returncode,\n            \"stdin.txt\": stdin,\n            \"stdout.txt\": result.stdout.decode(),\n            \"stderr.txt\": result.stderr.decode(),\n            \"t8n.sh+x\": t8n_script,\n        },\n    )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.evaluate","title":"<code>evaluate(*, alloc, txs, env, fork_name, chain_id=1, reward=0, eips=None, debug_output_path='')</code>","text":"<p>Executes the relevant evaluate method as required by the <code>t8n</code> tool.</p> <p>If a client's <code>t8n</code> tool varies from the default behavior, this method can be overridden.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def evaluate(\n    self,\n    *,\n    alloc: Any,\n    txs: Any,\n    env: Any,\n    fork_name: str,\n    chain_id: int = 1,\n    reward: int = 0,\n    eips: Optional[List[int]] = None,\n    debug_output_path: str = \"\",\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Executes the relevant evaluate method as required by the `t8n` tool.\n\n    If a client's `t8n` tool varies from the default behavior, this method\n    can be overridden.\n    \"\"\"\n    if eips is not None:\n        fork_name = \"+\".join([fork_name] + [str(eip) for eip in eips])\n    if int(env[\"currentNumber\"], 0) == 0:\n        reward = -1\n    t8n_data = TransitionTool.TransitionToolData(\n        alloc=alloc, txs=txs, env=env, fork_name=fork_name, chain_id=chain_id, reward=reward\n    )\n\n    if self.t8n_use_stream:\n        return self._evaluate_stream(t8n_data=t8n_data, debug_output_path=debug_output_path)\n    else:\n        return self._evaluate_filesystem(\n            t8n_data=t8n_data,\n            debug_output_path=debug_output_path,\n        )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionTool.verify_fixture","title":"<code>verify_fixture(fixture_format, fixture_path, fixture_name=None, debug_output_path=None)</code>","text":"<p>Executes <code>evm [state|block]test</code> to verify the fixture at <code>fixture_path</code>.</p> <p>Currently only implemented by geth's evm.</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>def verify_fixture(\n    self,\n    fixture_format: FixtureFormats,\n    fixture_path: Path,\n    fixture_name: Optional[str] = None,\n    debug_output_path: Optional[Path] = None,\n):\n    \"\"\"\n    Executes `evm [state|block]test` to verify the fixture at `fixture_path`.\n\n    Currently only implemented by geth's evm.\n    \"\"\"\n    raise NotImplementedError(\n        \"The `verify_fixture()` function is not supported by this tool. Use geth's evm tool.\"\n    )\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.TransitionToolNotFoundInPath","title":"<code>TransitionToolNotFoundInPath</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised if the specified t8n tool is not found in the path</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>class TransitionToolNotFoundInPath(Exception):\n    \"\"\"Exception raised if the specified t8n tool is not found in the path\"\"\"\n\n    def __init__(self, message=\"The transition tool was not found in the path\", binary=None):\n        if binary:\n            message = f\"{message} ({binary})\"\n        super().__init__(message)\n</code></pre>"},{"location":"library/evm_transition_tool/#evm_transition_tool.UnknownTransitionTool","title":"<code>UnknownTransitionTool</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised if an unknown t8n is encountered</p> Source code in <code>src/evm_transition_tool/transition_tool.py</code> <pre><code>class UnknownTransitionTool(Exception):\n    \"\"\"Exception raised if an unknown t8n is encountered\"\"\"\n\n    pass\n</code></pre>"},{"location":"library/pytest_plugins/","title":"Pytest Framework and Customizations","text":"<p>Package containing pytest plugins related to test filling.</p>"},{"location":"library/pytest_plugins/forks/","title":"Forks Plugin","text":"<p>A pytest plugin to configure the forks in the test session. It parametrizes tests based on the user-provided fork range the tests' specified validity markers.</p> <p>Pytest plugin to enable fork range configuration for the test session.</p>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.pytest_addoption","title":"<code>pytest_addoption(parser)</code>","text":"<p>Adds command-line options to pytest.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def pytest_addoption(parser):\n    \"\"\"\n    Adds command-line options to pytest.\n    \"\"\"\n    fork_group = parser.getgroup(\"Forks\", \"Specify the fork range to generate fixtures for\")\n    fork_group.addoption(\n        \"--forks\",\n        action=\"store_true\",\n        dest=\"show_fork_help\",\n        default=False,\n        help=\"Display forks supported by the test framework and exit.\",\n    )\n    fork_group.addoption(\n        \"--fork\",\n        action=\"store\",\n        dest=\"single_fork\",\n        default=None,\n        help=\"Only fill tests for the specified fork.\",\n    )\n    fork_group.addoption(\n        \"--from\",\n        action=\"store\",\n        dest=\"forks_from\",\n        default=None,\n        help=\"Fill tests from and including the specified fork.\",\n    )\n    fork_group.addoption(\n        \"--until\",\n        action=\"store\",\n        dest=\"forks_until\",\n        default=None,\n        help=\"Fill tests until and including the specified fork.\",\n    )\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.ForkCovariantParameter","title":"<code>ForkCovariantParameter</code>  <code>dataclass</code>","text":"<p>Value list for a fork covariant parameter in a given fork.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>@dataclass(kw_only=True)\nclass ForkCovariantParameter:\n    \"\"\"\n    Value list for a fork covariant parameter in a given fork.\n    \"\"\"\n\n    name: str\n    values: List[Any]\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.ForkParametrizer","title":"<code>ForkParametrizer</code>  <code>dataclass</code>","text":"<p>A parametrizer for a test case that is parametrized by the fork.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>@dataclass(kw_only=True)\nclass ForkParametrizer:\n    \"\"\"\n    A parametrizer for a test case that is parametrized by the fork.\n    \"\"\"\n\n    fork: Fork\n    mark: pytest.MarkDecorator | None = None\n    fork_covariant_parameters: List[ForkCovariantParameter] = field(default_factory=list)\n\n    def get_parameter_names(self) -&gt; List[str]:\n        \"\"\"\n        Return the parameter names for the test case.\n        \"\"\"\n        return [\"fork\"] + [p.name for p in self.fork_covariant_parameters]\n\n    def get_parameter_values(self) -&gt; List[Any]:\n        \"\"\"\n        Return the parameter values for the test case.\n        \"\"\"\n        return [\n            pytest.param(*params, marks=[self.mark] if self.mark else [])\n            for params in itertools.product(\n                [self.fork],\n                *[p.values for p in self.fork_covariant_parameters],\n            )\n        ]\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.ForkParametrizer.get_parameter_names","title":"<code>get_parameter_names()</code>","text":"<p>Return the parameter names for the test case.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def get_parameter_names(self) -&gt; List[str]:\n    \"\"\"\n    Return the parameter names for the test case.\n    \"\"\"\n    return [\"fork\"] + [p.name for p in self.fork_covariant_parameters]\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.ForkParametrizer.get_parameter_values","title":"<code>get_parameter_values()</code>","text":"<p>Return the parameter values for the test case.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def get_parameter_values(self) -&gt; List[Any]:\n    \"\"\"\n    Return the parameter values for the test case.\n    \"\"\"\n    return [\n        pytest.param(*params, marks=[self.mark] if self.mark else [])\n        for params in itertools.product(\n            [self.fork],\n            *[p.values for p in self.fork_covariant_parameters],\n        )\n    ]\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.CovariantDescriptor","title":"<code>CovariantDescriptor</code>  <code>dataclass</code>","text":"<p>A descriptor for a parameter that is covariant with the fork: the parametrized values change depending on the fork.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>@dataclass(kw_only=True)\nclass CovariantDescriptor:\n    \"\"\"\n    A descriptor for a parameter that is covariant with the fork:\n    the parametrized values change depending on the fork.\n    \"\"\"\n\n    marker_name: str\n    description: str\n    fork_attribute_name: str\n    parameter_name: str\n\n    def check_enabled(self, metafunc: Metafunc) -&gt; bool:\n        \"\"\"\n        Check if the marker is enabled for the given test function.\n        \"\"\"\n        m = metafunc.definition.iter_markers(self.marker_name)\n        return m is not None and len(list(m)) &gt; 0\n\n    def add_values(self, metafunc: Metafunc, fork_parametrizer: ForkParametrizer) -&gt; None:\n        \"\"\"\n        Add the values for the covariant parameter to the parametrizer.\n        \"\"\"\n        if not self.check_enabled(metafunc=metafunc):\n            return\n        fork = fork_parametrizer.fork\n        get_fork_covariant_values: ForkAttribute = getattr(fork, self.fork_attribute_name)\n        values = get_fork_covariant_values(block_number=0, timestamp=0)\n        assert isinstance(values, list)\n        assert len(values) &gt; 0\n        fork_parametrizer.fork_covariant_parameters.append(\n            ForkCovariantParameter(name=self.parameter_name, values=values)\n        )\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.CovariantDescriptor.check_enabled","title":"<code>check_enabled(metafunc)</code>","text":"<p>Check if the marker is enabled for the given test function.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def check_enabled(self, metafunc: Metafunc) -&gt; bool:\n    \"\"\"\n    Check if the marker is enabled for the given test function.\n    \"\"\"\n    m = metafunc.definition.iter_markers(self.marker_name)\n    return m is not None and len(list(m)) &gt; 0\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.CovariantDescriptor.add_values","title":"<code>add_values(metafunc, fork_parametrizer)</code>","text":"<p>Add the values for the covariant parameter to the parametrizer.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def add_values(self, metafunc: Metafunc, fork_parametrizer: ForkParametrizer) -&gt; None:\n    \"\"\"\n    Add the values for the covariant parameter to the parametrizer.\n    \"\"\"\n    if not self.check_enabled(metafunc=metafunc):\n        return\n    fork = fork_parametrizer.fork\n    get_fork_covariant_values: ForkAttribute = getattr(fork, self.fork_attribute_name)\n    values = get_fork_covariant_values(block_number=0, timestamp=0)\n    assert isinstance(values, list)\n    assert len(values) &gt; 0\n    fork_parametrizer.fork_covariant_parameters.append(\n        ForkCovariantParameter(name=self.parameter_name, values=values)\n    )\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.get_fork_range","title":"<code>get_fork_range(forks, forks_from, forks_until)</code>","text":"<p>Get the fork range from forks_from to forks_until.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def get_fork_range(forks: List[Fork], forks_from: Fork, forks_until: Fork) -&gt; List[Fork]:\n    \"\"\"\n    Get the fork range from forks_from to forks_until.\n    \"\"\"\n    return [\n        next_fork for next_fork in forks if next_fork &lt;= forks_until and next_fork &gt;= forks_from\n    ]\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.get_last_descendant","title":"<code>get_last_descendant(forks, fork)</code>","text":"<p>Get the last descendant of a class in the inheritance hierarchy.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def get_last_descendant(forks: List[Fork], fork: Fork) -&gt; Fork:\n    \"\"\"\n    Get the last descendant of a class in the inheritance hierarchy.\n    \"\"\"\n    for next_fork in reversed(forks):\n        if next_fork &gt;= fork:\n            return next_fork\n    return fork\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.pytest_configure","title":"<code>pytest_configure(config)</code>","text":"<p>Register the plugin's custom markers and process command-line options.</p> <p>Custom marker registration: https://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html#registering-custom-markers</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>@pytest.hookimpl(tryfirst=True)\ndef pytest_configure(config):\n    \"\"\"\n    Register the plugin's custom markers and process command-line options.\n\n    Custom marker registration:\n    https://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html#registering-custom-markers\n    \"\"\"\n    config.addinivalue_line(\n        \"markers\",\n        (\n            \"valid_at_transition_to(fork): specifies a test case is valid \"\n            \"only at fork transition boundary to the specified fork\"\n        ),\n    )\n    config.addinivalue_line(\n        \"markers\",\n        \"valid_from(fork): specifies from which fork a test case is valid\",\n    )\n    config.addinivalue_line(\n        \"markers\",\n        \"valid_until(fork): specifies until which fork a test case is valid\",\n    )\n\n    for d in fork_covariant_descriptors:\n        config.addinivalue_line(\"markers\", f\"{d.marker_name}: {d.description}\")\n\n    config.forks = [fork for fork in get_forks() if not fork.ignore()]\n    config.fork_names = [fork.name() for fork in config.forks]\n\n    available_forks_help = textwrap.dedent(\n        f\"\"\"\\\n        Available forks:\n        {\", \".join(config.fork_names)}\n        \"\"\"\n    )\n    available_forks_help += textwrap.dedent(\n        f\"\"\"\\\n        Available transition forks:\n        {\", \".join([fork.name() for fork in get_transition_forks()])}\n        \"\"\"\n    )\n\n    def get_fork_option(config, option_name: str, parameter_name: str) -&gt; Fork | None:\n        \"\"\"Post-process get option to allow for external fork conditions.\"\"\"\n        option = config.getoption(option_name)\n        if not option:\n            return None\n        if option == \"Merge\":\n            option = \"Paris\"\n        for fork in get_forks():\n            if option == fork.name():\n                return fork\n        print(\n            f\"Error: Unsupported fork provided to {parameter_name}:\",\n            option,\n            \"\\n\",\n            file=sys.stderr,\n        )\n        print(available_forks_help, file=sys.stderr)\n        pytest.exit(\"Invalid command-line options.\", returncode=pytest.ExitCode.USAGE_ERROR)\n\n    single_fork = get_fork_option(config, \"single_fork\", \"--fork\")\n    forks_from = get_fork_option(config, \"forks_from\", \"--from\")\n    forks_until = get_fork_option(config, \"forks_until\", \"--until\")\n    show_fork_help = config.getoption(\"show_fork_help\")\n\n    dev_forks_help = textwrap.dedent(\n        \"To run tests for a fork under active development, it must be \"\n        \"specified explicitly via --forks-until=FORK.\\n\"\n        \"Tests are only ran for deployed mainnet forks by default, i.e., \"\n        f\"until {get_deployed_forks()[-1].name()}.\\n\"\n    )\n    if show_fork_help:\n        print(available_forks_help)\n        print(dev_forks_help)\n        pytest.exit(\"After displaying help.\", returncode=0)\n\n    if single_fork and (forks_from or forks_until):\n        print(\n            \"Error: --fork cannot be used in combination with --from or --until\", file=sys.stderr\n        )\n        pytest.exit(\"Invalid command-line options.\", returncode=pytest.ExitCode.USAGE_ERROR)\n\n    if single_fork:\n        forks_from = single_fork\n        forks_until = single_fork\n    else:\n        if not forks_from:\n            forks_from = config.forks[0]\n        if not forks_until:\n            forks_until = get_last_descendant(get_deployed_forks(), forks_from)\n\n    config.fork_range = get_fork_range(config.forks, forks_from, forks_until)\n\n    if not config.fork_range:\n        print(\n            f\"Error: --from {forks_from.name()} --until {forks_until.name()} \"\n            \"creates an empty fork range.\",\n            file=sys.stderr,\n        )\n        pytest.exit(\n            \"Command-line options produce empty fork range.\",\n            returncode=pytest.ExitCode.USAGE_ERROR,\n        )\n\n    # with --collect-only, we don't have access to these config options\n    if config.option.collectonly:\n        config.unsupported_forks = []\n        return\n\n    evm_bin = config.getoption(\"evm_bin\")\n    t8n = TransitionTool.from_binary_path(binary_path=evm_bin)\n    config.unsupported_forks = [\n        fork for fork in config.fork_range if not t8n.is_fork_supported(fork)\n    ]\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.pytest_report_header","title":"<code>pytest_report_header(config, start_path)</code>","text":"<p>A pytest hook called to obtain the report header.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>@pytest.hookimpl(trylast=True)\ndef pytest_report_header(config, start_path):\n    \"\"\"A pytest hook called to obtain the report header.\"\"\"\n    bold = \"\\033[1m\"\n    warning = \"\\033[93m\"\n    reset = \"\\033[39;49m\"\n    header = [\n        (\n            bold\n            + f\"Executing tests for: {', '.join([f.name() for f in config.fork_range])} \"\n            + reset\n        ),\n    ]\n    if config.getoption(\"forks_until\") is None:\n        header += [\n            (\n                bold + warning + \"Only executing tests with stable/deployed forks: \"\n                \"Specify an upcoming fork via --until=fork to \"\n                \"add forks under development.\" + reset\n            )\n        ]\n    return header\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.fork","title":"<code>fork(request)</code>","text":"<p>Parametrize test cases by fork.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>@pytest.fixture(autouse=True)\ndef fork(request):\n    \"\"\"\n    Parametrize test cases by fork.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.get_validity_marker_args","title":"<code>get_validity_marker_args(metafunc, validity_marker_name, test_name)</code>","text":"<p>Check and return the arguments specified to validity markers.</p> <p>Check that the validity markers:</p> <ul> <li><code>pytest.mark.valid_from</code></li> <li><code>pytest.mark.valid_until</code></li> <li><code>pytest.mark.valid_at_transition_to</code></li> </ul> <p>are applied at most once and have been provided with exactly one argument which is a valid fork name.</p> <p>Parameters:</p> Name Type Description Default <code>metafunc</code> <code>Metafunc</code> <p>Pytest's metafunc object.</p> required <code>validity_marker_name</code> <code>str</code> <p>Name of the validity marker to validate and return.</p> required <code>test_name</code> <code>str</code> <p>The name of the test being parametrized by <code>pytest_generate_tests</code>.</p> required <p>Returns:</p> Type Description <code>Fork | None</code> <p>The name of the fork specified to the validity marker.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def get_validity_marker_args(\n    metafunc: Metafunc,\n    validity_marker_name: str,\n    test_name: str,\n) -&gt; Fork | None:\n    \"\"\"Check and return the arguments specified to validity markers.\n\n    Check that the validity markers:\n\n    - `pytest.mark.valid_from`\n    - `pytest.mark.valid_until`\n    - `pytest.mark.valid_at_transition_to`\n\n    are applied at most once and have been provided with exactly one\n    argument which is a valid fork name.\n\n    Args:\n        metafunc: Pytest's metafunc object.\n        validity_marker_name: Name of the validity marker to validate\n            and return.\n        test_name: The name of the test being parametrized by\n            `pytest_generate_tests`.\n\n    Returns:\n        The name of the fork specified to the validity marker.\n    \"\"\"\n    validity_markers = [\n        marker for marker in metafunc.definition.iter_markers(validity_marker_name)\n    ]\n    if not validity_markers:\n        return None\n    if len(validity_markers) &gt; 1:\n        pytest.fail(f\"'{test_name}': Too many '{validity_marker_name}' markers applied to test. \")\n    if len(validity_markers[0].args) == 0:\n        pytest.fail(f\"'{test_name}': Missing fork argument with '{validity_marker_name}' marker. \")\n    if len(validity_markers[0].args) &gt; 1:\n        pytest.fail(\n            f\"'{test_name}': Too many arguments specified to '{validity_marker_name}' marker. \"\n        )\n    fork_name = validity_markers[0].args[0]\n\n    for fork in metafunc.config.forks:  # type: ignore\n        if fork.name() == fork_name:\n            return fork\n\n    pytest.fail(\n        f\"'{test_name}' specifies an invalid fork '{fork_name}' to the \"\n        f\"'{validity_marker_name}'. \"\n        f\"List of valid forks: {', '.join(metafunc.config.fork_names)}\"  # type: ignore\n    )\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.pytest_generate_tests","title":"<code>pytest_generate_tests(metafunc)</code>","text":"<p>Pytest hook used to dynamically generate test cases.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def pytest_generate_tests(metafunc):\n    \"\"\"\n    Pytest hook used to dynamically generate test cases.\n    \"\"\"\n    test_name = metafunc.function.__name__\n    valid_at_transition_to = get_validity_marker_args(\n        metafunc, \"valid_at_transition_to\", test_name\n    )\n    valid_from = get_validity_marker_args(metafunc, \"valid_from\", test_name)\n    valid_until = get_validity_marker_args(metafunc, \"valid_until\", test_name)\n\n    if valid_at_transition_to and valid_from:\n        pytest.fail(\n            f\"'{test_name}': \"\n            \"The markers 'valid_from' and 'valid_at_transition_to' can't be combined. \"\n        )\n    if valid_at_transition_to and valid_until:\n        pytest.fail(\n            f\"'{test_name}': \"\n            \"The markers 'valid_until' and 'valid_at_transition_to' can't be combined. \"\n        )\n\n    intersection_range = []\n\n    if valid_at_transition_to:\n        if valid_at_transition_to in metafunc.config.fork_range:\n            intersection_range = transition_fork_to(valid_at_transition_to)\n\n    else:\n        if not valid_from:\n            valid_from = metafunc.config.forks[0]\n\n        if not valid_until:\n            valid_until = get_last_descendant(metafunc.config.fork_range, valid_from)\n\n        test_fork_range = get_fork_range(metafunc.config.forks, valid_from, valid_until)\n\n        if not test_fork_range:\n            pytest.fail(\n                \"The test function's \"\n                f\"'{test_name}' fork validity markers generate \"\n                \"an empty fork range. Please check the arguments to its \"\n                f\"markers:  @pytest.mark.valid_from ({valid_from}) and \"\n                f\"@pytest.mark.valid_until ({valid_until}).\"\n            )\n\n        intersection_range = list(set(metafunc.config.fork_range) &amp; set(test_fork_range))\n        intersection_range.sort(key=metafunc.config.fork_range.index)\n\n    if \"fork\" in metafunc.fixturenames:\n        if not intersection_range:\n            if metafunc.config.getoption(\"verbose\") &gt;= 2:\n                pytest_params = [\n                    pytest.param(\n                        None,\n                        marks=[\n                            pytest.mark.skip(\n                                reason=(\n                                    f\"{test_name} is not valid for any any of forks specified on \"\n                                    \"the command-line.\"\n                                )\n                            )\n                        ],\n                    )\n                ]\n                metafunc.parametrize(\"fork\", pytest_params, scope=\"function\")\n            else:\n                # This will not be reported in the test execution output; it will be listed\n                # in the pytest collection summary at the start of the test run.\n                pytest.skip(\n                    f\"{test_name} is not valid for any any of forks specified on the command-line.\"\n                )\n        else:\n            pytest_params = [\n                (\n                    ForkParametrizer(\n                        fork=fork,\n                        mark=pytest.mark.skip(\n                            reason=(\n                                f\"Fork '{fork}' unsupported by \"\n                                f\"'{metafunc.config.getoption('evm_bin')}'.\"\n                            )\n                        ),\n                    )\n                    if fork.name() in metafunc.config.unsupported_forks\n                    else ForkParametrizer(fork=fork)\n                )\n                for fork in intersection_range\n            ]\n            add_fork_covariant_parameters(metafunc, pytest_params)\n            parametrize_fork(metafunc, pytest_params)\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.add_fork_covariant_parameters","title":"<code>add_fork_covariant_parameters(metafunc, fork_parametrizers)</code>","text":"<p>Iterate over the fork covariant descriptors and add their values to the test function.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def add_fork_covariant_parameters(\n    metafunc: Metafunc, fork_parametrizers: List[ForkParametrizer]\n) -&gt; None:\n    \"\"\"\n    Iterate over the fork covariant descriptors and add their values to the test function.\n    \"\"\"\n    for covariant_descriptor in fork_covariant_descriptors:\n        for fork_parametrizer in fork_parametrizers:\n            covariant_descriptor.add_values(metafunc=metafunc, fork_parametrizer=fork_parametrizer)\n</code></pre>"},{"location":"library/pytest_plugins/forks/#pytest_plugins.forks.forks.parametrize_fork","title":"<code>parametrize_fork(metafunc, fork_parametrizers)</code>","text":"<p>Add the fork parameters to the test function.</p> Source code in <code>src/pytest_plugins/forks/forks.py</code> <pre><code>def parametrize_fork(metafunc: Metafunc, fork_parametrizers: List[ForkParametrizer]) -&gt; None:\n    \"\"\"\n    Add the fork parameters to the test function.\n    \"\"\"\n    param_names: List[str] = []\n    param_values: List[Any] = []\n\n    for fork_parametrizer in fork_parametrizers:\n        if not param_names:\n            param_names = fork_parametrizer.get_parameter_names()\n        else:\n            assert param_names == fork_parametrizer.get_parameter_names()\n        param_values.extend(fork_parametrizer.get_parameter_values())\n    metafunc.parametrize(param_names, param_values, scope=\"function\")\n</code></pre>"},{"location":"library/pytest_plugins/navigation/","title":"Navigation","text":"<ul> <li>Overview</li> <li>Forks</li> <li>Test Filler</li> <li>Spec Version Checker</li> </ul>"},{"location":"library/pytest_plugins/spec_version_checker/","title":"Spec Version Checker Plugin","text":"<p>A pytest plugin that verifies the tested version of an EIP specification against the latest version from the ethereum/EIPs Github repository.</p> <p>A pytest plugin that checks that the spec version specified in test/filler modules matches that of ethereum/EIPs.</p>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.pytest_configure","title":"<code>pytest_configure(config)</code>","text":"<p>Register the plugin's custom markers and process command-line options.</p> <p>Custom marker registration: https://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html#registering-custom-markers</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>@pytest.hookimpl(tryfirst=True)\ndef pytest_configure(config):\n    \"\"\"\n    Register the plugin's custom markers and process command-line options.\n\n    Custom marker registration:\n    https://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html#registering-custom-markers\n    \"\"\"\n    config.addinivalue_line(\n        \"markers\",\n        \"eip_version_check: a test that tests the reference spec defined in an EIP test module.\",\n    )\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.get_ref_spec_from_module","title":"<code>get_ref_spec_from_module(module)</code>","text":"<p>Return the reference spec object defined in a module.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the module path contains \"eip\" and the module does not define a reference spec.</p> <p>Returns:</p> Name Type Description <code>spec_obj</code> <code>None | ReferenceSpec</code> <p>Return None if the module path does not contain \"eip\", i.e., the module is not required to define a reference spec, otherwise, return the ReferenceSpec object as defined by the module.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>def get_ref_spec_from_module(module: ModuleType) -&gt; None | ReferenceSpec:\n    \"\"\"\n    Return the reference spec object defined in a module.\n\n    Raises:\n        Exception: If the module path contains \"eip\" and the module\n            does not define a reference spec.\n\n    Returns:\n        spec_obj: Return None if the module path does not contain \"eip\",\n            i.e., the module is not required to define a reference spec,\n            otherwise, return the ReferenceSpec object as defined by the\n            module.\n    \"\"\"\n    if not is_test_for_an_eip(str(module.__file__)):\n        return None\n    module_dict = module.__dict__\n    parseable_ref_specs = [\n        ref_spec_type\n        for ref_spec_type in ReferenceSpecTypes\n        if ref_spec_type.parseable_from_module(module_dict)\n    ]\n    if len(parseable_ref_specs) &gt; 0:\n        module_dict = module.__dict__\n        try:\n            spec_obj = parseable_ref_specs[0].parse_from_module(module_dict)\n        except Exception as e:\n            raise Exception(f\"Error in spec_version_checker: {e} (this test is generated).\")\n    else:\n        raise Exception(\"Test doesn't define REFERENCE_SPEC_GIT_PATH and REFERENCE_SPEC_VERSION\")\n    return spec_obj\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.reference_spec","title":"<code>reference_spec(request)</code>","text":"<p>Pytest fixture that returns the reference spec defined in a module.</p> <p>See <code>get_ref_spec_from_module</code>.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"module\")\ndef reference_spec(request) -&gt; None | ReferenceSpec:\n    \"\"\"\n    Pytest fixture that returns the reference spec defined in a module.\n\n    See `get_ref_spec_from_module`.\n    \"\"\"\n    return get_ref_spec_from_module(request.module)\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.is_test_for_an_eip","title":"<code>is_test_for_an_eip(input_string)</code>","text":"<p>Return True if <code>input_string</code> contains an EIP number, i.e., eipNNNN.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>def is_test_for_an_eip(input_string: str) -&gt; bool:\n    \"\"\"\n    Return True if `input_string` contains an EIP number, i.e., eipNNNN.\n    \"\"\"\n    pattern = re.compile(r\".*eip\\d{1,4}\", re.IGNORECASE)\n    if pattern.match(input_string):\n        return True\n    return False\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.test_eip_spec_version","title":"<code>test_eip_spec_version(module)</code>","text":"<p>Test that the ReferenceSpec object as defined in the test module is not outdated when compared to the remote hash from ethereum/EIPs.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>def test_eip_spec_version(module: ModuleType):\n    \"\"\"\n    Test that the ReferenceSpec object as defined in the test module\n    is not outdated when compared to the remote hash from\n    ethereum/EIPs.\n    \"\"\"\n    ref_spec = get_ref_spec_from_module(module)\n    assert ref_spec, \"No reference spec object defined\"\n\n    message = (\n        \"The version of the spec referenced in \"\n        f\"{module} does not match that from ethereum/EIPs, \"\n        f\"tests might be outdated: Spec: {ref_spec.name()}. \"\n        f\"Referenced version: {ref_spec.known_version()}. \"\n        f\"Latest version: {ref_spec.latest_version()}. The \"\n        f\"version was retrieved from {ref_spec.api_url()}.\"\n    )\n    try:\n        is_up_to_date = not ref_spec.is_outdated()\n    except Exception as e:\n        raise Exception(\n            f\"Error in spec_version_checker: {e} (this test is generated). \"\n            f\"Reference spec URL: {ref_spec.api_url()}.\"\n        )\n\n    assert is_up_to_date, message\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.EIPSpecTestItem","title":"<code>EIPSpecTestItem</code>","text":"<p>               Bases: <code>Item</code></p> <p>Custom pytest test item to test EIP spec versions.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>class EIPSpecTestItem(Item):\n    \"\"\"\n    Custom pytest test item to test EIP spec versions.\n    \"\"\"\n\n    def __init__(self, name, parent, module):\n        super().__init__(name, parent)\n        self.module = module\n\n    @classmethod\n    def from_parent(cls, parent, module):\n        \"\"\"\n        Public constructor to define new tests.\n        https://docs.pytest.org/en/latest/reference/reference.html#pytest.nodes.Node.from_parent\n        \"\"\"\n        return super().from_parent(parent=parent, name=\"test_eip_spec_version\", module=module)\n\n    def runtest(self):\n        \"\"\"\n        Define the test to execute for this item.\n        \"\"\"\n        test_eip_spec_version(self.module)\n\n    def reportinfo(self):\n        \"\"\"\n        Get location information for this test item to use test reports.\n        \"\"\"\n        return \"spec_version_checker\", 0, f\"{self.name}\"\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.EIPSpecTestItem.from_parent","title":"<code>from_parent(parent, module)</code>  <code>classmethod</code>","text":"<p>Public constructor to define new tests. https://docs.pytest.org/en/latest/reference/reference.html#pytest.nodes.Node.from_parent</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>@classmethod\ndef from_parent(cls, parent, module):\n    \"\"\"\n    Public constructor to define new tests.\n    https://docs.pytest.org/en/latest/reference/reference.html#pytest.nodes.Node.from_parent\n    \"\"\"\n    return super().from_parent(parent=parent, name=\"test_eip_spec_version\", module=module)\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.EIPSpecTestItem.runtest","title":"<code>runtest()</code>","text":"<p>Define the test to execute for this item.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>def runtest(self):\n    \"\"\"\n    Define the test to execute for this item.\n    \"\"\"\n    test_eip_spec_version(self.module)\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.EIPSpecTestItem.reportinfo","title":"<code>reportinfo()</code>","text":"<p>Get location information for this test item to use test reports.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>def reportinfo(self):\n    \"\"\"\n    Get location information for this test item to use test reports.\n    \"\"\"\n    return \"spec_version_checker\", 0, f\"{self.name}\"\n</code></pre>"},{"location":"library/pytest_plugins/spec_version_checker/#pytest_plugins.spec_version_checker.spec_version_checker.pytest_collection_modifyitems","title":"<code>pytest_collection_modifyitems(session, config, items)</code>","text":"<p>Insert a new test EIPSpecTestItem for every test modules that contains 'eip' in its path.</p> Source code in <code>src/pytest_plugins/spec_version_checker/spec_version_checker.py</code> <pre><code>def pytest_collection_modifyitems(session, config, items):\n    \"\"\"\n    Insert a new test EIPSpecTestItem for every test modules that\n    contains 'eip' in its path.\n    \"\"\"\n    modules = set(item.parent for item in items if isinstance(item.parent, Module))\n    new_test_eip_spec_version_items = [\n        EIPSpecTestItem.from_parent(module, module.obj)\n        for module in modules\n        if is_test_for_an_eip(str(module.path))\n    ]\n    for item in new_test_eip_spec_version_items:\n        item.add_marker(\"eip_version_check\", append=True)\n    items.extend(new_test_eip_spec_version_items)\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/","title":"Test Filler Plugin","text":"<p>A pytest plugin that provides fixtures that fill tests and generate fixtures.</p> <p>Top-level pytest configuration file providing: - Command-line options, - Test-fixtures that can be used by all test cases, and that modifies pytest hooks in order to fill test specs for all tests and writes the generated fixtures to file.</p>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.default_output_directory","title":"<code>default_output_directory()</code>","text":"<p>The default directory to store the generated test fixtures. Defined as a function to allow for easier testing.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def default_output_directory() -&gt; str:\n    \"\"\"\n    The default directory to store the generated test fixtures. Defined as a\n    function to allow for easier testing.\n    \"\"\"\n    return \"./fixtures\"\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.default_html_report_filename","title":"<code>default_html_report_filename()</code>","text":"<p>The default file to store the generated HTML test report. Defined as a function to allow for easier testing.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def default_html_report_filename() -&gt; str:\n    \"\"\"\n    The default file to store the generated HTML test report. Defined as a\n    function to allow for easier testing.\n    \"\"\"\n    return \"report_fill.html\"\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_addoption","title":"<code>pytest_addoption(parser)</code>","text":"<p>Adds command-line options to pytest.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_addoption(parser):\n    \"\"\"\n    Adds command-line options to pytest.\n    \"\"\"\n    evm_group = parser.getgroup(\"evm\", \"Arguments defining evm executable behavior\")\n    evm_group.addoption(\n        \"--evm-bin\",\n        action=\"store\",\n        dest=\"evm_bin\",\n        type=Path,\n        default=None,\n        help=(\n            \"Path to an evm executable that provides `t8n`. Default: First 'evm' entry in PATH.\"\n        ),\n    )\n    evm_group.addoption(\n        \"--traces\",\n        action=\"store_true\",\n        dest=\"evm_collect_traces\",\n        default=None,\n        help=\"Collect traces of the execution information from the transition tool.\",\n    )\n    evm_group.addoption(\n        \"--verify-fixtures\",\n        action=\"store_true\",\n        dest=\"verify_fixtures\",\n        default=False,\n        help=(\n            \"Verify generated fixture JSON files using geth's evm blocktest command. \"\n            \"By default, the same evm binary as for the t8n tool is used. A different (geth) evm \"\n            \"binary may be specified via --verify-fixtures-bin, this must be specified if filling \"\n            \"with a non-geth t8n tool that does not support blocktest.\"\n        ),\n    )\n    evm_group.addoption(\n        \"--verify-fixtures-bin\",\n        action=\"store\",\n        dest=\"verify_fixtures_bin\",\n        type=Path,\n        default=None,\n        help=(\n            \"Path to an evm executable that provides the `blocktest` command. \"\n            \"Default: The first (geth) 'evm' entry in PATH.\"\n        ),\n    )\n\n    solc_group = parser.getgroup(\"solc\", \"Arguments defining the solc executable\")\n    solc_group.addoption(\n        \"--solc-bin\",\n        action=\"store\",\n        dest=\"solc_bin\",\n        default=None,\n        help=(\n            \"Path to a solc executable (for Yul source compilation). \"\n            \"Default: First 'solc' entry in PATH.\"\n        ),\n    )\n\n    test_group = parser.getgroup(\"tests\", \"Arguments defining filler location and output\")\n    test_group.addoption(\n        \"--filler-path\",\n        action=\"store\",\n        dest=\"filler_path\",\n        default=\"./tests/\",\n        type=Path,\n        help=\"Path to filler directives\",\n    )\n    test_group.addoption(\n        \"--output\",\n        action=\"store\",\n        dest=\"output\",\n        default=default_output_directory(),\n        help=(\n            \"Directory to store the generated test fixtures. Can be deleted. \"\n            f\"Default: '{default_output_directory()}'.\"\n        ),\n    )\n    test_group.addoption(\n        \"--flat-output\",\n        action=\"store_true\",\n        dest=\"flat_output\",\n        default=False,\n        help=\"Output each test case in the directory without the folder structure.\",\n    )\n    test_group.addoption(\n        \"--single-fixture-per-file\",\n        action=\"store_true\",\n        dest=\"single_fixture_per_file\",\n        default=False,\n        help=(\n            \"Don't group fixtures in JSON files by test function; write each fixture to its own \"\n            \"file. This can be used to increase the granularity of --verify-fixtures.\"\n        ),\n    )\n    test_group.addoption(\n        \"--no-html\",\n        action=\"store_true\",\n        dest=\"disable_html\",\n        default=False,\n        help=(\n            \"Don't generate an HTML test report (in the output directory). \"\n            \"The --html flag can be used to specify a different path.\"\n        ),\n    )\n\n    debug_group = parser.getgroup(\"debug\", \"Arguments defining debug behavior\")\n    debug_group.addoption(\n        \"--evm-dump-dir\",\n        \"--t8n-dump-dir\",\n        action=\"store\",\n        dest=\"base_dump_dir\",\n        default=\"\",\n        help=\"Path to dump the transition tool debug output.\",\n    )\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_configure","title":"<code>pytest_configure(config)</code>","text":"<p>Pytest hook called after command line options have been parsed and before test collection begins.</p> <p>Couple of notes: 1. Register the plugin's custom markers and process command-line options.</p> <pre><code>Custom marker registration:\nhttps://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html#registering-custom-markers\n</code></pre> <ol> <li><code>@pytest.hookimpl(tryfirst=True)</code> is applied to ensure that this hook is     called before the pytest-html plugin's pytest_configure to ensure that     it uses the modified <code>htmlpath</code> option.</li> </ol> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.hookimpl(tryfirst=True)\ndef pytest_configure(config):\n    \"\"\"\n    Pytest hook called after command line options have been parsed and before\n    test collection begins.\n\n    Couple of notes:\n    1. Register the plugin's custom markers and process command-line options.\n\n        Custom marker registration:\n        https://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html#registering-custom-markers\n\n    2. `@pytest.hookimpl(tryfirst=True)` is applied to ensure that this hook is\n        called before the pytest-html plugin's pytest_configure to ensure that\n        it uses the modified `htmlpath` option.\n    \"\"\"\n    for fixture_format in FixtureFormats:\n        config.addinivalue_line(\n            \"markers\",\n            (\n                f\"{fixture_format.name.lower()}: \"\n                f\"{FixtureFormats.get_format_description(fixture_format)}\"\n            ),\n        )\n    config.addinivalue_line(\n        \"markers\",\n        \"yul_test: a test case that compiles Yul code.\",\n    )\n    config.addinivalue_line(\n        \"markers\",\n        \"compile_yul_with(fork): Always compile Yul source using the corresponding evm version.\",\n    )\n    if config.option.collectonly:\n        return\n    if not config.getoption(\"disable_html\") and config.getoption(\"htmlpath\") is None:\n        # generate an html report by default, unless explicitly disabled\n        config.option.htmlpath = os.path.join(\n            config.getoption(\"output\"), default_html_report_filename()\n        )\n    # Instantiate the transition tool here to check that the binary path/trace option is valid.\n    # This ensures we only raise an error once, if appropriate, instead of for every test.\n    t8n = TransitionTool.from_binary_path(\n        binary_path=config.getoption(\"evm_bin\"), trace=config.getoption(\"evm_collect_traces\")\n    )\n    if (\n        isinstance(config.getoption(\"numprocesses\"), int)\n        and config.getoption(\"numprocesses\") &gt; 0\n        and \"Besu\" in str(t8n.detect_binary_pattern)\n    ):\n        pytest.exit(\n            \"The Besu t8n tool does not work well with the xdist plugin; use -n=0.\",\n            returncode=pytest.ExitCode.USAGE_ERROR,\n        )\n    config.solc_version = Yul(\"\", binary=config.getoption(\"solc_bin\")).version\n    if config.solc_version &lt; Frontier.solc_min_version():\n        pytest.exit(\n            f\"Unsupported solc version: {config.solc_version}. Minimum required version is \"\n            f\"{Frontier.solc_min_version()}\",\n            returncode=pytest.ExitCode.USAGE_ERROR,\n        )\n\n    config.stash[metadata_key][\"Versions\"] = {\n        \"t8n\": t8n.version(),\n        \"solc\": str(config.solc_version),\n    }\n    command_line_args = \"fill \" + \" \".join(config.invocation_params.args)\n    config.stash[metadata_key][\"Command-line args\"] = f\"&lt;code&gt;{command_line_args}&lt;/code&gt;\"\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_report_header","title":"<code>pytest_report_header(config, start_path)</code>","text":"<p>Add lines to pytest's console output header</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.hookimpl(trylast=True)\ndef pytest_report_header(config, start_path):\n    \"\"\"Add lines to pytest's console output header\"\"\"\n    if config.option.collectonly:\n        return\n    t8n_version = config.stash[metadata_key][\"Versions\"][\"t8n\"]\n    solc_version = config.stash[metadata_key][\"Versions\"][\"solc\"]\n    return [(f\"{t8n_version}, {solc_version}\")]\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_report_teststatus","title":"<code>pytest_report_teststatus(report, config)</code>","text":"<p>Disable test session progress report if we're writing the JSON fixtures to stdout to be read by a consume command on stdin. I.e., don't write this type of output to the console:</p> <pre><code>...x...\n</code></pre> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_report_teststatus(report, config):\n    \"\"\"\n    Disable test session progress report if we're writing the JSON fixtures to\n    stdout to be read by a consume command on stdin. I.e., don't write this\n    type of output to the console:\n\n    ```text\n    ...x...\n    ```\n    \"\"\"\n    if config.getoption(\"output\") == \"stdout\":\n        return report.outcome, \"\", report.outcome.upper()\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_metadata","title":"<code>pytest_metadata(metadata)</code>","text":"<p>Add or remove metadata to/from the pytest report.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_metadata(metadata):\n    \"\"\"\n    Add or remove metadata to/from the pytest report.\n    \"\"\"\n    metadata.pop(\"JAVA_HOME\", None)\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_html_results_table_header","title":"<code>pytest_html_results_table_header(cells)</code>","text":"<p>Customize the table headers of the HTML report table.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_html_results_table_header(cells):\n    \"\"\"\n    Customize the table headers of the HTML report table.\n    \"\"\"\n    cells.insert(3, '&lt;th class=\"sortable\" data-column-type=\"fixturePath\"&gt;JSON Fixture File&lt;/th&gt;')\n    cells.insert(4, '&lt;th class=\"sortable\" data-column-type=\"evmDumpDir\"&gt;EVM Dump Dir&lt;/th&gt;')\n    del cells[-1]  # Remove the \"Links\" column\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_html_results_table_row","title":"<code>pytest_html_results_table_row(report, cells)</code>","text":"<p>Customize the table rows of the HTML report table.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_html_results_table_row(report, cells):\n    \"\"\"\n    Customize the table rows of the HTML report table.\n    \"\"\"\n    if hasattr(report, \"user_properties\"):\n        user_props = dict(report.user_properties)\n        if (\n            report.passed\n            and \"fixture_path_absolute\" in user_props\n            and \"fixture_path_relative\" in user_props\n        ):\n            fixture_path_absolute = user_props[\"fixture_path_absolute\"]\n            fixture_path_relative = user_props[\"fixture_path_relative\"]\n            fixture_path_link = (\n                f'&lt;a href=\"{fixture_path_absolute}\" target=\"_blank\"&gt;{fixture_path_relative}&lt;/a&gt;'\n            )\n            cells.insert(3, f\"&lt;td&gt;{fixture_path_link}&lt;/td&gt;\")\n        elif report.failed:\n            cells.insert(3, \"&lt;td&gt;Fixture unavailable&lt;/td&gt;\")\n        if \"evm_dump_dir\" in user_props:\n            if user_props[\"evm_dump_dir\"] is None:\n                cells.insert(\n                    4, \"&lt;td&gt;For t8n debug info use &lt;code&gt;--evm-dump-dir=path --traces&lt;/code&gt;&lt;/td&gt;\"\n                )\n            else:\n                evm_dump_dir = user_props.get(\"evm_dump_dir\")\n                if evm_dump_dir == \"N/A\":\n                    evm_dump_entry = \"N/A\"\n                else:\n                    evm_dump_entry = f'&lt;a href=\"{evm_dump_dir}\" target=\"_blank\"&gt;{evm_dump_dir}&lt;/a&gt;'\n                cells.insert(4, f\"&lt;td&gt;{evm_dump_entry}&lt;/td&gt;\")\n    del cells[-1]  # Remove the \"Links\" column\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_runtest_makereport","title":"<code>pytest_runtest_makereport(item, call)</code>","text":"<p>This hook is called when each test is run and a report is being made.</p> <p>Make each test's fixture json path available to the test report via user_properties.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.hookimpl(hookwrapper=True)\ndef pytest_runtest_makereport(item, call):\n    \"\"\"\n    This hook is called when each test is run and a report is being made.\n\n    Make each test's fixture json path available to the test report via\n    user_properties.\n    \"\"\"\n    outcome = yield\n    report = outcome.get_result()\n\n    if call.when == \"call\":\n        if hasattr(item.config, \"fixture_path_absolute\") and hasattr(\n            item.config, \"fixture_path_relative\"\n        ):\n            report.user_properties.append(\n                (\"fixture_path_absolute\", item.config.fixture_path_absolute)\n            )\n            report.user_properties.append(\n                (\"fixture_path_relative\", item.config.fixture_path_relative)\n            )\n        if hasattr(item.config, \"evm_dump_dir\") and hasattr(item.config, \"fixture_format\"):\n            if item.config.fixture_format in [\n                \"state_test\",\n                \"blockchain_test\",\n                \"blockchain_test_hive\",\n            ]:\n                report.user_properties.append((\"evm_dump_dir\", item.config.evm_dump_dir))\n            else:\n                report.user_properties.append((\"evm_dump_dir\", \"N/A\"))  # not yet for EOF\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_html_report_title","title":"<code>pytest_html_report_title(report)</code>","text":"<p>Set the HTML report title (pytest-html plugin).</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_html_report_title(report):\n    \"\"\"\n    Set the HTML report title (pytest-html plugin).\n    \"\"\"\n    report.title = \"Fill Test Report\"\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.evm_bin","title":"<code>evm_bin(request)</code>","text":"<p>Returns the configured evm tool binary path used to run t8n.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"session\")\ndef evm_bin(request) -&gt; Path:\n    \"\"\"\n    Returns the configured evm tool binary path used to run t8n.\n    \"\"\"\n    return request.config.getoption(\"evm_bin\")\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.verify_fixtures_bin","title":"<code>verify_fixtures_bin(request)</code>","text":"<p>Returns the configured evm tool binary path used to run statetest or blocktest.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"session\")\ndef verify_fixtures_bin(request) -&gt; Path:\n    \"\"\"\n    Returns the configured evm tool binary path used to run statetest or\n    blocktest.\n    \"\"\"\n    return request.config.getoption(\"verify_fixtures_bin\")\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.solc_bin","title":"<code>solc_bin(request)</code>","text":"<p>Returns the configured solc binary path.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"session\")\ndef solc_bin(request):\n    \"\"\"\n    Returns the configured solc binary path.\n    \"\"\"\n    return request.config.getoption(\"solc_bin\")\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.t8n","title":"<code>t8n(request, evm_bin)</code>","text":"<p>Returns the configured transition tool.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"session\")\ndef t8n(request, evm_bin: Path) -&gt; Generator[TransitionTool, None, None]:\n    \"\"\"\n    Returns the configured transition tool.\n    \"\"\"\n    t8n = TransitionTool.from_binary_path(\n        binary_path=evm_bin, trace=request.config.getoption(\"evm_collect_traces\")\n    )\n    yield t8n\n    t8n.shutdown()\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.do_fixture_verification","title":"<code>do_fixture_verification(request, t8n)</code>","text":"<p>Returns True if evm statetest or evm blocktest should be ran on the generated fixture JSON files.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(scope=\"session\")\ndef do_fixture_verification(request, t8n) -&gt; bool:\n    \"\"\"\n    Returns True if evm statetest or evm blocktest should be ran on the\n    generated fixture JSON files.\n    \"\"\"\n    do_fixture_verification = False\n    if request.config.getoption(\"verify_fixtures_bin\"):\n        do_fixture_verification = True\n    if request.config.getoption(\"verify_fixtures\"):\n        do_fixture_verification = True\n    return do_fixture_verification\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.evm_fixture_verification","title":"<code>evm_fixture_verification(request, do_fixture_verification, evm_bin, verify_fixtures_bin)</code>","text":"<p>Returns the configured evm binary for executing statetest and blocktest commands used to verify generated JSON fixtures.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"session\")\ndef evm_fixture_verification(\n    request, do_fixture_verification: bool, evm_bin: Path, verify_fixtures_bin: Path\n) -&gt; Generator[Optional[TransitionTool], None, None]:\n    \"\"\"\n    Returns the configured evm binary for executing statetest and blocktest\n    commands used to verify generated JSON fixtures.\n    \"\"\"\n    if not do_fixture_verification:\n        yield None\n        return\n    if not verify_fixtures_bin and evm_bin:\n        verify_fixtures_bin = evm_bin\n    evm_fixture_verification = TransitionTool.from_binary_path(binary_path=verify_fixtures_bin)\n    if not evm_fixture_verification.blocktest_subcommand:\n        pytest.exit(\n            \"Only geth's evm tool is supported to verify fixtures: \"\n            \"Either remove --verify-fixtures or set --verify-fixtures-bin to a Geth evm binary.\",\n            returncode=pytest.ExitCode.USAGE_ERROR,\n        )\n    yield evm_fixture_verification\n    evm_fixture_verification.shutdown()\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.base_dump_dir","title":"<code>base_dump_dir(request)</code>","text":"<p>The base directory to dump the evm debug output.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(scope=\"session\")\ndef base_dump_dir(request) -&gt; Optional[Path]:\n    \"\"\"\n    The base directory to dump the evm debug output.\n    \"\"\"\n    base_dump_dir_str = request.config.getoption(\"base_dump_dir\")\n    if base_dump_dir_str:\n        return Path(base_dump_dir_str)\n    return None\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.dump_dir_parameter_level","title":"<code>dump_dir_parameter_level(request, base_dump_dir, filler_path)</code>","text":"<p>The directory to dump evm transition tool debug output on a test parameter level.</p> <p>Example with --evm-dump-dir=/tmp/evm: -&gt; /tmp/evm/shanghai__eip3855_push0__test_push0__test_push0_key_sstore/fork_shanghai/</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef dump_dir_parameter_level(\n    request, base_dump_dir: Optional[Path], filler_path: Path\n) -&gt; Optional[Path]:\n    \"\"\"\n    The directory to dump evm transition tool debug output on a test parameter\n    level.\n\n    Example with --evm-dump-dir=/tmp/evm:\n    -&gt; /tmp/evm/shanghai__eip3855_push0__test_push0__test_push0_key_sstore/fork_shanghai/\n    \"\"\"\n    evm_dump_dir = node_to_test_info(request.node).get_dump_dir_path(\n        base_dump_dir,\n        filler_path,\n        level=\"test_parameter\",\n    )\n    # NOTE: Use str for compatibility with pytest-dist\n    if evm_dump_dir:\n        request.node.config.evm_dump_dir = str(evm_dump_dir)\n    else:\n        request.node.config.evm_dump_dir = None\n    return evm_dump_dir\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.get_fixture_collection_scope","title":"<code>get_fixture_collection_scope(fixture_name, config)</code>","text":"<p>Return the appropriate scope to write fixture JSON files.</p> <p>See: https://docs.pytest.org/en/stable/how-to/fixtures.html#dynamic-scope</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def get_fixture_collection_scope(fixture_name, config):\n    \"\"\"\n    Return the appropriate scope to write fixture JSON files.\n\n    See: https://docs.pytest.org/en/stable/how-to/fixtures.html#dynamic-scope\n    \"\"\"\n    if config.getoption(\"output\") == \"stdout\":\n        return \"session\"\n    if config.getoption(\"single_fixture_per_file\"):\n        return \"function\"\n    return \"module\"\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.fixture_collector","title":"<code>fixture_collector(request, do_fixture_verification, evm_fixture_verification, filler_path, base_dump_dir)</code>","text":"<p>Returns the configured fixture collector instance used for all tests in one test module.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(scope=get_fixture_collection_scope)\ndef fixture_collector(\n    request,\n    do_fixture_verification: bool,\n    evm_fixture_verification: TransitionTool,\n    filler_path: Path,\n    base_dump_dir: Optional[Path],\n):\n    \"\"\"\n    Returns the configured fixture collector instance used for all tests\n    in one test module.\n    \"\"\"\n    fixture_collector = FixtureCollector(\n        output_dir=request.config.getoption(\"output\"),\n        flat_output=request.config.getoption(\"flat_output\"),\n        single_fixture_per_file=request.config.getoption(\"single_fixture_per_file\"),\n        filler_path=filler_path,\n        base_dump_dir=base_dump_dir,\n    )\n    yield fixture_collector\n    fixture_collector.dump_fixtures()\n    if do_fixture_verification:\n        fixture_collector.verify_fixture_files(evm_fixture_verification)\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.filler_path","title":"<code>filler_path(request)</code>","text":"<p>Returns the directory containing the tests to execute.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True, scope=\"session\")\ndef filler_path(request) -&gt; Path:\n    \"\"\"\n    Returns the directory containing the tests to execute.\n    \"\"\"\n    return request.config.getoption(\"filler_path\")\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.eips","title":"<code>eips()</code>","text":"<p>A fixture specifying that, by default, no EIPs should be activated for tests.</p> <p>This fixture (function) may be redefined in test filler modules in order to overwrite this default and return a list of integers specifying which EIPs should be activated for the tests in scope.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(autouse=True)\ndef eips():\n    \"\"\"\n    A fixture specifying that, by default, no EIPs should be activated for\n    tests.\n\n    This fixture (function) may be redefined in test filler modules in order\n    to overwrite this default and return a list of integers specifying which\n    EIPs should be activated for the tests in scope.\n    \"\"\"\n    return []\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.yul","title":"<code>yul(fork, request)</code>","text":"<p>A fixture that allows contract code to be defined with Yul code.</p> <p>This fixture defines a class that wraps the ::ethereum_test_tools.Yul class so that upon instantiation within the test case, it provides the test case's current fork parameter. The forks is then available for use in solc's arguments for the Yul code compilation.</p> <p>Test cases can override the default value by specifying a fixed version with the @pytest.mark.compile_yul_with(FORK) marker.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture\ndef yul(fork: Fork, request):\n    \"\"\"\n    A fixture that allows contract code to be defined with Yul code.\n\n    This fixture defines a class that wraps the ::ethereum_test_tools.Yul\n    class so that upon instantiation within the test case, it provides the\n    test case's current fork parameter. The forks is then available for use\n    in solc's arguments for the Yul code compilation.\n\n    Test cases can override the default value by specifying a fixed version\n    with the @pytest.mark.compile_yul_with(FORK) marker.\n    \"\"\"\n    solc_target_fork: Fork | None\n    marker = request.node.get_closest_marker(\"compile_yul_with\")\n    if marker:\n        if not marker.args[0]:\n            pytest.fail(\n                f\"{request.node.name}: Expected one argument in 'compile_yul_with' marker.\"\n            )\n        for fork in request.config.forks:\n            if fork.name() == marker.args[0]:\n                solc_target_fork = fork\n                break\n        else:\n            pytest.fail(f\"{request.node.name}: Fork {marker.args[0]} not found in forks list.\")\n        assert solc_target_fork in get_forks_with_solc_support(request.config.solc_version)\n    else:\n        solc_target_fork = get_closest_fork_with_solc_support(fork, request.config.solc_version)\n        assert solc_target_fork is not None, \"No fork supports provided solc version.\"\n        if solc_target_fork != fork and request.config.getoption(\"verbose\") &gt;= 1:\n            warnings.warn(f\"Compiling Yul for {solc_target_fork.name()}, not {fork.name()}.\")\n\n    class YulWrapper(Yul):\n        def __init__(self, *args, **kwargs):\n            super(YulWrapper, self).__init__(*args, **kwargs, fork=solc_target_fork)\n\n    return YulWrapper\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.node_to_test_info","title":"<code>node_to_test_info(node)</code>","text":"<p>Returns the test info of the current node item.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def node_to_test_info(node) -&gt; TestInfo:\n    \"\"\"\n    Returns the test info of the current node item.\n    \"\"\"\n    return TestInfo(\n        name=node.name,\n        id=node.nodeid,\n        original_name=node.originalname,\n        path=Path(node.path),\n    )\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.fixture_source_url","title":"<code>fixture_source_url(request)</code>","text":"<p>Returns the URL to the fixture source.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef fixture_source_url(request):\n    \"\"\"\n    Returns the URL to the fixture source.\n    \"\"\"\n    function_line_number = request.function.__code__.co_firstlineno\n    module_relative_path = os.path.relpath(request.module.__file__)\n    hash_or_tag = get_current_commit_hash_or_tag()\n    github_url = generate_github_url(\n        module_relative_path, branch_or_commit_or_tag=hash_or_tag, line_number=function_line_number\n    )\n    return github_url\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.fixture_description","title":"<code>fixture_description(request)</code>","text":"<p>Fixture to extract and combine docstrings from the test class and the test function.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef fixture_description(request):\n    \"\"\"Fixture to extract and combine docstrings from the test class and the test function.\"\"\"\n    description_unavailable = (\n        \"No description available - add a docstring to the python test class or function.\"\n    )\n    test_class_doc = f\"Test class documentation:\\n{request.cls.__doc__}\" if request.cls else \"\"\n    test_function_doc = (\n        f\"Test function documentation:\\n{request.function.__doc__}\"\n        if request.function.__doc__\n        else \"\"\n    )\n    if not test_class_doc and not test_function_doc:\n        return description_unavailable\n    combined_docstring = f\"{test_class_doc}\\n\\n{test_function_doc}\".strip()\n    return combined_docstring\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.base_test_parametrizer","title":"<code>base_test_parametrizer(cls)</code>","text":"<p>Generates a pytest.fixture for a given BaseTest subclass.</p> <p>Implementation detail: All spec fixtures must be scoped on test function level to avoid leakage between tests.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def base_test_parametrizer(cls: Type[BaseTest]):\n    \"\"\"\n    Generates a pytest.fixture for a given BaseTest subclass.\n\n    Implementation detail: All spec fixtures must be scoped on test function level to avoid\n    leakage between tests.\n    \"\"\"\n\n    @pytest.fixture(\n        scope=\"function\",\n        name=cls.pytest_parameter_name(),\n    )\n    def base_test_parametrizer_func(\n        request,\n        t8n,\n        fork,\n        reference_spec,\n        eips,\n        dump_dir_parameter_level,\n        fixture_collector,\n        fixture_description,\n        fixture_source_url,\n    ):\n        \"\"\"\n        Fixture used to instantiate an auto-fillable BaseTest object from within\n        a test function.\n\n        Every test that defines a test filler must explicitly specify its parameter name\n        (see `pytest_parameter_name` in each implementation of BaseTest) in its function\n        arguments.\n\n        When parametrize, indirect must be used along with the fixture format as value.\n        \"\"\"\n        fixture_format = request.param\n        assert isinstance(fixture_format, FixtureFormats)\n\n        class BaseTestWrapper(cls):\n            def __init__(self, *args, **kwargs):\n                kwargs[\"t8n_dump_dir\"] = dump_dir_parameter_level\n                super(BaseTestWrapper, self).__init__(*args, **kwargs)\n                fixture = self.generate(\n                    t8n=t8n,\n                    fork=fork,\n                    fixture_format=fixture_format,\n                    eips=eips,\n                )\n                fixture.fill_info(\n                    t8n,\n                    fixture_description,\n                    fixture_source_url=fixture_source_url,\n                    ref_spec=reference_spec,\n                )\n\n                fixture_path = fixture_collector.add_fixture(\n                    node_to_test_info(request.node),\n                    fixture,\n                )\n\n                # NOTE: Use str for compatibility with pytest-dist\n                request.node.config.fixture_path_absolute = str(fixture_path.absolute())\n                request.node.config.fixture_path_relative = str(\n                    fixture_path.relative_to(request.config.getoption(\"output\"))\n                )\n                request.node.config.fixture_format = fixture_format.value\n\n        return BaseTestWrapper\n\n    return base_test_parametrizer_func\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_generate_tests","title":"<code>pytest_generate_tests(metafunc)</code>","text":"<p>Pytest hook used to dynamically generate test cases for each fixture format a given test spec supports.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_generate_tests(metafunc):\n    \"\"\"\n    Pytest hook used to dynamically generate test cases for each fixture format a given\n    test spec supports.\n    \"\"\"\n    for test_type in SPEC_TYPES:\n        if test_type.pytest_parameter_name() in metafunc.fixturenames:\n            metafunc.parametrize(\n                [test_type.pytest_parameter_name()],\n                [\n                    pytest.param(\n                        fixture_format,\n                        id=fixture_format.name.lower(),\n                        marks=[getattr(pytest.mark, fixture_format.name.lower())],\n                    )\n                    for fixture_format in test_type.supported_fixture_formats\n                ],\n                scope=\"function\",\n                indirect=True,\n            )\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_collection_modifyitems","title":"<code>pytest_collection_modifyitems(config, items)</code>","text":"<p>Remove pre-Paris tests parametrized to generate hive type fixtures; these can't be used in the Hive Pyspec Simulator.</p> <p>This can't be handled in this plugins pytest_generate_tests() as the fork parametrization occurs in the forks plugin.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_collection_modifyitems(config, items):\n    \"\"\"\n    Remove pre-Paris tests parametrized to generate hive type fixtures; these\n    can't be used in the Hive Pyspec Simulator.\n\n    This can't be handled in this plugins pytest_generate_tests() as the fork\n    parametrization occurs in the forks plugin.\n    \"\"\"\n    for item in items[:]:  # use a copy of the list, as we'll be modifying it\n        if isinstance(item, EIPSpecTestItem):\n            continue\n        if \"fork\" not in item.callspec.params or item.callspec.params[\"fork\"] is None:\n            items.remove(item)\n            continue\n        if item.callspec.params[\"fork\"] &lt; Paris:\n            # Even though the `state_test` test spec does not produce a hive STATE_TEST, it does\n            # produce a BLOCKCHAIN_TEST_HIVE, so we need to remove it here.\n            # TODO: Ideally, the logic could be contained in the `FixtureFormat` class, we create\n            # a `fork_supported` method that returns True if the fork is supported.\n            if (\"state_test\" in item.callspec.params) and item.callspec.params[\n                \"state_test\"\n            ].name.endswith(\"HIVE\"):\n                items.remove(item)\n            if (\"blockchain_test\" in item.callspec.params) and item.callspec.params[\n                \"blockchain_test\"\n            ].name.endswith(\"HIVE\"):\n                items.remove(item)\n        if \"yul\" in item.fixturenames:\n            item.add_marker(pytest.mark.yul_test)\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_make_parametrize_id","title":"<code>pytest_make_parametrize_id(config, val, argname)</code>","text":"<p>Pytest hook called when generating test ids. We use this to generate more readable test ids for the generated tests.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_make_parametrize_id(config, val, argname):\n    \"\"\"\n    Pytest hook called when generating test ids. We use this to generate\n    more readable test ids for the generated tests.\n    \"\"\"\n    return f\"{argname}_{val}\"\n</code></pre>"},{"location":"library/pytest_plugins/test_filler/#pytest_plugins.test_filler.test_filler.pytest_runtest_call","title":"<code>pytest_runtest_call(item)</code>","text":"<p>Pytest hook called in the context of test execution.</p> Source code in <code>src/pytest_plugins/test_filler/test_filler.py</code> <pre><code>def pytest_runtest_call(item):\n    \"\"\"\n    Pytest hook called in the context of test execution.\n    \"\"\"\n    if isinstance(item, EIPSpecTestItem):\n        return\n\n    class InvalidFiller(Exception):\n        def __init__(self, message):\n            super().__init__(message)\n\n    if \"state_test\" in item.fixturenames and \"blockchain_test\" in item.fixturenames:\n        raise InvalidFiller(\n            \"A filler should only implement either a state test or \" \"a blockchain test; not both.\"\n        )\n\n    # Check that the test defines either test type as parameter.\n    if not any([i for i in item.funcargs if i in SPEC_TYPES_PARAMETERS]):\n        pytest.fail(\n            \"Test must define either one of the following parameters to \"\n            + \"properly generate a test: \"\n            + \", \".join(SPEC_TYPES_PARAMETERS)\n        )\n</code></pre>"},{"location":"tests/","title":"Test case reference","text":"<p>Documentation for <code>tests</code>.</p> <p>Generate fixtures for these test cases  for all forks deployed to mainnet with:</p> <pre><code>fill -v tests\n</code></pre> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client test cases organized by fork. Each directory underneath <code>tests/</code> contains test cases corresponding to the fork in which the functionality-under-test was introduced.</p>"},{"location":"tests/berlin/","title":"Berlin","text":"<p>Documentation for <code>tests/berlin</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/berlin\n</code></pre> <p>Test cases for EVM functionality introduced in Berlin.</p>"},{"location":"tests/berlin/eip2930_access_list/","title":"EIP-2930 Access List","text":"<p>Documentation for <code>tests/berlin/eip2930_access_list</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/berlin/eip2930_access_list\n</code></pre> Tests EIP-2930: Optional access lists <p>Test cases for EIP-2930: Optional access lists.</p>"},{"location":"tests/berlin/eip2930_access_list/test_acl/","title":"Test ACL","text":"<p>Documentation for <code>tests/berlin/eip2930_access_list/test_acl.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/berlin/eip2930_access_list/test_acl.py\n</code></pre> <p>Test ACL Transaction Source Code Examples</p>"},{"location":"tests/berlin/eip2930_access_list/test_acl/#tests.berlin.eip2930_access_list.test_acl.test_access_list","title":"<code>test_access_list(state_test)</code>","text":"<p>Test type 1 transaction.</p> Source code in <code>tests/berlin/eip2930_access_list/test_acl.py</code> <pre><code>@pytest.mark.valid_from(\"Berlin\")\ndef test_access_list(state_test: StateTestFiller):\n    \"\"\"\n    Test type 1 transaction.\n    \"\"\"\n    env = Environment()\n\n    pre = {\n        \"0x000000000000000000000000000000000000aaaa\": Account(\n            balance=0x03,\n            code=Op.PC + Op.SLOAD + Op.POP + Op.PC + Op.SLOAD,\n            nonce=1,\n        ),\n        \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\": Account(\n            balance=0x300000,\n            nonce=0,\n        ),\n    }\n\n    tx = Transaction(\n        ty=1,\n        chain_id=0x01,\n        nonce=0,\n        to=\"0x000000000000000000000000000000000000aaaa\",\n        value=1,\n        gas_limit=323328,\n        gas_price=7,\n        access_list=[\n            AccessList(\n                address=\"0x0000000000000000000000000000000000000000\",\n                storage_keys=[\n                    \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n                ],\n            )\n        ],\n        secret_key=\"0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\",\n        protected=True,\n    )\n\n    post = {\n        \"0x000000000000000000000000000000000000aaaa\": Account(\n            code=\"0x5854505854\",\n            balance=4,\n            nonce=1,\n        ),\n        \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\": Account(\n            balance=0x2CD931,\n            nonce=1,\n        ),\n    }\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/berlin/eip2930_access_list/test_acl/index/test_cases/","title":"Test ACL - Test Cases","text":"<p>Test cases generated from <code>tests/berlin/eip2930_access_list/test_acl.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/berlin/eip2930_access_list/test_acl.py</code>:</p> <pre><code>test_access_list[fork_Berlin-blockchain_test]\ntest_access_list[fork_Berlin-state_test]\ntest_access_list[fork_London-blockchain_test]\ntest_access_list[fork_London-state_test]\ntest_access_list[fork_Paris-blockchain_test]\ntest_access_list[fork_Paris-blockchain_test_hive]\ntest_access_list[fork_Paris-state_test]\ntest_access_list[fork_Shanghai-blockchain_test]\ntest_access_list[fork_Shanghai-blockchain_test_hive]\ntest_access_list[fork_Shanghai-state_test]\ntest_access_list[fork_Cancun-blockchain_test]\ntest_access_list[fork_Cancun-blockchain_test_hive]\ntest_access_list[fork_Cancun-state_test]\ntest_access_list[fork_Prague-blockchain_test]\ntest_access_list[fork_Prague-blockchain_test_hive]\ntest_access_list[fork_Prague-state_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/berlin/eip2930_access_list/test_acl.py\n</code></pre>"},{"location":"tests/byzantium/","title":"Byzantium","text":"<p>Documentation for <code>tests/byzantium</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/byzantium\n</code></pre> <p>Test cases for EVM functionality introduced in Byzantium.</p>"},{"location":"tests/byzantium/eip198_modexp_precompile/","title":"EIP-198 Modexp Precompile","text":"<p>Documentation for <code>tests/byzantium/eip198_modexp_precompile</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/byzantium/eip198_modexp_precompile\n</code></pre> <p>Test for precompiles introduced in Byzantium.</p>"},{"location":"tests/byzantium/eip198_modexp_precompile/test_modexp/","title":"Test Modexp","text":"<p>Documentation for <code>tests/byzantium/eip198_modexp_precompile/test_modexp.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/byzantium/eip198_modexp_precompile/test_modexp.py\n</code></pre> Test EIP-198: MODEXP Precompile <p>Tests the MODEXP precompile, located at address 0x0000..0005. Test cases from the EIP are labelled with <code>EIP-198-caseX</code> in the test id.</p>"},{"location":"tests/byzantium/eip198_modexp_precompile/test_modexp/#tests.byzantium.eip198_modexp_precompile.test_modexp.test_modexp","title":"<code>test_modexp(state_test, input, output)</code>","text":"<p>Test the MODEXP precompile</p> Source code in <code>tests/byzantium/eip198_modexp_precompile/test_modexp.py</code> <pre><code>@pytest.mark.valid_from(\"Byzantium\")\n@pytest.mark.parametrize(\n    [\"input\", \"output\"],\n    [\n        (\n            ModExpInput(base=\"\", exponent=\"\", modulus=\"02\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x01\"),\n        ),\n        (\n            ModExpInput(base=\"\", exponent=\"\", modulus=\"0002\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x0001\"),\n        ),\n        (\n            ModExpInput(base=\"00\", exponent=\"00\", modulus=\"02\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x01\"),\n        ),\n        (\n            ModExpInput(base=\"\", exponent=\"01\", modulus=\"02\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x00\"),\n        ),\n        (\n            ModExpInput(base=\"01\", exponent=\"01\", modulus=\"02\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x01\"),\n        ),\n        (\n            ModExpInput(base=\"02\", exponent=\"01\", modulus=\"03\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x02\"),\n        ),\n        (\n            ModExpInput(base=\"02\", exponent=\"02\", modulus=\"05\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x04\"),\n        ),\n        (\n            ModExpInput(base=\"\", exponent=\"\", modulus=\"\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x\"),\n        ),\n        (\n            ModExpInput(base=\"\", exponent=\"\", modulus=\"00\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x00\"),\n        ),\n        (\n            ModExpInput(base=\"\", exponent=\"\", modulus=\"01\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x00\"),\n        ),\n        (\n            ModExpInput(base=\"\", exponent=\"\", modulus=\"0001\"),\n            ExpectedOutput(call_return_code=\"0x01\", returned_data=\"0x0000\"),\n        ),\n        # Test cases from EIP 198.\n        pytest.param(\n            ModExpInput(\n                base=\"03\",\n                exponent=\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e\",\n                modulus=\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\",\n            ),\n            ExpectedOutput(\n                call_return_code=\"0x01\",\n                returned_data=\"0000000000000000000000000000000000000000000000000000000000000001\",\n            ),\n            id=\"EIP-198-case1\",\n        ),\n        pytest.param(\n            ModExpInput(\n                base=\"\",\n                exponent=\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e\",\n                modulus=\"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\",\n            ),\n            ExpectedOutput(\n                call_return_code=\"0x01\",\n                returned_data=\"0000000000000000000000000000000000000000000000000000000000000000\",\n            ),\n            id=\"EIP-198-case2\",\n        ),\n        pytest.param(  # Note: This is the only test case which goes out-of-gas.\n            ModExpRawInput(\n                raw_input=\"0000000000000000000000000000000000000000000000000000000000000000\"\n                \"0000000000000000000000000000000000000000000000000000000000000020\"\n                \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n                \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\"\n                \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\"\n            ),\n            ExpectedOutput(\n                call_return_code=\"0x00\",\n                returned_data=\"0000000000000000000000000000000000000000000000000000000000000000\",\n            ),\n            id=\"EIP-198-case3-raw-input-out-of-gas\",\n        ),\n        pytest.param(\n            ModExpInput(\n                base=\"03\",\n                exponent=\"ffff\",\n                modulus=\"8000000000000000000000000000000000000000000000000000000000000000\",\n                extra_data=\"07\",\n            ),\n            ExpectedOutput(\n                call_return_code=\"0x01\",\n                returned_data=\"0x3b01b01ac41f2d6e917c6d6a221ce793802469026d9ab7578fa2e79e4da6aaab\",\n            ),\n            id=\"EIP-198-case4-extra-data_07\",\n        ),\n        pytest.param(\n            ModExpRawInput(\n                raw_input=\"0000000000000000000000000000000000000000000000000000000000000001\"\n                \"0000000000000000000000000000000000000000000000000000000000000002\"\n                \"0000000000000000000000000000000000000000000000000000000000000020\"\n                \"03\"\n                \"ffff\"\n                \"80\"\n            ),\n            ExpectedOutput(\n                call_return_code=\"0x01\",\n                returned_data=\"0x3b01b01ac41f2d6e917c6d6a221ce793802469026d9ab7578fa2e79e4da6aaab\",\n            ),\n            id=\"EIP-198-case5-raw-input\",\n        ),\n    ],\n    ids=lambda param: param.__repr__(),  # only required to remove parameter names (input/output)\n)\ndef test_modexp(state_test: StateTestFiller, input: ModExpInput, output: ExpectedOutput):\n    \"\"\"\n    Test the MODEXP precompile\n    \"\"\"\n    env = Environment()\n    pre = {TestAddress: Account(balance=1000000000000000000000)}\n\n    account = Address(0x100)\n\n    pre[account] = Account(\n        code=(\n            # Store all CALLDATA into memory (offset 0)\n            Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            # Store the returned CALL status (success = 1, fail = 0) into slot 0:\n            + Op.SSTORE(\n                0,\n                # Setup stack to CALL into ModExp with the CALLDATA and CALL into it (+ pop value)\n                Op.CALL(Op.GAS(), 0x05, 0, 0, Op.CALLDATASIZE(), 0, 0),\n            )\n            # Store contract deployment code to deploy the returned data from ModExp as\n            # contract code (16 bytes)\n            + Op.MSTORE(\n                0,\n                (\n                    (\n                        # Need to `ljust` this PUSH32 in order to ensure the code starts\n                        # in memory at offset 0 (memory right-aligns stack items which are not\n                        # 32 bytes)\n                        Op.PUSH32(\n                            (\n                                Op.CODECOPY(0, 16, Op.SUB(Op.CODESIZE(), 16))\n                                + Op.RETURN(0, Op.SUB(Op.CODESIZE, 16))\n                            ).ljust(32, bytes(1))\n                        )\n                    )\n                ),\n            )\n            # RETURNDATACOPY the returned data from ModExp into memory (offset 16 bytes)\n            + Op.RETURNDATACOPY(16, 0, Op.RETURNDATASIZE())\n            # CREATE contract with the deployment code + the returned data from ModExp\n            + Op.CREATE(0, 0, Op.ADD(16, Op.RETURNDATASIZE()))\n            # STOP (handy for tracing)\n            + Op.STOP()\n        )\n    )\n\n    tx = Transaction(\n        ty=0x0,\n        nonce=0,\n        to=account,\n        data=input.create_modexp_tx_data(),\n        gas_limit=500000,\n        gas_price=10,\n        protected=True,\n    )\n\n    post = {}\n    if output.call_return_code != \"0x00\":\n        contract_address = compute_create_address(account, tx.nonce)\n        post[contract_address] = Account(code=output.returned_data)\n    post[account] = Account(storage={0: output.call_return_code})\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/byzantium/eip198_modexp_precompile/test_modexp/index/test_cases/","title":"Test Modexp - Test Cases","text":"<p>Test cases generated from <code>tests/byzantium/eip198_modexp_precompile/test_modexp.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/byzantium/eip198_modexp_precompile/test_modexp.py</code>:</p> <pre><code>test_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Byzantium-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Byzantium-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Byzantium-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Byzantium-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Byzantium-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Byzantium-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Byzantium-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Byzantium-state_test-EIP-198-case1]\ntest_modexp[fork_Byzantium-state_test-EIP-198-case2]\ntest_modexp[fork_Byzantium-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Byzantium-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Byzantium-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Constantinople-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Constantinople-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Constantinople-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Constantinople-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Constantinople-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Constantinople-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Constantinople-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Constantinople-state_test-EIP-198-case1]\ntest_modexp[fork_Constantinople-state_test-EIP-198-case2]\ntest_modexp[fork_Constantinople-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Constantinople-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Constantinople-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-EIP-198-case1]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-EIP-198-case2]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_ConstantinopleFix-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_ConstantinopleFix-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_ConstantinopleFix-state_test-EIP-198-case1]\ntest_modexp[fork_ConstantinopleFix-state_test-EIP-198-case2]\ntest_modexp[fork_ConstantinopleFix-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_ConstantinopleFix-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_ConstantinopleFix-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Istanbul-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Istanbul-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Istanbul-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Istanbul-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Istanbul-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Istanbul-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Istanbul-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Istanbul-state_test-EIP-198-case1]\ntest_modexp[fork_Istanbul-state_test-EIP-198-case2]\ntest_modexp[fork_Istanbul-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Istanbul-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Istanbul-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Berlin-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Berlin-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Berlin-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Berlin-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Berlin-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Berlin-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Berlin-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Berlin-state_test-EIP-198-case1]\ntest_modexp[fork_Berlin-state_test-EIP-198-case2]\ntest_modexp[fork_Berlin-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Berlin-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Berlin-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_London-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_London-blockchain_test-EIP-198-case1]\ntest_modexp[fork_London-blockchain_test-EIP-198-case2]\ntest_modexp[fork_London-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_London-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_London-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_London-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_London-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_London-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_London-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_London-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_London-state_test-EIP-198-case1]\ntest_modexp[fork_London-state_test-EIP-198-case2]\ntest_modexp[fork_London-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_London-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_London-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Paris-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Paris-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Paris-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Paris-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Paris-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Paris-blockchain_test_hive-EIP-198-case1]\ntest_modexp[fork_Paris-blockchain_test_hive-EIP-198-case2]\ntest_modexp[fork_Paris-blockchain_test_hive-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Paris-blockchain_test_hive-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Paris-blockchain_test_hive-EIP-198-case5-raw-input]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Paris-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Paris-state_test-EIP-198-case1]\ntest_modexp[fork_Paris-state_test-EIP-198-case2]\ntest_modexp[fork_Paris-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Paris-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Paris-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Shanghai-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Shanghai-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Shanghai-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Shanghai-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Shanghai-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Shanghai-blockchain_test_hive-EIP-198-case1]\ntest_modexp[fork_Shanghai-blockchain_test_hive-EIP-198-case2]\ntest_modexp[fork_Shanghai-blockchain_test_hive-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Shanghai-blockchain_test_hive-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Shanghai-blockchain_test_hive-EIP-198-case5-raw-input]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Shanghai-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Shanghai-state_test-EIP-198-case1]\ntest_modexp[fork_Shanghai-state_test-EIP-198-case2]\ntest_modexp[fork_Shanghai-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Shanghai-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Shanghai-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Cancun-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Cancun-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Cancun-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Cancun-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Cancun-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Cancun-blockchain_test_hive-EIP-198-case1]\ntest_modexp[fork_Cancun-blockchain_test_hive-EIP-198-case2]\ntest_modexp[fork_Cancun-blockchain_test_hive-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Cancun-blockchain_test_hive-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Cancun-blockchain_test_hive-EIP-198-case5-raw-input]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Cancun-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Cancun-state_test-EIP-198-case1]\ntest_modexp[fork_Cancun-state_test-EIP-198-case2]\ntest_modexp[fork_Cancun-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Cancun-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Cancun-state_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-blockchain_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Prague-blockchain_test-EIP-198-case1]\ntest_modexp[fork_Prague-blockchain_test-EIP-198-case2]\ntest_modexp[fork_Prague-blockchain_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Prague-blockchain_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Prague-blockchain_test-EIP-198-case5-raw-input]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-blockchain_test_hive-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Prague-blockchain_test_hive-EIP-198-case1]\ntest_modexp[fork_Prague-blockchain_test_hive-EIP-198-case2]\ntest_modexp[fork_Prague-blockchain_test_hive-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Prague-blockchain_test_hive-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Prague-blockchain_test_hive-EIP-198-case5-raw-input]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_-modulus_0002-ExpectedOutput_call_return_code_0x01-returned_data_0x0001]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_00-exponent_00-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_01-exponent_01-modulus_02-ExpectedOutput_call_return_code_0x01-returned_data_0x01]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_02-exponent_01-modulus_03-ExpectedOutput_call_return_code_0x01-returned_data_0x02]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_02-exponent_02-modulus_05-ExpectedOutput_call_return_code_0x01-returned_data_0x04]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_-modulus_-ExpectedOutput_call_return_code_0x01-returned_data_0x]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_-modulus_00-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_-modulus_01-ExpectedOutput_call_return_code_0x01-returned_data_0x00]\ntest_modexp[fork_Prague-state_test-ModExpInput_base_-exponent_-modulus_0001-ExpectedOutput_call_return_code_0x01-returned_data_0x0000]\ntest_modexp[fork_Prague-state_test-EIP-198-case1]\ntest_modexp[fork_Prague-state_test-EIP-198-case2]\ntest_modexp[fork_Prague-state_test-EIP-198-case3-raw-input-out-of-gas]\ntest_modexp[fork_Prague-state_test-EIP-198-case4-extra-data_07]\ntest_modexp[fork_Prague-state_test-EIP-198-case5-raw-input]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/byzantium/eip198_modexp_precompile/test_modexp.py\n</code></pre>"},{"location":"tests/cancun/","title":"Cancun","text":"<p>Documentation for <code>tests/cancun</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun\n</code></pre> <p>Test cases for EVM functionality introduced in Cancun.</p> <p>See EIP-7659: Hardfork Meta - Dencun for a list of EIPS included in Dencun (Deneb/Cancun).</p>"},{"location":"tests/cancun/eip1153_tstore/","title":"EIP-1153 Tstore","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip1153_tstore\n</code></pre> <p>EIP-1153 Tests</p>"},{"location":"tests/cancun/eip1153_tstore/spec/","title":"Spec","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore/spec.py</code>.</p> <p>Defines EIP-1153 specification constants and functions.</p>"},{"location":"tests/cancun/eip1153_tstore/spec/#tests.cancun.eip1153_tstore.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-1153 specifications as defined at https://eips.ethereum.org/EIPS/eip-1153</p> Source code in <code>tests/cancun/eip1153_tstore/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-1153 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-1153\n    \"\"\"\n\n    TLOAD_OPCODE_BYTE = 0x5C\n    TSTORE_OPCODE_BYTE = 0x5D\n    TLOAD_GAS_COST = 100\n    TSTORE_GAS_COST = 100\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/","title":"Test Tstorage","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore/test_tstorage.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip1153_tstore/test_tstorage.py\n</code></pre> Tests EIP-1153: Transient Storage Opcodes <p>Test EIP-1153: Transient Storage Opcodes. Ports and extends some tests from ethereum/tests/src/EIPTestsFiller/StateTests/stEIP1153-transientStorage/</p>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/#tests.cancun.eip1153_tstore.test_tstorage.test_transient_storage_unset_values","title":"<code>test_transient_storage_unset_values(state_test)</code>","text":"<p>Test that tload returns zero for unset values. Loading an arbitrary value is 0 at beginning of transaction: TLOAD(x) is 0.</p> <p>Based on ethereum/tests/.../01_tloadBeginningTxnFiller.yml\",  # noqa: E501</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage.py</code> <pre><code>def test_transient_storage_unset_values(state_test: StateTestFiller):\n    \"\"\"\n    Test that tload returns zero for unset values. Loading an arbitrary value is\n    0 at beginning of transaction: TLOAD(x) is 0.\n\n    Based on [ethereum/tests/.../01_tloadBeginningTxnFiller.yml](https://github.com/ethereum/tests/blob/9b00b68593f5869eb51a6659e1cc983e875e616b/src/EIPTestsFiller/StateTests/stEIP1153-transientStorage/01_tloadBeginningTxnFiller.yml)\",  # noqa: E501\n    \"\"\"\n    env = Environment()\n\n    slots_under_test = [0, 1, 2, 2**128, 2**256 - 1]\n    code = b\"\".join([Op.SSTORE(slot, Op.TLOAD(slot)) for slot in slots_under_test])\n\n    pre = {\n        TestAddress: Account(balance=10_000_000),\n        code_address: Account(code=code, storage={slot: 1 for slot in slots_under_test}),\n    }\n\n    tx = Transaction(\n        to=code_address,\n        data=b\"\",\n        gas_limit=1_000_000,\n    )\n\n    post = {code_address: Account(storage={slot: 0 for slot in slots_under_test})}\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/#tests.cancun.eip1153_tstore.test_tstorage.test_tload_after_tstore","title":"<code>test_tload_after_tstore(state_test)</code>","text":"<p>Loading after storing returns the stored value: TSTORE(x, y), TLOAD(x) returns y.</p> <p>Based on ethereum/tests/.../02_tloadAfterTstoreFiller.yml\",  # noqa: E501</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage.py</code> <pre><code>def test_tload_after_tstore(state_test: StateTestFiller):\n    \"\"\"\n    Loading after storing returns the stored value: TSTORE(x, y), TLOAD(x)\n    returns y.\n\n    Based on [ethereum/tests/.../02_tloadAfterTstoreFiller.yml](https://github.com/ethereum/tests/blob/9b00b68593f5869eb51a6659e1cc983e875e616b/src/EIPTestsFiller/StateTests/stEIP1153-transientStorage/02_tloadAfterTstoreFiller.yml)\",  # noqa: E501\n    \"\"\"\n    env = Environment()\n\n    slots_under_test = [0, 1, 2, 2**128, 2**256 - 1]\n    code = b\"\".join(\n        [Op.TSTORE(slot, slot) + Op.SSTORE(slot, Op.TLOAD(slot)) for slot in slots_under_test]\n    )\n\n    pre = {\n        TestAddress: Account(balance=10_000_000),\n        code_address: Account(code=code, storage={slot: 0xFF for slot in slots_under_test}),\n    }\n\n    tx = Transaction(\n        to=code_address,\n        data=b\"\",\n        gas_limit=1_000_000,\n    )\n\n    post = {code_address: Account(storage={slot: slot for slot in slots_under_test})}\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/#tests.cancun.eip1153_tstore.test_tstorage.test_tload_after_sstore","title":"<code>test_tload_after_sstore(state_test)</code>","text":"<p>Loading after storing returns the stored value: TSTORE(x, y), TLOAD(x) returns y.</p> <p>Based on ethereum/tests/.../18_tloadAfterStoreFiller.yml\",  # noqa: E501</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage.py</code> <pre><code>def test_tload_after_sstore(state_test: StateTestFiller):\n    \"\"\"\n    Loading after storing returns the stored value: TSTORE(x, y), TLOAD(x)\n    returns y.\n\n    Based on [ethereum/tests/.../18_tloadAfterStoreFiller.yml](https://github.com/ethereum/tests/blob/9b00b68593f5869eb51a6659e1cc983e875e616b/src/EIPTestsFiller/StateTests/stEIP1153-transientStorage/18_tloadAfterStoreFiller.yml)\",  # noqa: E501\n    \"\"\"\n    env = Environment()\n\n    slots_under_test = [1, 3, 2**128, 2**256 - 1]\n    code = b\"\".join(\n        [\n            Op.SSTORE(slot - 1, 0xFF) + Op.SSTORE(slot, Op.TLOAD(slot - 1))\n            for slot in slots_under_test\n        ]\n    )\n\n    pre = {\n        TestAddress: Account(balance=10_000_000),\n        code_address: Account(code=code, storage={slot: 1 for slot in slots_under_test}),\n    }\n\n    tx = Transaction(\n        to=code_address,\n        data=b\"\",\n        gas_limit=1_000_000,\n    )\n\n    post = {\n        code_address: Account(\n            code=code,\n            storage={slot - 1: 0xFF for slot in slots_under_test}\n            | {slot: 0 for slot in slots_under_test},\n        )\n    }\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/#tests.cancun.eip1153_tstore.test_tstorage.test_tload_after_tstore_is_zero","title":"<code>test_tload_after_tstore_is_zero(state_test)</code>","text":"<p>Test that tload returns zero after tstore is called with zero.</p> <p>Based on ethereum/tests/.../03_tloadAfterStoreIs0Filler.yml\",  # noqa: E501</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage.py</code> <pre><code>def test_tload_after_tstore_is_zero(state_test: StateTestFiller):\n    \"\"\"\n    Test that tload returns zero after tstore is called with zero.\n\n    Based on [ethereum/tests/.../03_tloadAfterStoreIs0Filler.yml](https://github.com/ethereum/tests/blob/9b00b68593f5869eb51a6659e1cc983e875e616b/src/EIPTestsFiller/StateTests/stEIP1153-transientStorage/03_tloadAfterStoreIs0Filler.yml)\",  # noqa: E501\n    \"\"\"\n    env = Environment()\n\n    slots_to_write = [1, 4, 2**128, 2**256 - 2]\n    slots_to_read = [slot - 1 for slot in slots_to_write] + [slot + 1 for slot in slots_to_write]\n    assert set.intersection(set(slots_to_write), set(slots_to_read)) == set()\n\n    code = b\"\".join([Op.TSTORE(slot, 1234) for slot in slots_to_write]) + b\"\".join(\n        [Op.SSTORE(slot, Op.TLOAD(slot)) for slot in slots_to_read]\n    )\n\n    pre = {\n        TestAddress: Account(balance=10_000_000),\n        code_address: Account(\n            code=code, storage={slot: 0xFFFF for slot in slots_to_write + slots_to_read}\n        ),\n    }\n\n    tx = Transaction(\n        to=code_address,\n        data=b\"\",\n        gas_limit=1_000_000,\n    )\n\n    post = {\n        code_address: Account(\n            storage={slot: 0 for slot in slots_to_read} | {slot: 0xFFFF for slot in slots_to_write}\n        )\n    }\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/#tests.cancun.eip1153_tstore.test_tstorage.test_gas_usage","title":"<code>test_gas_usage(state_test, bytecode, expected_gas, overhead_cost, extra_stack_items)</code>","text":"<p>Test that tstore and tload consume the expected gas.</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage.py</code> <pre><code>@GasMeasureTestCases.parametrize()\ndef test_gas_usage(\n    state_test: StateTestFiller,\n    bytecode: Code,\n    expected_gas: int,\n    overhead_cost: int,\n    extra_stack_items: int,\n):\n    \"\"\"\n    Test that tstore and tload consume the expected gas.\n    \"\"\"\n    gas_measure_bytecode = CodeGasMeasure(\n        code=bytecode, overhead_cost=overhead_cost, extra_stack_items=extra_stack_items\n    )\n\n    env = Environment()\n    pre = {\n        TestAddress: Account(balance=10_000_000, nonce=0),\n        code_address: Account(code=gas_measure_bytecode),\n    }\n    tx = Transaction(\n        to=code_address,\n        data=b\"\",\n        gas_limit=1_000_000,\n    )\n    post = {\n        code_address: Account(code=gas_measure_bytecode, storage={0: expected_gas}),\n        TestAddress: Account(nonce=1),\n    }\n    state_test(env=env, pre=pre, tx=tx, post=post)\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/#tests.cancun.eip1153_tstore.test_tstorage.test_run_until_out_of_gas","title":"<code>test_run_until_out_of_gas(state_test, repeat_bytecode, bytecode_repeat_times)</code>","text":"<p>Use TSTORE over and over to different keys until we run out of gas.</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage.py</code> <pre><code>@LoopRunUntilOutOfGasCases.parametrize()\ndef test_run_until_out_of_gas(\n    state_test: StateTestFiller,\n    repeat_bytecode: bytes,\n    bytecode_repeat_times: int,\n):\n    \"\"\"\n    Use TSTORE over and over to different keys until we run out of gas.\n    \"\"\"\n    bytecode = Op.JUMPDEST + repeat_bytecode * bytecode_repeat_times + Op.JUMP(Op.PUSH0)\n    pre = {\n        TestAddress: Account(balance=10_000_000_000_000, nonce=0),\n        code_address: Account(code=bytecode),\n    }\n    tx = Transaction(\n        to=code_address,\n        data=b\"\",\n        gas_limit=30_000_000,\n    )\n    post = {\n        code_address: Account(code=bytecode, storage={}),\n        TestAddress: Account(nonce=1),\n    }\n    state_test(env=Environment(), pre=pre, tx=tx, post=post)\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage/index/test_cases/","title":"Test Tstorage - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip1153_tstore/test_tstorage.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip1153_tstore/test_tstorage.py</code>:</p> <pre><code>test_transient_storage_unset_values[fork_Cancun-blockchain_test]\ntest_transient_storage_unset_values[fork_Cancun-blockchain_test_hive]\ntest_transient_storage_unset_values[fork_Cancun-state_test]\ntest_transient_storage_unset_values[fork_Prague-blockchain_test]\ntest_transient_storage_unset_values[fork_Prague-blockchain_test_hive]\ntest_transient_storage_unset_values[fork_Prague-state_test]\ntest_tload_after_tstore[fork_Cancun-blockchain_test]\ntest_tload_after_tstore[fork_Cancun-blockchain_test_hive]\ntest_tload_after_tstore[fork_Cancun-state_test]\ntest_tload_after_tstore[fork_Prague-blockchain_test]\ntest_tload_after_tstore[fork_Prague-blockchain_test_hive]\ntest_tload_after_tstore[fork_Prague-state_test]\ntest_tload_after_sstore[fork_Cancun-blockchain_test]\ntest_tload_after_sstore[fork_Cancun-blockchain_test_hive]\ntest_tload_after_sstore[fork_Cancun-state_test]\ntest_tload_after_sstore[fork_Prague-blockchain_test]\ntest_tload_after_sstore[fork_Prague-blockchain_test_hive]\ntest_tload_after_sstore[fork_Prague-state_test]\ntest_tload_after_tstore_is_zero[fork_Cancun-blockchain_test]\ntest_tload_after_tstore_is_zero[fork_Cancun-blockchain_test_hive]\ntest_tload_after_tstore_is_zero[fork_Cancun-state_test]\ntest_tload_after_tstore_is_zero[fork_Prague-blockchain_test]\ntest_tload_after_tstore_is_zero[fork_Prague-blockchain_test_hive]\ntest_tload_after_tstore_is_zero[fork_Prague-state_test]\ntest_gas_usage[fork_Cancun-blockchain_test-tload]\ntest_gas_usage[fork_Cancun-blockchain_test-tstore_tload]\ntest_gas_usage[fork_Cancun-blockchain_test-tstore_cold]\ntest_gas_usage[fork_Cancun-blockchain_test-tstore_warm]\ntest_gas_usage[fork_Cancun-blockchain_test_hive-tload]\ntest_gas_usage[fork_Cancun-blockchain_test_hive-tstore_tload]\ntest_gas_usage[fork_Cancun-blockchain_test_hive-tstore_cold]\ntest_gas_usage[fork_Cancun-blockchain_test_hive-tstore_warm]\ntest_gas_usage[fork_Cancun-state_test-tload]\ntest_gas_usage[fork_Cancun-state_test-tstore_tload]\ntest_gas_usage[fork_Cancun-state_test-tstore_cold]\ntest_gas_usage[fork_Cancun-state_test-tstore_warm]\ntest_gas_usage[fork_Prague-blockchain_test-tload]\ntest_gas_usage[fork_Prague-blockchain_test-tstore_tload]\ntest_gas_usage[fork_Prague-blockchain_test-tstore_cold]\ntest_gas_usage[fork_Prague-blockchain_test-tstore_warm]\ntest_gas_usage[fork_Prague-blockchain_test_hive-tload]\ntest_gas_usage[fork_Prague-blockchain_test_hive-tstore_tload]\ntest_gas_usage[fork_Prague-blockchain_test_hive-tstore_cold]\ntest_gas_usage[fork_Prague-blockchain_test_hive-tstore_warm]\ntest_gas_usage[fork_Prague-state_test-tload]\ntest_gas_usage[fork_Prague-state_test-tstore_tload]\ntest_gas_usage[fork_Prague-state_test-tstore_cold]\ntest_gas_usage[fork_Prague-state_test-tstore_warm]\ntest_run_until_out_of_gas[fork_Cancun-blockchain_test-tstore]\ntest_run_until_out_of_gas[fork_Cancun-blockchain_test-tstore_wide_address_space]\ntest_run_until_out_of_gas[fork_Cancun-blockchain_test-tstore_tload]\ntest_run_until_out_of_gas[fork_Cancun-blockchain_test_hive-tstore]\ntest_run_until_out_of_gas[fork_Cancun-blockchain_test_hive-tstore_wide_address_space]\ntest_run_until_out_of_gas[fork_Cancun-blockchain_test_hive-tstore_tload]\ntest_run_until_out_of_gas[fork_Cancun-state_test-tstore]\ntest_run_until_out_of_gas[fork_Cancun-state_test-tstore_wide_address_space]\ntest_run_until_out_of_gas[fork_Cancun-state_test-tstore_tload]\ntest_run_until_out_of_gas[fork_Prague-blockchain_test-tstore]\ntest_run_until_out_of_gas[fork_Prague-blockchain_test-tstore_wide_address_space]\ntest_run_until_out_of_gas[fork_Prague-blockchain_test-tstore_tload]\ntest_run_until_out_of_gas[fork_Prague-blockchain_test_hive-tstore]\ntest_run_until_out_of_gas[fork_Prague-blockchain_test_hive-tstore_wide_address_space]\ntest_run_until_out_of_gas[fork_Prague-blockchain_test_hive-tstore_tload]\ntest_run_until_out_of_gas[fork_Prague-state_test-tstore]\ntest_run_until_out_of_gas[fork_Prague-state_test-tstore_wide_address_space]\ntest_run_until_out_of_gas[fork_Prague-state_test-tstore_tload]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip1153_tstore/test_tstorage.py\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_create_contexts/","title":"Test Tstorage Create Contexts","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py\n</code></pre> Tests for EIP-1153: Transient Storage <p>Test cases for <code>TSTORE</code> and <code>TLOAD</code> opcode calls in contract initcode.</p>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_create_contexts/#tests.cancun.eip1153_tstore.test_tstorage_create_contexts.TestTransientStorageInContractCreation","title":"<code>TestTransientStorageInContractCreation</code>","text":"<p>Test transient storage in contract creation contexts:</p> <ul> <li>TSTORE/TLOAD in initcode should not be able to access the creator's transient storage.</li> <li>TSTORE/TLOAD in initcode should be able to access the created contract's transient     storage.</li> <li>TSTORE/TLOAD in creator contract should be able to use its own transient storage.</li> </ul> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py</code> <pre><code>@CreateOpcodeParams.parametrize()\n@InitcodeTestCases.parametrize()\nclass TestTransientStorageInContractCreation:\n    \"\"\"\n    Test transient storage in contract creation contexts:\n\n    - TSTORE/TLOAD in initcode should not be able to access the creator's transient storage.\n    - TSTORE/TLOAD in initcode should be able to access the created contract's transient\n        storage.\n    - TSTORE/TLOAD in creator contract should be able to use its own transient storage.\n    \"\"\"\n\n    @pytest.fixture()\n    def create2_salt(self) -&gt; int:  # noqa: D102\n        return 0xDEADBEEF\n\n    @pytest.fixture()\n    def initcode(  # noqa: D102\n        self, deploy_code: bytes, constructor_code: bytes\n    ) -&gt; Optional[bytes]:\n        initcode = Initcode(deploy_code=deploy_code, initcode_prefix=constructor_code).bytecode\n        return initcode\n\n    @pytest.fixture()\n    def creator_contract_code(  # noqa: D102\n        self,\n        opcode: Op,\n        create2_salt: int,\n        created_contract_address: Address,\n    ) -&gt; bytes:\n        if opcode == Op.CREATE:\n            create_call = Op.CREATE(0, 0, Op.CALLDATASIZE)\n        elif opcode == Op.CREATE2:\n            create_call = Op.CREATE2(0, 0, Op.CALLDATASIZE, create2_salt)\n        else:\n            raise Exception(\"Invalid opcode specified for test.\")\n        contract_call = Op.SSTORE(4, Op.CALL(Op.GAS(), created_contract_address, 0, 0, 0, 0, 0))\n        return (\n            Op.TSTORE(0, 0x0100)\n            + Op.TSTORE(1, 0x0200)\n            + Op.TSTORE(2, 0x0300)\n            + Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n            + create_call\n            + contract_call\n            # Save the state of transient storage following call to storage; the transient\n            # storage should not have been overwritten\n            + Op.SSTORE(0, Op.TLOAD(0))\n            + Op.SSTORE(1, Op.TLOAD(1))\n            + Op.SSTORE(2, Op.TLOAD(2))\n        )\n\n    @pytest.fixture()\n    def expected_creator_storage(self) -&gt; dict:  # noqa: D102\n        return {0: 0x0100, 1: 0x0200, 2: 0x0300, 4: 0x0001}\n\n    @pytest.fixture()\n    def created_contract_address(  # noqa: D102\n        self, opcode: Op, create2_salt: int, initcode: bytes\n    ) -&gt; Address:\n        if opcode == Op.CREATE:\n            return compute_create_address(address=creator_address, nonce=1)\n        if opcode == Op.CREATE2:\n            return compute_create2_address(\n                address=creator_address, salt=create2_salt, initcode=initcode\n            )\n        raise Exception(\"invalid opcode for generator\")\n\n    def test_contract_creation(\n        self,\n        state_test: StateTestFiller,\n        creator_contract_code: bytes,\n        created_contract_address: Address,\n        initcode: bytes,\n        deploy_code: bytes,\n        expected_creator_storage: dict,\n        expected_storage: dict,\n    ) -&gt; None:\n        \"\"\"\n        Test transient storage in contract creation contexts.\n        \"\"\"\n        pre = {\n            TestAddress: Account(balance=100_000_000_000_000),\n            creator_address: Account(\n                code=creator_contract_code,\n                nonce=1,\n            ),\n        }\n\n        tx = Transaction(\n            nonce=0,\n            to=creator_address,\n            data=initcode,\n            gas_limit=1_000_000_000_000,\n            gas_price=10,\n        )\n\n        post = {\n            creator_address: Account(\n                nonce=2,\n                storage=expected_creator_storage,\n            ),\n            created_contract_address: Account(\n                nonce=1,\n                code=deploy_code,\n                storage=expected_storage,\n            ),\n        }\n\n        state_test(\n            env=Environment(),\n            pre=pre,\n            post=post,\n            tx=tx,\n        )\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_create_contexts/#tests.cancun.eip1153_tstore.test_tstorage_create_contexts.TestTransientStorageInContractCreation.test_contract_creation","title":"<code>test_contract_creation(state_test, creator_contract_code, created_contract_address, initcode, deploy_code, expected_creator_storage, expected_storage)</code>","text":"<p>Test transient storage in contract creation contexts.</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py</code> <pre><code>def test_contract_creation(\n    self,\n    state_test: StateTestFiller,\n    creator_contract_code: bytes,\n    created_contract_address: Address,\n    initcode: bytes,\n    deploy_code: bytes,\n    expected_creator_storage: dict,\n    expected_storage: dict,\n) -&gt; None:\n    \"\"\"\n    Test transient storage in contract creation contexts.\n    \"\"\"\n    pre = {\n        TestAddress: Account(balance=100_000_000_000_000),\n        creator_address: Account(\n            code=creator_contract_code,\n            nonce=1,\n        ),\n    }\n\n    tx = Transaction(\n        nonce=0,\n        to=creator_address,\n        data=initcode,\n        gas_limit=1_000_000_000_000,\n        gas_price=10,\n    )\n\n    post = {\n        creator_address: Account(\n            nonce=2,\n            storage=expected_creator_storage,\n        ),\n        created_contract_address: Account(\n            nonce=1,\n            code=deploy_code,\n            storage=expected_storage,\n        ),\n    }\n\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_create_contexts/index/test_cases/","title":"Test Tstorage Create Contexts - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py</code>:</p> <pre><code>TestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\nTestTransientStorageInContractCreation\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip1153_tstore/test_tstorage_create_contexts.py\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_execution_contexts/","title":"Test Tstorage Execution Contexts","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore/test_tstorage_execution_contexts.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip1153_tstore/test_tstorage_execution_contexts.py\n</code></pre> Tests for EIP-1153: Transient Storage <p>Test cases for <code>TSTORE</code> and <code>TLOAD</code> opcode calls in different execution contexts.</p>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_execution_contexts/#tests.cancun.eip1153_tstore.test_tstorage_execution_contexts.test_subcall","title":"<code>test_subcall(state_test, env, pre, tx, post)</code>","text":"<p>Test transient storage with a subcall using the following opcodes:</p> <ul> <li><code>CALL</code></li> <li><code>CALLCODE</code></li> <li><code>DELEGATECALL</code></li> <li><code>STATICCALL</code></li> </ul> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage_execution_contexts.py</code> <pre><code>@CallContextTestCases.parametrize()\ndef test_subcall(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Mapping,\n    tx: Transaction,\n    post: Mapping,\n):\n    \"\"\"\n    Test transient storage with a subcall using the following opcodes:\n\n    - `CALL`\n    - `CALLCODE`\n    - `DELEGATECALL`\n    - `STATICCALL`\n    \"\"\"\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_execution_contexts/index/test_cases/","title":"Test Tstorage Execution Contexts - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip1153_tstore/test_tstorage_execution_contexts.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip1153_tstore/test_tstorage_execution_contexts.py</code>:</p> <pre><code>test_subcall[fork_Cancun-blockchain_test-call]\ntest_subcall[fork_Cancun-blockchain_test-staticcall_cant_call_tstore]\ntest_subcall[fork_Cancun-blockchain_test-staticcall_cant_call_tstore_with_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-staticcalled_context_can_call_tload]\ntest_subcall[fork_Cancun-blockchain_test-callcode]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall]\ntest_subcall[fork_Cancun-blockchain_test-call_with_revert]\ntest_subcall[fork_Cancun-blockchain_test-call_with_invalid]\ntest_subcall[fork_Cancun-blockchain_test-call_with_stack_overflow]\ntest_subcall[fork_Cancun-blockchain_test-call_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-call_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-blockchain_test-call_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-call_with_out_of_gas]\ntest_subcall[fork_Cancun-blockchain_test-call_with_out_of_gas_2]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_revert]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_invalid]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_stack_overflow]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_out_of_gas]\ntest_subcall[fork_Cancun-blockchain_test-callcode_with_out_of_gas_2]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_revert]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_invalid]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_stack_overflow]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_out_of_gas]\ntest_subcall[fork_Cancun-blockchain_test-delegatecall_with_out_of_gas_2]\ntest_subcall[fork_Cancun-blockchain_test_hive-call]\ntest_subcall[fork_Cancun-blockchain_test_hive-staticcall_cant_call_tstore]\ntest_subcall[fork_Cancun-blockchain_test_hive-staticcall_cant_call_tstore_with_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-staticcalled_context_can_call_tload]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_revert]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_invalid]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_stack_overflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_out_of_gas]\ntest_subcall[fork_Cancun-blockchain_test_hive-call_with_out_of_gas_2]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_revert]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_invalid]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_stack_overflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_out_of_gas]\ntest_subcall[fork_Cancun-blockchain_test_hive-callcode_with_out_of_gas_2]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_revert]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_invalid]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_stack_overflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_out_of_gas]\ntest_subcall[fork_Cancun-blockchain_test_hive-delegatecall_with_out_of_gas_2]\ntest_subcall[fork_Cancun-state_test-call]\ntest_subcall[fork_Cancun-state_test-staticcall_cant_call_tstore]\ntest_subcall[fork_Cancun-state_test-staticcall_cant_call_tstore_with_stack_underflow]\ntest_subcall[fork_Cancun-state_test-staticcalled_context_can_call_tload]\ntest_subcall[fork_Cancun-state_test-callcode]\ntest_subcall[fork_Cancun-state_test-delegatecall]\ntest_subcall[fork_Cancun-state_test-call_with_revert]\ntest_subcall[fork_Cancun-state_test-call_with_invalid]\ntest_subcall[fork_Cancun-state_test-call_with_stack_overflow]\ntest_subcall[fork_Cancun-state_test-call_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-state_test-call_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-state_test-call_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-state_test-call_with_out_of_gas]\ntest_subcall[fork_Cancun-state_test-call_with_out_of_gas_2]\ntest_subcall[fork_Cancun-state_test-callcode_with_revert]\ntest_subcall[fork_Cancun-state_test-callcode_with_invalid]\ntest_subcall[fork_Cancun-state_test-callcode_with_stack_overflow]\ntest_subcall[fork_Cancun-state_test-callcode_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-state_test-callcode_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-state_test-callcode_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-state_test-callcode_with_out_of_gas]\ntest_subcall[fork_Cancun-state_test-callcode_with_out_of_gas_2]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_revert]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_invalid]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_stack_overflow]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_tstore_stack_underflow]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_tstore_stack_underflow_2]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_tload_stack_underflow]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_out_of_gas]\ntest_subcall[fork_Cancun-state_test-delegatecall_with_out_of_gas_2]\ntest_subcall[fork_Prague-blockchain_test-call]\ntest_subcall[fork_Prague-blockchain_test-staticcall_cant_call_tstore]\ntest_subcall[fork_Prague-blockchain_test-staticcall_cant_call_tstore_with_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-staticcalled_context_can_call_tload]\ntest_subcall[fork_Prague-blockchain_test-callcode]\ntest_subcall[fork_Prague-blockchain_test-delegatecall]\ntest_subcall[fork_Prague-blockchain_test-call_with_revert]\ntest_subcall[fork_Prague-blockchain_test-call_with_invalid]\ntest_subcall[fork_Prague-blockchain_test-call_with_stack_overflow]\ntest_subcall[fork_Prague-blockchain_test-call_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-call_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-blockchain_test-call_with_tload_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-call_with_out_of_gas]\ntest_subcall[fork_Prague-blockchain_test-call_with_out_of_gas_2]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_revert]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_invalid]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_stack_overflow]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_tload_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_out_of_gas]\ntest_subcall[fork_Prague-blockchain_test-callcode_with_out_of_gas_2]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_revert]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_invalid]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_stack_overflow]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_tload_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_out_of_gas]\ntest_subcall[fork_Prague-blockchain_test-delegatecall_with_out_of_gas_2]\ntest_subcall[fork_Prague-blockchain_test_hive-call]\ntest_subcall[fork_Prague-blockchain_test_hive-staticcall_cant_call_tstore]\ntest_subcall[fork_Prague-blockchain_test_hive-staticcall_cant_call_tstore_with_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-staticcalled_context_can_call_tload]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_revert]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_invalid]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_stack_overflow]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_tload_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_out_of_gas]\ntest_subcall[fork_Prague-blockchain_test_hive-call_with_out_of_gas_2]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_revert]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_invalid]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_stack_overflow]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_tload_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_out_of_gas]\ntest_subcall[fork_Prague-blockchain_test_hive-callcode_with_out_of_gas_2]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_revert]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_invalid]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_stack_overflow]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_tload_stack_underflow]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_out_of_gas]\ntest_subcall[fork_Prague-blockchain_test_hive-delegatecall_with_out_of_gas_2]\ntest_subcall[fork_Prague-state_test-call]\ntest_subcall[fork_Prague-state_test-staticcall_cant_call_tstore]\ntest_subcall[fork_Prague-state_test-staticcall_cant_call_tstore_with_stack_underflow]\ntest_subcall[fork_Prague-state_test-staticcalled_context_can_call_tload]\ntest_subcall[fork_Prague-state_test-callcode]\ntest_subcall[fork_Prague-state_test-delegatecall]\ntest_subcall[fork_Prague-state_test-call_with_revert]\ntest_subcall[fork_Prague-state_test-call_with_invalid]\ntest_subcall[fork_Prague-state_test-call_with_stack_overflow]\ntest_subcall[fork_Prague-state_test-call_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-state_test-call_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-state_test-call_with_tload_stack_underflow]\ntest_subcall[fork_Prague-state_test-call_with_out_of_gas]\ntest_subcall[fork_Prague-state_test-call_with_out_of_gas_2]\ntest_subcall[fork_Prague-state_test-callcode_with_revert]\ntest_subcall[fork_Prague-state_test-callcode_with_invalid]\ntest_subcall[fork_Prague-state_test-callcode_with_stack_overflow]\ntest_subcall[fork_Prague-state_test-callcode_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-state_test-callcode_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-state_test-callcode_with_tload_stack_underflow]\ntest_subcall[fork_Prague-state_test-callcode_with_out_of_gas]\ntest_subcall[fork_Prague-state_test-callcode_with_out_of_gas_2]\ntest_subcall[fork_Prague-state_test-delegatecall_with_revert]\ntest_subcall[fork_Prague-state_test-delegatecall_with_invalid]\ntest_subcall[fork_Prague-state_test-delegatecall_with_stack_overflow]\ntest_subcall[fork_Prague-state_test-delegatecall_with_tstore_stack_underflow]\ntest_subcall[fork_Prague-state_test-delegatecall_with_tstore_stack_underflow_2]\ntest_subcall[fork_Prague-state_test-delegatecall_with_tload_stack_underflow]\ntest_subcall[fork_Prague-state_test-delegatecall_with_out_of_gas]\ntest_subcall[fork_Prague-state_test-delegatecall_with_out_of_gas_2]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip1153_tstore/test_tstorage_execution_contexts.py\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts/","title":"Test Tstorage Reentrancy Contexts","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts.py\n</code></pre> Tests for EIP-1153: Transient Storage <p>Test cases for <code>TSTORE</code> and <code>TLOAD</code> opcode calls in reentrancy contexts.</p>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts/#tests.cancun.eip1153_tstore.test_tstorage_reentrancy_contexts.test_reentrant_call","title":"<code>test_reentrant_call(state_test, bytecode, expected_storage)</code>","text":"<p>Test transient storage in different reentrancy contexts.</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts.py</code> <pre><code>@ReentrancyTestCases.parametrize()\ndef test_reentrant_call(state_test: StateTestFiller, bytecode, expected_storage):\n    \"\"\"\n    Test transient storage in different reentrancy contexts.\n    \"\"\"\n    env = Environment()\n\n    pre = {\n        TestAddress: Account(balance=10**40),\n        callee_address: Account(code=bytecode),\n    }\n\n    tx = Transaction(\n        to=callee_address,\n        data=Hash(1),\n        gas_limit=10_000_000,\n    )\n\n    post = {callee_address: Account(code=bytecode, storage=expected_storage)}\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts/index/test_cases/","title":"Test Tstorage Reentrancy Contexts - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts.py</code>:</p> <pre><code>test_reentrant_call[fork_Cancun-blockchain_test-tstore_in_reentrant_call]\ntest_reentrant_call[fork_Cancun-blockchain_test-tload_after_reentrant_tstore]\ntest_reentrant_call[fork_Cancun-blockchain_test-manipulate_in_reentrant_call]\ntest_reentrant_call[fork_Cancun-blockchain_test-tstore_in_call_then_tload_return_in_staticcall]\ntest_reentrant_call[fork_Cancun-blockchain_test-tstore_before_revert_has_no_effect]\ntest_reentrant_call[fork_Cancun-blockchain_test-revert_undoes_all]\ntest_reentrant_call[fork_Cancun-blockchain_test-revert_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Cancun-blockchain_test-tstore_before_invalid_has_no_effect]\ntest_reentrant_call[fork_Cancun-blockchain_test-invalid_undoes_all]\ntest_reentrant_call[fork_Cancun-blockchain_test-invalid_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-tstore_in_reentrant_call]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-tload_after_reentrant_tstore]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-manipulate_in_reentrant_call]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-tstore_in_call_then_tload_return_in_staticcall]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-tstore_before_revert_has_no_effect]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-revert_undoes_all]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-revert_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-tstore_before_invalid_has_no_effect]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-invalid_undoes_all]\ntest_reentrant_call[fork_Cancun-blockchain_test_hive-invalid_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Cancun-state_test-tstore_in_reentrant_call]\ntest_reentrant_call[fork_Cancun-state_test-tload_after_reentrant_tstore]\ntest_reentrant_call[fork_Cancun-state_test-manipulate_in_reentrant_call]\ntest_reentrant_call[fork_Cancun-state_test-tstore_in_call_then_tload_return_in_staticcall]\ntest_reentrant_call[fork_Cancun-state_test-tstore_before_revert_has_no_effect]\ntest_reentrant_call[fork_Cancun-state_test-revert_undoes_all]\ntest_reentrant_call[fork_Cancun-state_test-revert_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Cancun-state_test-tstore_before_invalid_has_no_effect]\ntest_reentrant_call[fork_Cancun-state_test-invalid_undoes_all]\ntest_reentrant_call[fork_Cancun-state_test-invalid_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Prague-blockchain_test-tstore_in_reentrant_call]\ntest_reentrant_call[fork_Prague-blockchain_test-tload_after_reentrant_tstore]\ntest_reentrant_call[fork_Prague-blockchain_test-manipulate_in_reentrant_call]\ntest_reentrant_call[fork_Prague-blockchain_test-tstore_in_call_then_tload_return_in_staticcall]\ntest_reentrant_call[fork_Prague-blockchain_test-tstore_before_revert_has_no_effect]\ntest_reentrant_call[fork_Prague-blockchain_test-revert_undoes_all]\ntest_reentrant_call[fork_Prague-blockchain_test-revert_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Prague-blockchain_test-tstore_before_invalid_has_no_effect]\ntest_reentrant_call[fork_Prague-blockchain_test-invalid_undoes_all]\ntest_reentrant_call[fork_Prague-blockchain_test-invalid_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-tstore_in_reentrant_call]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-tload_after_reentrant_tstore]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-manipulate_in_reentrant_call]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-tstore_in_call_then_tload_return_in_staticcall]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-tstore_before_revert_has_no_effect]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-revert_undoes_all]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-revert_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-tstore_before_invalid_has_no_effect]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-invalid_undoes_all]\ntest_reentrant_call[fork_Prague-blockchain_test_hive-invalid_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Prague-state_test-tstore_in_reentrant_call]\ntest_reentrant_call[fork_Prague-state_test-tload_after_reentrant_tstore]\ntest_reentrant_call[fork_Prague-state_test-manipulate_in_reentrant_call]\ntest_reentrant_call[fork_Prague-state_test-tstore_in_call_then_tload_return_in_staticcall]\ntest_reentrant_call[fork_Prague-state_test-tstore_before_revert_has_no_effect]\ntest_reentrant_call[fork_Prague-state_test-revert_undoes_all]\ntest_reentrant_call[fork_Prague-state_test-revert_undoes_tstorage_after_successful_call]\ntest_reentrant_call[fork_Prague-state_test-tstore_before_invalid_has_no_effect]\ntest_reentrant_call[fork_Prague-state_test-invalid_undoes_all]\ntest_reentrant_call[fork_Prague-state_test-invalid_undoes_tstorage_after_successful_call]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip1153_tstore/test_tstorage_reentrancy_contexts.py\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_selfdestruct/","title":"Test Tstorage Selfdestruct","text":"<p>Documentation for <code>tests/cancun/eip1153_tstore/test_tstorage_selfdestruct.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip1153_tstore/test_tstorage_selfdestruct.py\n</code></pre> Tests for EIP-1153: Transient Storage <p>Test cases for <code>TSTORE</code> and <code>TLOAD</code> opcode calls in reentrancy after self-destruct, taking into account the changes in EIP-6780.</p>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_selfdestruct/#tests.cancun.eip1153_tstore.test_tstorage_selfdestruct.test_reentrant_selfdestructing_call","title":"<code>test_reentrant_selfdestructing_call(state_test, pre_existing_contract, caller_bytecode, callee_bytecode, expected_storage)</code>","text":"<p>Test transient storage in different reentrancy contexts after selfdestructing.</p> Source code in <code>tests/cancun/eip1153_tstore/test_tstorage_selfdestruct.py</code> <pre><code>@SelfDestructCases.parametrize()\ndef test_reentrant_selfdestructing_call(\n    state_test: StateTestFiller,\n    pre_existing_contract,\n    caller_bytecode,\n    callee_bytecode,\n    expected_storage,\n):\n    \"\"\"\n    Test transient storage in different reentrancy contexts after selfdestructing.\n    \"\"\"\n    env = Environment()\n\n    pre = {\n        TestAddress: Account(balance=10**40),\n        caller_address: Account(code=caller_bytecode, nonce=1),\n        copy_from_initcode_address: Account(code=Initcode(deploy_code=callee_bytecode)),\n    }\n\n    if pre_existing_contract:\n        pre[callee_address] = Account(code=callee_bytecode)\n\n    tx = Transaction(\n        to=caller_address,\n        gas_limit=1_000_000,\n    )\n\n    post: Dict = {caller_address: Account(storage=expected_storage)}\n\n    if pre_existing_contract:\n        post[callee_address] = Account(code=callee_bytecode)\n    else:\n        post[callee_address] = Account.NONEXISTENT\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip1153_tstore/test_tstorage_selfdestruct/index/test_cases/","title":"Test Tstorage Selfdestruct - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip1153_tstore/test_tstorage_selfdestruct.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip1153_tstore/test_tstorage_selfdestruct.py</code>:</p> <pre><code>test_reentrant_selfdestructing_call[fork_Cancun-blockchain_test-tload_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test-tload_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test-tload_after_inner_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test-tload_after_inner_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test-tstore_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test-tstore_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test_hive-tload_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test_hive-tload_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test_hive-tload_after_inner_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test_hive-tload_after_inner_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test_hive-tstore_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-blockchain_test_hive-tstore_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-state_test-tload_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-state_test-tload_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-state_test-tload_after_inner_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-state_test-tload_after_inner_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-state_test-tstore_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Cancun-state_test-tstore_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test-tload_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test-tload_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test-tload_after_inner_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test-tload_after_inner_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test-tstore_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test-tstore_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test_hive-tload_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test_hive-tload_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test_hive-tload_after_inner_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test_hive-tload_after_inner_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test_hive-tstore_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-blockchain_test_hive-tstore_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-state_test-tload_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-state_test-tload_after_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-state_test-tload_after_inner_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-state_test-tload_after_inner_selfdestruct_new_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-state_test-tstore_after_selfdestruct_pre_existing_contract]\ntest_reentrant_selfdestructing_call[fork_Prague-state_test-tstore_after_selfdestruct_new_contract]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip1153_tstore/test_tstorage_selfdestruct.py\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/","title":"EIP-4788 Beacon Root","text":"<p>Documentation for <code>tests/cancun/eip4788_beacon_root</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4788_beacon_root\n</code></pre> <p>Cross-client EIP-4788 Tests</p>"},{"location":"tests/cancun/eip4788_beacon_root/spec/","title":"Spec","text":"<p>Documentation for <code>tests/cancun/eip4788_beacon_root/spec.py</code>.</p> <p>Defines EIP-4788 specification constants and functions.</p>"},{"location":"tests/cancun/eip4788_beacon_root/spec/#tests.cancun.eip4788_beacon_root.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-4788 specifications as defined at https://eips.ethereum.org/EIPS/eip-4788#specification</p> Source code in <code>tests/cancun/eip4788_beacon_root/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-4788 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-4788#specification\n    \"\"\"\n\n    BEACON_ROOTS_ADDRESS = 0x000F3DF6D732807EF1319FB7B8BB8522D0BEAC02\n    BEACON_ROOTS_CALL_GAS = 100_000\n    BEACON_ROOTS_DEPLOYER_ADDRESS = 0x0B799C86A49DEEB90402691F1041AA3AF2D3C875\n    HISTORY_BUFFER_LENGTH = 8_191\n    SYSTEM_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n    FORK_TIMESTAMP = 15_000  # ShanghaiToCancun timestamp\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/spec/#tests.cancun.eip4788_beacon_root.spec.SpecHelpers","title":"<code>SpecHelpers</code>  <code>dataclass</code>","text":"<p>Helper functions closely related to the EIP-4788 specification.</p> Source code in <code>tests/cancun/eip4788_beacon_root/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass SpecHelpers:\n    \"\"\"\n    Helper functions closely related to the EIP-4788 specification.\n    \"\"\"\n\n    def timestamp_index(self, timestamp: int) -&gt; int:\n        \"\"\"\n        Derive the timestamp index into the timestamp ring buffer.\n        \"\"\"\n        return timestamp % Spec.HISTORY_BUFFER_LENGTH\n\n    def root_index(self, timestamp: int) -&gt; int:\n        \"\"\"\n        Derive the root index into the root ring buffer.\n        \"\"\"\n        return self.timestamp_index(timestamp) + Spec.HISTORY_BUFFER_LENGTH\n\n    @staticmethod\n    def expected_storage(\n        *,\n        beacon_root: bytes,\n        valid_call: bool,\n        valid_input: bool,\n    ) -&gt; Storage:\n        \"\"\"\n        Derives the expected storage for a given beacon root contract call\n        dependent on:\n        - success or failure of the call\n        - validity of the timestamp input used within the call\n        \"\"\"\n        # By default assume the call is unsuccessful and all keys are zero\n        storage = Storage({k: 0 for k in range(4)})\n        if valid_call and valid_input:\n            # beacon root contract call is successful\n            storage[0] = 1\n            storage[1] = beacon_root\n            storage[2] = 32\n            storage[3] = beacon_root\n\n        return storage\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/","title":"Test Beacon Root Contract","text":"<p>Documentation for <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py\n</code></pre> Tests beacon block root for EIP-4788: Beacon block root in the EVM <p>Test the exposed beacon chain root in the EVM for EIP-4788: Beacon block root in the EVM</p> Adding a new test <p>Add a function that is named <code>test_&lt;test_name&gt;</code> and takes at least the following arguments:</p> <ul> <li>state_test</li> <li>env</li> <li>pre</li> <li>tx</li> <li>post</li> <li>valid_call</li> </ul> <p>All other <code>pytest.fixtures</code> can be parametrized to generate new combinations and test cases.</p>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_beacon_root_contract_calls","title":"<code>test_beacon_root_contract_calls(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests the beacon root contract call using various call contexts: - <code>CALL</code> - <code>DELEGATECALL</code> - <code>CALLCODE</code> - <code>STATICCALL</code> for different call gas amounts: - exact gas (valid call) - extra gas (valid call) - insufficient gas (invalid call)</p> <p>The expected result is that the contract call will be executed if the gas amount is met and return the correct<code>parent_beacon_block_root</code>. Otherwise the call will be invalid, and not be executed. This is highlighted within storage by storing the return value of each call context.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_gas, valid_call\",\n    [\n        pytest.param(Spec.BEACON_ROOTS_CALL_GAS, True),\n        pytest.param(int(Spec.BEACON_ROOTS_CALL_GAS / 100), False),\n    ],\n)\n@pytest.mark.parametrize(\n    \"call_type,call_value,valid_input\",\n    [\n        (Op.CALL, 1, True),\n        (Op.CALL, 0, True),\n        (Op.CALLCODE, 0, False),\n        (Op.DELEGATECALL, 0, False),\n        (Op.STATICCALL, 0, True),\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_beacon_root_contract_calls(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests the beacon root contract call using various call contexts:\n    - `CALL`\n    - `DELEGATECALL`\n    - `CALLCODE`\n    - `STATICCALL`\n    for different call gas amounts:\n    - exact gas (valid call)\n    - extra gas (valid call)\n    - insufficient gas (invalid call)\n\n    The expected result is that the contract call will be executed if the gas amount is met\n    and return the correct`parent_beacon_block_root`. Otherwise the call will be invalid, and not\n    be executed. This is highlighted within storage by storing the return value of each call\n    context.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        blocks=[Block(txs=[tx], parent_beacon_block_root=beacon_root, timestamp=timestamp)],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_beacon_root_contract_timestamps","title":"<code>test_beacon_root_contract_timestamps(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests the beacon root contract call across for various valid and invalid timestamps.</p> <p>The expected result is that the contract call will return the correct <code>parent_beacon_block_root</code> for a valid input timestamp and return the zero'd 32 bytes value for an invalid input timestamp.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"timestamp, valid_input\",\n    [\n        (0x0C, True),  # twelve\n        (2**32, True),  # arbitrary\n        (2**64 - 2, True),  # near-max\n        (2**64 - 1, True),  # max\n        # TODO: Update t8n to un marshal &gt; 64-bit int\n        # Exception: failed to evaluate: ERROR(10): failed un marshaling stdin\n        # (2**64, False),  # overflow\n        # Exception: failed to evaluate: ERROR(10): failed un marshaling stdin\n        # (2**64 + 1, False),  # overflow+1\n    ],\n)\n@pytest.mark.parametrize(\"auto_access_list\", [False, True])\n@pytest.mark.parametrize(\n    \"system_address_balance\",\n    [\n        pytest.param(0, id=\"empty_system_address\"),\n        pytest.param(1, id=\"one_wei_system_address\"),\n        pytest.param(int(1e18), id=\"one_eth_system_address\"),\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_beacon_root_contract_timestamps(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests the beacon root contract call across for various valid and invalid timestamps.\n\n    The expected result is that the contract call will return the correct\n    `parent_beacon_block_root` for a valid input timestamp and return the zero'd 32 bytes value\n    for an invalid input timestamp.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        blocks=[Block(txs=[tx], parent_beacon_block_root=beacon_root, timestamp=timestamp)],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_calldata_lengths","title":"<code>test_calldata_lengths(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests the beacon root contract call using multiple invalid input lengths.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_data\",\n    [\n        pytest.param(bytes(), id=\"empty_calldata\"),\n        pytest.param(int.to_bytes(12, length=1, byteorder=\"big\"), id=\"one_byte\"),\n        pytest.param(int.to_bytes(12, length=31, byteorder=\"big\"), id=\"31_bytes\"),\n        pytest.param(int.to_bytes(12, length=33, byteorder=\"big\"), id=\"33_bytes\"),\n        pytest.param(int.to_bytes(12, length=1024, byteorder=\"big\"), id=\"1024_bytes\"),\n    ],\n)\n@pytest.mark.parametrize(\"valid_call,valid_input\", [(False, False)])\n@pytest.mark.parametrize(\"timestamp\", [12])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_calldata_lengths(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests the beacon root contract call using multiple invalid input lengths.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        blocks=[Block(txs=[tx], parent_beacon_block_root=beacon_root, timestamp=timestamp)],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_beacon_root_equal_to_timestamp","title":"<code>test_beacon_root_equal_to_timestamp(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests the beacon root contract call where the beacon root is equal to the timestamp.</p> <p>The expected result is that the contract call will return the <code>parent_beacon_block_root</code>, as all timestamps used are valid.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"beacon_root, timestamp\",\n    [\n        (12, 12),  # twelve\n        (2**32, 2**32),  # arbitrary\n        (2**64 - 2, 2**64 - 2),  # near-max\n        (2**64 - 1, 2**64 - 1),  # max\n    ],\n    indirect=[\"beacon_root\"],\n)\n@pytest.mark.parametrize(\"auto_access_list\", [False, True])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_beacon_root_equal_to_timestamp(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests the beacon root contract call where the beacon root is equal to the timestamp.\n\n    The expected result is that the contract call will return the `parent_beacon_block_root`,\n    as all timestamps used are valid.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        blocks=[Block(txs=[tx], parent_beacon_block_root=beacon_root, timestamp=timestamp)],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_tx_to_beacon_root_contract","title":"<code>test_tx_to_beacon_root_contract(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests the beacon root contract using a transaction with different types and data lengths.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\"auto_access_list\", [False, True])\n@pytest.mark.parametrize(\"call_beacon_root_contract\", [True])\n@pytest.mark.with_all_tx_types\n@pytest.mark.valid_from(\"Cancun\")\ndef test_tx_to_beacon_root_contract(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests the beacon root contract using a transaction with different types and data lengths.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        blocks=[Block(txs=[tx], parent_beacon_block_root=beacon_root, timestamp=timestamp)],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_invalid_beacon_root_calldata_value","title":"<code>test_invalid_beacon_root_calldata_value(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests the beacon root contract call using invalid input values: - zero calldata.</p> <p>Contract should revert.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_data\",\n    [\n        pytest.param(int.to_bytes(0, length=32, byteorder=\"big\"), id=\"zero_calldata\"),\n    ],\n)\n@pytest.mark.parametrize(\"valid_call,valid_input\", [(False, False)])\n@pytest.mark.parametrize(\"timestamp\", [12])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_beacon_root_calldata_value(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests the beacon root contract call using invalid input values:\n    - zero calldata.\n\n    Contract should revert.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        blocks=[Block(txs=[tx], parent_beacon_block_root=beacon_root, timestamp=timestamp)],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_beacon_root_selfdestruct","title":"<code>test_beacon_root_selfdestruct(blockchain_test, beacon_root, timestamp, pre, tx, post)</code>","text":"<p>Tests that self destructing the beacon root address transfers actors balance correctly.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\"timestamp\", [12])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_beacon_root_selfdestruct(\n    blockchain_test: BlockchainTestFiller,\n    beacon_root: bytes,\n    timestamp: int,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Tests that self destructing the beacon root address transfers actors balance correctly.\n    \"\"\"\n    # self destruct actor\n    pre[Address(0x1337)] = Account(\n        code=Op.SELFDESTRUCT(Spec.BEACON_ROOTS_ADDRESS),\n        balance=0xBA1,\n    )\n    # self destruct caller\n    pre[Address(0xCC)] = Account(\n        code=Op.CALL(100000, Address(0x1337), 0, 0, 0, 0, 0)\n        + Op.SSTORE(0, Op.BALANCE(Spec.BEACON_ROOTS_ADDRESS)),\n    )\n    post = {\n        Address(0xCC): Account(\n            storage=Storage({0: 0xBA1}),\n        )\n    }\n    blockchain_test(\n        pre=pre,\n        blocks=[\n            Block(txs=[Transaction(nonce=0, to=Address(0xCC), gas_limit=100000, gas_price=10)])\n        ],\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_multi_block_beacon_root_timestamp_calls","title":"<code>test_multi_block_beacon_root_timestamp_calls(blockchain_test, timestamps, beacon_roots, block_count, tx, call_gas, call_value)</code>","text":"<p>Tests multiple blocks where each block writes a timestamp to storage and contains one transaction that calls the beacon root contract multiple times.</p> <p>The blocks might overwrite the historical roots buffer, or not, depending on the <code>timestamps</code>, and whether they increment in multiples of <code>Spec.HISTORY_BUFFER_LENGTH</code> or not.</p> <p>By default, the beacon roots are the keccak of the block number.</p> <p>Each transaction checks the current timestamp and also all previous timestamps, and verifies that the beacon root is correct for all of them if the timestamp is supposed to be in the buffer, which might have been overwritten by a later block.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"timestamps\",\n    [\n        pytest.param(\n            count(\n                start=Spec.HISTORY_BUFFER_LENGTH - 5,\n                step=1,\n            ),\n            id=\"buffer_wraparound\",\n        ),\n        pytest.param(\n            count(\n                start=12,\n                step=Spec.HISTORY_BUFFER_LENGTH,\n            ),\n            id=\"buffer_wraparound_overwrite\",\n        ),\n        pytest.param(\n            count(\n                start=2**32,\n                step=Spec.HISTORY_BUFFER_LENGTH,\n            ),\n            id=\"buffer_wraparound_overwrite_high_timestamp\",\n        ),\n        pytest.param(\n            count(\n                start=5,\n                step=Spec.HISTORY_BUFFER_LENGTH - 1,\n            ),\n            id=\"buffer_wraparound_no_overwrite\",\n        ),\n        pytest.param(\n            count(\n                start=Spec.HISTORY_BUFFER_LENGTH - 3,\n                step=Spec.HISTORY_BUFFER_LENGTH + 1,\n            ),\n            id=\"buffer_wraparound_no_overwrite_2\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"block_count\", [10])  # All tests use 10 blocks\n@pytest.mark.valid_from(\"Cancun\")\ndef test_multi_block_beacon_root_timestamp_calls(\n    blockchain_test: BlockchainTestFiller,\n    timestamps: Iterator[int],\n    beacon_roots: Iterator[bytes],\n    block_count: int,\n    tx: Transaction,\n    call_gas: int,\n    call_value: int,\n):\n    \"\"\"\n    Tests multiple blocks where each block writes a timestamp to storage and contains one\n    transaction that calls the beacon root contract multiple times.\n\n    The blocks might overwrite the historical roots buffer, or not, depending on the `timestamps`,\n    and whether they increment in multiples of `Spec.HISTORY_BUFFER_LENGTH` or not.\n\n    By default, the beacon roots are the keccak of the block number.\n\n    Each transaction checks the current timestamp and also all previous timestamps, and verifies\n    that the beacon root is correct for all of them if the timestamp is supposed to be in the\n    buffer, which might have been overwritten by a later block.\n    \"\"\"\n    blocks: List[Block] = []\n    pre = {\n        TestAddress: Account(\n            nonce=0,\n            balance=0x10**10,\n        ),\n    }\n    post = {}\n\n    timestamps_storage: Dict[int, int] = {}\n    roots_storage: Dict[int, bytes] = {}\n\n    all_timestamps: List[int] = []\n\n    for timestamp, beacon_root, i in zip(timestamps, beacon_roots, range(block_count)):\n        timestamp_index = timestamp % Spec.HISTORY_BUFFER_LENGTH\n        timestamps_storage[timestamp_index] = timestamp\n        roots_storage[timestamp_index] = beacon_root\n\n        all_timestamps.append(timestamp)\n\n        withdraw_index = count(0)\n\n        current_call_account_code = bytes()\n        current_call_account_expected_storage = Storage()\n        current_call_account_address = Address(0x100 + i)\n\n        # We are going to call the beacon roots contract once for every timestamp of the current\n        # and all previous blocks, and check that the returned beacon root is still correct only\n        # if it was not overwritten.\n        for t in all_timestamps:\n            current_call_account_code += Op.MSTORE(0, t)\n            call_valid = (\n                timestamp_index in timestamps_storage\n                and timestamps_storage[t % Spec.HISTORY_BUFFER_LENGTH] == t\n            )\n            current_call_account_code += Op.SSTORE(\n                current_call_account_expected_storage.store_next(0x01 if call_valid else 0x00),\n                Op.CALL(\n                    call_gas,\n                    Spec.BEACON_ROOTS_ADDRESS,\n                    call_value,\n                    0x00,\n                    0x20,\n                    0x20,\n                    0x20,\n                ),\n            )\n\n            current_call_account_code += Op.SSTORE(\n                current_call_account_expected_storage.store_next(\n                    roots_storage[t % Spec.HISTORY_BUFFER_LENGTH] if call_valid else 0x00\n                ),\n                Op.MLOAD(0x20),\n            )\n\n        pre[current_call_account_address] = Account(\n            code=current_call_account_code,\n        )\n        post[current_call_account_address] = Account(\n            storage=current_call_account_expected_storage,\n        )\n        blocks.append(\n            Block(\n                txs=[\n                    tx.copy(\n                        nonce=i,\n                        to=Address(0x100 + i),\n                        data=Hash(timestamp),\n                    )\n                ],\n                parent_beacon_block_root=beacon_root,\n                timestamp=timestamp,\n                withdrawals=[\n                    # Also withdraw to the beacon root contract and the system address\n                    Withdrawal(\n                        address=Spec.BEACON_ROOTS_ADDRESS,\n                        amount=1,\n                        index=next(withdraw_index),\n                        validator_index=0,\n                    ),\n                    Withdrawal(\n                        address=Spec.SYSTEM_ADDRESS,\n                        amount=1,\n                        index=next(withdraw_index),\n                        validator_index=1,\n                    ),\n                ],\n            )\n        )\n\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_beacon_root_transition","title":"<code>test_beacon_root_transition(blockchain_test, timestamps, beacon_roots, block_count, tx, call_gas, call_value, fork)</code>","text":"<p>Tests the fork transition to cancun and verifies that blocks with timestamp lower than the transition timestamp do not contain beacon roots in the pre-deployed contract.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"timestamps\",\n    [pytest.param(count(start=1000, step=1000), id=\"fork_transition\")],\n)\n@pytest.mark.parametrize(\"block_count\", [20])\n@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_beacon_root_transition(\n    blockchain_test: BlockchainTestFiller,\n    timestamps: Iterator[int],\n    beacon_roots: Iterator[bytes],\n    block_count: int,\n    tx: Transaction,\n    call_gas: int,\n    call_value: int,\n    fork: Fork,\n):\n    \"\"\"\n    Tests the fork transition to cancun and verifies that blocks with timestamp lower than the\n    transition timestamp do not contain beacon roots in the pre-deployed contract.\n    \"\"\"\n    blocks: List[Block] = []\n    pre = {\n        TestAddress: Account(\n            nonce=0,\n            balance=0x10**10,\n        ),\n    }\n    post = {}\n\n    timestamps_storage: Dict[int, int] = {}\n    roots_storage: Dict[int, bytes] = {}\n\n    all_timestamps: List[int] = []\n    timestamps_in_beacon_root_contract: List[int] = []\n\n    for timestamp, beacon_root, i in zip(timestamps, beacon_roots, range(block_count)):\n        timestamp_index = timestamp % Spec.HISTORY_BUFFER_LENGTH\n\n        transitioned = fork.header_beacon_root_required(i, timestamp)\n        if transitioned:\n            # We've transitioned, the current timestamp must contain a value in the contract\n            timestamps_in_beacon_root_contract.append(timestamp)\n            timestamps_storage[timestamp_index] = timestamp\n            roots_storage[timestamp_index] = beacon_root\n\n        all_timestamps.append(timestamp)\n\n        withdraw_index = count(0)\n\n        current_call_account_code = bytes()\n        current_call_account_expected_storage = Storage()\n        current_call_account_address = Address(0x100 + i)\n\n        # We are going to call the beacon roots contract once for every timestamp of the current\n        # and all previous blocks, and check that the returned beacon root is correct only\n        # if it was after the transition timestamp.\n        for t in all_timestamps:\n            current_call_account_code += Op.MSTORE(0, t)\n            call_valid = (\n                t in timestamps_in_beacon_root_contract\n                and timestamp_index in timestamps_storage\n                and timestamps_storage[t % Spec.HISTORY_BUFFER_LENGTH] == t\n            )\n            current_call_account_code += Op.SSTORE(\n                current_call_account_expected_storage.store_next(0x01 if call_valid else 0x00),\n                Op.CALL(\n                    call_gas,\n                    Spec.BEACON_ROOTS_ADDRESS,\n                    call_value,\n                    0x00,\n                    0x20,\n                    0x20,\n                    0x20,\n                ),\n            )\n\n            current_call_account_code += Op.SSTORE(\n                current_call_account_expected_storage.store_next(\n                    roots_storage[t % Spec.HISTORY_BUFFER_LENGTH] if call_valid else 0x00\n                ),\n                Op.MLOAD(0x20),\n            )\n\n        pre[current_call_account_address] = Account(\n            code=current_call_account_code,\n        )\n        post[current_call_account_address] = Account(\n            storage=current_call_account_expected_storage,\n        )\n        blocks.append(\n            Block(\n                txs=[\n                    tx.copy(\n                        nonce=i,\n                        to=Address(0x100 + i),\n                        data=Hash(timestamp),\n                    )\n                ],\n                parent_beacon_block_root=beacon_root if transitioned else None,\n                timestamp=timestamp,\n                withdrawals=[\n                    # Also withdraw to the beacon root contract and the system address\n                    Withdrawal(\n                        address=Spec.BEACON_ROOTS_ADDRESS,\n                        amount=1,\n                        index=next(withdraw_index),\n                        validator_index=0,\n                    ),\n                    Withdrawal(\n                        address=Spec.SYSTEM_ADDRESS,\n                        amount=1,\n                        index=next(withdraw_index),\n                        validator_index=1,\n                    ),\n                ],\n            )\n        )\n\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_no_beacon_root_contract_at_transition","title":"<code>test_no_beacon_root_contract_at_transition(blockchain_test, pre, beacon_roots, tx, timestamp, caller_address, fork)</code>","text":"<p>Tests the fork transition to cancun in the case where the beacon root pre-deploy was not deployed in time for the fork.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\"timestamp\", [15_000])\n@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_no_beacon_root_contract_at_transition(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    beacon_roots: Iterator[bytes],\n    tx: Transaction,\n    timestamp: int,\n    caller_address: Address,\n    fork: Fork,\n):\n    \"\"\"\n    Tests the fork transition to cancun in the case where the beacon root pre-deploy was not\n    deployed in time for the fork.\n    \"\"\"\n    assert fork.header_beacon_root_required(1, timestamp)\n    blocks: List[Block] = [\n        Block(\n            txs=[tx],\n            parent_beacon_block_root=next(beacon_roots),\n            timestamp=timestamp,\n            withdrawals=[\n                # Also withdraw to the beacon root contract and the system address\n                Withdrawal(\n                    address=Spec.BEACON_ROOTS_ADDRESS,\n                    amount=1,\n                    index=0,\n                    validator_index=0,\n                ),\n                Withdrawal(\n                    address=Spec.SYSTEM_ADDRESS,\n                    amount=1,\n                    index=1,\n                    validator_index=1,\n                ),\n            ],\n        )\n    ]\n    pre[Spec.BEACON_ROOTS_ADDRESS] = Account(\n        code=b\"\",  # Remove the code that is automatically allocated on Cancun fork\n        nonce=0,\n        balance=0,\n    )\n    post = {\n        Spec.BEACON_ROOTS_ADDRESS: Account(\n            storage={\n                timestamp % Spec.HISTORY_BUFFER_LENGTH: 0,\n                (timestamp % Spec.HISTORY_BUFFER_LENGTH) + Spec.HISTORY_BUFFER_LENGTH: 0,\n            },\n            code=b\"\",\n            nonce=0,\n            balance=int(1e9),\n        ),\n        caller_address: Account(\n            storage={\n                0: 1\n            },  # Successful call because the contract is not there, but nothing else is stored\n        ),\n    }\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/#tests.cancun.eip4788_beacon_root.test_beacon_root_contract.test_beacon_root_contract_deploy","title":"<code>test_beacon_root_contract_deploy(blockchain_test, pre, beacon_root, tx, timestamp, post, fork)</code>","text":"<p>Tests the fork transition to cancun deploying the contract during Shanghai and verifying the code deployed and its functionality after Cancun.</p> Source code in <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code> <pre><code>@pytest.mark.parametrize(\n    \"timestamp\",\n    [\n        pytest.param(15_000, id=\"deploy_on_shanghai\"),\n        pytest.param(30_000, id=\"deploy_on_cancun\"),\n    ],\n)\n@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_beacon_root_contract_deploy(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    beacon_root: bytes,\n    tx: Transaction,\n    timestamp: int,\n    post: Dict,\n    fork: Fork,\n):\n    \"\"\"\n    Tests the fork transition to cancun deploying the contract during Shanghai and verifying the\n    code deployed and its functionality after Cancun.\n    \"\"\"\n    assert fork.header_beacon_root_required(1, timestamp)\n    tx_gas_limit = 0x3D090\n    tx_gas_price = 0xE8D4A51000\n    deployer_required_balance = tx_gas_limit * tx_gas_price\n    deploy_tx = Transaction(\n        ty=0,\n        nonce=0,\n        to=None,\n        gas_limit=tx_gas_limit,\n        gas_price=tx_gas_price,\n        value=0,\n        data=bytes.fromhex(\n            \"60618060095f395ff33373fffffffffffffffffffffffffffffffffffffffe14604d576020361460\"\n            \"24575f5ffd5b5f35801560495762001fff810690815414603c575f5ffd5b62001fff01545f526020\"\n            \"5ff35b5f5ffd5b62001fff42064281555f359062001fff015500\"\n        ),\n        v=0x1B,\n        r=0x539,\n        s=0x1B9B6EB1F0,\n        protected=False,\n    ).with_signature_and_sender()\n    deployer_address = deploy_tx.sender\n    assert deployer_address is not None\n    assert Address(deployer_address) == Spec.BEACON_ROOTS_DEPLOYER_ADDRESS\n    blocks: List[Block] = []\n\n    beacon_root_contract_storage: Dict = {}\n    for i, current_timestamp in enumerate(range(timestamp // 2, timestamp + 1, timestamp // 2)):\n        if i == 0:\n            blocks.append(\n                Block(  # Deployment block\n                    txs=[deploy_tx],\n                    parent_beacon_block_root=(\n                        beacon_root\n                        if fork.header_beacon_root_required(1, current_timestamp)\n                        else None\n                    ),\n                    timestamp=timestamp // 2,\n                    withdrawals=[\n                        # Also withdraw to the beacon root contract and the system address\n                        Withdrawal(\n                            address=Spec.BEACON_ROOTS_ADDRESS,\n                            amount=1,\n                            index=0,\n                            validator_index=0,\n                        ),\n                        Withdrawal(\n                            address=Spec.SYSTEM_ADDRESS,\n                            amount=1,\n                            index=1,\n                            validator_index=1,\n                        ),\n                    ],\n                )\n            )\n            beacon_root_contract_storage[current_timestamp % Spec.HISTORY_BUFFER_LENGTH] = 0\n            beacon_root_contract_storage[\n                (current_timestamp % Spec.HISTORY_BUFFER_LENGTH) + Spec.HISTORY_BUFFER_LENGTH\n            ] = 0\n        elif i == 1:\n            blocks.append(\n                Block(  # Contract already deployed\n                    txs=[tx],\n                    parent_beacon_block_root=beacon_root,\n                    timestamp=timestamp,\n                    withdrawals=[\n                        # Also withdraw to the beacon root contract and the system address\n                        Withdrawal(\n                            address=Spec.BEACON_ROOTS_ADDRESS,\n                            amount=1,\n                            index=2,\n                            validator_index=0,\n                        ),\n                        Withdrawal(\n                            address=Spec.SYSTEM_ADDRESS,\n                            amount=1,\n                            index=3,\n                            validator_index=1,\n                        ),\n                    ],\n                ),\n            )\n            beacon_root_contract_storage[\n                current_timestamp % Spec.HISTORY_BUFFER_LENGTH\n            ] = current_timestamp\n            beacon_root_contract_storage[\n                (current_timestamp % Spec.HISTORY_BUFFER_LENGTH) + Spec.HISTORY_BUFFER_LENGTH\n            ] = beacon_root\n        else:\n            assert False, \"This test should only have two blocks\"\n\n    expected_code = fork.pre_allocation_blockchain()[Spec.BEACON_ROOTS_ADDRESS][\"code\"]\n    pre[Spec.BEACON_ROOTS_ADDRESS] = Account(\n        code=b\"\",  # Remove the code that is automatically allocated on Cancun fork\n        nonce=0,\n        balance=0,\n    )\n    pre[deployer_address] = Account(\n        balance=deployer_required_balance,\n    )\n\n    post[Spec.BEACON_ROOTS_ADDRESS] = Account(\n        storage=beacon_root_contract_storage,\n        code=expected_code,\n        nonce=1,\n        balance=int(2e9),\n    )\n    post[Spec.SYSTEM_ADDRESS] = Account(\n        storage={},\n        code=b\"\",\n        nonce=0,\n        balance=int(2e9),\n    )\n    post[deployer_address] = Account(\n        balance=175916000000000000,  # It doesn't consume all the balance :(\n        nonce=1,\n    )\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4788_beacon_root/test_beacon_root_contract/index/test_cases/","title":"Test Beacon Root Contract - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py</code>:</p> <pre><code>test_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_CALL-call_value_1-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_CALL-call_value_1-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_CALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_CALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_CALL-call_value_1-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_CALL-call_value_1-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_CALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_CALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Cancun-blockchain_test_hive-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_CALL-call_value_1-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_CALL-call_value_1-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_CALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_CALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_CALL-call_value_1-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_CALL-call_value_1-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_CALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_CALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_CALLCODE-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_DELEGATECALL-call_value_0-valid_input_False-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_100000-valid_call_True]\ntest_beacon_root_contract_calls[fork_Prague-blockchain_test_hive-call_type_STATICCALL-call_value_0-valid_input_True-call_gas_1000-valid_call_False]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-empty_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Cancun-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-empty_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-empty_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_wei_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_False-timestamp_18446744073709551615-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_12-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_4294967296-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551614-valid_input_True]\ntest_beacon_root_contract_timestamps[fork_Prague-blockchain_test_hive-one_eth_system_address-auto_access_list_True-timestamp_18446744073709551615-valid_input_True]\ntest_calldata_lengths[fork_Cancun-blockchain_test-timestamp_12-valid_call_False-valid_input_False-empty_calldata]\ntest_calldata_lengths[fork_Cancun-blockchain_test-timestamp_12-valid_call_False-valid_input_False-one_byte]\ntest_calldata_lengths[fork_Cancun-blockchain_test-timestamp_12-valid_call_False-valid_input_False-31_bytes]\ntest_calldata_lengths[fork_Cancun-blockchain_test-timestamp_12-valid_call_False-valid_input_False-33_bytes]\ntest_calldata_lengths[fork_Cancun-blockchain_test-timestamp_12-valid_call_False-valid_input_False-1024_bytes]\ntest_calldata_lengths[fork_Cancun-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-empty_calldata]\ntest_calldata_lengths[fork_Cancun-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-one_byte]\ntest_calldata_lengths[fork_Cancun-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-31_bytes]\ntest_calldata_lengths[fork_Cancun-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-33_bytes]\ntest_calldata_lengths[fork_Cancun-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-1024_bytes]\ntest_calldata_lengths[fork_Prague-blockchain_test-timestamp_12-valid_call_False-valid_input_False-empty_calldata]\ntest_calldata_lengths[fork_Prague-blockchain_test-timestamp_12-valid_call_False-valid_input_False-one_byte]\ntest_calldata_lengths[fork_Prague-blockchain_test-timestamp_12-valid_call_False-valid_input_False-31_bytes]\ntest_calldata_lengths[fork_Prague-blockchain_test-timestamp_12-valid_call_False-valid_input_False-33_bytes]\ntest_calldata_lengths[fork_Prague-blockchain_test-timestamp_12-valid_call_False-valid_input_False-1024_bytes]\ntest_calldata_lengths[fork_Prague-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-empty_calldata]\ntest_calldata_lengths[fork_Prague-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-one_byte]\ntest_calldata_lengths[fork_Prague-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-31_bytes]\ntest_calldata_lengths[fork_Prague-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-33_bytes]\ntest_calldata_lengths[fork_Prague-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-1024_bytes]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_False-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_False-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_False-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_False-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_True-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_True-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_True-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test-auto_access_list_True-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_False-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_False-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_False-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_False-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_True-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_True-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_True-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Cancun-blockchain_test_hive-auto_access_list_True-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_False-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_False-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_False-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_False-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_True-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_True-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_True-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test-auto_access_list_True-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_False-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_False-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_False-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_False-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_True-beacon_root_12-timestamp_12]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_True-beacon_root_4294967296-timestamp_4294967296]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_True-beacon_root_18446744073709551614-timestamp_18446744073709551614]\ntest_beacon_root_equal_to_timestamp[fork_Prague-blockchain_test_hive-auto_access_list_True-beacon_root_18446744073709551615-timestamp_18446744073709551615]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_3-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_3-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_3-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_3-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_2-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_2-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_2-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_2-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_1-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_1-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_1-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_1-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_0-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_0-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_0-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Cancun-tx_type_0-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_3-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_3-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_3-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_3-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_2-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_2-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_2-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_2-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_1-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_1-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_1-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_1-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_0-blockchain_test-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_0-blockchain_test-call_beacon_root_contract_True-auto_access_list_True]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_0-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_False]\ntest_tx_to_beacon_root_contract[fork_Prague-tx_type_0-blockchain_test_hive-call_beacon_root_contract_True-auto_access_list_True]\ntest_invalid_beacon_root_calldata_value[fork_Cancun-blockchain_test-timestamp_12-valid_call_False-valid_input_False-zero_calldata]\ntest_invalid_beacon_root_calldata_value[fork_Cancun-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-zero_calldata]\ntest_invalid_beacon_root_calldata_value[fork_Prague-blockchain_test-timestamp_12-valid_call_False-valid_input_False-zero_calldata]\ntest_invalid_beacon_root_calldata_value[fork_Prague-blockchain_test_hive-timestamp_12-valid_call_False-valid_input_False-zero_calldata]\ntest_beacon_root_selfdestruct[fork_Cancun-blockchain_test-timestamp_12]\ntest_beacon_root_selfdestruct[fork_Cancun-blockchain_test_hive-timestamp_12]\ntest_beacon_root_selfdestruct[fork_Prague-blockchain_test-timestamp_12]\ntest_beacon_root_selfdestruct[fork_Prague-blockchain_test_hive-timestamp_12]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test-block_count_10-buffer_wraparound]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test-block_count_10-buffer_wraparound_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test-block_count_10-buffer_wraparound_overwrite_high_timestamp]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test-block_count_10-buffer_wraparound_no_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test-block_count_10-buffer_wraparound_no_overwrite_2]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test_hive-block_count_10-buffer_wraparound]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test_hive-block_count_10-buffer_wraparound_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test_hive-block_count_10-buffer_wraparound_overwrite_high_timestamp]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test_hive-block_count_10-buffer_wraparound_no_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Cancun-blockchain_test_hive-block_count_10-buffer_wraparound_no_overwrite_2]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test-block_count_10-buffer_wraparound]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test-block_count_10-buffer_wraparound_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test-block_count_10-buffer_wraparound_overwrite_high_timestamp]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test-block_count_10-buffer_wraparound_no_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test-block_count_10-buffer_wraparound_no_overwrite_2]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test_hive-block_count_10-buffer_wraparound]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test_hive-block_count_10-buffer_wraparound_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test_hive-block_count_10-buffer_wraparound_overwrite_high_timestamp]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test_hive-block_count_10-buffer_wraparound_no_overwrite]\ntest_multi_block_beacon_root_timestamp_calls[fork_Prague-blockchain_test_hive-block_count_10-buffer_wraparound_no_overwrite_2]\ntest_beacon_root_transition[fork_ShanghaiToCancunAtTime15k-blockchain_test-block_count_20-fork_transition]\ntest_beacon_root_transition[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-block_count_20-fork_transition]\ntest_no_beacon_root_contract_at_transition[fork_ShanghaiToCancunAtTime15k-blockchain_test-timestamp_15000]\ntest_no_beacon_root_contract_at_transition[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-timestamp_15000]\ntest_beacon_root_contract_deploy[fork_ShanghaiToCancunAtTime15k-blockchain_test-deploy_on_shanghai]\ntest_beacon_root_contract_deploy[fork_ShanghaiToCancunAtTime15k-blockchain_test-deploy_on_cancun]\ntest_beacon_root_contract_deploy[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-deploy_on_shanghai]\ntest_beacon_root_contract_deploy[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-deploy_on_cancun]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4788_beacon_root/test_beacon_root_contract.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/","title":"EIP-4844 Blobs","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs\n</code></pre> <p>Cross-client EIP-4844 Tests</p>"},{"location":"tests/cancun/eip4844_blobs/point_evaluation_vectors/README_./","title":"KZG Point Evaluation Test Vectors","text":"<p>This directory contains test vectors for the KZG point evaluation algorithm that are loaded and used throughout different tests.</p> <p>Each file must contain a JSON list of objects, each with the following fields:</p> <ul> <li><code>name</code>: a string describing the test case</li> <li><code>input</code>: object containing <code>commitment</code>, <code>proof</code>, <code>z</code> and <code>y</code></li> <li><code>output</code>: expected output of the evaluation, true, false or null.</li> </ul>"},{"location":"tests/cancun/eip4844_blobs/point_evaluation_vectors/README_./#generating-the-test-vectors-used-in-v106-and-on","title":"Generating The Test Vectors (used in v1.0.6 and on)","text":"<p>From execution-spec-tests release v1.0.6 and on, the point evaluation test vectors were generated using commit 63aa303c from the official-kzg consensus-specs branch.</p> <p>The test vectors were generated as following:</p> <ol> <li> <p>In the consensus-specs repo:</p> <pre><code>cd tests/generators/kzg_4844/\nrm -rf /tmp/kzg_4844_output\nmkdir /tmp/kzg_4844_output\npython -m main --output /tmp/kzg_4844_output\n</code></pre> </li> <li> <p>In the execution-spec-tests repo:</p> <pre><code>cd tests/cancun/4844_blobs/point_evaluation_vectors/\npip install -r requirements.txt\npython concat_kzg_vectors_to_json.py \\\n    --input /tmp/kzg_4844_output/general/deneb/kzg/verify_kzg_proof/kzg-mainnet/\n    --output go_kzg_4844_verify_kzg_proof.json\n</code></pre> </li> </ol>"},{"location":"tests/cancun/eip4844_blobs/point_evaluation_vectors/README_./#previous-versions-of-the-test-vectors-used-up-to-v105","title":"Previous Versions of the Test Vectors (used up to v1.0.5)","text":"<p>The test vectors up and including execution-spec-tests release v1.0.5 were: - <code>go_kzg_4844_verify_kzg_proof.json</code>: test vectors from the go-kzg-4844 repository.</p>"},{"location":"tests/cancun/eip4844_blobs/spec/","title":"Spec","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/spec.py</code>.</p> <p>Defines EIP-4844 specification constants and functions.</p>"},{"location":"tests/cancun/eip4844_blobs/spec/#tests.cancun.eip4844_blobs.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-4844 specifications as defined at https://eips.ethereum.org/EIPS/eip-4844#parameters</p> <p>If the parameter is not currently used within the tests, it is commented out.</p> Source code in <code>tests/cancun/eip4844_blobs/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-4844 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-4844#parameters\n\n    If the parameter is not currently used within the tests, it is commented\n    out.\n    \"\"\"\n\n    BLOB_TX_TYPE = 0x03\n    FIELD_ELEMENTS_PER_BLOB = 4096\n    BLS_MODULUS = 0x73EDA753299D7D483339D80809A1D80553BDA402FFFE5BFEFFFFFFFF00000001\n    BLOB_COMMITMENT_VERSION_KZG = 1\n    POINT_EVALUATION_PRECOMPILE_ADDRESS = 10\n    POINT_EVALUATION_PRECOMPILE_GAS = 50_000\n    MAX_BLOB_GAS_PER_BLOCK = 786432\n    TARGET_BLOB_GAS_PER_BLOCK = 393216\n    MIN_BLOB_GASPRICE = 1\n    BLOB_GASPRICE_UPDATE_FRACTION = 3338477\n    # MAX_VERSIONED_HASHES_LIST_SIZE = 2**24\n    # MAX_CALLDATA_SIZE = 2**24\n    # MAX_ACCESS_LIST_SIZE = 2**24\n    # MAX_ACCESS_LIST_STORAGE_KEYS = 2**24\n    # MAX_TX_WRAP_COMMITMENTS = 2**12\n    # LIMIT_BLOBS_PER_TX = 2**12\n    GAS_PER_BLOB = 2**17\n    HASH_OPCODE_BYTE = 0x49\n    HASH_GAS_COST = 3\n\n    @classmethod\n    def kzg_to_versioned_hash(\n        cls,\n        kzg_commitment: bytes | int,  # 48 bytes\n        blob_commitment_version_kzg: Optional[bytes | int] = None,\n    ) -&gt; bytes:\n        \"\"\"\n        Calculates the versioned hash for a given KZG commitment.\n        \"\"\"\n        if blob_commitment_version_kzg is None:\n            blob_commitment_version_kzg = cls.BLOB_COMMITMENT_VERSION_KZG\n        if isinstance(kzg_commitment, int):\n            kzg_commitment = kzg_commitment.to_bytes(48, \"big\")\n        if isinstance(blob_commitment_version_kzg, int):\n            blob_commitment_version_kzg = blob_commitment_version_kzg.to_bytes(1, \"big\")\n        return blob_commitment_version_kzg + sha256(kzg_commitment).digest()[1:]\n\n    @classmethod\n    def fake_exponential(cls, factor: int, numerator: int, denominator: int) -&gt; int:\n        \"\"\"\n        Used to calculate the blob gas cost.\n        \"\"\"\n        i = 1\n        output = 0\n        numerator_accumulator = factor * denominator\n        while numerator_accumulator &gt; 0:\n            output += numerator_accumulator\n            numerator_accumulator = (numerator_accumulator * numerator) // (denominator * i)\n            i += 1\n        return output // denominator\n\n    @classmethod\n    def calc_excess_blob_gas(cls, parent: BlockHeaderBlobGasFields) -&gt; int:\n        \"\"\"\n        Calculate the excess blob gas for a block given the excess blob gas\n        and blob gas used from the parent block header.\n        \"\"\"\n        if parent.excess_blob_gas + parent.blob_gas_used &lt; cls.TARGET_BLOB_GAS_PER_BLOCK:\n            return 0\n        else:\n            return parent.excess_blob_gas + parent.blob_gas_used - cls.TARGET_BLOB_GAS_PER_BLOCK\n\n    @classmethod\n    def get_total_blob_gas(cls, tx: Transaction) -&gt; int:\n        \"\"\"\n        Calculate the total blob gas for a transaction.\n        \"\"\"\n        if tx.blob_versioned_hashes is None:\n            return 0\n        return cls.GAS_PER_BLOB * len(tx.blob_versioned_hashes)\n\n    @classmethod\n    def get_blob_gasprice(cls, *, excess_blob_gas: int) -&gt; int:\n        \"\"\"\n        Calculate the blob gas price from the excess.\n        \"\"\"\n        return cls.fake_exponential(\n            cls.MIN_BLOB_GASPRICE,\n            excess_blob_gas,\n            cls.BLOB_GASPRICE_UPDATE_FRACTION,\n        )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/spec/#tests.cancun.eip4844_blobs.spec.SpecHelpers","title":"<code>SpecHelpers</code>  <code>dataclass</code>","text":"<p>Define parameters and helper functions that are tightly coupled to the 4844 spec but not strictly part of it.</p> Source code in <code>tests/cancun/eip4844_blobs/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass SpecHelpers:\n    \"\"\"\n    Define parameters and helper functions that are tightly coupled to the 4844\n    spec but not strictly part of it.\n    \"\"\"\n\n    BYTES_PER_FIELD_ELEMENT = 32\n\n    @classmethod\n    def max_blobs_per_block(cls) -&gt; int:  # MAX_BLOBS_PER_BLOCK =\n        \"\"\"\n        Returns the maximum number of blobs per block.\n        \"\"\"\n        return Spec.MAX_BLOB_GAS_PER_BLOCK // Spec.GAS_PER_BLOB\n\n    @classmethod\n    def target_blobs_per_block(cls) -&gt; int:\n        \"\"\"\n        Returns the target number of blobs per block.\n        \"\"\"\n        return Spec.TARGET_BLOB_GAS_PER_BLOCK // Spec.GAS_PER_BLOB\n\n    @classmethod\n    def calc_excess_blob_gas_from_blob_count(\n        cls, parent_excess_blob_gas: int, parent_blob_count: int\n    ) -&gt; int:\n        \"\"\"\n        Calculate the excess blob gas for a block given the parent excess blob gas\n        and the number of blobs in the block.\n        \"\"\"\n        parent_consumed_blob_gas = parent_blob_count * Spec.GAS_PER_BLOB\n        return Spec.calc_excess_blob_gas(\n            BlockHeaderBlobGasFields(parent_excess_blob_gas, parent_consumed_blob_gas)\n        )\n\n    @classmethod\n    def get_min_excess_blob_gas_for_blob_gas_price(cls, blob_gas_price: int) -&gt; int:\n        \"\"\"\n        Gets the minimum required excess blob gas value to get a given blob gas cost in a block\n        \"\"\"\n        current_excess_blob_gas = 0\n        current_blob_gas_price = 1\n        while current_blob_gas_price &lt; blob_gas_price:\n            current_excess_blob_gas += Spec.GAS_PER_BLOB\n            current_blob_gas_price = Spec.get_blob_gasprice(\n                excess_blob_gas=current_excess_blob_gas\n            )\n        return current_excess_blob_gas\n\n    @classmethod\n    def get_min_excess_blobs_for_blob_gas_price(cls, blob_gas_price: int) -&gt; int:\n        \"\"\"\n        Gets the minimum required excess blobs to get a given blob gas cost in a block\n        \"\"\"\n        return cls.get_min_excess_blob_gas_for_blob_gas_price(blob_gas_price) // Spec.GAS_PER_BLOB\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/","title":"Test Blob Txs","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_blob_txs.py\n</code></pre> Tests blob type transactions for EIP-4844: Shard Blob Transactions <p>Test blob type transactions for EIP-4844: Shard Blob Transactions.</p> Adding a new test <p>Add a function that is named <code>test_&lt;test_name&gt;</code> and takes at least the following arguments:</p> <ul> <li>blockchain_test or state_test</li> <li>pre</li> <li>env</li> <li>block or txs</li> </ul> <p>All other <code>pytest.fixture</code> fixtures can be parametrized to generate new combinations and test cases.</p>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_valid_blob_tx_combinations","title":"<code>test_valid_blob_tx_combinations(blockchain_test, pre, env, block)</code>","text":"<p>Test all valid blob combinations in a single block, assuming a given value of <code>MAX_BLOBS_PER_BLOCK</code>.</p> <p>This assumes a block can include from 1 and up to <code>MAX_BLOBS_PER_BLOCK</code> transactions where all transactions contain at least 1 blob, and the sum of all blobs in a block is at most <code>MAX_BLOBS_PER_BLOCK</code>.</p> <p>This test is parametrized with all valid blob transaction combinations for a given block, and therefore if value of <code>MAX_BLOBS_PER_BLOCK</code> changes, this test is automatically updated.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blobs_per_tx\",\n    all_valid_blob_combinations(),\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_valid_blob_tx_combinations(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    block: Block,\n):\n    \"\"\"\n    Test all valid blob combinations in a single block, assuming a given value of\n    `MAX_BLOBS_PER_BLOCK`.\n\n    This assumes a block can include from 1 and up to `MAX_BLOBS_PER_BLOCK` transactions where all\n    transactions contain at least 1 blob, and the sum of all blobs in a block is at\n    most `MAX_BLOBS_PER_BLOCK`.\n\n    This test is parametrized with all valid blob transaction combinations for a given block, and\n    therefore if value of `MAX_BLOBS_PER_BLOCK` changes, this test is automatically updated.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=[block],\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_tx_max_fee_per_blob_gas","title":"<code>test_invalid_tx_max_fee_per_blob_gas(blockchain_test, pre, env, block, non_zero_blob_gas_used_genesis_block)</code>","text":"<p>Reject blocks with invalid blob txs due to:</p> <ul> <li>tx max_fee_per_blob_gas is barely not enough</li> <li>tx max_fee_per_blob_gas is zero</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_excess_blobs,parent_blobs,tx_max_fee_per_blob_gas,tx_error\",\n    [\n        # tx max_blob_gas_cost of the transaction is not enough\n        pytest.param(\n            SpecHelpers.get_min_excess_blobs_for_blob_gas_price(2) - 1,  # blob gas price is 1\n            SpecHelpers.target_blobs_per_block() + 1,  # blob gas cost increases to 2\n            1,  # tx max_blob_gas_cost is 1\n            TransactionException.INSUFFICIENT_MAX_FEE_PER_BLOB_GAS,\n            id=\"insufficient_max_fee_per_blob_gas\",\n        ),\n        # tx max_blob_gas_cost of the transaction is zero, which is invalid\n        pytest.param(\n            0,  # blob gas price is 1\n            0,  # blob gas cost stays put at 1\n            0,  # tx max_blob_gas_cost is 0\n            TransactionException.INSUFFICIENT_MAX_FEE_PER_BLOB_GAS,\n            id=\"invalid_max_fee_per_blob_gas\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\n    \"account_balance_modifier\",\n    [1_000_000_000],\n)  # Extra balance to cover block blob gas cost\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_tx_max_fee_per_blob_gas(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    block: Block,\n    non_zero_blob_gas_used_genesis_block: Optional[Block],\n):\n    \"\"\"\n    Reject blocks with invalid blob txs due to:\n\n    - tx max_fee_per_blob_gas is barely not enough\n    - tx max_fee_per_blob_gas is zero\n    \"\"\"\n    blocks = [block]\n    if non_zero_blob_gas_used_genesis_block is not None:\n        pre[TestAddress2] = Account(balance=10**9)\n        blocks = [non_zero_blob_gas_used_genesis_block, block]\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_tx_max_fee_per_blob_gas_state","title":"<code>test_invalid_tx_max_fee_per_blob_gas_state(state_test_only, state_env, pre, txs)</code>","text":"<p>Reject an invalid blob transaction due to:</p> <ul> <li>tx max_fee_per_blob_gas is barely not enough</li> <li>tx max_fee_per_blob_gas is zero</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_excess_blobs,parent_blobs,tx_max_fee_per_blob_gas,tx_error\",\n    [\n        # tx max_blob_gas_cost of the transaction is not enough\n        pytest.param(\n            SpecHelpers.get_min_excess_blobs_for_blob_gas_price(2) - 1,  # blob gas price is 1\n            SpecHelpers.target_blobs_per_block() + 1,  # blob gas cost increases to 2\n            1,  # tx max_blob_gas_cost is 1\n            TransactionException.INSUFFICIENT_MAX_FEE_PER_BLOB_GAS,\n            id=\"insufficient_max_fee_per_blob_gas\",\n        ),\n        # tx max_blob_gas_cost of the transaction is zero, which is invalid\n        pytest.param(\n            0,  # blob gas price is 1\n            0,  # blob gas cost stays put at 1\n            0,  # tx max_blob_gas_cost is 0\n            TransactionException.INSUFFICIENT_MAX_FEE_PER_BLOB_GAS,\n            id=\"invalid_max_fee_per_blob_gas\",\n        ),\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_tx_max_fee_per_blob_gas_state(\n    state_test_only: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n):\n    \"\"\"\n    Reject an invalid blob transaction due to:\n\n    - tx max_fee_per_blob_gas is barely not enough\n    - tx max_fee_per_blob_gas is zero\n    \"\"\"\n    assert len(txs) == 1\n    state_test_only(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_normal_gas","title":"<code>test_invalid_normal_gas(state_test, state_env, pre, txs, header_verify, rlp_modifier)</code>","text":"<p>Reject an invalid blob transaction due to:</p> <ul> <li>Sufficient max fee per blob gas, but insufficient max fee per gas</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_max_fee_per_gas,tx_error\",\n    [\n        # max blob gas is ok, but max fee per gas is less than base fee per gas\n        (\n            6,\n            TransactionException.INSUFFICIENT_MAX_FEE_PER_GAS,\n        ),\n    ],\n    ids=[\"insufficient_max_fee_per_gas\"],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_normal_gas(\n    state_test: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n    header_verify: Optional[Header],\n    rlp_modifier: Optional[Header],\n):\n    \"\"\"\n    Reject an invalid blob transaction due to:\n\n    - Sufficient max fee per blob gas, but insufficient max fee per gas\n    \"\"\"\n    assert len(txs) == 1\n    state_test(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=state_env,\n        blockchain_test_header_verify=header_verify,\n        blockchain_test_rlp_modifier=rlp_modifier,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_block_blob_count","title":"<code>test_invalid_block_blob_count(blockchain_test, pre, env, block)</code>","text":"<p>Test all invalid blob combinations in a single block, where the sum of all blobs in a block is at <code>MAX_BLOBS_PER_BLOCK + 1</code>.</p> <p>This test is parametrized with all blob transaction combinations exceeding <code>MAX_BLOBS_PER_BLOCK</code> by one for a given block, and therefore if value of <code>MAX_BLOBS_PER_BLOCK</code> changes, this test is automatically updated.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blobs_per_tx\",\n    invalid_blob_combinations(),\n)\n@pytest.mark.parametrize(\n    \"tx_error\", [TransactionException.TYPE_3_TX_MAX_BLOB_GAS_ALLOWANCE_EXCEEDED], ids=[\"\"]\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_block_blob_count(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    block: Block,\n):\n    \"\"\"\n    Test all invalid blob combinations in a single block, where the sum of all blobs in a block is\n    at `MAX_BLOBS_PER_BLOCK + 1`.\n\n    This test is parametrized with all blob transaction combinations exceeding\n    `MAX_BLOBS_PER_BLOCK` by one for a given block, and\n    therefore if value of `MAX_BLOBS_PER_BLOCK` changes, this test is automatically updated.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=[block],\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_insufficient_balance_blob_tx","title":"<code>test_insufficient_balance_blob_tx(state_test, state_env, pre, txs)</code>","text":"<p>Reject blocks where user cannot afford the blob gas specified (but max_fee_per_gas would be enough for current block), including:</p> <ul> <li>Transactions with max fee equal or higher than current block base fee</li> <li>Transactions with and without priority fee</li> <li>Transactions with and without value</li> <li>Transactions with and without calldata</li> <li>Transactions with max fee per blob gas lower or higher than the priority fee</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_access_list\",\n    [[], [AccessList(address=100, storage_keys=[100, 200])]],\n    ids=[\"no_access_list\", \"access_list\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_gas\", [7, 14])\n@pytest.mark.parametrize(\"tx_max_priority_fee_per_gas\", [0, 7])\n@pytest.mark.parametrize(\"tx_value\", [0, 1])\n@pytest.mark.parametrize(\n    \"tx_calldata\",\n    [b\"\", b\"\\x00\", b\"\\x01\"],\n    ids=[\"no_calldata\", \"single_zero_calldata\", \"single_one_calldata\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_blob_gas\", [1, 100, 10000])\n@pytest.mark.parametrize(\"account_balance_modifier\", [-1], ids=[\"exact_balance_minus_1\"])\n@pytest.mark.parametrize(\"tx_error\", [TransactionException.INSUFFICIENT_ACCOUNT_FUNDS], ids=[\"\"])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_insufficient_balance_blob_tx(\n    state_test: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n):\n    \"\"\"\n    Reject blocks where user cannot afford the blob gas specified (but\n    max_fee_per_gas would be enough for current block), including:\n\n    - Transactions with max fee equal or higher than current block base fee\n    - Transactions with and without priority fee\n    - Transactions with and without value\n    - Transactions with and without calldata\n    - Transactions with max fee per blob gas lower or higher than the priority fee\n    \"\"\"\n    assert len(txs) == 1\n    state_test(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_sufficient_balance_blob_tx","title":"<code>test_sufficient_balance_blob_tx(state_test, state_env, pre, txs)</code>","text":"<p>Check that transaction is accepted when user can exactly afford the blob gas specified (and max_fee_per_gas would be enough for current block), including:</p> <ul> <li>Transactions with max fee equal or higher than current block base fee</li> <li>Transactions with and without priority fee</li> <li>Transactions with and without value</li> <li>Transactions with and without calldata</li> <li>Transactions with max fee per blob gas lower or higher than the priority fee</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_access_list\",\n    [[], [AccessList(address=100, storage_keys=[100, 200])]],\n    ids=[\"no_access_list\", \"access_list\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_gas\", [7, 14])\n@pytest.mark.parametrize(\"tx_max_priority_fee_per_gas\", [0, 7])\n@pytest.mark.parametrize(\"tx_value\", [0, 1])\n@pytest.mark.parametrize(\n    \"tx_calldata\",\n    [b\"\", b\"\\x00\", b\"\\x01\"],\n    ids=[\"no_calldata\", \"single_zero_calldata\", \"single_one_calldata\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_blob_gas\", [1, 100, 10000])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_sufficient_balance_blob_tx(\n    state_test: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n):\n    \"\"\"\n    Check that transaction is accepted when user can exactly afford the blob gas specified (and\n    max_fee_per_gas would be enough for current block), including:\n\n    - Transactions with max fee equal or higher than current block base fee\n    - Transactions with and without priority fee\n    - Transactions with and without value\n    - Transactions with and without calldata\n    - Transactions with max fee per blob gas lower or higher than the priority fee\n    \"\"\"\n    assert len(txs) == 1\n    state_test(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_sufficient_balance_blob_tx_pre_fund_tx","title":"<code>test_sufficient_balance_blob_tx_pre_fund_tx(blockchain_test, total_account_minimum_balance, env, pre, txs, header_verify)</code>","text":"<p>Check that transaction is accepted when user can exactly afford the blob gas specified (and max_fee_per_gas would be enough for current block) because a funding transaction is prepended in the same block, including:</p> <ul> <li>Transactions with max fee equal or higher than current block base fee</li> <li>Transactions with and without priority fee</li> <li>Transactions with and without value</li> <li>Transactions with and without calldata</li> <li>Transactions with max fee per blob gas lower or higher than the priority fee</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_access_list\",\n    [[], [AccessList(address=100, storage_keys=[100, 200])]],\n    ids=[\"no_access_list\", \"access_list\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_gas\", [7, 14])\n@pytest.mark.parametrize(\"tx_max_priority_fee_per_gas\", [0, 7])\n@pytest.mark.parametrize(\"tx_value\", [0, 1])\n@pytest.mark.parametrize(\n    \"tx_calldata\",\n    [b\"\", b\"\\x00\", b\"\\x01\"],\n    ids=[\"no_calldata\", \"single_zero_calldata\", \"single_one_calldata\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_blob_gas\", [1, 100, 10000])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_sufficient_balance_blob_tx_pre_fund_tx(\n    blockchain_test: BlockchainTestFiller,\n    total_account_minimum_balance: int,\n    env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n    header_verify: Optional[Header],\n):\n    \"\"\"\n    Check that transaction is accepted when user can exactly afford the blob gas specified (and\n    max_fee_per_gas would be enough for current block) because a funding transaction is\n    prepended in the same block, including:\n\n    - Transactions with max fee equal or higher than current block base fee\n    - Transactions with and without priority fee\n    - Transactions with and without value\n    - Transactions with and without calldata\n    - Transactions with max fee per blob gas lower or higher than the priority fee\n    \"\"\"\n    pre = {\n        TestPreFundingAddress: Account(balance=(21_000 * 100) + total_account_minimum_balance),\n    }\n    txs = [\n        Transaction(\n            ty=2,\n            nonce=0,\n            to=TestAddress,\n            value=total_account_minimum_balance,\n            gas_limit=21_000,\n            max_fee_per_gas=100,\n            max_priority_fee_per_gas=0,\n            access_list=[],\n            secret_key=TestPreFundingKey,\n        )\n    ] + txs\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=[\n            Block(\n                txs=txs,\n                header_verify=header_verify,\n            )\n        ],\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_blob_gas_subtraction_tx","title":"<code>test_blob_gas_subtraction_tx(state_test, state_env, pre, txs, destination_account, mid_tx_send_amount, total_account_transactions_fee)</code>","text":"<p>Check that the blob gas fee for a transaction is subtracted from the sender balance before the transaction is executed, including:</p> <ul> <li>Transactions with max fee equal or higher than current block base fee</li> <li>Transactions with and without value</li> <li>Transactions with and without calldata</li> <li>Transactions with max fee per blob gas lower or higher than the priority fee</li> <li>Transactions where an externally owned account sends funds to the sender mid execution</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_access_list\",\n    [[], [AccessList(address=100, storage_keys=[100, 200])]],\n    ids=[\"no_access_list\", \"access_list\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_gas\", [7, 14])\n@pytest.mark.parametrize(\"tx_max_priority_fee_per_gas\", [0, 7])\n@pytest.mark.parametrize(\"tx_value\", [0, 1])\n@pytest.mark.parametrize(\n    \"tx_calldata\",\n    [b\"\", b\"\\x01\"],\n    ids=[\"no_calldata\", \"single_non_zero_byte_calldata\"],\n)\n@pytest.mark.parametrize(\"tx_max_fee_per_blob_gas\", [1, 100])\n@pytest.mark.parametrize(\n    \"tx_gas\", [500_000], ids=[\"\"]\n)  # Increase gas to account for contract code\n@pytest.mark.parametrize(\n    \"mid_tx_send_amount\", [100]\n)  # Amount sent by the contract to the sender mid execution\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blob_gas_subtraction_tx(\n    state_test: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n    destination_account: Address,\n    mid_tx_send_amount: int,\n    total_account_transactions_fee: int,\n):\n    \"\"\"\n    Check that the blob gas fee for a transaction is subtracted from the sender balance before the\n    transaction is executed, including:\n\n    - Transactions with max fee equal or higher than current block base fee\n    - Transactions with and without value\n    - Transactions with and without calldata\n    - Transactions with max fee per blob gas lower or higher than the priority fee\n    - Transactions where an externally owned account sends funds to the sender mid execution\n    \"\"\"\n    assert len(txs) == 1\n    pre[destination_account] = Account(\n        balance=mid_tx_send_amount,\n        code=Op.SSTORE(0, Op.BALANCE(Op.ORIGIN))\n        + Op.CALL(Op.GAS, Op.ORIGIN, mid_tx_send_amount, 0, 0, 0, 0)\n        + Op.SSTORE(1, Op.BALANCE(Op.ORIGIN)),\n    )\n    post = {\n        destination_account: Account(\n            storage={\n                0: pre[TestAddress].balance - total_account_transactions_fee,\n                1: pre[TestAddress].balance - total_account_transactions_fee + mid_tx_send_amount,\n            }\n        )\n    }\n    state_test(\n        pre=pre,\n        post=post,\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_insufficient_balance_blob_tx_combinations","title":"<code>test_insufficient_balance_blob_tx_combinations(blockchain_test, pre, env, block)</code>","text":"<p>Reject all valid blob transaction combinations in a block, but block is invalid due to:</p> <ul> <li>The amount of blobs is correct but the user cannot afford the         transaction total cost</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blobs_per_tx\",\n    all_valid_blob_combinations(),\n)\n@pytest.mark.parametrize(\"account_balance_modifier\", [-1], ids=[\"exact_balance_minus_1\"])\n@pytest.mark.parametrize(\"tx_error\", [TransactionException.INSUFFICIENT_ACCOUNT_FUNDS], ids=[\"\"])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_insufficient_balance_blob_tx_combinations(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    block: Block,\n):\n    \"\"\"\n    Reject all valid blob transaction combinations in a block, but block is invalid due to:\n\n    - The amount of blobs is correct but the user cannot afford the\n            transaction total cost\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=[block],\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_tx_blob_count","title":"<code>test_invalid_tx_blob_count(state_test, state_env, pre, txs, header_verify, rlp_modifier)</code>","text":"<p>Reject blocks that include blob transactions with invalid blob counts:</p> <ul> <li><code>blob count == 0</code> in type 3 transaction</li> <li><code>blob count &gt; MAX_BLOBS_PER_BLOCK</code> in type 3 transaction</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blobs_per_tx,tx_error\",\n    [\n        ([0], TransactionException.TYPE_3_TX_ZERO_BLOBS),\n        (\n            [SpecHelpers.max_blobs_per_block() + 1],\n            TransactionException.TYPE_3_TX_BLOB_COUNT_EXCEEDED,\n        ),\n    ],\n    ids=[\"too_few_blobs\", \"too_many_blobs\"],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_tx_blob_count(\n    state_test: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n    header_verify: Optional[Header],\n    rlp_modifier: Optional[Header],\n):\n    \"\"\"\n    Reject blocks that include blob transactions with invalid blob counts:\n\n    - `blob count == 0` in type 3 transaction\n    - `blob count &gt; MAX_BLOBS_PER_BLOCK` in type 3 transaction\n    \"\"\"\n    assert len(txs) == 1\n    state_test(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=state_env,\n        blockchain_test_header_verify=header_verify,\n        blockchain_test_rlp_modifier=rlp_modifier,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_blob_hash_versioning_single_tx","title":"<code>test_invalid_blob_hash_versioning_single_tx(state_test, state_env, pre, txs, header_verify, rlp_modifier)</code>","text":"<p>Reject blob transactions with invalid blob hash version, including:</p> <ul> <li>Transaction with single blob with invalid version</li> <li>Transaction with multiple blobs all with invalid version</li> <li>Transaction with multiple blobs either with invalid version</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blob_hashes_per_tx\",\n    [\n        [[Hash(1)]],\n        [[Hash(x) for x in range(2)]],\n        [add_kzg_version([Hash(1)], Spec.BLOB_COMMITMENT_VERSION_KZG) + [Hash(2)]],\n        [[Hash(1)] + add_kzg_version([Hash(2)], Spec.BLOB_COMMITMENT_VERSION_KZG)],\n    ],\n    ids=[\n        \"single_blob\",\n        \"multiple_blobs\",\n        \"multiple_blobs_single_bad_hash_1\",\n        \"multiple_blobs_single_bad_hash_2\",\n    ],\n)\n@pytest.mark.parametrize(\n    \"tx_error\", [TransactionException.TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH], ids=[\"\"]\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_blob_hash_versioning_single_tx(\n    state_test: StateTestFiller,\n    state_env: Environment,\n    pre: Dict,\n    txs: List[Transaction],\n    header_verify: Optional[Header],\n    rlp_modifier: Optional[Header],\n):\n    \"\"\"\n    Reject blob transactions with invalid blob hash version, including:\n\n    - Transaction with single blob with invalid version\n    - Transaction with multiple blobs all with invalid version\n    - Transaction with multiple blobs either with invalid version\n    \"\"\"\n    assert len(txs) == 1\n    state_test(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=state_env,\n        blockchain_test_header_verify=header_verify,\n        blockchain_test_rlp_modifier=rlp_modifier,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_blob_hash_versioning_multiple_txs","title":"<code>test_invalid_blob_hash_versioning_multiple_txs(blockchain_test, pre, env, block)</code>","text":"<p>Reject blocks that include blob transactions with invalid blob hash version, including:</p> <ul> <li>Multiple blob transactions with single blob all with invalid version</li> <li>Multiple blob transactions with multiple blobs all with invalid version</li> <li>Multiple blob transactions with multiple blobs only one with invalid version</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blob_hashes_per_tx\",\n    [\n        [\n            add_kzg_version([Hash(1)], Spec.BLOB_COMMITMENT_VERSION_KZG),\n            [Hash(2)],\n        ],\n        [\n            add_kzg_version([Hash(1)], Spec.BLOB_COMMITMENT_VERSION_KZG),\n            [Hash(x) for x in range(1, 3)],\n        ],\n        [\n            add_kzg_version([Hash(1)], Spec.BLOB_COMMITMENT_VERSION_KZG),\n            [Hash(2)] + add_kzg_version([Hash(3)], Spec.BLOB_COMMITMENT_VERSION_KZG),\n        ],\n        [\n            add_kzg_version([Hash(1)], Spec.BLOB_COMMITMENT_VERSION_KZG),\n            add_kzg_version([Hash(2)], Spec.BLOB_COMMITMENT_VERSION_KZG),\n            [Hash(3)],\n        ],\n    ],\n    ids=[\n        \"single_blob\",\n        \"multiple_blobs\",\n        \"multiple_blobs_single_bad_hash_1\",\n        \"multiple_blobs_single_bad_hash_2\",\n    ],\n)\n@pytest.mark.parametrize(\n    \"tx_error\", [TransactionException.TYPE_3_TX_INVALID_BLOB_VERSIONED_HASH], ids=[\"\"]\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_blob_hash_versioning_multiple_txs(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    block: Block,\n):\n    \"\"\"\n    Reject blocks that include blob transactions with invalid blob hash\n    version, including:\n\n    - Multiple blob transactions with single blob all with invalid version\n    - Multiple blob transactions with multiple blobs all with invalid version\n    - Multiple blob transactions with multiple blobs only one with invalid version\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=[block],\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_invalid_blob_tx_contract_creation","title":"<code>test_invalid_blob_tx_contract_creation(blockchain_test, pre, env, txs, header_verify)</code>","text":"<p>Reject blocks that include blob transactions that have nil to value (contract creating).</p> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"tx_gas\", [500_000], ids=[\"\"]\n)  # Increase gas to account for contract creation\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_blob_tx_contract_creation(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    txs: List[Transaction],\n    header_verify: Optional[Header],\n):\n    \"\"\"\n    Reject blocks that include blob transactions that have nil to value (contract creating).\n    \"\"\"\n    assert len(txs) == 1\n    assert txs[0].blob_versioned_hashes is not None and len(txs[0].blob_versioned_hashes) == 1\n    # Replace the transaction with a contract creating one, only in the RLP version\n    contract_creating_tx = txs[0].copy(to=None).with_signature_and_sender()\n    txs[0].rlp_override = contract_creating_tx.rlp\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=[\n            Block(\n                txs=txs,\n                exception=[\n                    BlockException.RLP_STRUCTURES_ENCODING,\n                    TransactionException.TYPE_3_TX_CONTRACT_CREATION,\n                ],\n                header_verify=header_verify,\n            )\n        ],\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_blob_tx_attribute_opcodes","title":"<code>test_blob_tx_attribute_opcodes(state_test, pre, opcode, state_env, txs, destination_account)</code>","text":"<p>Test opcodes that read transaction attributes work properly for blob type transactions:</p> <ul> <li>ORIGIN</li> <li>CALLER</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"opcode\",\n    [Op.ORIGIN, Op.CALLER],\n    indirect=[\"opcode\"],\n)\n@pytest.mark.parametrize(\"tx_gas\", [500_000])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blob_tx_attribute_opcodes(\n    state_test: StateTestFiller,\n    pre: Dict,\n    opcode: Tuple[bytes, Storage.StorageDictType],\n    state_env: Environment,\n    txs: List[Transaction],\n    destination_account: Address,\n):\n    \"\"\"\n    Test opcodes that read transaction attributes work properly for blob type transactions:\n\n    - ORIGIN\n    - CALLER\n    \"\"\"\n    assert len(txs) == 1\n    code, storage = opcode\n    pre[destination_account] = Account(code=code)\n    post = {\n        destination_account: Account(\n            storage=storage,\n        )\n    }\n    state_test(\n        pre=pre,\n        post=post,\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_blob_tx_attribute_value_opcode","title":"<code>test_blob_tx_attribute_value_opcode(state_test, pre, opcode, state_env, txs, tx_value, destination_account)</code>","text":"<p>Test the VALUE opcode with different blob type transaction value amounts.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\"opcode\", [Op.CALLVALUE], indirect=[\"opcode\"])\n@pytest.mark.parametrize(\"tx_value\", [0, 1, int(1e18)])\n@pytest.mark.parametrize(\"tx_gas\", [500_000])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blob_tx_attribute_value_opcode(\n    state_test: StateTestFiller,\n    pre: Dict,\n    opcode: Tuple[bytes, Storage.StorageDictType],\n    state_env: Environment,\n    txs: List[Transaction],\n    tx_value: int,\n    destination_account: Address,\n):\n    \"\"\"\n    Test the VALUE opcode with different blob type transaction value amounts.\n    \"\"\"\n    assert len(txs) == 1\n    code, storage = opcode\n    pre[destination_account] = Account(code=code)\n    post = {\n        destination_account: Account(\n            storage=storage,\n            balance=tx_value,\n        )\n    }\n    state_test(\n        pre=pre,\n        post=post,\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_blob_tx_attribute_calldata_opcodes","title":"<code>test_blob_tx_attribute_calldata_opcodes(state_test, pre, opcode, state_env, txs, destination_account)</code>","text":"<p>Test calldata related opcodes to verify their behavior is not affected by blobs:</p> <ul> <li>CALLDATALOAD</li> <li>CALLDATASIZE</li> <li>CALLDATACOPY</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    \"opcode\",\n    [\n        Op.CALLDATALOAD,\n        Op.CALLDATASIZE,\n        Op.CALLDATACOPY,\n    ],\n    indirect=True,\n)\n@pytest.mark.parametrize(\n    \"tx_calldata\",\n    [\n        b\"\",\n        b\"\\x01\",\n        b\"\\x00\\x01\" * 16,\n    ],\n    ids=[\"empty\", \"single_byte\", \"word\"],\n)\n@pytest.mark.parametrize(\"tx_gas\", [500_000])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blob_tx_attribute_calldata_opcodes(\n    state_test: StateTestFiller,\n    pre: Dict,\n    opcode: Tuple[bytes, Storage.StorageDictType],\n    state_env: Environment,\n    txs: List[Transaction],\n    destination_account: Address,\n):\n    \"\"\"\n    Test calldata related opcodes to verify their behavior is not affected by blobs:\n\n    - CALLDATALOAD\n    - CALLDATASIZE\n    - CALLDATACOPY\n    \"\"\"\n    assert len(txs) == 1\n    code, storage = opcode\n    pre[destination_account] = Account(code=code)\n    post = {\n        destination_account: Account(\n            storage=storage,\n        )\n    }\n    state_test(\n        pre=pre,\n        post=post,\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_blob_tx_attribute_gasprice_opcode","title":"<code>test_blob_tx_attribute_gasprice_opcode(state_test, pre, opcode, state_env, txs, destination_account)</code>","text":"<p>Test GASPRICE opcode to sanity check that the blob gas fee does not affect its calculation:</p> <ul> <li>No priority fee</li> <li>Priority fee below data fee</li> <li>Priority fee above data fee</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\"tx_max_priority_fee_per_gas\", [0, 2])  # always below data fee\n@pytest.mark.parametrize(\"tx_max_fee_per_blob_gas\", [1, 3])  # normal and above priority fee\n@pytest.mark.parametrize(\"tx_max_fee_per_gas\", [100])  # always above priority fee\n@pytest.mark.parametrize(\"opcode\", [Op.GASPRICE], indirect=True)\n@pytest.mark.parametrize(\"tx_gas\", [500_000])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blob_tx_attribute_gasprice_opcode(\n    state_test: StateTestFiller,\n    pre: Dict,\n    opcode: Tuple[bytes, Storage.StorageDictType],\n    state_env: Environment,\n    txs: List[Transaction],\n    destination_account: Address,\n):\n    \"\"\"\n    Test GASPRICE opcode to sanity check that the blob gas fee does not affect\n    its calculation:\n\n    - No priority fee\n    - Priority fee below data fee\n    - Priority fee above data fee\n    \"\"\"\n    assert len(txs) == 1\n    code, storage = opcode\n    pre[destination_account] = Account(code=code)\n    post = {\n        destination_account: Account(\n            storage=storage,\n        )\n    }\n    state_test(\n        pre=pre,\n        post=post,\n        tx=txs[0],\n        env=state_env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/#tests.cancun.eip4844_blobs.test_blob_txs.test_blob_type_tx_pre_fork","title":"<code>test_blob_type_tx_pre_fork(state_test, pre, txs)</code>","text":"<p>Reject blocks with blob type transactions before Cancun fork.</p> <p>Blocks sent by NewPayloadV2 (Shanghai) that contain blob type transactions, furthermore blobs field within NewPayloadV2 method must be computed as INVALID, due to an invalid block hash.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code> <pre><code>@pytest.mark.parametrize(\n    [\n        \"blobs_per_tx\",\n        \"parent_excess_blobs\",\n        \"tx_max_fee_per_blob_gas\",\n        \"tx_error\",\n    ],\n    [\n        (\n            [0],\n            None,\n            1,\n            [TransactionException.TYPE_3_TX_PRE_FORK, TransactionException.TYPE_3_TX_ZERO_BLOBS],\n        ),\n        ([1], None, 1, TransactionException.TYPE_3_TX_PRE_FORK),\n    ],\n    ids=[\"no_blob_tx\", \"one_blob_tx\"],\n)\n@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_blob_type_tx_pre_fork(\n    state_test: StateTestFiller,\n    pre: Dict,\n    txs: List[Transaction],\n):\n    \"\"\"\n    Reject blocks with blob type transactions before Cancun fork.\n\n    Blocks sent by NewPayloadV2 (Shanghai) that contain blob type transactions, furthermore blobs\n    field within NewPayloadV2 method must be computed as INVALID, due to an invalid block hash.\n    \"\"\"\n    assert len(txs) == 1\n    state_test(\n        pre=pre,\n        post={},\n        tx=txs[0],\n        env=Environment(),  # `env` fixture has blob fields\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs/index/test_cases/","title":"Test Blob Txs - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_blob_txs.py</code>:</p> <pre><code>test_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1, 4)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 2, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 4)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1, 5)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 4)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(1,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(4,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(5,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(6,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(4, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(2, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(4, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(5, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(3, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test-blobs_per_tx_(4, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1, 4)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 2, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 4)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1, 5)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 4)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3, 3)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(1,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(4,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(5,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(6,)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(4, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(2, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(4, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(5, 1)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(3, 2)]\ntest_valid_blob_tx_combinations[fork_Cancun-blockchain_test_hive-blobs_per_tx_(4, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1, 4)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 2, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 4)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1, 5)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 4)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(1,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(4,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(5,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(6,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(4, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(2, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(4, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(5, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(3, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test-blobs_per_tx_(4, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1, 4)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 2, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 4)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1, 5)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 4)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3, 3)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(1,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(4,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(5,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(6,)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3, 1, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(4, 1, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3, 2, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(2, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(4, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(5, 1)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(3, 2)]\ntest_valid_blob_tx_combinations[fork_Prague-blockchain_test_hive-blobs_per_tx_(4, 2)]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Cancun-blockchain_test-account_balance_modifier_1000000000-insufficient_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Cancun-blockchain_test-account_balance_modifier_1000000000-invalid_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Cancun-blockchain_test_hive-account_balance_modifier_1000000000-insufficient_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Cancun-blockchain_test_hive-account_balance_modifier_1000000000-invalid_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Prague-blockchain_test-account_balance_modifier_1000000000-insufficient_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Prague-blockchain_test-account_balance_modifier_1000000000-invalid_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Prague-blockchain_test_hive-account_balance_modifier_1000000000-insufficient_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas[fork_Prague-blockchain_test_hive-account_balance_modifier_1000000000-invalid_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas_state[fork_Cancun-state_test-insufficient_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas_state[fork_Cancun-state_test-invalid_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas_state[fork_Prague-state_test-insufficient_max_fee_per_blob_gas]\ntest_invalid_tx_max_fee_per_blob_gas_state[fork_Prague-state_test-invalid_max_fee_per_blob_gas]\ntest_invalid_normal_gas[fork_Cancun-blockchain_test-insufficient_max_fee_per_gas]\ntest_invalid_normal_gas[fork_Cancun-blockchain_test_hive-insufficient_max_fee_per_gas]\ntest_invalid_normal_gas[fork_Cancun-state_test-insufficient_max_fee_per_gas]\ntest_invalid_normal_gas[fork_Prague-blockchain_test-insufficient_max_fee_per_gas]\ntest_invalid_normal_gas[fork_Prague-blockchain_test_hive-insufficient_max_fee_per_gas]\ntest_invalid_normal_gas[fork_Prague-state_test-insufficient_max_fee_per_gas]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 1, 1, 1, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 1, 1, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 1, 2, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 1, 4)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 2, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 2, 2, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 1, 5)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 2, 4)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 3, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(2, 2, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(1, 6)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(2, 5)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(3, 4)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(7,)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(2, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(3, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(2, 2, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(4, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(3, 2, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(2, 2, 2, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(5, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(4, 2, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(3, 3, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(3, 2, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(6, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(5, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test--blobs_per_tx_(4, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 1, 1, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 1, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 2, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 4)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 2, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 2, 2, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 1, 5)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 2, 4)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 3, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(2, 2, 3)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(1, 6)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(2, 5)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(3, 4)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(7,)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(2, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(3, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(2, 2, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(4, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(3, 2, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(2, 2, 2, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(5, 1, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(4, 2, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(3, 3, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(3, 2, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(6, 1)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(5, 2)]\ntest_invalid_block_blob_count[fork_Cancun-blockchain_test_hive--blobs_per_tx_(4, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 1, 1, 1, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 1, 1, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 1, 2, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 1, 4)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 2, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 2, 2, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 1, 5)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 2, 4)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 3, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(2, 2, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(1, 6)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(2, 5)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(3, 4)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(7,)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(2, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(3, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(2, 2, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(4, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(3, 2, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(2, 2, 2, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(5, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(4, 2, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(3, 3, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(3, 2, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(6, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(5, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test--blobs_per_tx_(4, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 1, 1, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 1, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 2, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 1, 4)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 2, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 2, 2, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 1, 5)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 2, 4)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 3, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(2, 2, 3)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(1, 6)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(2, 5)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(3, 4)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(7,)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(2, 1, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(3, 1, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(2, 2, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(4, 1, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(3, 2, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(2, 2, 2, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(5, 1, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(4, 2, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(3, 3, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(3, 2, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(6, 1)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(5, 2)]\ntest_invalid_block_blob_count[fork_Prague-blockchain_test_hive--blobs_per_tx_(4, 3)]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Cancun-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-blockchain_test_hive--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_insufficient_balance_blob_tx[fork_Prague-state_test--exact_balance_minus_1-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Cancun-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx[fork_Prague-state_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Cancun-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_1-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_100-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_zero_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_sufficient_balance_blob_tx_pre_fund_tx[fork_Prague-blockchain_test_hive-tx_max_fee_per_blob_gas_10000-single_one_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Cancun-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-blockchain_test_hive-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_1-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-no_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_0-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_0-tx_max_fee_per_gas_14-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_7-access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-no_access_list]\ntest_blob_gas_subtraction_tx[fork_Prague-state_test-mid_tx_send_amount_100--tx_max_fee_per_blob_gas_100-single_non_zero_byte_calldata-tx_value_1-tx_max_priority_fee_per_gas_7-tx_max_fee_per_gas_14-access_list]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 5)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(5,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(6,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(5, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 5)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(5,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(6,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(5, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Cancun-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1, 5)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(1,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(5,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(6,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(5, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(3, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test--exact_balance_minus_1-blobs_per_tx_(4, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1, 5)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 4)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 3)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(1,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(5,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(6,)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 1, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4, 1, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(2, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(5, 1)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(3, 2)]\ntest_insufficient_balance_blob_tx_combinations[fork_Prague-blockchain_test_hive--exact_balance_minus_1-blobs_per_tx_(4, 2)]\ntest_invalid_tx_blob_count[fork_Cancun-blockchain_test-too_few_blobs]\ntest_invalid_tx_blob_count[fork_Cancun-blockchain_test-too_many_blobs]\ntest_invalid_tx_blob_count[fork_Cancun-blockchain_test_hive-too_few_blobs]\ntest_invalid_tx_blob_count[fork_Cancun-blockchain_test_hive-too_many_blobs]\ntest_invalid_tx_blob_count[fork_Cancun-state_test-too_few_blobs]\ntest_invalid_tx_blob_count[fork_Cancun-state_test-too_many_blobs]\ntest_invalid_tx_blob_count[fork_Prague-blockchain_test-too_few_blobs]\ntest_invalid_tx_blob_count[fork_Prague-blockchain_test-too_many_blobs]\ntest_invalid_tx_blob_count[fork_Prague-blockchain_test_hive-too_few_blobs]\ntest_invalid_tx_blob_count[fork_Prague-blockchain_test_hive-too_many_blobs]\ntest_invalid_tx_blob_count[fork_Prague-state_test-too_few_blobs]\ntest_invalid_tx_blob_count[fork_Prague-state_test-too_many_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test--single_blob]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test--multiple_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test_hive--single_blob]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test_hive--multiple_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test_hive--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-blockchain_test_hive--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-state_test--single_blob]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-state_test--multiple_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-state_test--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_single_tx[fork_Cancun-state_test--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test--single_blob]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test--multiple_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test_hive--single_blob]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test_hive--multiple_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test_hive--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-blockchain_test_hive--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-state_test--single_blob]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-state_test--multiple_blobs]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-state_test--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_single_tx[fork_Prague-state_test--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test--single_blob]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test--multiple_blobs]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test_hive--single_blob]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test_hive--multiple_blobs]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test_hive--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Cancun-blockchain_test_hive--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test--single_blob]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test--multiple_blobs]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test_hive--single_blob]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test_hive--multiple_blobs]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test_hive--multiple_blobs_single_bad_hash_1]\ntest_invalid_blob_hash_versioning_multiple_txs[fork_Prague-blockchain_test_hive--multiple_blobs_single_bad_hash_2]\ntest_invalid_blob_tx_contract_creation[fork_Cancun-blockchain_test-]\ntest_invalid_blob_tx_contract_creation[fork_Cancun-blockchain_test_hive-]\ntest_invalid_blob_tx_contract_creation[fork_Prague-blockchain_test-]\ntest_invalid_blob_tx_contract_creation[fork_Prague-blockchain_test_hive-]\ntest_blob_tx_attribute_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-opcode_ORIGIN]\ntest_blob_tx_attribute_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-opcode_CALLER]\ntest_blob_tx_attribute_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-opcode_ORIGIN]\ntest_blob_tx_attribute_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-opcode_CALLER]\ntest_blob_tx_attribute_opcodes[fork_Cancun-state_test-tx_gas_500000-opcode_ORIGIN]\ntest_blob_tx_attribute_opcodes[fork_Cancun-state_test-tx_gas_500000-opcode_CALLER]\ntest_blob_tx_attribute_opcodes[fork_Prague-blockchain_test-tx_gas_500000-opcode_ORIGIN]\ntest_blob_tx_attribute_opcodes[fork_Prague-blockchain_test-tx_gas_500000-opcode_CALLER]\ntest_blob_tx_attribute_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-opcode_ORIGIN]\ntest_blob_tx_attribute_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-opcode_CALLER]\ntest_blob_tx_attribute_opcodes[fork_Prague-state_test-tx_gas_500000-opcode_ORIGIN]\ntest_blob_tx_attribute_opcodes[fork_Prague-state_test-tx_gas_500000-opcode_CALLER]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-blockchain_test-tx_gas_500000-tx_value_0-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-blockchain_test-tx_gas_500000-tx_value_1-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-blockchain_test-tx_gas_500000-tx_value_1000000000000000000-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-tx_value_0-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-tx_value_1-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-tx_value_1000000000000000000-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-state_test-tx_gas_500000-tx_value_0-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-state_test-tx_gas_500000-tx_value_1-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Cancun-state_test-tx_gas_500000-tx_value_1000000000000000000-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-blockchain_test-tx_gas_500000-tx_value_0-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-blockchain_test-tx_gas_500000-tx_value_1-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-blockchain_test-tx_gas_500000-tx_value_1000000000000000000-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-tx_value_0-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-tx_value_1-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-tx_value_1000000000000000000-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-state_test-tx_gas_500000-tx_value_0-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-state_test-tx_gas_500000-tx_value_1-opcode_CALLVALUE]\ntest_blob_tx_attribute_value_opcode[fork_Prague-state_test-tx_gas_500000-tx_value_1000000000000000000-opcode_CALLVALUE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-empty-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-empty-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-empty-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-single_byte-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-single_byte-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-single_byte-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-word-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-word-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test-tx_gas_500000-word-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-empty-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-empty-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-empty-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-single_byte-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-single_byte-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-single_byte-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-word-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-word-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-blockchain_test_hive-tx_gas_500000-word-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-empty-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-empty-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-empty-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-single_byte-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-single_byte-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-single_byte-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-word-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-word-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Cancun-state_test-tx_gas_500000-word-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-empty-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-empty-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-empty-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-single_byte-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-single_byte-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-single_byte-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-word-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-word-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test-tx_gas_500000-word-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-empty-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-empty-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-empty-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-single_byte-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-single_byte-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-single_byte-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-word-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-word-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-blockchain_test_hive-tx_gas_500000-word-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-empty-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-empty-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-empty-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-single_byte-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-single_byte-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-single_byte-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-word-opcode_CALLDATALOAD]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-word-opcode_CALLDATASIZE]\ntest_blob_tx_attribute_calldata_opcodes[fork_Prague-state_test-tx_gas_500000-word-opcode_CALLDATACOPY]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Cancun-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-blockchain_test_hive-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_1-tx_max_priority_fee_per_gas_2]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_0]\ntest_blob_tx_attribute_gasprice_opcode[fork_Prague-state_test-tx_gas_500000-opcode_GASPRICE-tx_max_fee_per_gas_100-tx_max_fee_per_blob_gas_3-tx_max_priority_fee_per_gas_2]\ntest_blob_type_tx_pre_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test-no_blob_tx]\ntest_blob_type_tx_pre_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test-one_blob_tx]\ntest_blob_type_tx_pre_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-no_blob_tx]\ntest_blob_type_tx_pre_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-one_blob_tx]\ntest_blob_type_tx_pre_fork[fork_ShanghaiToCancunAtTime15k-state_test-no_blob_tx]\ntest_blob_type_tx_pre_fork[fork_ShanghaiToCancunAtTime15k-state_test-one_blob_tx]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_blob_txs.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs_full/","title":"Test Blob Txs Full","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_blob_txs_full.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_blob_txs_full.py\n</code></pre> Tests full blob type transactions for EIP-4844: Shard Blob Transactions <p>Test full blob type transactions for EIP-4844: Shard Blob Transactions.</p>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs_full/#tests.cancun.eip4844_blobs.test_blob_txs_full.test_reject_valid_full_blob_in_block_rlp","title":"<code>test_reject_valid_full_blob_in_block_rlp(blockchain_test, pre, env, blocks)</code>","text":"<p>Test valid blob combinations where one or more txs in the block serialized version contain a full blob (network version) tx.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blob_txs_full.py</code> <pre><code>@pytest.mark.parametrize(\n    \"txs_blobs,txs_wrapped_blobs\",\n    [\n        (\n            [  # Txs\n                [  # Blobs per transaction\n                    Blob(\n                        blob=bytes(\n                            Spec.FIELD_ELEMENTS_PER_BLOB * SpecHelpers.BYTES_PER_FIELD_ELEMENT\n                        ),\n                        kzg_commitment=INF_POINT,\n                        kzg_proof=INF_POINT,\n                    ),\n                ]\n            ],\n            [True],\n        ),\n        (\n            [  # Txs\n                [  # Blobs per transaction\n                    Blob(\n                        blob=bytes(\n                            Spec.FIELD_ELEMENTS_PER_BLOB * SpecHelpers.BYTES_PER_FIELD_ELEMENT\n                        ),\n                        kzg_commitment=INF_POINT,\n                        kzg_proof=INF_POINT,\n                    )\n                ]\n                for _ in range(SpecHelpers.max_blobs_per_block())\n            ],\n            [True] + ([False] * (SpecHelpers.max_blobs_per_block() - 1)),\n        ),\n        (\n            [  # Txs\n                [  # Blobs per transaction\n                    Blob(\n                        blob=bytes(\n                            Spec.FIELD_ELEMENTS_PER_BLOB * SpecHelpers.BYTES_PER_FIELD_ELEMENT\n                        ),\n                        kzg_commitment=INF_POINT,\n                        kzg_proof=INF_POINT,\n                    )\n                ]\n                for _ in range(SpecHelpers.max_blobs_per_block())\n            ],\n            ([False] * (SpecHelpers.max_blobs_per_block() - 1)) + [True],\n        ),\n    ],\n    ids=[\n        \"one_full_blob_one_tx\",\n        \"one_full_blob_max_txs\",\n        \"one_full_blob_at_the_end_max_txs\",\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_reject_valid_full_blob_in_block_rlp(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    blocks: List[Block],\n):\n    \"\"\"\n    Test valid blob combinations where one or more txs in the block\n    serialized version contain a full blob (network version) tx.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blob_txs_full/index/test_cases/","title":"Test Blob Txs Full - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_blob_txs_full.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_blob_txs_full.py</code>:</p> <pre><code>test_reject_valid_full_blob_in_block_rlp[fork_Cancun-blockchain_test-one_full_blob_one_tx]\ntest_reject_valid_full_blob_in_block_rlp[fork_Cancun-blockchain_test-one_full_blob_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Cancun-blockchain_test-one_full_blob_at_the_end_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Cancun-blockchain_test_hive-one_full_blob_one_tx]\ntest_reject_valid_full_blob_in_block_rlp[fork_Cancun-blockchain_test_hive-one_full_blob_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Cancun-blockchain_test_hive-one_full_blob_at_the_end_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Prague-blockchain_test-one_full_blob_one_tx]\ntest_reject_valid_full_blob_in_block_rlp[fork_Prague-blockchain_test-one_full_blob_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Prague-blockchain_test-one_full_blob_at_the_end_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Prague-blockchain_test_hive-one_full_blob_one_tx]\ntest_reject_valid_full_blob_in_block_rlp[fork_Prague-blockchain_test_hive-one_full_blob_max_txs]\ntest_reject_valid_full_blob_in_block_rlp[fork_Prague-blockchain_test_hive-one_full_blob_at_the_end_max_txs]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_blob_txs_full.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode/","title":"Test Blobhash Opcode","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_blobhash_opcode.py\n</code></pre> Tests <code>BLOBHASH</code> opcode in EIP-4844: Shard Blob Transactions <p>Test cases for the <code>BLOBHASH</code> opcode in EIP-4844: Shard Blob Transactions.</p> Adding a new test <p>Add a function that is named <code>test_&lt;test_name&gt;</code> and takes at least the following arguments:</p> <ul> <li>blockchain_test</li> <li>pre</li> <li>tx</li> <li>post</li> </ul> <p>Additional custom <code>pytest.fixture</code> fixtures can be added and parametrized for new test cases.</p> <p>There is no specific structure to follow within this test module.</p>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode/#tests.cancun.eip4844_blobs.test_blobhash_opcode.test_blobhash_gas_cost","title":"<code>test_blobhash_gas_cost(pre, template_tx, blocks, post, tx_type, blockchain_test)</code>","text":"<p>Tests <code>BLOBHASH</code> opcode gas cost using a variety of indexes.</p> <p>Asserts that the gas consumption of the <code>BLOBHASH</code> opcode is correct by ensuring it matches <code>HASH_OPCODE_GAS = 3</code>. Includes both valid and invalid random index sizes from the range <code>[0, 2**256-1]</code>, for tx types 2 and 3.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code> <pre><code>@pytest.mark.parametrize(\"tx_type\", [0, 1, 2, 3])\ndef test_blobhash_gas_cost(\n    pre,\n    template_tx,\n    blocks,\n    post,\n    tx_type,\n    blockchain_test: BlockchainTestFiller,\n):\n    \"\"\"\n    Tests `BLOBHASH` opcode gas cost using a variety of indexes.\n\n    Asserts that the gas consumption of the `BLOBHASH` opcode is correct by ensuring\n    it matches `HASH_OPCODE_GAS = 3`. Includes both valid and invalid random\n    index sizes from the range `[0, 2**256-1]`, for tx types 2 and 3.\n    \"\"\"\n    assert (\n        Op.BLOBHASH.int() == Spec.HASH_OPCODE_BYTE\n    ), \"Opcodes blobhash byte doesn't match that defined in the spec\"\n    gas_measures_code = [\n        CodeGasMeasure(\n            code=Op.BLOBHASH(i),\n            overhead_cost=3,\n            extra_stack_items=1,\n        )\n        for i in blobhash_index_values\n    ]\n    for i, gas_code in enumerate(gas_measures_code):\n        address = Address(0x100 + i * 0x100)\n        pre[address] = Account(code=gas_code)\n        blocks.append(\n            Block(\n                txs=[\n                    template_tx.copy(\n                        ty=tx_type,\n                        nonce=i,\n                        to=address,\n                        gas_price=10 if tx_type &lt; 2 else None,\n                        access_list=[] if tx_type &gt;= 1 else None,\n                        max_fee_per_gas=10 if tx_type &gt;= 2 else None,\n                        max_priority_fee_per_gas=10 if tx_type &gt;= 2 else None,\n                        max_fee_per_blob_gas=10 if tx_type &gt;= 3 else None,\n                        blob_versioned_hashes=random_blob_hashes[\n                            0 : SpecHelpers.target_blobs_per_block()\n                        ]\n                        if tx_type &gt;= 3\n                        else None,\n                    )\n                ]\n            )\n        )\n        post[address] = Account(storage={0: Spec.HASH_GAS_COST})\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode/#tests.cancun.eip4844_blobs.test_blobhash_opcode.test_blobhash_scenarios","title":"<code>test_blobhash_scenarios(pre, template_tx, blocks, post, scenario, blockchain_test)</code>","text":"<p>Tests that the <code>BLOBHASH</code> opcode returns the correct versioned hash for various valid indexes.</p> <p>Covers various scenarios with random <code>blob_versioned_hash</code> values within the valid range <code>[0, 2**256-1]</code>.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"scenario\",\n    [\n        \"single_valid\",\n        \"repeated_valid\",\n        \"valid_invalid\",\n        \"varied_valid\",\n    ],\n)\ndef test_blobhash_scenarios(\n    pre,\n    template_tx,\n    blocks,\n    post,\n    scenario: str,\n    blockchain_test: BlockchainTestFiller,\n):\n    \"\"\"\n    Tests that the `BLOBHASH` opcode returns the correct versioned hash for\n    various valid indexes.\n\n    Covers various scenarios with random `blob_versioned_hash` values within\n    the valid range `[0, 2**256-1]`.\n    \"\"\"\n    TOTAL_BLOCKS = 5\n    b_hashes_list = BlobhashScenario.create_blob_hashes_list(length=TOTAL_BLOCKS)\n    blobhash_calls = BlobhashScenario.generate_blobhash_bytecode(scenario)\n    for i in range(TOTAL_BLOCKS):\n        address = Address(0x100 + i * 0x100)\n        pre[address] = Account(code=blobhash_calls)\n        blocks.append(\n            Block(\n                txs=[\n                    template_tx.copy(\n                        ty=Spec.BLOB_TX_TYPE,\n                        nonce=i,\n                        to=address,\n                        access_list=[],\n                        max_priority_fee_per_gas=10,\n                        max_fee_per_blob_gas=10,\n                        blob_versioned_hashes=b_hashes_list[i],\n                    )\n                ]\n            )\n        )\n        post[address] = Account(\n            storage={\n                index: b_hashes_list[i][index]\n                for index in range(SpecHelpers.max_blobs_per_block())\n            }\n        )\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode/#tests.cancun.eip4844_blobs.test_blobhash_opcode.test_blobhash_invalid_blob_index","title":"<code>test_blobhash_invalid_blob_index(pre, template_tx, blocks, post, blockchain_test, scenario)</code>","text":"<p>Tests that the <code>BLOBHASH</code> opcode returns a zeroed <code>bytes32</code> value for invalid indexes.</p> <p>Includes cases where the index is negative (<code>index &lt; 0</code>) or exceeds the maximum number of <code>blob_versioned_hash</code> values stored: (<code>index &gt;= len(tx.message.blob_versioned_hashes)</code>).</p> <p>It confirms that the returned value is a zeroed <code>bytes32</code> for each case.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"scenario\",\n    [\n        \"invalid_calls\",\n    ],\n)\ndef test_blobhash_invalid_blob_index(\n    pre,\n    template_tx,\n    blocks,\n    post,\n    blockchain_test: BlockchainTestFiller,\n    scenario,\n):\n    \"\"\"\n    Tests that the `BLOBHASH` opcode returns a zeroed `bytes32` value for invalid\n    indexes.\n\n    Includes cases where the index is negative (`index &lt; 0`) or\n    exceeds the maximum number of `blob_versioned_hash` values stored:\n    (`index &gt;= len(tx.message.blob_versioned_hashes)`).\n\n    It confirms that the returned value is a zeroed `bytes32` for each case.\n    \"\"\"\n    TOTAL_BLOCKS = 5\n    blobhash_calls = BlobhashScenario.generate_blobhash_bytecode(scenario)\n    for i in range(TOTAL_BLOCKS):\n        address = Address(0x100 + i * 0x100)\n        pre[address] = Account(code=blobhash_calls)\n        blob_per_block = (i % SpecHelpers.max_blobs_per_block()) + 1\n        blobs = [random_blob_hashes[blob] for blob in range(blob_per_block)]\n        blocks.append(\n            Block(\n                txs=[\n                    template_tx.copy(\n                        ty=Spec.BLOB_TX_TYPE,\n                        nonce=i,\n                        to=address,\n                        access_list=[],\n                        max_priority_fee_per_gas=10,\n                        max_fee_per_blob_gas=10,\n                        blob_versioned_hashes=blobs,\n                    )\n                ]\n            )\n        )\n        post[address] = Account(\n            storage={\n                index: (0 if index &lt; 0 or index &gt;= blob_per_block else blobs[index])\n                for index in range(\n                    -TOTAL_BLOCKS,\n                    blob_per_block + (TOTAL_BLOCKS - (i % SpecHelpers.max_blobs_per_block())),\n                )\n            }\n        )\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode/#tests.cancun.eip4844_blobs.test_blobhash_opcode.test_blobhash_multiple_txs_in_block","title":"<code>test_blobhash_multiple_txs_in_block(pre, blob_tx, post, blockchain_test)</code>","text":"<p>Tests that the <code>BLOBHASH</code> opcode returns the appropriate values when there is more than 1 blob tx type within a block (for tx types 2 and 3).</p> <p>Scenarios involve tx type 3 followed by tx type 2 running the same code within a block, including the opposite.</p> Source code in <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code> <pre><code>def test_blobhash_multiple_txs_in_block(\n    pre,\n    blob_tx,\n    post,\n    blockchain_test: BlockchainTestFiller,\n):\n    \"\"\"\n    Tests that the `BLOBHASH` opcode returns the appropriate values when there\n    is more than 1 blob tx type within a block (for tx types 2 and 3).\n\n    Scenarios involve tx type 3 followed by tx type 2 running the same code\n    within a block, including the opposite.\n    \"\"\"\n    blobhash_bytecode = BlobhashScenario.generate_blobhash_bytecode(\"single_valid\")\n    pre = {\n        **pre,\n        **{\n            Address(address): Account(code=blobhash_bytecode)\n            for address in range(0x100, 0x500, 0x100)\n        },\n    }\n    blocks = [\n        Block(\n            txs=[\n                blob_tx(address=Address(0x100), type=3, nonce=0),\n                blob_tx(address=Address(0x100), type=2, nonce=1),\n            ]\n        ),\n        Block(\n            txs=[\n                blob_tx(address=Address(0x200), type=2, nonce=2),\n                blob_tx(address=Address(0x200), type=3, nonce=3),\n            ]\n        ),\n        Block(\n            txs=[\n                blob_tx(address=Address(0x300), type=2, nonce=4),\n                blob_tx(address=Address(0x400), type=3, nonce=5),\n            ],\n        ),\n    ]\n    post = {\n        Address(address): Account(\n            storage={i: random_blob_hashes[i] for i in range(SpecHelpers.max_blobs_per_block())}\n        )\n        if address in (0x200, 0x400)\n        else Account(storage={i: 0 for i in range(SpecHelpers.max_blobs_per_block())})\n        for address in range(0x100, 0x500, 0x100)\n    }\n    blockchain_test(\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode/index/test_cases/","title":"Test Blobhash Opcode - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_blobhash_opcode.py</code>:</p> <pre><code>test_blobhash_gas_cost[fork_Cancun-blockchain_test-tx_type_0]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test-tx_type_1]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test-tx_type_2]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test-tx_type_3]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test_hive-tx_type_0]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test_hive-tx_type_1]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test_hive-tx_type_2]\ntest_blobhash_gas_cost[fork_Cancun-blockchain_test_hive-tx_type_3]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test-tx_type_0]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test-tx_type_1]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test-tx_type_2]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test-tx_type_3]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test_hive-tx_type_0]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test_hive-tx_type_1]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test_hive-tx_type_2]\ntest_blobhash_gas_cost[fork_Prague-blockchain_test_hive-tx_type_3]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test-scenario_single_valid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test-scenario_repeated_valid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test-scenario_valid_invalid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test-scenario_varied_valid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test_hive-scenario_single_valid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test_hive-scenario_repeated_valid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test_hive-scenario_valid_invalid]\ntest_blobhash_scenarios[fork_Cancun-blockchain_test_hive-scenario_varied_valid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test-scenario_single_valid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test-scenario_repeated_valid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test-scenario_valid_invalid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test-scenario_varied_valid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test_hive-scenario_single_valid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test_hive-scenario_repeated_valid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test_hive-scenario_valid_invalid]\ntest_blobhash_scenarios[fork_Prague-blockchain_test_hive-scenario_varied_valid]\ntest_blobhash_invalid_blob_index[fork_Cancun-blockchain_test-scenario_invalid_calls]\ntest_blobhash_invalid_blob_index[fork_Cancun-blockchain_test_hive-scenario_invalid_calls]\ntest_blobhash_invalid_blob_index[fork_Prague-blockchain_test-scenario_invalid_calls]\ntest_blobhash_invalid_blob_index[fork_Prague-blockchain_test_hive-scenario_invalid_calls]\ntest_blobhash_multiple_txs_in_block[fork_Cancun-blockchain_test]\ntest_blobhash_multiple_txs_in_block[fork_Cancun-blockchain_test_hive]\ntest_blobhash_multiple_txs_in_block[fork_Prague-blockchain_test]\ntest_blobhash_multiple_txs_in_block[fork_Prague-blockchain_test_hive]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_blobhash_opcode.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts/","title":"Test Blobhash Opcode Contexts","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts.py\n</code></pre> Tests <code>BLOBHASH</code> opcode in EIP-4844: Shard Blob Transactions <p>Test case for <code>BLOBHASH</code> opcode calls across different contexts in EIP-4844: Shard Blob Transactions.</p>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts/#tests.cancun.eip4844_blobs.test_blobhash_opcode_contexts.test_blobhash_opcode_contexts","title":"<code>test_blobhash_opcode_contexts(opcode_context, blockchain_test)</code>","text":"<p>Tests that the <code>BLOBHASH</code> opcode functions correctly when called in different contexts including:</p> <ul> <li><code>BLOBHASH</code> opcode on the top level of the call stack.</li> <li><code>BLOBHASH</code> opcode on the max value.</li> <li><code>BLOBHASH</code> opcode on <code>CALL</code>, <code>DELEGATECALL</code>, <code>STATICCALL</code>, and <code>CALLCODE</code>.</li> <li><code>BLOBHASH</code> opcode on Initcode.</li> <li><code>BLOBHASH</code> opcode on <code>CREATE</code> and <code>CREATE2</code>.</li> <li><code>BLOBHASH</code> opcode on transaction types 0, 1 and 2.</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts.py</code> <pre><code>@pytest.mark.compile_yul_with(\"Shanghai\")\ndef test_blobhash_opcode_contexts(opcode_context, blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Tests that the `BLOBHASH` opcode functions correctly when called in different\n    contexts including:\n\n    - `BLOBHASH` opcode on the top level of the call stack.\n    - `BLOBHASH` opcode on the max value.\n    - `BLOBHASH` opcode on `CALL`, `DELEGATECALL`, `STATICCALL`, and `CALLCODE`.\n    - `BLOBHASH` opcode on Initcode.\n    - `BLOBHASH` opcode on `CREATE` and `CREATE2`.\n    - `BLOBHASH` opcode on transaction types 0, 1 and 2.\n    \"\"\"\n    blockchain_test(\n        pre=opcode_context.get(\"pre\"),\n        blocks=[Block(txs=[opcode_context.get(\"tx\")])],\n        post=opcode_context.get(\"post\"),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts/index/test_cases/","title":"Test Blobhash Opcode Contexts - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts.py</code>:</p> <pre><code>test_blobhash_opcode_contexts[opcode_context_on_top_level_call_stack-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_top_level_call_stack-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_top_level_call_stack-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_top_level_call_stack-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_max_value-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_max_value-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_max_value-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_max_value-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CALL-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CALL-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CALL-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CALL-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_DELEGATECALL-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_DELEGATECALL-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_DELEGATECALL-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_DELEGATECALL-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_STATICCALL-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_STATICCALL-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_STATICCALL-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_STATICCALL-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CALLCODE-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CALLCODE-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CALLCODE-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CALLCODE-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE2-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE2-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE2-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_CREATE2-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_type_2_tx-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_type_2_tx-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_type_2_tx-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_type_2_tx-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_type_1_tx-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_type_1_tx-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_type_1_tx-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_type_1_tx-fork_Prague-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_type_0_tx-fork_Cancun-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_type_0_tx-fork_Cancun-blockchain_test_hive]\ntest_blobhash_opcode_contexts[opcode_context_on_type_0_tx-fork_Prague-blockchain_test]\ntest_blobhash_opcode_contexts[opcode_context_on_type_0_tx-fork_Prague-blockchain_test_hive]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_blobhash_opcode_contexts.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/","title":"Test Excess Blob Gas","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_excess_blob_gas.py\n</code></pre> Tests <code>excessBlobGas</code> and <code>blobGasUsed</code> block fields for EIP-4844: Shard Blob Transactions <p>Test <code>excessBlobGas</code> and <code>blobGasUsed</code> block fields for EIP-4844: Shard Blob Transactions.</p> Adding a new test <p>Add a function that is named <code>test_&lt;test_name&gt;</code> and takes at least the following arguments:</p> <ul> <li>blockchain_test</li> <li>env</li> <li>pre</li> <li>blocks</li> <li>post</li> <li>correct_excess_blob_gas</li> </ul> <p>The following arguments need to be parametrized or the test will not be generated:</p> <ul> <li>new_blobs</li> </ul> <p>All other <code>pytest.fixture</code> fixtures can be parametrized to generate new combinations and test cases.</p>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_correct_excess_blob_gas_calculation","title":"<code>test_correct_excess_blob_gas_calculation(blockchain_test, env, pre, blocks, post, correct_excess_blob_gas)</code>","text":"<p>Test calculation of the <code>excessBlobGas</code> increase/decrease across multiple blocks with and without blobs:</p> <ul> <li>With parent block containing <code>[0, MAX_BLOBS_PER_BLOCK]</code> blobs</li> <li>With parent block containing <code>[0, TARGET_BLOBS_PER_BLOCK]</code> equivalent value of excess blob gas</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\"parent_blobs\", range(0, SpecHelpers.max_blobs_per_block() + 1))\n@pytest.mark.parametrize(\"parent_excess_blobs\", range(0, SpecHelpers.target_blobs_per_block() + 1))\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_correct_excess_blob_gas_calculation(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    post: Mapping[Address, Account],\n    correct_excess_blob_gas: int,\n):\n    \"\"\"\n    Test calculation of the `excessBlobGas` increase/decrease across\n    multiple blocks with and without blobs:\n\n    - With parent block containing `[0, MAX_BLOBS_PER_BLOCK]` blobs\n    - With parent block containing `[0, TARGET_BLOBS_PER_BLOCK]` equivalent value of excess blob gas\n    \"\"\"  # noqa: E501\n    blockchain_test(\n        pre=pre,\n        post=post,\n        blocks=blocks,\n        genesis_environment=env,\n        tag=f\"expected_excess_blob_gas:{hex(correct_excess_blob_gas)}\",\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_correct_increasing_blob_gas_costs","title":"<code>test_correct_increasing_blob_gas_costs(blockchain_test, env, pre, blocks, post, correct_excess_blob_gas)</code>","text":"<p>Test calculation of the <code>excessBlobGas</code> and blob gas tx costs at value points where the cost increases to interesting amounts:</p> <ul> <li>At the first blob gas cost increase (1 to 2)</li> <li>At total transaction data cost increase to <code>&gt; 2^32</code></li> <li>At blob gas wei cost increase to <code>&gt; 2^32</code></li> <li>At total transaction data cost increase to <code>&gt; 2^64</code></li> <li>At blob gas wei cost increase to <code>&gt; 2^64</code></li> <li>At blob gas wei cost increase of around current total Ether supply</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_excess_blobs\",\n    [g - 1 for g in BLOB_GAS_COST_INCREASES],\n)\n@pytest.mark.parametrize(\"parent_blobs\", [SpecHelpers.target_blobs_per_block() + 1])\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_correct_increasing_blob_gas_costs(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    post: Mapping[Address, Account],\n    correct_excess_blob_gas: int,\n):\n    \"\"\"\n    Test calculation of the `excessBlobGas` and blob gas tx costs at\n    value points where the cost increases to interesting amounts:\n\n    - At the first blob gas cost increase (1 to 2)\n    - At total transaction data cost increase to `&gt; 2^32`\n    - At blob gas wei cost increase to `&gt; 2^32`\n    - At total transaction data cost increase to `&gt; 2^64`\n    - At blob gas wei cost increase to `&gt; 2^64`\n    - At blob gas wei cost increase of around current total Ether supply\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post=post,\n        blocks=blocks,\n        genesis_environment=env,\n        tag=f\"expected_excess_blob_gas:{hex(correct_excess_blob_gas)}\",\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_correct_decreasing_blob_gas_costs","title":"<code>test_correct_decreasing_blob_gas_costs(blockchain_test, env, pre, blocks, post, correct_excess_blob_gas)</code>","text":"<p>Test calculation of the <code>excessBlobGas</code> and blob gas tx costs at value points where the cost decreases to interesting amounts.</p> <p>See test_correct_increasing_blob_gas_costs.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_excess_blobs\",\n    [g for g in BLOB_GAS_COST_INCREASES],\n)\n@pytest.mark.parametrize(\"parent_blobs\", [SpecHelpers.target_blobs_per_block() - 1])\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_correct_decreasing_blob_gas_costs(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    post: Mapping[Address, Account],\n    correct_excess_blob_gas: int,\n):\n    \"\"\"\n    Test calculation of the `excessBlobGas` and blob gas tx costs at\n    value points where the cost decreases to interesting amounts.\n\n    See test_correct_increasing_blob_gas_costs.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post=post,\n        blocks=blocks,\n        genesis_environment=env,\n        tag=f\"expected_excess_blob_gas:{hex(correct_excess_blob_gas)}\",\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_zero_excess_blob_gas_in_header","title":"<code>test_invalid_zero_excess_blob_gas_in_header(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> in the header drops to zero in a block with or without data blobs, but the excess blobs in the parent are greater than target.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\"header_excess_blob_gas\", [0])\n@pytest.mark.parametrize(\"new_blobs\", [0, 1])\n@pytest.mark.parametrize(\"parent_blobs\", range(0, SpecHelpers.max_blobs_per_block() + 1))\ndef test_invalid_zero_excess_blob_gas_in_header(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` in the header drops to\n    zero in a block with or without data blobs, but the excess blobs in the parent are\n    greater than target.\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_blob_gas_used_in_header","title":"<code>test_invalid_blob_gas_used_in_header(blockchain_test, env, pre, blocks, new_blobs, header_blob_gas_used)</code>","text":"<p>Test rejection of blocks where the <code>blobGasUsed</code> in the header is invalid:</p> <ul> <li><code>blobGasUsed</code> is not equal to the number of data blobs in the block</li> <li><code>blobGasUsed</code> is the max uint64 value</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"new_blobs,header_blob_gas_used\",\n    all_invalid_blob_gas_used_combinations(),\n)\n@pytest.mark.parametrize(\"parent_blobs\", [0])\ndef test_invalid_blob_gas_used_in_header(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    new_blobs: int,\n    header_blob_gas_used: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `blobGasUsed` in the header is invalid:\n\n    - `blobGasUsed` is not equal to the number of data blobs in the block\n    - `blobGasUsed` is the max uint64 value\n    \"\"\"\n    if header_blob_gas_used is None:\n        raise Exception(\"test case is badly formatted\")\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(new_blobs * Spec.GAS_PER_BLOB)}\",\n                f\"header:{hex(header_blob_gas_used)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_excess_blob_gas_above_target_change","title":"<code>test_invalid_excess_blob_gas_above_target_change(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code></p> <ul> <li>decreases more than <code>TARGET_BLOB_GAS_PER_BLOCK</code> in a single block with zero blobs</li> <li>increases more than <code>TARGET_BLOB_GAS_PER_BLOCK</code> in a single block with max blobs</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"header_excess_blobs_delta,parent_blobs\",\n    [\n        (-1, 0),\n        (+1, SpecHelpers.max_blobs_per_block()),\n    ],\n    ids=[\"zero_blobs_decrease_more_than_expected\", \"max_blobs_increase_more_than_expected\"],\n)\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_invalid_excess_blob_gas_above_target_change(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas`\n\n    - decreases more than `TARGET_BLOB_GAS_PER_BLOCK` in a single block with zero blobs\n    - increases more than `TARGET_BLOB_GAS_PER_BLOCK` in a single block with max blobs\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_static_excess_blob_gas","title":"<code>test_invalid_static_excess_blob_gas(blockchain_test, env, pre, blocks, correct_excess_blob_gas, parent_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> remains unchanged but the parent blobs included are not <code>TARGET_BLOBS_PER_BLOCK</code>.</p> <p>Test is parametrized to <code>MAX_BLOBS_PER_BLOCK</code> and <code>TARGET_BLOBS_PER_BLOCK</code>.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_blobs\",\n    [\n        b\n        for b in range(0, SpecHelpers.max_blobs_per_block() + 1)\n        if b != SpecHelpers.target_blobs_per_block()\n    ],\n)\n@pytest.mark.parametrize(\"parent_excess_blobs\", [1, SpecHelpers.target_blobs_per_block()])\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_invalid_static_excess_blob_gas(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    parent_excess_blob_gas: int,\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` remains unchanged\n    but the parent blobs included are not `TARGET_BLOBS_PER_BLOCK`.\n\n    Test is parametrized to `MAX_BLOBS_PER_BLOCK` and `TARGET_BLOBS_PER_BLOCK`.\n    \"\"\"\n    blocks[-1].rlp_modifier = Header(excess_blob_gas=parent_excess_blob_gas)\n    blocks[-1].header_verify = None\n    blocks[-1].exception = BlockException.INCORRECT_EXCESS_BLOB_GAS\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(parent_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_excess_blob_gas_target_blobs_increase_from_zero","title":"<code>test_invalid_excess_blob_gas_target_blobs_increase_from_zero(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> increases from zero, even when the included blobs are on or below target.</p> <p>Test is parametrized according to <code>[0, TARGET_BLOBS_PER_BLOCK</code> new blobs.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\"header_excess_blobs_delta\", range(1, SpecHelpers.max_blobs_per_block()))\n@pytest.mark.parametrize(\"parent_blobs\", range(0, SpecHelpers.target_blobs_per_block() + 1))\n@pytest.mark.parametrize(\"parent_excess_blobs\", [0])  # Start at 0\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_invalid_excess_blob_gas_target_blobs_increase_from_zero(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` increases from zero,\n    even when the included blobs are on or below target.\n\n    Test is parametrized according to `[0, TARGET_BLOBS_PER_BLOCK` new blobs.\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target","title":"<code>test_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> does not increase from zero, even when the included blobs is above target.</p> <p>Test is parametrized to <code>[TARGET_BLOBS_PER_BLOCK+1, MAX_BLOBS_PER_BLOCK]</code> new blobs.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\"header_excess_blob_gas\", [0])\n@pytest.mark.parametrize(\n    \"parent_blobs\",\n    range(SpecHelpers.target_blobs_per_block() + 1, SpecHelpers.max_blobs_per_block() + 1),\n)\n@pytest.mark.parametrize(\"parent_excess_blobs\", [0])  # Start at 0\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` does not increase from\n    zero, even when the included blobs is above target.\n\n    Test is parametrized to `[TARGET_BLOBS_PER_BLOCK+1, MAX_BLOBS_PER_BLOCK]` new blobs.\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_excess_blob_gas_change","title":"<code>test_invalid_excess_blob_gas_change(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> changes to an invalid value.</p> <p>Given a parent block containing <code>[0, MAX_BLOBS_PER_BLOCK]</code> blobs, test an invalid <code>excessBlobGas</code> value by changing it by <code>[-TARGET_BLOBS_PER_BLOCK, TARGET_BLOBS_PER_BLOCK]</code> from the correct value.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_blobs,header_excess_blobs_delta\",\n    itertools.product(\n        # parent_blobs\n        range(0, SpecHelpers.max_blobs_per_block() + 1),\n        # header_excess_blobs_delta (from correct value)\n        [\n            x\n            for x in range(\n                -SpecHelpers.target_blobs_per_block(), SpecHelpers.target_blobs_per_block() + 1\n            )\n            if x != 0\n        ],\n    ),\n)\n@pytest.mark.parametrize(\"new_blobs\", [1])\ndef test_invalid_excess_blob_gas_change(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` changes to an invalid\n    value.\n\n    Given a parent block containing `[0, MAX_BLOBS_PER_BLOCK]` blobs, test an invalid\n    `excessBlobGas` value by changing it by `[-TARGET_BLOBS_PER_BLOCK, TARGET_BLOBS_PER_BLOCK]`\n    from the correct value.\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_negative_excess_blob_gas","title":"<code>test_invalid_negative_excess_blob_gas(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> changes to the two's complement equivalent of the negative value after subtracting target blobs.</p> <p>Reasoning is that the <code>excessBlobGas</code> is a <code>uint64</code>, so it cannot be negative, and we test for a potential underflow here.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"header_excess_blob_gas\",\n    [(2**64 + (x * Spec.GAS_PER_BLOB)) for x in range(-SpecHelpers.target_blobs_per_block(), 0)],\n)\n@pytest.mark.parametrize(\"parent_blobs\", range(SpecHelpers.target_blobs_per_block()))\n@pytest.mark.parametrize(\"new_blobs\", [1])\n@pytest.mark.parametrize(\"parent_excess_blobs\", range(SpecHelpers.target_blobs_per_block()))\ndef test_invalid_negative_excess_blob_gas(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` changes to the two's\n    complement equivalent of the negative value after subtracting target blobs.\n\n    Reasoning is that the `excessBlobGas` is a `uint64`, so it cannot be negative, and\n    we test for a potential underflow here.\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/#tests.cancun.eip4844_blobs.test_excess_blob_gas.test_invalid_non_multiple_excess_blob_gas","title":"<code>test_invalid_non_multiple_excess_blob_gas(blockchain_test, env, pre, blocks, correct_excess_blob_gas, header_excess_blob_gas)</code>","text":"<p>Test rejection of blocks where the <code>excessBlobGas</code> changes to a value that is not a multiple of Spec.GAS_PER_BLOB`:</p> <ul> <li>Parent block contains <code>TARGET_BLOBS_PER_BLOCK + 1</code> blobs, but <code>excessBlobGas</code> is off by \u00b11</li> <li>Parent block contains <code>TARGET_BLOBS_PER_BLOCK - 1</code> blobs, but <code>excessBlobGas</code> is off by \u00b11</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"parent_blobs,header_excess_blob_gas_delta\",\n    [\n        (SpecHelpers.target_blobs_per_block() + 1, 1),\n        (SpecHelpers.target_blobs_per_block() + 1, Spec.GAS_PER_BLOB - 1),\n        (SpecHelpers.target_blobs_per_block() - 1, -1),\n        (SpecHelpers.target_blobs_per_block() - 1, -(Spec.GAS_PER_BLOB - 1)),\n    ],\n)\n@pytest.mark.parametrize(\"new_blobs\", [1])\n@pytest.mark.parametrize(\"parent_excess_blobs\", [SpecHelpers.target_blobs_per_block() + 1])\ndef test_invalid_non_multiple_excess_blob_gas(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    blocks: List[Block],\n    correct_excess_blob_gas: int,\n    header_excess_blob_gas: Optional[int],\n):\n    \"\"\"\n    Test rejection of blocks where the `excessBlobGas` changes to a value that\n    is not a multiple of Spec.GAS_PER_BLOB`:\n\n    - Parent block contains `TARGET_BLOBS_PER_BLOCK + 1` blobs, but `excessBlobGas` is off by +/-1\n    - Parent block contains `TARGET_BLOBS_PER_BLOCK - 1` blobs, but `excessBlobGas` is off by +/-1\n    \"\"\"\n    if header_excess_blob_gas is None:\n        raise Exception(\"test case is badly formatted\")\n\n    if header_excess_blob_gas == correct_excess_blob_gas:\n        raise Exception(\"invalid test case\")\n\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=blocks,\n        genesis_environment=env,\n        tag=\"-\".join(\n            [\n                f\"correct:{hex(correct_excess_blob_gas)}\",\n                f\"header:{hex(header_excess_blob_gas)}\",\n            ]\n        ),\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas/index/test_cases/","title":"Test Excess Blob Gas - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_excess_blob_gas.py</code>:</p> <pre><code>test_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_2-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_2-parent_blobs_6]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_3]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_correct_excess_blob_gas_calculation[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_17]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_264]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_564]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_829]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_1129]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_1229]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_17]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_264]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_564]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_829]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_1129]\ntest_correct_increasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_1229]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_17]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_264]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_564]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_829]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_1129]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-parent_excess_blobs_1229]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_17]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_264]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_564]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_829]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_1129]\ntest_correct_increasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-parent_excess_blobs_1229]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_18]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_265]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_565]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_830]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_1130]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_1230]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_18]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_265]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_565]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_830]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_1130]\ntest_correct_decreasing_blob_gas_costs[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_1230]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_18]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_265]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_565]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_830]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_1130]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-parent_excess_blobs_1230]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_18]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_265]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_565]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_830]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_1130]\ntest_correct_decreasing_blob_gas_costs[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-parent_excess_blobs_1230]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_1-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_1-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_2-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_2-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_3-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_3-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_4-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_4-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_5-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_5-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_6-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test-parent_blobs_6-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_1-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_1-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_2-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_2-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_3-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_3-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_4-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_4-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_5-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_5-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_6-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_6-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_1-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_1-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_2-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_2-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_3-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_3-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_4-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_4-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_5-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_5-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_6-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test-parent_blobs_6-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_1-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_1-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_2-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_2-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_3-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_3-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_4-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_4-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_5-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_5-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_6-new_blobs_0-header_excess_blob_gas_0]\ntest_invalid_zero_excess_blob_gas_in_header[fork_Prague-blockchain_test_hive-parent_blobs_6-new_blobs_1-header_excess_blob_gas_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Cancun-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_0-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_1-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_2-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_3-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_4-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_5-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test-parent_blobs_0-new_blobs_6-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_0-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_1-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_2-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_3-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_4-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_786432]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_5-header_blob_gas_used_18446744073709551615]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_0]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_131072]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_262144]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_393216]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_524288]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_655360]\ntest_invalid_blob_gas_used_in_header[fork_Prague-blockchain_test_hive-parent_blobs_0-new_blobs_6-header_blob_gas_used_18446744073709551615]\ntest_invalid_excess_blob_gas_above_target_change[fork_Cancun-blockchain_test-new_blobs_1-zero_blobs_decrease_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Cancun-blockchain_test-new_blobs_1-max_blobs_increase_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Cancun-blockchain_test_hive-new_blobs_1-zero_blobs_decrease_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Cancun-blockchain_test_hive-new_blobs_1-max_blobs_increase_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Prague-blockchain_test-new_blobs_1-zero_blobs_decrease_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Prague-blockchain_test-new_blobs_1-max_blobs_increase_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Prague-blockchain_test_hive-new_blobs_1-zero_blobs_decrease_more_than_expected]\ntest_invalid_excess_blob_gas_above_target_change[fork_Prague-blockchain_test_hive-new_blobs_1-max_blobs_increase_more_than_expected]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_1-parent_blobs_6]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_0]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_1]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_2]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_4]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_5]\ntest_invalid_static_excess_blob_gas[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_3-parent_blobs_6]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_0-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_1-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_2-header_excess_blobs_delta_5]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_4]\ntest_invalid_excess_blob_gas_target_blobs_increase_from_zero[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_3-header_excess_blobs_delta_5]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_4-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_5-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Cancun-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_6-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_4-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_5-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_6-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_4-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_5-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Prague-blockchain_test-new_blobs_1-parent_excess_blobs_0-parent_blobs_6-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_4-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_5-header_excess_blob_gas_0]\ntest_invalid_static_excess_blob_gas_from_zero_on_blobs_above_target[fork_Prague-blockchain_test_hive-new_blobs_1-parent_excess_blobs_0-parent_blobs_6-header_excess_blob_gas_0]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Cancun-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_0-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_1-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_2-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_3-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_4-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_5-header_excess_blobs_delta_3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-3]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_-1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_1]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_2]\ntest_invalid_excess_blob_gas_change[fork_Prague-blockchain_test_hive-new_blobs_1-parent_blobs_6-header_excess_blobs_delta_3]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_0-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_1-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_0-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_1-header_excess_blob_gas_18446744073709420544]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709158400]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709289472]\ntest_invalid_negative_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_2-new_blobs_1-parent_blobs_2-header_excess_blob_gas_18446744073709420544]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Cancun-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_4-header_excess_blob_gas_delta_131071]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-1]\ntest_invalid_non_multiple_excess_blob_gas[fork_Prague-blockchain_test_hive-parent_excess_blobs_4-new_blobs_1-parent_blobs_2-header_excess_blob_gas_delta_-131071]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_excess_blob_gas.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition/","title":"Test Excess Blob Gas Fork Transition","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py\n</code></pre> Tests <code>excessBlobGas</code> and <code>blobGasUsed</code> block fields for EIP-4844: Shard Blob Transactions at fork transition. <p>Test <code>excessBlobGas</code> and <code>blobGasUsed</code> block fields for EIP-4844: Shard Blob Transactions at fork transition.</p>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition/#tests.cancun.eip4844_blobs.test_excess_blob_gas_fork_transition.test_invalid_pre_fork_block_with_blob_fields","title":"<code>test_invalid_pre_fork_block_with_blob_fields(blockchain_test, env, pre, pre_fork_blocks, excess_blob_gas_present, blob_gas_used_present)</code>","text":"<p>Test block rejection when <code>excessBlobGas</code> and/or <code>blobGasUsed</code> fields are present on a pre-fork block.</p> <p>Blocks sent by NewPayloadV2 (Shanghai) that contain <code>excessBlobGas</code> and <code>blobGasUsed</code> fields must be rejected with the appropriate <code>EngineAPIError.InvalidParams</code> error error.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py</code> <pre><code>@pytest.mark.parametrize(\n    \"excess_blob_gas_present,blob_gas_used_present\",\n    [\n        (True, False),\n        (False, True),\n        (True, True),\n    ],\n)\ndef test_invalid_pre_fork_block_with_blob_fields(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    pre_fork_blocks: List[Block],\n    excess_blob_gas_present: bool,\n    blob_gas_used_present: bool,\n):\n    \"\"\"\n    Test block rejection when `excessBlobGas` and/or `blobGasUsed` fields are present on a pre-fork\n    block.\n\n    Blocks sent by NewPayloadV2 (Shanghai) that contain `excessBlobGas` and `blobGasUsed` fields\n    must be rejected with the appropriate `EngineAPIError.InvalidParams` error error.\n    \"\"\"\n    header_modifier = Header(\n        excess_blob_gas=0 if excess_blob_gas_present else None,\n        blob_gas_used=0 if blob_gas_used_present else None,\n    )\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=pre_fork_blocks[:-1]\n        + [\n            Block(\n                timestamp=(FORK_TIMESTAMP - 1),\n                rlp_modifier=header_modifier,\n                exception=BlockException.INCORRECT_BLOCK_FORMAT,\n                engine_api_error_code=EngineAPIError.InvalidParams,\n            )\n        ],\n        genesis_environment=env,\n        tag=\"invalid_pre_fork_blob_fields\",\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition/#tests.cancun.eip4844_blobs.test_excess_blob_gas_fork_transition.test_invalid_post_fork_block_without_blob_fields","title":"<code>test_invalid_post_fork_block_without_blob_fields(blockchain_test, env, pre, pre_fork_blocks, excess_blob_gas_missing, blob_gas_used_missing)</code>","text":"<p>Test block rejection when <code>excessBlobGas</code> and/or <code>blobGasUsed</code> fields are missing on a post-fork block.</p> <p>Blocks sent by NewPayloadV3 (Cancun) without <code>excessBlobGas</code> and <code>blobGasUsed</code> fields must be rejected with the appropriate <code>EngineAPIError.InvalidParams</code> error.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py</code> <pre><code>@pytest.mark.parametrize(\n    \"excess_blob_gas_missing,blob_gas_used_missing\",\n    [\n        (True, False),\n        (False, True),\n        (True, True),\n    ],\n)\ndef test_invalid_post_fork_block_without_blob_fields(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    pre_fork_blocks: List[Block],\n    excess_blob_gas_missing: bool,\n    blob_gas_used_missing: bool,\n):\n    \"\"\"\n    Test block rejection when `excessBlobGas` and/or `blobGasUsed` fields are missing on a\n    post-fork block.\n\n    Blocks sent by NewPayloadV3 (Cancun) without `excessBlobGas` and `blobGasUsed` fields must be\n    rejected with the appropriate `EngineAPIError.InvalidParams` error.\n    \"\"\"\n    header_modifier = Header()\n    if excess_blob_gas_missing:\n        header_modifier.excess_blob_gas = Header.REMOVE_FIELD\n    if blob_gas_used_missing:\n        header_modifier.blob_gas_used = Header.REMOVE_FIELD\n    blockchain_test(\n        pre=pre,\n        post={},\n        blocks=pre_fork_blocks\n        + [\n            Block(\n                timestamp=FORK_TIMESTAMP,\n                rlp_modifier=header_modifier,\n                exception=BlockException.INCORRECT_BLOCK_FORMAT,\n                engine_api_error_code=EngineAPIError.InvalidParams,\n            )\n        ],\n        genesis_environment=env,\n        tag=\"blob_fields_missing_post_fork\",\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition/#tests.cancun.eip4844_blobs.test_excess_blob_gas_fork_transition.test_fork_transition_excess_blob_gas","title":"<code>test_fork_transition_excess_blob_gas(blockchain_test, env, pre, pre_fork_blocks, post_fork_blocks, post)</code>","text":"<p>Test <code>excessBlobGas</code> calculation in the header when the fork is activated.</p> <p>Also produce enough blocks to test the blob gas price increase when the block is full with <code>SpecHelpers.max_blobs_per_block()</code> blobs.</p> Source code in <code>tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py</code> <pre><code>@pytest.mark.parametrize(\n    \"post_fork_block_count,blob_count_per_block\",\n    [\n        (\n            SpecHelpers.get_min_excess_blobs_for_blob_gas_price(2)\n            // (SpecHelpers.max_blobs_per_block() - SpecHelpers.target_blobs_per_block())\n            + 2,\n            SpecHelpers.max_blobs_per_block(),\n        ),\n        (10, 0),\n        (10, SpecHelpers.target_blobs_per_block()),\n    ],\n    ids=[\"max_blobs\", \"no_blobs\", \"target_blobs\"],\n)\ndef test_fork_transition_excess_blob_gas(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Mapping[Address, Account],\n    pre_fork_blocks: List[Block],\n    post_fork_blocks: List[Block],\n    post: Mapping[Address, Account],\n):\n    \"\"\"\n    Test `excessBlobGas` calculation in the header when the fork is activated.\n\n    Also produce enough blocks to test the blob gas price increase when the block is full with\n    `SpecHelpers.max_blobs_per_block()` blobs.\n    \"\"\"\n    blockchain_test(\n        pre=pre,\n        post=post,\n        blocks=pre_fork_blocks + post_fork_blocks,\n        genesis_environment=env,\n        tag=\"correct_initial_blob_gas_calc\",\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition/index/test_cases/","title":"Test Excess Blob Gas Fork Transition - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py</code>:</p> <pre><code>test_invalid_pre_fork_block_with_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test-excess_blob_gas_present_True-blob_gas_used_present_False]\ntest_invalid_pre_fork_block_with_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test-excess_blob_gas_present_False-blob_gas_used_present_True]\ntest_invalid_pre_fork_block_with_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test-excess_blob_gas_present_True-blob_gas_used_present_True]\ntest_invalid_pre_fork_block_with_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-excess_blob_gas_present_True-blob_gas_used_present_False]\ntest_invalid_pre_fork_block_with_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-excess_blob_gas_present_False-blob_gas_used_present_True]\ntest_invalid_pre_fork_block_with_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-excess_blob_gas_present_True-blob_gas_used_present_True]\ntest_invalid_post_fork_block_without_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test-excess_blob_gas_missing_True-blob_gas_used_missing_False]\ntest_invalid_post_fork_block_without_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test-excess_blob_gas_missing_False-blob_gas_used_missing_True]\ntest_invalid_post_fork_block_without_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test-excess_blob_gas_missing_True-blob_gas_used_missing_True]\ntest_invalid_post_fork_block_without_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-excess_blob_gas_missing_True-blob_gas_used_missing_False]\ntest_invalid_post_fork_block_without_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-excess_blob_gas_missing_False-blob_gas_used_missing_True]\ntest_invalid_post_fork_block_without_blob_fields[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-excess_blob_gas_missing_True-blob_gas_used_missing_True]\ntest_fork_transition_excess_blob_gas[fork_ShanghaiToCancunAtTime15k-blockchain_test-max_blobs]\ntest_fork_transition_excess_blob_gas[fork_ShanghaiToCancunAtTime15k-blockchain_test-no_blobs]\ntest_fork_transition_excess_blob_gas[fork_ShanghaiToCancunAtTime15k-blockchain_test-target_blobs]\ntest_fork_transition_excess_blob_gas[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-max_blobs]\ntest_fork_transition_excess_blob_gas[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-no_blobs]\ntest_fork_transition_excess_blob_gas[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-target_blobs]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_excess_blob_gas_fork_transition.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/","title":"Test Point Evaluation Precompile","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py\n</code></pre> Tests point evaluation precompile for EIP-4844: Shard Blob Transactions <p>Test point evaluation precompile for EIP-4844: Shard Blob Transactions.</p> Adding a new test <p>Add a function that is named <code>test_&lt;test_name&gt;</code> and takes at least the following arguments:</p> <ul> <li>blockchain_test | state_test</li> <li>pre</li> <li>tx</li> <li>post</li> </ul> <p>The following arguments need to be parametrized or the test will not be generated:</p> <ul> <li>versioned_hash</li> <li>kzg_commitment</li> <li>z</li> <li>y</li> <li>kzg_proof</li> <li>success</li> </ul> <p>These values correspond to a single call of the precompile, and <code>success</code> refers to whether the call should succeed or fail.</p> <p>All other <code>pytest.fixture</code> fixtures can be parametrized to generate new combinations and test cases.</p>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_valid_precompile_calls","title":"<code>test_valid_precompile_calls(state_test, pre, tx, post)</code>","text":"<p>Test valid sanity precompile calls that are expected to succeed.</p> <ul> <li><code>kzg_commitment</code> and <code>kzg_proof</code> are set to values such that <code>p(z)==0</code> for all values of <code>z</code>, hence <code>y</code> is tested to be zero, and call to be successful.</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"z,y,kzg_commitment,kzg_proof,versioned_hash\",\n    [\n        pytest.param(Spec.BLS_MODULUS - 1, 0, INF_POINT, INF_POINT, None, id=\"in_bounds_z\"),\n    ],\n)\n@pytest.mark.parametrize(\"success\", [True])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_valid_precompile_calls(\n    state_test: StateTestFiller,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Test valid sanity precompile calls that are expected to succeed.\n\n    - `kzg_commitment` and `kzg_proof` are set to values such that `p(z)==0` for all values of `z`,\n    hence `y` is tested to be zero, and call to be successful.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_invalid_precompile_calls","title":"<code>test_invalid_precompile_calls(state_test, pre, tx, post)</code>","text":"<p>Test invalid precompile calls:</p> <ul> <li>Out of bounds inputs <code>z</code> and <code>y</code></li> <li>Correct proof, commitment, z and y, but incorrect lengths</li> <li>Null inputs</li> <li>Zero inputs</li> <li>Correct proof, commitment, z and y, but incorrect version versioned hash</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"z,y,kzg_commitment,kzg_proof,versioned_hash\",\n    [\n        (Spec.BLS_MODULUS, 0, INF_POINT, INF_POINT, None),\n        (0, Spec.BLS_MODULUS, INF_POINT, INF_POINT, None),\n        (Z, 0, INF_POINT, INF_POINT[:-1], None),\n        (Z, 0, INF_POINT, INF_POINT[0:1], None),\n        (Z, 0, INF_POINT, INF_POINT + bytes([0]), None),\n        (Z, 0, INF_POINT, INF_POINT + bytes([0] * 1023), None),\n        (bytes(), bytes(), bytes(), bytes(), bytes()),\n        (0, 0, 0, 0, 0),\n        (0, 0, 0, 0, None),\n        (Z, 0, INF_POINT, INF_POINT, Spec.kzg_to_versioned_hash(0xC0 &lt;&lt; 376, 0x00)),\n        (Z, 0, INF_POINT, INF_POINT, Spec.kzg_to_versioned_hash(0xC0 &lt;&lt; 376, 0x02)),\n        (Z, 0, INF_POINT, INF_POINT, Spec.kzg_to_versioned_hash(0xC0 &lt;&lt; 376, 0xFF)),\n    ],\n    ids=[\n        \"out_of_bounds_z\",\n        \"out_of_bounds_y\",\n        \"correct_proof_1_input_too_short\",\n        \"correct_proof_1_input_too_short_2\",\n        \"correct_proof_1_input_too_long\",\n        \"correct_proof_1_input_extra_long\",\n        \"null_inputs\",\n        \"zeros_inputs\",\n        \"zeros_inputs_correct_versioned_hash\",\n        \"correct_proof_1_incorrect_versioned_hash_version_0x00\",\n        \"correct_proof_1_incorrect_versioned_hash_version_0x02\",\n        \"correct_proof_1_incorrect_versioned_hash_version_0xff\",\n    ],\n)\n@pytest.mark.parametrize(\"success\", [False])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_invalid_precompile_calls(\n    state_test: StateTestFiller,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Test invalid precompile calls:\n\n    - Out of bounds inputs `z` and `y`\n    - Correct proof, commitment, z and y, but incorrect lengths\n    - Null inputs\n    - Zero inputs\n    - Correct proof, commitment, z and y, but incorrect version versioned hash\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_point_evaluation_precompile_external_vectors","title":"<code>test_point_evaluation_precompile_external_vectors(state_test, pre, tx, post)</code>","text":"<p>Test precompile calls using external test vectors compiled from different sources:</p> <ul> <li><code>go_kzg_4844_verify_kzg_proof.json</code>: test vectors from the go-kzg-4844 repository.</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"z,y,kzg_commitment,kzg_proof,success\",\n    all_external_vectors(),\n)\n@pytest.mark.parametrize(\"versioned_hash\", [None])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_point_evaluation_precompile_external_vectors(\n    state_test: StateTestFiller,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Test precompile calls using external test vectors compiled from different sources:\n\n    - `go_kzg_4844_verify_kzg_proof.json`: test vectors from the\n    [go-kzg-4844](https://github.com/crate-crypto/go-kzg-4844) repository.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_point_evaluation_precompile_calls","title":"<code>test_point_evaluation_precompile_calls(state_test, pre, tx, post)</code>","text":"<p>Test calling the Point Evaluation Precompile with different call types, gas and parameter configuration:</p> <ul> <li>Using CALL, DELEGATECALL, CALLCODE and STATICCALL.</li> <li>Using correct and incorrect proofs</li> <li>Using barely insufficient gas</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_gas,y,success\",\n    [\n        (Spec.POINT_EVALUATION_PRECOMPILE_GAS, 0, True),\n        (Spec.POINT_EVALUATION_PRECOMPILE_GAS, 1, False),\n        (Spec.POINT_EVALUATION_PRECOMPILE_GAS - 1, 0, False),\n    ],\n    ids=[\"correct\", \"incorrect\", \"insufficient_gas\"],\n)\n@pytest.mark.parametrize(\n    \"call_type\",\n    [\n        Op.CALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n        Op.STATICCALL,\n    ],\n)\n@pytest.mark.parametrize(\n    \"z,kzg_commitment,kzg_proof,versioned_hash\",\n    [[Z, INF_POINT, INF_POINT, None]],\n    ids=[\"\"],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_point_evaluation_precompile_calls(\n    state_test: StateTestFiller,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Test calling the Point Evaluation Precompile with different call types, gas\n    and parameter configuration:\n\n    - Using CALL, DELEGATECALL, CALLCODE and STATICCALL.\n    - Using correct and incorrect proofs\n    - Using barely insufficient gas\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_point_evaluation_precompile_gas_tx_to","title":"<code>test_point_evaluation_precompile_gas_tx_to(state_test, precompile_input, call_gas, proof_correct)</code>","text":"<p>Test calling the Point Evaluation Precompile directly as transaction entry point, and measure the gas consumption.</p> <ul> <li>Using <code>gas_limit</code> with exact necessary gas, insufficient gas and extra gas.</li> <li>Using correct and incorrect proofs</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_gas\",\n    [\n        (Spec.POINT_EVALUATION_PRECOMPILE_GAS),\n        (Spec.POINT_EVALUATION_PRECOMPILE_GAS + 1),\n        (Spec.POINT_EVALUATION_PRECOMPILE_GAS - 1),\n    ],\n    ids=[\"exact_gas\", \"extra_gas\", \"insufficient_gas\"],\n)\n@pytest.mark.parametrize(\n    \"z,y,kzg_commitment,kzg_proof,versioned_hash,proof_correct\",\n    [\n        [Z, 0, INF_POINT, INF_POINT, None, True],\n        [Z, 1, INF_POINT, INF_POINT, None, False],\n    ],\n    ids=[\"correct_proof\", \"incorrect_proof\"],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_point_evaluation_precompile_gas_tx_to(\n    state_test: StateTestFiller,\n    precompile_input: bytes,\n    call_gas: int,\n    proof_correct: bool,\n):\n    \"\"\"\n    Test calling the Point Evaluation Precompile directly as\n    transaction entry point, and measure the gas consumption.\n\n    - Using `gas_limit` with exact necessary gas, insufficient gas and extra gas.\n    - Using correct and incorrect proofs\n    \"\"\"\n    start_balance = 10**18\n    pre = {\n        TestAddress: Account(\n            nonce=0,\n            balance=start_balance,\n        ),\n    }\n\n    # Gas is appended the intrinsic gas cost of the transaction\n    intrinsic_gas_cost = 21_000 + eip_2028_transaction_data_cost(precompile_input)\n\n    # Consumed gas will only be the precompile gas if the proof is correct and\n    # the call gas is sufficient.\n    # Otherwise, the call gas will be consumed in full.\n    consumed_gas = (\n        Spec.POINT_EVALUATION_PRECOMPILE_GAS\n        if call_gas &gt;= Spec.POINT_EVALUATION_PRECOMPILE_GAS and proof_correct\n        else call_gas\n    ) + intrinsic_gas_cost\n\n    fee_per_gas = 7\n\n    tx = Transaction(\n        ty=2,\n        nonce=0,\n        data=precompile_input,\n        to=Address(Spec.POINT_EVALUATION_PRECOMPILE_ADDRESS),\n        value=0,\n        gas_limit=call_gas + intrinsic_gas_cost,\n        max_fee_per_gas=7,\n        max_priority_fee_per_gas=0,\n    )\n\n    post = {\n        TestAddress: Account(\n            nonce=1,\n            balance=start_balance - (consumed_gas * fee_per_gas),\n        )\n    }\n\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_point_evaluation_precompile_before_fork","title":"<code>test_point_evaluation_precompile_before_fork(state_test, pre, tx)</code>","text":"<p>Test calling the Point Evaluation Precompile before the appropriate fork.</p> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"z,y,kzg_commitment,kzg_proof,versioned_hash\",\n    [[Z, 0, INF_POINT, INF_POINT, None]],\n    ids=[\"correct_proof\"],\n)\n@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_point_evaluation_precompile_before_fork(\n    state_test: StateTestFiller,\n    pre: Dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test calling the Point Evaluation Precompile before the appropriate fork.\n    \"\"\"\n    precompile_caller_code = Op.SSTORE(\n        Op.NUMBER,\n        Op.CALL(\n            Op.GAS,\n            Spec.POINT_EVALUATION_PRECOMPILE_ADDRESS,\n            1,  # Value\n            0,  # Zero-length calldata\n            0,\n            0,  # Zero-length return\n            0,\n        ),\n    )\n    precompile_caller_address = Address(0x100)\n\n    pre = {\n        TestAddress: Account(\n            nonce=0,\n            balance=0x10**18,\n        ),\n        precompile_caller_address: Account(\n            nonce=0,\n            code=precompile_caller_code,\n            balance=0x10**18,\n        ),\n    }\n\n    post = {\n        precompile_caller_address: Account(\n            storage={1: 1},\n            # The call succeeds because precompile is not there yet\n        ),\n        Address(Spec.POINT_EVALUATION_PRECOMPILE_ADDRESS): Account(\n            balance=1,\n        ),\n    }\n\n    state_test(\n        tag=\"point_evaluation_precompile_before_fork\",\n        pre=pre,\n        env=Environment(timestamp=7_500),\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile.test_point_evaluation_precompile_during_fork","title":"<code>test_point_evaluation_precompile_during_fork(blockchain_test, pre, tx)</code>","text":"<p>Test calling the Point Evaluation Precompile before the appropriate fork.</p> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code> <pre><code>@pytest.mark.parametrize(\n    \"z,y,kzg_commitment,kzg_proof,versioned_hash\",\n    [[Z, 0, INF_POINT, INF_POINT, None]],\n    ids=[\"correct_proof\"],\n)\n@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_point_evaluation_precompile_during_fork(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test calling the Point Evaluation Precompile before the appropriate fork.\n    \"\"\"\n    precompile_caller_code = Op.SSTORE(\n        Op.NUMBER,\n        Op.CALL(\n            Op.GAS,\n            Spec.POINT_EVALUATION_PRECOMPILE_ADDRESS,\n            1,  # Value\n            0,  # Zero-length calldata\n            0,\n            0,  # Zero-length return\n            0,\n        ),\n    )\n    precompile_caller_address = Address(0x100)\n\n    pre = {\n        TestAddress: Account(\n            nonce=0,\n            balance=0x10**18,\n        ),\n        precompile_caller_address: Account(\n            nonce=0,\n            code=precompile_caller_code,\n            balance=0x10**18,\n        ),\n    }\n\n    def tx_generator() -&gt; Iterator[Transaction]:\n        nonce = 0  # Initial value\n        while True:\n            yield tx.with_nonce(nonce)\n            nonce = nonce + 1\n\n    iter_tx = tx_generator()\n\n    FORK_TIMESTAMP = 15_000\n    PRE_FORK_BLOCK_RANGE = range(999, FORK_TIMESTAMP, 1_000)\n\n    # Blocks before fork\n    blocks = [Block(timestamp=t, txs=[next(iter_tx)]) for t in PRE_FORK_BLOCK_RANGE]\n    # Block after fork\n    blocks += [Block(timestamp=FORK_TIMESTAMP, txs=[next(iter_tx)])]\n\n    post = {\n        precompile_caller_address: Account(\n            storage={b: 1 for b in range(1, len(PRE_FORK_BLOCK_RANGE) + 1)},\n            # Only the call in the last block's tx fails; storage 0 by default.\n        ),\n        Address(Spec.POINT_EVALUATION_PRECOMPILE_ADDRESS): Account(\n            balance=len(PRE_FORK_BLOCK_RANGE),\n        ),\n    }\n\n    blockchain_test(\n        tag=\"point_evaluation_precompile_before_fork\",\n        pre=pre,\n        post=post,\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile/index/test_cases/","title":"Test Point Evaluation Precompile - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py</code>:</p> <pre><code>test_valid_precompile_calls[fork_Cancun-blockchain_test-success_True-in_bounds_z]\ntest_valid_precompile_calls[fork_Cancun-blockchain_test_hive-success_True-in_bounds_z]\ntest_valid_precompile_calls[fork_Cancun-state_test-success_True-in_bounds_z]\ntest_valid_precompile_calls[fork_Prague-blockchain_test-success_True-in_bounds_z]\ntest_valid_precompile_calls[fork_Prague-blockchain_test_hive-success_True-in_bounds_z]\ntest_valid_precompile_calls[fork_Prague-state_test-success_True-in_bounds_z]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-out_of_bounds_z]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-out_of_bounds_y]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_input_too_short]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_input_too_short_2]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_input_too_long]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_input_extra_long]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-null_inputs]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-zeros_inputs]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-zeros_inputs_correct_versioned_hash]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x00]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x02]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0xff]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-out_of_bounds_z]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-out_of_bounds_y]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_input_too_short]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_input_too_short_2]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_input_too_long]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_input_extra_long]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-null_inputs]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-zeros_inputs]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-zeros_inputs_correct_versioned_hash]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_incorrect_versioned_hash_version_0x00]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_incorrect_versioned_hash_version_0x02]\ntest_invalid_precompile_calls[fork_Cancun-blockchain_test_hive-success_False-correct_proof_1_incorrect_versioned_hash_version_0xff]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-out_of_bounds_z]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-out_of_bounds_y]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_input_too_short]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_input_too_short_2]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_input_too_long]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_input_extra_long]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-null_inputs]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-zeros_inputs]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-zeros_inputs_correct_versioned_hash]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x00]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x02]\ntest_invalid_precompile_calls[fork_Cancun-state_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0xff]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-out_of_bounds_z]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-out_of_bounds_y]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_input_too_short]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_input_too_short_2]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_input_too_long]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_input_extra_long]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-null_inputs]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-zeros_inputs]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-zeros_inputs_correct_versioned_hash]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x00]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x02]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0xff]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-out_of_bounds_z]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-out_of_bounds_y]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_input_too_short]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_input_too_short_2]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_input_too_long]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_input_extra_long]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-null_inputs]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-zeros_inputs]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-zeros_inputs_correct_versioned_hash]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_incorrect_versioned_hash_version_0x00]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_incorrect_versioned_hash_version_0x02]\ntest_invalid_precompile_calls[fork_Prague-blockchain_test_hive-success_False-correct_proof_1_incorrect_versioned_hash_version_0xff]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-out_of_bounds_z]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-out_of_bounds_y]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_input_too_short]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_input_too_short_2]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_input_too_long]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_input_extra_long]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-null_inputs]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-zeros_inputs]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-zeros_inputs_correct_versioned_hash]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x00]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0x02]\ntest_invalid_precompile_calls[fork_Prague-state_test-success_False-correct_proof_1_incorrect_versioned_hash_version_0xff]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Cancun-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_proof_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_y_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-blockchain_test_hive-versioned_hash_None-verify_kzg_proof_case_invalid_z_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_twos_poly_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_correct_proof_point_at_infinity_for_zero_poly_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_02e696ada7d4631d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_05c1f3685f3393f0]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_08f9e2f1cb3d39db]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_0cf79b17cb5f4ea2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_177b58dc7a46b08f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_1ce8e4f69d5df899]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_26b753dec0560daa]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_2b76dc9e3abf42f3]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_31ebd010e6098750]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3208425794224c3f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_36817bfd67de97a8]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_395cf6d697d1a743]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3ac8dc31e9aa6a70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_3cd183d0bab85fb7]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_444b73ff54a19b44]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_53a9bdf4f75196da]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_585454b31673dd62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_7db4f140a955dd1a]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b24f8997145435c]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_9b754afb690c47e1]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_a0be66af9a97ea52]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af669445747d2585]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_af8b75f664ed7d43]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6cb6698327d9835]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_b6ec3736f9ff2c62]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_becf2e1641bbd4e6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c3d4322ec17fe7cd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_c5e1490d672d026d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_cae5d3491190b777]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d0992bc0387790a4]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_d736268229bd87ec]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_e68d7111a2364a49]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f0ed3dc11cdeb130]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f47eb9fc139f6bfd]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_f7f44e1e864aa967]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_ffa6e97b97146517]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_392169c16a2e5ef6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c1e8b38219e3e12]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_3c87ec986c2656c2]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_420f2a187ce77035]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_83e53423a2dd93fe]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_incorrect_proof_point_at_infinity_ed6b180ec759bcf6]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_commitment_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_1b44e341d56c757d]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_32afa9561a4b3b91]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_3e55802a5ed3c757]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_proof_e9d3e9ec16fbc15f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_y_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_35d08d612aad2197]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4aa6def8c35c9097]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_4e51cef08a61606f]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_64b9ff2b8f7dddee]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_b358a2e763727b70]\ntest_point_evaluation_precompile_external_vectors[fork_Prague-state_test-versioned_hash_None-verify_kzg_proof_case_invalid_z_eb0601fec84cc5e9]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_CALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_CALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_CALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_DELEGATECALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_DELEGATECALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_DELEGATECALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_CALLCODE-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_CALLCODE-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_CALLCODE-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_STATICCALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_STATICCALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test--call_type_STATICCALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_CALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_CALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_CALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_DELEGATECALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_DELEGATECALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_DELEGATECALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_CALLCODE-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_CALLCODE-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_CALLCODE-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_STATICCALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_STATICCALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-blockchain_test_hive--call_type_STATICCALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_CALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_CALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_CALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_DELEGATECALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_DELEGATECALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_DELEGATECALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_CALLCODE-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_CALLCODE-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_CALLCODE-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_STATICCALL-correct]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_STATICCALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Cancun-state_test--call_type_STATICCALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_CALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_CALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_CALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_DELEGATECALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_DELEGATECALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_DELEGATECALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_CALLCODE-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_CALLCODE-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_CALLCODE-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_STATICCALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_STATICCALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test--call_type_STATICCALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_CALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_CALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_CALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_DELEGATECALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_DELEGATECALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_DELEGATECALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_CALLCODE-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_CALLCODE-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_CALLCODE-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_STATICCALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_STATICCALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-blockchain_test_hive--call_type_STATICCALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_CALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_CALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_CALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_DELEGATECALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_DELEGATECALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_DELEGATECALL-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_CALLCODE-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_CALLCODE-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_CALLCODE-insufficient_gas]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_STATICCALL-correct]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_STATICCALL-incorrect]\ntest_point_evaluation_precompile_calls[fork_Prague-state_test--call_type_STATICCALL-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test-correct_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test-correct_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test-correct_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test-incorrect_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test-incorrect_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test-incorrect_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test_hive-correct_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test_hive-correct_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test_hive-correct_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test_hive-incorrect_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test_hive-incorrect_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-blockchain_test_hive-incorrect_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-state_test-correct_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-state_test-correct_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-state_test-correct_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-state_test-incorrect_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-state_test-incorrect_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Cancun-state_test-incorrect_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test-correct_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test-correct_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test-correct_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test-incorrect_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test-incorrect_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test-incorrect_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test_hive-correct_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test_hive-correct_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test_hive-correct_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test_hive-incorrect_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test_hive-incorrect_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-blockchain_test_hive-incorrect_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-state_test-correct_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-state_test-correct_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-state_test-correct_proof-insufficient_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-state_test-incorrect_proof-exact_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-state_test-incorrect_proof-extra_gas]\ntest_point_evaluation_precompile_gas_tx_to[fork_Prague-state_test-incorrect_proof-insufficient_gas]\ntest_point_evaluation_precompile_before_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test-correct_proof]\ntest_point_evaluation_precompile_before_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-correct_proof]\ntest_point_evaluation_precompile_before_fork[fork_ShanghaiToCancunAtTime15k-state_test-correct_proof]\ntest_point_evaluation_precompile_during_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test-correct_proof]\ntest_point_evaluation_precompile_during_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive-correct_proof]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_point_evaluation_precompile.py\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas/","title":"Test Point Evaluation Precompile Gas","text":"<p>Documentation for <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas.py\n</code></pre> Tests gas usage on point evaluation precompile for EIP-4844: Shard Blob Transactions <p>Test gas usage on point evaluation precompile for EIP-4844: Shard Blob Transactions.</p>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas/#tests.cancun.eip4844_blobs.test_point_evaluation_precompile_gas.test_point_evaluation_precompile_gas_usage","title":"<code>test_point_evaluation_precompile_gas_usage(state_test, pre, tx, post)</code>","text":"<p>Test point evaluation precompile gas usage under different call contexts and gas limits:</p> <ul> <li>Test using all call types (CALL, DELEGATECALL, CALLCODE, STATICCALL)</li> <li>Test using different gas limits (exact gas, insufficient gas, extra gas)</li> <li>Test using correct and incorrect proofs</li> </ul> Source code in <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_type\",\n    [Op.CALL, Op.DELEGATECALL, Op.CALLCODE, Op.STATICCALL],\n)\n@pytest.mark.parametrize(\n    \"call_gas\",\n    [\n        Spec.POINT_EVALUATION_PRECOMPILE_GAS,\n        Spec.POINT_EVALUATION_PRECOMPILE_GAS - 1,\n        Spec.POINT_EVALUATION_PRECOMPILE_GAS + 1,\n    ],\n    ids=[\"exact_gas\", \"insufficient_gas\", \"extra_gas\"],\n)\n@pytest.mark.parametrize(\"proof\", [\"correct\", \"incorrect\"])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_point_evaluation_precompile_gas_usage(\n    state_test: StateTestFiller,\n    pre: Dict,\n    tx: Transaction,\n    post: Dict,\n):\n    \"\"\"\n    Test point evaluation precompile gas usage under different call contexts and gas limits:\n\n    - Test using all call types (CALL, DELEGATECALL, CALLCODE, STATICCALL)\n    - Test using different gas limits (exact gas, insufficient gas, extra gas)\n    - Test using correct and incorrect proofs\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas/index/test_cases/","title":"Test Point Evaluation Precompile Gas - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas.py</code>:</p> <pre><code>test_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_correct-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test-proof_incorrect-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_correct-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-blockchain_test_hive-proof_incorrect-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_correct-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Cancun-state_test-proof_incorrect-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_correct-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test-proof_incorrect-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_correct-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-blockchain_test_hive-proof_incorrect-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_correct-extra_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-exact_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-exact_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-exact_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-exact_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-insufficient_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-insufficient_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-insufficient_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-insufficient_gas-call_type_STATICCALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-extra_gas-call_type_CALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-extra_gas-call_type_DELEGATECALL]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-extra_gas-call_type_CALLCODE]\ntest_point_evaluation_precompile_gas_usage[fork_Prague-state_test-proof_incorrect-extra_gas-call_type_STATICCALL]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip4844_blobs/test_point_evaluation_precompile_gas.py\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/","title":"EIP-5656 Mcopy","text":"<p>Documentation for <code>tests/cancun/eip5656_mcopy</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip5656_mcopy\n</code></pre> <p>Cross-client EIP-5656 Tests</p>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy/","title":"Test Mcopy","text":"<p>Documentation for <code>tests/cancun/eip5656_mcopy/test_mcopy.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip5656_mcopy/test_mcopy.py\n</code></pre> Tests EIP-5656: MCOPY - Memory copying instruction <p>Test copy operations of EIP-5656: MCOPY - Memory copying instruction</p>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy/#tests.cancun.eip5656_mcopy.test_mcopy.test_valid_mcopy_operations","title":"<code>test_valid_mcopy_operations(state_test, pre, post, tx)</code>","text":"Perform MCOPY operations using different offsets and lengths <ul> <li>Zero inputs</li> <li>Memory rewrites (copy from and to the same location)</li> <li>Memory overwrites (copy from and to different locations)</li> <li>Memory extensions (copy to a location that is out of bounds)</li> <li>Memory clear (copy from a location that is out of bounds)</li> </ul> Source code in <code>tests/cancun/eip5656_mcopy/test_mcopy.py</code> <pre><code>@pytest.mark.parametrize(\n    \"dest,src,length\",\n    [\n        (0x00, 0x00, 0x00),\n        (2**256 - 1, 0x00, 0x00),\n        (0x00, 0x00, 0x01),\n        (0x00, 0x00, 0x20),\n        (0x01, 0x00, 0x01),\n        (0x01, 0x00, 0x20),\n        (0x11, 0x11, 0x01),\n        (0x11, 0x11, 0x20),\n        (0x11, 0x11, 0x40),\n        (0x10, 0x00, 0x40),\n        (0x00, 0x10, 0x40),\n        (0x0F, 0x10, 0x40),\n        (0x100, 0x01, 0x01),\n        (0x100, 0x01, 0x20),\n        (0x100, 0x01, 0x1F),\n        (0x100, 0x01, 0x21),\n        (0x00, 0x00, 0x100),\n        (0x100, 0x00, 0x100),\n        (0x200, 0x00, 0x100),\n        (0x00, 0x100, 0x100),\n        (0x100, 0x100, 0x01),\n    ],\n    ids=[\n        \"zero_inputs\",\n        \"zero_length_out_of_bounds_destination\",\n        \"single_byte_rewrite\",\n        \"full_word_rewrite\",\n        \"single_byte_forward_overwrite\",\n        \"full_word_forward_overwrite\",\n        \"mid_word_single_byte_rewrite\",\n        \"mid_word_single_word_rewrite\",\n        \"mid_word_multi_word_rewrite\",\n        \"two_words_forward_overwrite\",\n        \"two_words_backward_overwrite\",\n        \"two_words_backward_overwrite_single_byte_offset\",\n        \"single_byte_memory_extension\",\n        \"single_word_memory_extension\",\n        \"single_word_minus_one_byte_memory_extension\",\n        \"single_word_plus_one_byte_memory_extension\",\n        \"full_memory_rewrite\",\n        \"full_memory_copy\",\n        \"full_memory_copy_offset\",\n        \"full_memory_clean\",\n        \"out_of_bounds_memory_extension\",\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_valid_mcopy_operations(\n    state_test: StateTestFiller,\n    pre: Mapping[str, Account],\n    post: Mapping[str, Account],\n    tx: Transaction,\n):\n    \"\"\"\n    Perform MCOPY operations using different offsets and lengths:\n      - Zero inputs\n      - Memory rewrites (copy from and to the same location)\n      - Memory overwrites (copy from and to different locations)\n      - Memory extensions (copy to a location that is out of bounds)\n      - Memory clear (copy from a location that is out of bounds)\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy/#tests.cancun.eip5656_mcopy.test_mcopy.test_mcopy_on_empty_memory","title":"<code>test_mcopy_on_empty_memory(state_test, pre, post, tx)</code>","text":"<p>Perform MCOPY operations on an empty memory, using different offsets and lengths.</p> Source code in <code>tests/cancun/eip5656_mcopy/test_mcopy.py</code> <pre><code>@pytest.mark.parametrize(\"dest\", [0x00, 0x20])\n@pytest.mark.parametrize(\"src\", [0x00, 0x20])\n@pytest.mark.parametrize(\"length\", [0x00, 0x01])\n@pytest.mark.parametrize(\"initial_memory\", [bytes()], ids=[\"empty_memory\"])\n@pytest.mark.valid_from(\"Cancun\")\ndef test_mcopy_on_empty_memory(\n    state_test: StateTestFiller,\n    pre: Mapping[str, Account],\n    post: Mapping[str, Account],\n    tx: Transaction,\n):\n    \"\"\"\n    Perform MCOPY operations on an empty memory, using different offsets and lengths.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy/index/test_cases/","title":"Test Mcopy - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip5656_mcopy/test_mcopy.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip5656_mcopy/test_mcopy.py</code>:</p> <pre><code>test_valid_mcopy_operations[fork_Cancun-blockchain_test-zero_inputs]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-zero_length_out_of_bounds_destination]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-full_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-single_byte_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-full_word_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-mid_word_single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-mid_word_single_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-mid_word_multi_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-two_words_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-two_words_backward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-two_words_backward_overwrite_single_byte_offset]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-single_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-single_word_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-single_word_minus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-single_word_plus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-full_memory_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-full_memory_copy]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-full_memory_copy_offset]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-full_memory_clean]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test-out_of_bounds_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-zero_inputs]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-zero_length_out_of_bounds_destination]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-full_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-single_byte_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-full_word_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-mid_word_single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-mid_word_single_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-mid_word_multi_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-two_words_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-two_words_backward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-two_words_backward_overwrite_single_byte_offset]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-single_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-single_word_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-single_word_minus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-single_word_plus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-full_memory_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-full_memory_copy]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-full_memory_copy_offset]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-full_memory_clean]\ntest_valid_mcopy_operations[fork_Cancun-blockchain_test_hive-out_of_bounds_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-state_test-zero_inputs]\ntest_valid_mcopy_operations[fork_Cancun-state_test-zero_length_out_of_bounds_destination]\ntest_valid_mcopy_operations[fork_Cancun-state_test-single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-full_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-single_byte_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-full_word_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-mid_word_single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-mid_word_single_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-mid_word_multi_word_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-two_words_forward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-two_words_backward_overwrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-two_words_backward_overwrite_single_byte_offset]\ntest_valid_mcopy_operations[fork_Cancun-state_test-single_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-state_test-single_word_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-state_test-single_word_minus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-state_test-single_word_plus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Cancun-state_test-full_memory_rewrite]\ntest_valid_mcopy_operations[fork_Cancun-state_test-full_memory_copy]\ntest_valid_mcopy_operations[fork_Cancun-state_test-full_memory_copy_offset]\ntest_valid_mcopy_operations[fork_Cancun-state_test-full_memory_clean]\ntest_valid_mcopy_operations[fork_Cancun-state_test-out_of_bounds_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-zero_inputs]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-zero_length_out_of_bounds_destination]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-full_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-single_byte_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-full_word_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-mid_word_single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-mid_word_single_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-mid_word_multi_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-two_words_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-two_words_backward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-two_words_backward_overwrite_single_byte_offset]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-single_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-single_word_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-single_word_minus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-single_word_plus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-full_memory_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-full_memory_copy]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-full_memory_copy_offset]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-full_memory_clean]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test-out_of_bounds_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-zero_inputs]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-zero_length_out_of_bounds_destination]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-full_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-single_byte_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-full_word_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-mid_word_single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-mid_word_single_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-mid_word_multi_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-two_words_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-two_words_backward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-two_words_backward_overwrite_single_byte_offset]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-single_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-single_word_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-single_word_minus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-single_word_plus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-full_memory_rewrite]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-full_memory_copy]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-full_memory_copy_offset]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-full_memory_clean]\ntest_valid_mcopy_operations[fork_Prague-blockchain_test_hive-out_of_bounds_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-state_test-zero_inputs]\ntest_valid_mcopy_operations[fork_Prague-state_test-zero_length_out_of_bounds_destination]\ntest_valid_mcopy_operations[fork_Prague-state_test-single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-full_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-single_byte_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-full_word_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-mid_word_single_byte_rewrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-mid_word_single_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-mid_word_multi_word_rewrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-two_words_forward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-two_words_backward_overwrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-two_words_backward_overwrite_single_byte_offset]\ntest_valid_mcopy_operations[fork_Prague-state_test-single_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-state_test-single_word_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-state_test-single_word_minus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-state_test-single_word_plus_one_byte_memory_extension]\ntest_valid_mcopy_operations[fork_Prague-state_test-full_memory_rewrite]\ntest_valid_mcopy_operations[fork_Prague-state_test-full_memory_copy]\ntest_valid_mcopy_operations[fork_Prague-state_test-full_memory_copy_offset]\ntest_valid_mcopy_operations[fork_Prague-state_test-full_memory_clean]\ntest_valid_mcopy_operations[fork_Prague-state_test-out_of_bounds_memory_extension]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_0-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_0-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_0-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_0-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_1-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_1-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_1-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test-empty_memory-length_1-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_0-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_0-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_0-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_0-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_1-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_1-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_1-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-blockchain_test_hive-empty_memory-length_1-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_0-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_0-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_0-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_0-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_1-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_1-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_1-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Cancun-state_test-empty_memory-length_1-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_0-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_0-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_0-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_0-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_1-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_1-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_1-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test-empty_memory-length_1-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_0-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_0-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_0-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_0-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_1-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_1-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_1-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-blockchain_test_hive-empty_memory-length_1-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_0-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_0-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_0-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_0-src_32-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_1-src_0-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_1-src_0-dest_32]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_1-src_32-dest_0]\ntest_mcopy_on_empty_memory[fork_Prague-state_test-empty_memory-length_1-src_32-dest_32]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip5656_mcopy/test_mcopy.py\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_contexts/","title":"Test Mcopy Contexts","text":"<p>Documentation for <code>tests/cancun/eip5656_mcopy/test_mcopy_contexts.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip5656_mcopy/test_mcopy_contexts.py\n</code></pre> Tests EIP-5656: MCOPY - Memory copying instruction <p>Test memory copy under different call contexts EIP-5656: MCOPY - Memory copying instruction</p>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_contexts/#tests.cancun.eip5656_mcopy.test_mcopy_contexts.test_no_memory_corruption_on_upper_call_stack_levels","title":"<code>test_no_memory_corruption_on_upper_call_stack_levels(state_test, pre, post, tx)</code>","text":"<p>Perform a subcall with any of the following opcodes, which uses MCOPY during its execution, and verify that the caller's memory is unaffected:   - <code>CALL</code>   - <code>CALLCODE</code>   - <code>DELEGATECALL</code>   - <code>STATICCALL</code>   - <code>CREATE</code>   - <code>CREATE2</code></p> Source code in <code>tests/cancun/eip5656_mcopy/test_mcopy_contexts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"opcode\",\n    [\n        Op.CALL,\n        Op.DELEGATECALL,\n        Op.STATICCALL,\n        Op.CALLCODE,\n        Op.CREATE,\n        Op.CREATE2,\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_no_memory_corruption_on_upper_call_stack_levels(\n    state_test: StateTestFiller,\n    pre: Mapping[str, Account],\n    post: Mapping[str, Account],\n    tx: Transaction,\n):\n    \"\"\"\n    Perform a subcall with any of the following opcodes, which uses MCOPY during its execution,\n    and verify that the caller's memory is unaffected:\n      - `CALL`\n      - `CALLCODE`\n      - `DELEGATECALL`\n      - `STATICCALL`\n      - `CREATE`\n      - `CREATE2`\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_contexts/index/test_cases/","title":"Test Mcopy Contexts - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip5656_mcopy/test_mcopy_contexts.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip5656_mcopy/test_mcopy_contexts.py</code>:</p> <pre><code>test_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test-opcode_CALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test-opcode_DELEGATECALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test-opcode_STATICCALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test-opcode_CALLCODE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test-opcode_CREATE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test-opcode_CREATE2]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test_hive-opcode_CALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test_hive-opcode_DELEGATECALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test_hive-opcode_STATICCALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test_hive-opcode_CALLCODE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test_hive-opcode_CREATE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-blockchain_test_hive-opcode_CREATE2]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-state_test-opcode_CALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-state_test-opcode_DELEGATECALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-state_test-opcode_STATICCALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-state_test-opcode_CALLCODE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-state_test-opcode_CREATE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Cancun-state_test-opcode_CREATE2]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test-opcode_CALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test-opcode_DELEGATECALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test-opcode_STATICCALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test-opcode_CALLCODE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test-opcode_CREATE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test-opcode_CREATE2]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test_hive-opcode_CALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test_hive-opcode_DELEGATECALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test_hive-opcode_STATICCALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test_hive-opcode_CALLCODE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test_hive-opcode_CREATE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-blockchain_test_hive-opcode_CREATE2]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-state_test-opcode_CALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-state_test-opcode_DELEGATECALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-state_test-opcode_STATICCALL]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-state_test-opcode_CALLCODE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-state_test-opcode_CREATE]\ntest_no_memory_corruption_on_upper_call_stack_levels[fork_Prague-state_test-opcode_CREATE2]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip5656_mcopy/test_mcopy_contexts.py\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion/","title":"Test Mcopy Memory Expansion","text":"<p>Documentation for <code>tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py\n</code></pre> Tests EIP-5656: MCOPY - Memory copying instruction <p>Test copy operations of EIP-5656: MCOPY - Memory copying instruction that produce a memory expansion, and potentially an out-of-gas error.</p>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion/#tests.cancun.eip5656_mcopy.test_mcopy_memory_expansion.test_mcopy_memory_expansion","title":"<code>test_mcopy_memory_expansion(state_test, env, pre, post, tx)</code>","text":"<p>Perform MCOPY operations that expand the memory, and verify the gas it costs to do so.</p> Source code in <code>tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py</code> <pre><code>@pytest.mark.parametrize(\n    \"dest,src,length\",\n    [\n        (0x00, 0x00, 0x01),\n        (0x100, 0x00, 0x01),\n        (0x1F, 0x00, 0x01),\n        (0x20, 0x00, 0x01),\n        (0x1000, 0x00, 0x01),\n        (0x1000, 0x00, 0x40),\n        (0x00, 0x00, 0x00),\n        (2**256 - 1, 0x00, 0x00),\n        (0x00, 2**256 - 1, 0x00),\n        (2**256 - 1, 2**256 - 1, 0x00),\n    ],\n    ids=[\n        \"single_byte_expansion\",\n        \"single_byte_expansion_2\",\n        \"single_byte_expansion_word_boundary\",\n        \"single_byte_expansion_word_boundary_2\",\n        \"multi_word_expansion\",\n        \"multi_word_expansion_2\",\n        \"zero_length_expansion\",\n        \"huge_dest_zero_length\",\n        \"huge_src_zero_length\",\n        \"huge_dest_huge_src_zero_length\",\n    ],\n)\n@pytest.mark.parametrize(\"successful\", [True, False])\n@pytest.mark.parametrize(\n    \"initial_memory\",\n    [\n        bytes(range(0x00, 0x100)),\n        bytes(),\n    ],\n    ids=[\n        \"from_existent_memory\",\n        \"from_empty_memory\",\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_mcopy_memory_expansion(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Mapping[str, Account],\n    post: Mapping[str, Account],\n    tx: Transaction,\n):\n    \"\"\"\n    Perform MCOPY operations that expand the memory, and verify the gas it costs to do so.\n    \"\"\"\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion/#tests.cancun.eip5656_mcopy.test_mcopy_memory_expansion.test_mcopy_huge_memory_expansion","title":"<code>test_mcopy_huge_memory_expansion(state_test, env, pre, post, tx)</code>","text":"<p>Perform MCOPY operations that expand the memory by huge amounts, and verify that it correctly runs out of gas.</p> Source code in <code>tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py</code> <pre><code>@pytest.mark.parametrize(\n    \"dest,src,length\",\n    [\n        (2**256 - 1, 0x00, 0x01),\n        (2**256 - 2, 0x00, 0x01),\n        (2**255 - 1, 0x00, 0x01),\n        (0x00, 2**256 - 1, 0x01),\n        (0x00, 2**256 - 2, 0x01),\n        (0x00, 2**255 - 1, 0x01),\n        (0x00, 0x00, 2**256 - 1),\n        (0x00, 0x00, 2**256 - 2),\n        (0x00, 0x00, 2**255 - 1),\n    ],\n    ids=[\n        \"max_dest_single_byte_expansion\",\n        \"max_dest_minus_one_single_byte_expansion\",\n        \"half_max_dest_single_byte_expansion\",\n        \"max_src_single_byte_expansion\",\n        \"max_src_minus_one_single_byte_expansion\",\n        \"half_max_src_single_byte_expansion\",\n        \"max_length_expansion\",\n        \"max_length_minus_one_expansion\",\n        \"half_max_length_expansion\",\n    ],\n)\n@pytest.mark.parametrize(\n    \"subcall_exact_cost\",\n    [2**128 - 1],\n    ids=[\"\"],\n)  # Limit subcall gas, otherwise it would be impossibly large\n@pytest.mark.parametrize(\"successful\", [False])\n@pytest.mark.parametrize(\n    \"initial_memory\",\n    [\n        bytes(range(0x00, 0x100)),\n        bytes(),\n    ],\n    ids=[\n        \"from_existent_memory\",\n        \"from_empty_memory\",\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_mcopy_huge_memory_expansion(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Mapping[str, Account],\n    post: Mapping[str, Account],\n    tx: Transaction,\n):\n    \"\"\"\n    Perform MCOPY operations that expand the memory by huge amounts, and verify that it correctly\n    runs out of gas.\n    \"\"\"\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion/index/test_cases/","title":"Test Mcopy Memory Expansion - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py</code>:</p> <pre><code>test_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_True-huge_dest_huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-single_byte_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-single_byte_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-single_byte_expansion_word_boundary_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-multi_word_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-multi_word_expansion_2]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-zero_length_expansion]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-huge_dest_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-huge_src_zero_length]\ntest_mcopy_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False-huge_dest_huge_src_zero_length]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_existent_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test-from_empty_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_existent_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-blockchain_test_hive-from_empty_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_existent_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Cancun-state_test-from_empty_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_existent_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test-from_empty_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_existent_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-blockchain_test_hive-from_empty_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_existent_memory-successful_False--half_max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--max_dest_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--half_max_dest_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--max_src_minus_one_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--half_max_src_single_byte_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--max_length_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--max_length_minus_one_expansion]\ntest_mcopy_huge_memory_expansion[fork_Prague-state_test-from_empty_memory-successful_False--half_max_length_expansion]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip5656_mcopy/test_mcopy_memory_expansion.py\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/","title":"EIP-6780 Selfdestruct","text":"<p>Documentation for <code>tests/cancun/eip6780_selfdestruct</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip6780_selfdestruct\n</code></pre> <p>Tests for EIP-6780: SELFDESTRUCT only in same transaction.</p>"},{"location":"tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision/","title":"Test Dynamic Create2 Selfdestruct Collision","text":"<p>Documentation for <code>tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py\n</code></pre> <p>Suicide scenario requested test #381</p>"},{"location":"tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision/#tests.cancun.eip6780_selfdestruct.test_dynamic_create2_selfdestruct_collision.test_dynamic_create2_selfdestruct_collision","title":"<code>test_dynamic_create2_selfdestruct_collision(env, fork, create2_dest_already_in_state, call_create2_contract_in_between, call_create2_contract_at_the_end, state_test)</code>","text":"<p>Dynamic Create2-&gt;Suicide-&gt;Create2 collision scenario:</p> <p>Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys, then on a different call, in the same tx, perform a self-destruct. Then:     a) on the same tx, attempt to recreate the contract   &lt;=== Covered in this test         1) and create2 contract already in the state         2) and create2 contract is not in the state     b) on a different tx, attempt to recreate the contract Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys, then in a different tx, perform a self-destruct. Then:     a) on the same tx, attempt to recreate the contract     b) on a different tx, attempt to recreate the contract Verify that the test case described in https://wiki.hyperledger.org/pages/viewpage.action?pageId=117440824 is covered</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py</code> <pre><code>@pytest.mark.valid_from(\"Paris\")\n@pytest.mark.parametrize(\n    \"create2_dest_already_in_state\",\n    (True, False),\n)\n@pytest.mark.parametrize(\n    \"call_create2_contract_in_between,call_create2_contract_at_the_end\",\n    [\n        (True, True),\n        (True, False),\n        (False, True),\n    ],\n)\ndef test_dynamic_create2_selfdestruct_collision(\n    env: Environment,\n    fork: Fork,\n    create2_dest_already_in_state: bool,\n    call_create2_contract_in_between: bool,\n    call_create2_contract_at_the_end: bool,\n    state_test: StateTestFiller,\n):\n    \"\"\"Dynamic Create2-&gt;Suicide-&gt;Create2 collision scenario:\n\n    Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys,\n    then on a different call, in the same tx, perform a self-destruct.\n    Then:\n        a) on the same tx, attempt to recreate the contract   &lt;=== Covered in this test\n            1) and create2 contract already in the state\n            2) and create2 contract is not in the state\n        b) on a different tx, attempt to recreate the contract\n    Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys,\n    then in a different tx, perform a self-destruct.\n    Then:\n        a) on the same tx, attempt to recreate the contract\n        b) on a different tx, attempt to recreate the contract\n    Verify that the test case described\n    in https://wiki.hyperledger.org/pages/viewpage.action?pageId=117440824 is covered\n    \"\"\"\n    assert call_create2_contract_in_between or call_create2_contract_at_the_end, \"invalid test\"\n\n    # Storage locations\n    create2_constructor_worked = 1\n    first_create2_result = 2\n    second_create2_result = 3\n    code_worked = 4\n\n    # Pre-Existing Addresses\n    address_zero = Address(0x00)\n    address_to = Address(0x0600)\n    address_code = Address(0x0601)\n    address_create2_storage = Address(0x0512)\n    sendall_destination = Address(0x03E8)\n\n    # CREATE2 Initcode\n    create2_salt = 1\n    deploy_code = Op.SELFDESTRUCT(sendall_destination)\n    initcode = Initcode(\n        deploy_code=deploy_code,\n        initcode_prefix=Op.SSTORE(create2_constructor_worked, 1)\n        + Op.CALL(Op.GAS(), address_create2_storage, 0, 0, 0, 0, 0),\n    )\n\n    # Created addresses\n    create2_address = compute_create2_address(address_code, create2_salt, initcode)\n    call_address_in_between = create2_address if call_create2_contract_in_between else address_zero\n    call_address_in_the_end = create2_address if call_create2_contract_at_the_end else address_zero\n\n    # Values\n    pre_existing_create2_balance = 1\n    first_create2_value = 10\n    first_call_value = 100\n    second_create2_value = 1000\n    second_call_value = 10000\n\n    pre = {\n        address_to: Account(\n            balance=100000000,\n            nonce=0,\n            code=Op.JUMPDEST()\n            # Make a subcall that do CREATE2 and returns its the result\n            + Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.CALL(100000, address_code, first_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n            + Op.SSTORE(\n                first_create2_result,\n                Op.MLOAD(0),\n            )\n            # In case the create2 didn't work, flush account balance\n            + Op.CALL(100000, address_code, 0, 0, 0, 0, 0)\n            # Call to the created account to trigger selfdestruct\n            + Op.CALL(100000, call_address_in_between, first_call_value, 0, 0, 0, 0)\n            # Make a subcall that do CREATE2 collision and returns its address as the result\n            + Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.CALL(100000, address_code, second_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n            + Op.SSTORE(\n                second_create2_result,\n                Op.MLOAD(0),\n            )\n            # Call to the created account to trigger selfdestruct\n            + Op.CALL(100000, call_address_in_the_end, second_call_value, 0, 0, 0, 0)\n            + Op.SSTORE(code_worked, 1),\n            storage={first_create2_result: 0xFF, second_create2_result: 0xFF},\n        ),\n        address_code: Account(\n            balance=0,\n            nonce=0,\n            code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.MSTORE(\n                0,\n                Op.CREATE2(Op.SELFBALANCE(), 0, Op.CALLDATASIZE(), create2_salt),\n            )\n            + Op.RETURN(0, 32),\n            storage={},\n        ),\n        address_create2_storage: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=Op.SSTORE(1, 1),\n            storage={},\n        ),\n        TestAddress: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=\"0x\",\n            storage={},\n        ),\n    }\n\n    if create2_dest_already_in_state:\n        # Create2 address already in the state, e.g. deployed in a previous block\n        pre[create2_address] = Account(\n            balance=pre_existing_create2_balance,\n            nonce=1,\n            code=deploy_code,\n            storage={},\n        )\n\n    post: Dict[Address, Union[Account, object]] = {}\n\n    # Create2 address only exists if it was pre-existing and after cancun\n    post[create2_address] = (\n        Account(balance=0, nonce=1, code=deploy_code, storage={create2_constructor_worked: 0x00})\n        if create2_dest_already_in_state and fork &gt;= Cancun\n        else Account.NONEXISTENT\n    )\n\n    # Create2 initcode is only executed if the contract did not already exist\n    post[address_create2_storage] = Account(\n        storage={create2_constructor_worked: int(not create2_dest_already_in_state)}\n    )\n\n    # Entry code that makes the calls to the create2 contract creator\n    post[address_to] = Account(\n        storage={\n            code_worked: 0x01,\n            # First create2 only works if the contract was not preexisting\n            first_create2_result: 0x00 if create2_dest_already_in_state else create2_address,\n            # Second create2 must never work\n            second_create2_result: 0x00,\n        }\n    )\n\n    # Calculate the destination account expected balance for the selfdestruct/sendall calls\n    sendall_destination_balance = (\n        pre_existing_create2_balance if create2_dest_already_in_state else first_create2_value\n    )\n\n    if call_create2_contract_in_between:\n        sendall_destination_balance += first_call_value\n\n    if call_create2_contract_at_the_end:\n        sendall_destination_balance += second_call_value\n\n    post[sendall_destination] = Account(balance=sendall_destination_balance)\n\n    tx = Transaction(\n        ty=0x0,\n        chain_id=0x0,\n        nonce=0,\n        to=address_to,\n        gas_price=10,\n        protected=False,\n        data=initcode.bytecode if initcode.bytecode is not None else bytes(),\n        gas_limit=5000000,\n        value=0,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision/#tests.cancun.eip6780_selfdestruct.test_dynamic_create2_selfdestruct_collision.test_dynamic_create2_selfdestruct_collision_two_different_transactions","title":"<code>test_dynamic_create2_selfdestruct_collision_two_different_transactions(env, fork, create2_dest_already_in_state, call_create2_contract_at_the_end, blockchain_test)</code>","text":"<p>Dynamic Create2-&gt;Suicide-&gt;Create2 collision scenario:</p> <p>Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys, then on a different call, in the same tx, perform a self-destruct. Then:     a) on the same tx, attempt to recreate the contract         1) and create2 contract already in the state         2) and create2 contract is not in the state     b) on a different tx, attempt to recreate the contract &lt;=== Covered in this test Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys, then in a different tx, perform a self-destruct. Then:     a) on the same tx, attempt to recreate the contract     b) on a different tx, attempt to recreate the contract Verify that the test case described in https://wiki.hyperledger.org/pages/viewpage.action?pageId=117440824 is covered</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py</code> <pre><code>@pytest.mark.valid_from(\"Paris\")\n@pytest.mark.parametrize(\n    \"create2_dest_already_in_state\",\n    (True, False),\n)\n@pytest.mark.parametrize(\n    \"call_create2_contract_at_the_end\",\n    [\n        (True, False),\n    ],\n)\ndef test_dynamic_create2_selfdestruct_collision_two_different_transactions(\n    env: Environment,\n    fork: Fork,\n    create2_dest_already_in_state: bool,\n    call_create2_contract_at_the_end: bool,\n    blockchain_test: BlockchainTestFiller,\n):\n    \"\"\"Dynamic Create2-&gt;Suicide-&gt;Create2 collision scenario:\n\n    Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys,\n    then on a different call, in the same tx, perform a self-destruct.\n    Then:\n        a) on the same tx, attempt to recreate the contract\n            1) and create2 contract already in the state\n            2) and create2 contract is not in the state\n        b) on a different tx, attempt to recreate the contract &lt;=== Covered in this test\n    Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys,\n    then in a different tx, perform a self-destruct.\n    Then:\n        a) on the same tx, attempt to recreate the contract\n        b) on a different tx, attempt to recreate the contract\n    Verify that the test case described\n    in https://wiki.hyperledger.org/pages/viewpage.action?pageId=117440824 is covered\n    \"\"\"\n    # assert call_create2_contract_at_the_end, \"invalid test\"\n\n    # Storage locations\n    create2_constructor_worked = 1\n    first_create2_result = 2\n    second_create2_result = 3\n    code_worked = 4\n\n    # Pre-Existing Addresses\n    address_zero = Address(0x00)\n    address_to = Address(0x0600)\n    address_to_second = Address(0x0700)\n    address_code = Address(0x0601)\n    address_create2_storage = Address(0x0512)\n    sendall_destination = Address(0x03E8)\n\n    # CREATE2 Initcode\n    create2_salt = 1\n    deploy_code = Op.SELFDESTRUCT(sendall_destination)\n    initcode = Initcode(\n        deploy_code=deploy_code,\n        initcode_prefix=Op.SSTORE(create2_constructor_worked, 1)\n        + Op.CALL(Op.GAS(), address_create2_storage, 0, 0, 0, 0, 0),\n    )\n\n    # Created addresses\n    create2_address = compute_create2_address(address_code, create2_salt, initcode)\n    call_address_in_the_end = create2_address if call_create2_contract_at_the_end else address_zero\n\n    # Values\n    pre_existing_create2_balance = 1\n    first_create2_value = 10\n    first_call_value = 100\n    second_create2_value = 1000\n    second_call_value = 10000\n\n    pre = {\n        address_to: Account(\n            balance=100000000,\n            nonce=0,\n            code=Op.JUMPDEST()\n            # Make a subcall that do CREATE2 and returns its the result\n            + Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.CALL(100000, address_code, first_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n            + Op.SSTORE(\n                first_create2_result,\n                Op.MLOAD(0),\n            )\n            # In case the create2 didn't work, flush account balance\n            + Op.CALL(100000, address_code, 0, 0, 0, 0, 0)\n            # Call to the created account to trigger selfdestruct\n            + Op.CALL(100000, create2_address, first_call_value, 0, 0, 0, 0)\n            + Op.SSTORE(code_worked, 1),\n            storage={first_create2_result: 0xFF},\n        ),\n        address_to_second: Account(\n            balance=100000000,\n            nonce=0,\n            code=Op.JUMPDEST()\n            # Make a subcall that do CREATE2 collision and returns its address as the result\n            + Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.CALL(100000, address_code, second_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n            + Op.SSTORE(\n                second_create2_result,\n                Op.MLOAD(0),\n            )\n            # Call to the created account to trigger selfdestruct\n            + Op.CALL(200000, call_address_in_the_end, second_call_value, 0, 0, 0, 0)\n            + Op.SSTORE(code_worked, 1),\n            storage={second_create2_result: 0xFF},\n        ),\n        address_code: Account(\n            balance=0,\n            nonce=0,\n            code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.MSTORE(\n                0,\n                Op.CREATE2(Op.SELFBALANCE(), 0, Op.CALLDATASIZE(), create2_salt),\n            )\n            + Op.RETURN(0, 32),\n            storage={},\n        ),\n        address_create2_storage: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=Op.SSTORE(1, 1),\n            storage={},\n        ),\n        TestAddress: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=\"0x\",\n            storage={},\n        ),\n    }\n\n    if create2_dest_already_in_state:\n        # Create2 address already in the state, e.g. deployed in a previous block\n        pre[create2_address] = Account(\n            balance=pre_existing_create2_balance,\n            nonce=1,\n            code=deploy_code,\n            storage={},\n        )\n\n    post: Dict[Address, Union[Account, object]] = {}\n\n    # Create2 address only exists if it was pre-existing and after cancun\n    post[create2_address] = (\n        Account(balance=0, nonce=1, code=deploy_code, storage={create2_constructor_worked: 0x00})\n        if create2_dest_already_in_state and fork &gt;= Cancun\n        else Account.NONEXISTENT\n    )\n\n    # after Cancun Create2 initcode is only executed if the contract did not already exist\n    # and before it will always be executed as the first tx deletes the account\n    post[address_create2_storage] = Account(\n        storage={\n            create2_constructor_worked: int(fork &lt; Cancun or not create2_dest_already_in_state)\n        }\n    )\n\n    # Entry code that makes the calls to the create2 contract creator\n    post[address_to] = Account(\n        storage={\n            code_worked: 0x01,\n            # First create2 only works if the contract was not preexisting\n            first_create2_result: 0x00 if create2_dest_already_in_state else create2_address,\n        }\n    )\n    post[address_to_second] = Account(\n        storage={\n            code_worked: 0x01,\n            # Second create2 will not collide before Cancun as the first tx calls selfdestruct\n            # After cancun it will collide only if create2_dest_already_in_state otherwise the\n            # first tx creates and deletes it\n            second_create2_result: (\n                (0x00 if create2_dest_already_in_state else create2_address)\n                if fork &gt;= Cancun\n                else create2_address\n            ),\n        }\n    )\n\n    # Calculate the destination account expected balance for the selfdestruct/sendall calls\n    sendall_destination_balance = 0\n\n    if create2_dest_already_in_state:\n        sendall_destination_balance += pre_existing_create2_balance\n        if fork &gt;= Cancun:\n            # first create2 fails, but first calls ok. the account is not removed on cancun\n            # therefore with the second create2 it is not successful\n            sendall_destination_balance += first_call_value\n        else:\n            # first create2 fails, first calls totally removes the account\n            # in the second transaction second create2 is successful\n            sendall_destination_balance += first_call_value + second_create2_value\n    else:\n        # if no account in the state, first create2 successful, first call successful and removes\n        # because it is removed in the next transaction second create2 successful\n        sendall_destination_balance = first_create2_value + first_call_value + second_create2_value\n\n    if call_create2_contract_at_the_end:\n        sendall_destination_balance += second_call_value\n\n    post[sendall_destination] = Account(balance=sendall_destination_balance)\n\n    nonce = count()\n\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post=post,\n        blocks=[\n            Block(\n                txs=[\n                    Transaction(\n                        ty=0x0,\n                        chain_id=0x0,\n                        nonce=next(nonce),\n                        to=address_to,\n                        gas_price=10,\n                        protected=False,\n                        data=initcode.bytecode if initcode.bytecode is not None else bytes(),\n                        gas_limit=5000000,\n                        value=0,\n                    ),\n                    Transaction(\n                        ty=0x0,\n                        chain_id=0x0,\n                        nonce=next(nonce),\n                        to=address_to_second,\n                        gas_price=10,\n                        protected=False,\n                        data=initcode.bytecode if initcode.bytecode is not None else bytes(),\n                        gas_limit=5000000,\n                        value=0,\n                    ),\n                ]\n            )\n        ],\n    )\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision/#tests.cancun.eip6780_selfdestruct.test_dynamic_create2_selfdestruct_collision.test_dynamic_create2_selfdestruct_collision_multi_tx","title":"<code>test_dynamic_create2_selfdestruct_collision_multi_tx(fork, selfdestruct_on_first_tx, recreate_on_first_tx, blockchain_test)</code>","text":"<p>Dynamic Create2-&gt;Suicide-&gt;Create2 collision scenario over multiple transactions:</p> <p>Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys, then on a different call, in the same or different tx but same block, perform a self-destruct. Then:     a) on the same tx, attempt to recreate the contract     b) on a different tx, attempt to recreate the contract Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys, then in a different tx, perform a self-destruct. Then:     a) on the same tx, attempt to recreate the contract       &lt;=== Covered in this test     b) on a different tx, attempt to recreate the contract    &lt;=== Covered in this test Verify that the test case described in https://wiki.hyperledger.org/pages/viewpage.action?pageId=117440824 is covered</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py</code> <pre><code>@pytest.mark.valid_from(\"Paris\")\n@pytest.mark.parametrize(\n    \"selfdestruct_on_first_tx,recreate_on_first_tx\",\n    [\n        (False, False),\n        (True, False),\n        (True, True),\n    ],\n)\ndef test_dynamic_create2_selfdestruct_collision_multi_tx(\n    fork: Fork,\n    selfdestruct_on_first_tx: bool,\n    recreate_on_first_tx: bool,\n    blockchain_test: BlockchainTestFiller,\n):\n    \"\"\"Dynamic Create2-&gt;Suicide-&gt;Create2 collision scenario over multiple transactions:\n\n    Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys,\n    then on a different call, in the same or different tx but same block, perform a self-destruct.\n    Then:\n        a) on the same tx, attempt to recreate the contract\n        b) on a different tx, attempt to recreate the contract\n    Perform a CREATE2, make sure that the initcode sets at least a couple of storage keys,\n    then in a different tx, perform a self-destruct.\n    Then:\n        a) on the same tx, attempt to recreate the contract       &lt;=== Covered in this test\n        b) on a different tx, attempt to recreate the contract    &lt;=== Covered in this test\n    Verify that the test case described\n    in https://wiki.hyperledger.org/pages/viewpage.action?pageId=117440824 is covered\n    \"\"\"\n    if recreate_on_first_tx:\n        assert selfdestruct_on_first_tx, \"invalid test\"\n\n    # Storage locations\n    create2_constructor_worked = 1\n    first_create2_result = 2\n    second_create2_result = 3\n    part_1_worked = 4\n    part_2_worked = 5\n\n    # Pre-Existing Addresses\n    address_to = Address(0x0600)\n    address_code = Address(0x0601)\n    address_create2_storage = Address(0x0512)\n    sendall_destination = Address(0x03E8)\n\n    # CREATE2 Initcode\n    create2_salt = 1\n    deploy_code = Op.SELFDESTRUCT(sendall_destination)\n    initcode = Initcode(\n        deploy_code=deploy_code,\n        initcode_prefix=Op.SSTORE(create2_constructor_worked, 1)\n        + Op.CALL(Op.GAS(), address_create2_storage, 0, 0, 0, 0, 0),\n    )\n\n    # Created addresses\n    create2_address = compute_create2_address(address_code, create2_salt, initcode)\n\n    # Values\n    first_create2_value = 3\n    first_call_value = 5\n    second_create2_value = 7\n    second_call_value = 11\n\n    # Code is divided in two transactions part of the same block\n    first_tx_code = bytes()\n    second_tx_code = bytes()\n\n    first_tx_code += (\n        Op.JUMPDEST()\n        # Make a subcall that do CREATE2 and returns its the result\n        + Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n        + Op.CALL(100000, address_code, first_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n        + Op.SSTORE(\n            first_create2_result,\n            Op.MLOAD(0),\n        )\n    )\n\n    if selfdestruct_on_first_tx:\n        first_tx_code += (\n            # Call to the created account to trigger selfdestruct\n            Op.CALL(100000, create2_address, first_call_value, 0, 0, 0, 0)\n        )\n    else:\n        second_tx_code += (\n            # Call to the created account to trigger selfdestruct\n            Op.CALL(100000, create2_address, first_call_value, 0, 0, 0, 0)\n        )\n\n    if recreate_on_first_tx:\n        first_tx_code += (\n            # Make a subcall that do CREATE2 collision and returns its address as the result\n            Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.CALL(100000, address_code, second_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n            + Op.SSTORE(\n                second_create2_result,\n                Op.MLOAD(0),\n            )\n        )\n\n    else:\n        second_tx_code += (\n            # Make a subcall that do CREATE2 collision and returns its address as the result\n            Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.CALL(100000, address_code, second_create2_value, 0, Op.CALLDATASIZE(), 0, 32)\n            + Op.SSTORE(\n                second_create2_result,\n                Op.MLOAD(0),\n            )\n        )\n\n    # Second tx code always calls the create2 contract at the end\n    second_tx_code += Op.CALL(100000, create2_address, second_call_value, 0, 0, 0, 0)\n\n    first_tx_code += Op.SSTORE(part_1_worked, 1)\n    second_tx_code += Op.SSTORE(part_2_worked, 1)\n\n    pre = {\n        address_to: Account(\n            balance=100000000,\n            nonce=0,\n            code=Conditional(\n                # Depending on the tx, execute the first or second tx code\n                condition=Op.EQ(Op.SLOAD(part_1_worked), 0),\n                if_true=first_tx_code,\n                if_false=second_tx_code,\n            ),\n            storage={first_create2_result: 0xFF, second_create2_result: 0xFF},\n        ),\n        address_code: Account(\n            balance=0,\n            nonce=0,\n            code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE())\n            + Op.MSTORE(\n                0,\n                Op.CREATE2(Op.SELFBALANCE(), 0, Op.CALLDATASIZE(), create2_salt),\n            )\n            + Op.RETURN(0, 32),\n            storage={},\n        ),\n        address_create2_storage: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=Op.SSTORE(1, 1),\n            storage={},\n        ),\n        TestAddress: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=\"0x\",\n            storage={},\n        ),\n    }\n\n    post: Dict[Address, Union[Account, object]] = {}\n\n    # Create2 address only exists if it was pre-existing and after cancun\n    account_will_exist_with_code = not selfdestruct_on_first_tx and fork &gt;= Cancun\n    # If the contract is self-destructed and we also attempt to recreate it on the first tx,\n    # the second call on the second tx will only place balance in the account\n    account_will_exist_with_balance = selfdestruct_on_first_tx and recreate_on_first_tx\n\n    post[create2_address] = (\n        Account(balance=0, nonce=1, code=deploy_code, storage={create2_constructor_worked: 0x01})\n        if account_will_exist_with_code\n        else (\n            Account(balance=second_call_value, nonce=0)\n            if account_will_exist_with_balance\n            else Account.NONEXISTENT\n        )\n    )\n\n    # Create2 initcode saves storage unconditionally\n    post[address_create2_storage] = Account(storage={create2_constructor_worked: 0x01})\n\n    # Entry code that makes the calls to the create2 contract creator\n    post[address_to] = Account(\n        storage={\n            part_1_worked: 0x01,\n            part_2_worked: 0x01,\n            # First create2 always works\n            first_create2_result: create2_address,\n            # Second create2 only works if we successfully self-destructed on the first tx\n            second_create2_result: (\n                create2_address if selfdestruct_on_first_tx and not recreate_on_first_tx else 0x00\n            ),\n        }\n    )\n\n    # Calculate the destination account expected balance for the selfdestruct/sendall calls\n    sendall_destination_balance = first_create2_value + first_call_value\n\n    if not account_will_exist_with_balance:\n        sendall_destination_balance += second_call_value\n\n    if selfdestruct_on_first_tx and not recreate_on_first_tx:\n        sendall_destination_balance += second_create2_value\n\n    post[sendall_destination] = Account(balance=sendall_destination_balance)\n\n    nonce = count()\n\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post=post,\n        blocks=[\n            Block(\n                txs=[\n                    Transaction(\n                        ty=0x0,\n                        chain_id=0x0,\n                        nonce=next(nonce),\n                        to=address_to,\n                        gas_price=10,\n                        protected=False,\n                        data=initcode.bytecode if initcode.bytecode is not None else bytes(),\n                        gas_limit=5000000,\n                        value=0,\n                    ),\n                    Transaction(\n                        ty=0x0,\n                        chain_id=0x0,\n                        nonce=next(nonce),\n                        to=address_to,\n                        gas_price=10,\n                        protected=False,\n                        data=initcode.bytecode if initcode.bytecode is not None else bytes(),\n                        gas_limit=5000000,\n                        value=0,\n                    ),\n                ]\n            )\n        ],\n    )\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision/index/test_cases/","title":"Test Dynamic Create2 Selfdestruct Collision - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py</code>:</p> <pre><code>test_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Paris-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Shanghai-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Cancun-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test_hive-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-blockchain_test_hive-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-state_test-call_create2_contract_in_between_True-call_create2_contract_at_the_end_False-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision[fork_Prague-state_test-call_create2_contract_in_between_False-call_create2_contract_at_the_end_True-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Paris-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Paris-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Paris-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Paris-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Shanghai-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Shanghai-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Shanghai-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Shanghai-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Cancun-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Cancun-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Cancun-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Cancun-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Prague-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Prague-blockchain_test-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Prague-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_True]\ntest_dynamic_create2_selfdestruct_collision_two_different_transactions[fork_Prague-blockchain_test_hive-call_create2_contract_at_the_end_(True, False)-create2_dest_already_in_state_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Paris-blockchain_test-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Paris-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Paris-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Paris-blockchain_test_hive-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Paris-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Paris-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Shanghai-blockchain_test-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Shanghai-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Shanghai-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Cancun-blockchain_test-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Cancun-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Cancun-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Cancun-blockchain_test_hive-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Cancun-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Cancun-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Prague-blockchain_test-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Prague-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Prague-blockchain_test-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Prague-blockchain_test_hive-selfdestruct_on_first_tx_False-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Prague-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_False]\ntest_dynamic_create2_selfdestruct_collision_multi_tx[fork_Prague-blockchain_test_hive-selfdestruct_on_first_tx_True-recreate_on_first_tx_True]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip6780_selfdestruct/test_dynamic_create2_selfdestruct_collision.py\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert/","title":"Test Reentrancy Selfdestruct Revert","text":"<p>Documentation for <code>tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert.py\n</code></pre> <p>Suicide scenario requested test tests#1325</p>"},{"location":"tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert/#tests.cancun.eip6780_selfdestruct.test_reentrancy_selfdestruct_revert.test_reentrancy_selfdestruct_revert","title":"<code>test_reentrancy_selfdestruct_revert(env, fork, first_suicide, second_suicide, state_test)</code>","text":"<p>Suicide reentrancy scenario:</p> <p>Call|Callcode|Delegatecall the contract S. S self destructs. Call the revert proxy contract R. R Calls|Callcode|Delegatecall S. S self destructs (for the second time). R reverts (including the effects of the second selfdestruct). It is expected the S is self destructed after the transaction.</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert.py</code> <pre><code>@pytest.mark.valid_from(\"Paris\")\n@pytest.mark.parametrize(\"first_suicide\", [Op.CALL, Op.CALLCODE, Op.DELEGATECALL])\n@pytest.mark.parametrize(\"second_suicide\", [Op.CALL, Op.CALLCODE, Op.DELEGATECALL])\ndef test_reentrancy_selfdestruct_revert(\n    env: Environment,\n    fork: Fork,\n    first_suicide: Op,\n    second_suicide: Op,\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Suicide reentrancy scenario:\n\n    Call|Callcode|Delegatecall the contract S.\n    S self destructs.\n    Call the revert proxy contract R.\n    R Calls|Callcode|Delegatecall S.\n    S self destructs (for the second time).\n    R reverts (including the effects of the second selfdestruct).\n    It is expected the S is self destructed after the transaction.\n    \"\"\"\n    address_to = TestAddress2\n    address_s = Address(0x1000000000000000000000000000000000000001)\n    address_r = Address(0x1000000000000000000000000000000000000002)\n    suicide_d = Address(0x03E8)\n\n    def construct_call_s(call_type: Op, money: int):\n        if call_type in [Op.CALLCODE, Op.CALL]:\n            return call_type(Op.GAS, address_s, money, 0, 0, 0, 0)\n        else:\n            return call_type(Op.GAS, address_s, money, 0, 0, 0)\n\n    pre = {\n        address_to: Account(\n            balance=1000000000000000000,\n            nonce=0,\n            code=Op.SSTORE(1, construct_call_s(first_suicide, 0))\n            + Op.SSTORE(2, Op.CALL(Op.GAS, address_r, 0, 0, 0, 0, 0))\n            + Op.RETURNDATACOPY(0, 0, Op.RETURNDATASIZE())\n            + Op.SSTORE(3, Op.MLOAD(0)),\n            storage={0x01: 0x0100, 0x02: 0x0100, 0x03: 0x0100},\n        ),\n        address_s: Account(\n            balance=3000000000000000000,\n            nonce=0,\n            code=Op.SELFDESTRUCT(1000),\n            storage={},\n        ),\n        address_r: Account(\n            balance=5000000000000000000,\n            nonce=0,\n            # Send money when calling it suicide second time to make sure the funds not transferred\n            code=Op.MSTORE(0, Op.ADD(15, construct_call_s(second_suicide, 100)))\n            + Op.REVERT(0, 32),\n            storage={},\n        ),\n        TestAddress: Account(\n            balance=7000000000000000000,\n            nonce=0,\n            code=\"0x\",\n            storage={},\n        ),\n    }\n\n    post = {\n        # Second caller unchanged as call gets reverted\n        address_r: Account(balance=5000000000000000000, storage={}),\n    }\n\n    if first_suicide in [Op.CALLCODE, Op.DELEGATECALL]:\n        if fork &gt;= Cancun:\n            # On Cancun even callcode/delegatecall does not remove the account, so the value remain\n            post[address_to] = Account(\n                storage={\n                    0x01: 0x01,  # First call to contract S-&gt;suicide success\n                    0x02: 0x00,  # Second call to contract S-&gt;suicide reverted\n                    0x03: 16,  # Reverted value to check that revert really worked\n                },\n            )\n        else:\n            # Callcode executed first suicide from sender. sender is deleted\n            post[address_to] = Account.NONEXISTENT  # type: ignore\n\n        # Original suicide account remains in state\n        post[address_s] = Account(balance=3000000000000000000, storage={})\n        # Suicide destination\n        post[suicide_d] = Account(\n            balance=1000000000000000000,\n        )\n\n    # On Cancun suicide no longer destroys the account from state, just cleans the balance\n    if first_suicide in [Op.CALL]:\n        post[address_to] = Account(\n            storage={\n                0x01: 0x01,  # First call to contract S-&gt;suicide success\n                0x02: 0x00,  # Second call to contract S-&gt;suicide reverted\n                0x03: 16,  # Reverted value to check that revert really worked\n            },\n        )\n        if fork &gt;= Cancun:\n            # On Cancun suicide does not remove the account, just sends the balance\n            post[address_s] = Account(balance=0, code=\"0x6103e8ff\", storage={})\n        else:\n            post[address_s] = Account.NONEXISTENT  # type: ignore\n\n        # Suicide destination\n        post[suicide_d] = Account(\n            balance=3000000000000000000,\n        )\n\n    tx = Transaction(\n        ty=0x0,\n        chain_id=0x0,\n        nonce=0,\n        to=address_to,\n        gas_price=10,\n        protected=False,\n        data=\"\",\n        gas_limit=500000,\n        value=0,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert/index/test_cases/","title":"Test Reentrancy Selfdestruct Revert - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert.py</code>:</p> <pre><code>test_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Paris-state_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Shanghai-state_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Cancun-state_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-blockchain_test_hive-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_CALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_CALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_CALL-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_CALLCODE-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_CALLCODE-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_CALLCODE-first_suicide_DELEGATECALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_DELEGATECALL-first_suicide_CALL]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_DELEGATECALL-first_suicide_CALLCODE]\ntest_reentrancy_selfdestruct_revert[fork_Prague-state_test-second_suicide_DELEGATECALL-first_suicide_DELEGATECALL]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip6780_selfdestruct/test_reentrancy_selfdestruct_revert.py\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/","title":"Test Selfdestruct","text":"<p>Documentation for <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip6780_selfdestruct/test_selfdestruct.py\n</code></pre> Tests EIP-6780: SELFDESTRUCT only in same transaction <p>Tests for EIP-6780: SELFDESTRUCT only in same transaction.</p>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_create_selfdestruct_same_tx","title":"<code>test_create_selfdestruct_same_tx(state_test, env, pre, entry_code_address, selfdestruct_code, selfdestruct_contract_initcode, selfdestruct_contract_address, sendall_recipient_addresses, initcode_copy_from_address, create_opcode, call_times, selfdestruct_contract_initial_balance)</code>","text":"<p>Use CREATE or CREATE2 to create a self-destructing contract, and call it in the same transaction.</p> <p>Behavior should be the same before and after EIP-6780.</p> Test using <ul> <li>Different send-all recipient addresses: single, multiple, including self</li> <li>Different initial balances for the self-destructing contract</li> <li>Different opcodes: CREATE, CREATE2</li> </ul> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\"create_opcode\", [Op.CREATE, Op.CREATE2])\n@pytest.mark.parametrize(\n    \"call_times,sendall_recipient_addresses\",\n    [\n        pytest.param(\n            1,\n            [Address(0x1000)],\n            id=\"single_call\",\n        ),\n        pytest.param(\n            1,\n            [SELF_ADDRESS],\n            id=\"single_call_self\",\n        ),\n        pytest.param(\n            2,\n            [Address(0x1000)],\n            id=\"multiple_calls_single_sendall_recipient\",\n        ),\n        pytest.param(\n            2,\n            [SELF_ADDRESS],\n            id=\"multiple_calls_single_self_recipient\",\n        ),\n        pytest.param(\n            3,\n            [Address(0x1000), Address(0x2000), Address(0x3000)],\n            id=\"multiple_calls_multiple_sendall_recipients\",\n        ),\n        pytest.param(\n            3,\n            [SELF_ADDRESS, Address(0x2000), Address(0x3000)],\n            id=\"multiple_calls_multiple_sendall_recipients_including_self\",\n        ),\n        pytest.param(\n            3,\n            [Address(0x1000), Address(0x2000), SELF_ADDRESS],\n            id=\"multiple_calls_multiple_sendall_recipients_including_self_last\",\n        ),\n        pytest.param(\n            6,\n            [SELF_ADDRESS, Address(0x2000), Address(0x3000)],\n            id=\"multiple_calls_multiple_repeating_sendall_recipients_including_self\",\n        ),\n        pytest.param(\n            6,\n            [Address(0x1000), Address(0x2000), SELF_ADDRESS],\n            id=\"multiple_calls_multiple_repeating_sendall_recipients_including_self_last\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 100_000])\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_create_selfdestruct_same_tx(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_code: SupportsBytes,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    create_opcode: Op,\n    call_times: int,\n    selfdestruct_contract_initial_balance: int,\n):\n    \"\"\"\n    Use CREATE or CREATE2 to create a self-destructing contract, and call it in the same\n    transaction.\n\n    Behavior should be the same before and after EIP-6780.\n\n    Test using:\n        - Different send-all recipient addresses: single, multiple, including self\n        - Different initial balances for the self-destructing contract\n        - Different opcodes: CREATE, CREATE2\n    \"\"\"\n    # Our entry point is an initcode that in turn creates a self-destructing contract\n    entry_code_storage = Storage()\n\n    # Create a dict to record the expected final balances\n    sendall_final_balances = dict(\n        zip(sendall_recipient_addresses, [0] * len(sendall_recipient_addresses))\n    )\n    selfdestruct_contract_current_balance = selfdestruct_contract_initial_balance\n\n    # Bytecode used to create the contract, can be CREATE or CREATE2\n    create_args = [\n        0,  # Value\n        0,  # Offset\n        len(bytes(selfdestruct_contract_initcode)),  # Length\n    ]\n    if create_opcode == Op.CREATE2:\n        # CREATE2 requires a salt argument\n        create_args.append(0)\n    create_bytecode = create_opcode(*create_args)\n\n    # Entry code that will be executed, creates the contract and then calls it in the same tx\n    entry_code = (\n        # Initcode is already deployed at `initcode_copy_from_address`, so just copy it\n        Op.EXTCODECOPY(\n            initcode_copy_from_address,\n            0,\n            0,\n            len(bytes(selfdestruct_contract_initcode)),\n        )\n        # And we store the created address for verification purposes\n        + Op.SSTORE(\n            entry_code_storage.store_next(selfdestruct_contract_address),\n            create_bytecode,\n        )\n    )\n\n    # Store the EXTCODE* properties of the created address\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Call the self-destructing contract multiple times as required, increasing the wei sent each\n    # time\n    for i, sendall_recipient in zip(range(call_times), cycle(sendall_recipient_addresses)):\n        entry_code += Op.MSTORE(0, sendall_recipient)\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                selfdestruct_contract_address,  # Address\n                i,  # Value\n                0,\n                32,\n                0,\n                0,\n            ),\n        )\n        selfdestruct_contract_current_balance += i\n\n        # Balance is always sent to other contracts\n        if sendall_recipient != selfdestruct_contract_address:\n            sendall_final_balances[sendall_recipient] += selfdestruct_contract_current_balance\n\n        # Self-destructing contract must always have zero balance after the call because the\n        # self-destruct always happens in the same transaction in this test\n        selfdestruct_contract_current_balance = 0\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(0),\n            Op.BALANCE(selfdestruct_contract_address),\n        )\n\n    # Check the EXTCODE* properties of the self-destructing contract again\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(max(len(bytes(selfdestruct_contract_initcode)), 32), 1)\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n    }\n\n    # Check the balances of the sendall recipients\n    for address, balance in sendall_final_balances.items():\n        post[address] = Account(balance=balance, storage={0: 1})\n\n    post[selfdestruct_contract_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=100_000,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_self_destructing_initcode","title":"<code>test_self_destructing_initcode(state_test, env, pre, entry_code_address, selfdestruct_contract_initcode, selfdestruct_contract_address, sendall_recipient_addresses, initcode_copy_from_address, create_opcode, call_times, selfdestruct_contract_initial_balance)</code>","text":"<p>Test that a contract can self-destruct in its initcode.</p> <p>Behavior is the same before and after EIP-6780.</p> Test using <ul> <li>Different initial balances for the self-destructing contract</li> <li>Different opcodes: CREATE, CREATE2</li> <li>Different number of calls to the self-destructing contract in the same tx</li> </ul> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\"create_opcode\", [Op.CREATE, Op.CREATE2])\n@pytest.mark.parametrize(\"call_times\", [0, 1])\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 100_000])\n@pytest.mark.parametrize(\"self_destructing_initcode\", [True], ids=[\"\"])\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_self_destructing_initcode(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    create_opcode: Op,\n    call_times: int,  # Number of times to call the self-destructing contract in the same tx\n    selfdestruct_contract_initial_balance: int,\n):\n    \"\"\"\n    Test that a contract can self-destruct in its initcode.\n\n    Behavior is the same before and after EIP-6780.\n\n    Test using:\n        - Different initial balances for the self-destructing contract\n        - Different opcodes: CREATE, CREATE2\n        - Different number of calls to the self-destructing contract in the same tx\n    \"\"\"\n    # Our entry point is an initcode that in turn creates a self-destructing contract\n    entry_code_storage = Storage()\n    sendall_amount = 0\n\n    # Bytecode used to create the contract, can be CREATE or CREATE2\n    create_args = [\n        0,  # Value\n        0,  # Offset\n        len(bytes(selfdestruct_contract_initcode)),  # Length\n    ]\n    if create_opcode == Op.CREATE2:\n        # CREATE2 requires a salt argument\n        create_args.append(0)\n    create_bytecode = create_opcode(*create_args)\n\n    # Entry code that will be executed, creates the contract and then calls it in the same tx\n    entry_code = (\n        # Initcode is already deployed at `initcode_copy_from_address`, so just copy it\n        Op.EXTCODECOPY(\n            initcode_copy_from_address,\n            0,\n            0,\n            len(bytes(selfdestruct_contract_initcode)),\n        )\n        # And we store the created address for verification purposes\n        + Op.SSTORE(\n            entry_code_storage.store_next(selfdestruct_contract_address),\n            create_bytecode,\n        )\n    )\n\n    # Store the EXTCODE* properties of the created address\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(0),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes())),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Call the self-destructing contract multiple times as required, increasing the wei sent each\n    # time\n    for i in range(call_times):\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                selfdestruct_contract_address,  # Address\n                i,  # Value\n                0,\n                0,\n                0,\n                0,\n            ),\n        )\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(0),\n            Op.BALANCE(selfdestruct_contract_address),\n        )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(max(len(bytes(selfdestruct_contract_initcode)), 32), 1)\n\n    if selfdestruct_contract_initial_balance &gt; 0:\n        # Address where the contract is created already had some balance,\n        # which must be included in the send-all operation\n        sendall_amount += selfdestruct_contract_initial_balance\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n        selfdestruct_contract_address: Account.NONEXISTENT,  # type: ignore\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n        sendall_recipient_addresses[0]: Account(balance=sendall_amount, storage={0: 1}),\n    }\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=100_000,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_self_destructing_initcode_create_tx","title":"<code>test_self_destructing_initcode_create_tx(state_test, env, pre, tx_value, entry_code_address, selfdestruct_contract_initcode, selfdestruct_contract_address, sendall_recipient_addresses, initcode_copy_from_address, selfdestruct_contract_initial_balance)</code>","text":"<p>Use a Create Transaction to execute a self-destructing initcode.</p> <p>Behavior should be the same before and after EIP-6780.</p> Test using <ul> <li>Different initial balances for the self-destructing contract</li> <li>Different transaction value amounts</li> </ul> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\"tx_value\", [0, 100_000])\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 100_000])\n@pytest.mark.parametrize(\"selfdestruct_contract_address\", [compute_create_address(TestAddress, 0)])\n@pytest.mark.parametrize(\"self_destructing_initcode\", [True], ids=[\"\"])\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_self_destructing_initcode_create_tx(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    tx_value: int,\n    entry_code_address: Address,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    selfdestruct_contract_initial_balance: int,\n):\n    \"\"\"\n    Use a Create Transaction to execute a self-destructing initcode.\n\n    Behavior should be the same before and after EIP-6780.\n\n    Test using:\n        - Different initial balances for the self-destructing contract\n        - Different transaction value amounts\n    \"\"\"\n    assert entry_code_address == selfdestruct_contract_address\n\n    # Our entry point is an initcode that in turn creates a self-destructing contract\n    sendall_amount = selfdestruct_contract_initial_balance + tx_value\n\n    post: Dict[Address, Account] = {\n        selfdestruct_contract_address: Account.NONEXISTENT,  # type: ignore\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n        sendall_recipient_addresses[0]: Account(balance=sendall_amount, storage={0: 1}),\n    }\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=tx_value,\n        data=selfdestruct_contract_initcode,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_recreate_self_destructed_contract_different_txs","title":"<code>test_recreate_self_destructed_contract_different_txs(blockchain_test, env, pre, entry_code_address, selfdestruct_contract_initcode, selfdestruct_contract_address, selfdestruct_contract_initial_balance, sendall_recipient_addresses, initcode_copy_from_address, create_opcode, recreate_times, call_times)</code>","text":"<p>Test that a contract can be recreated after it has self-destructed, over the lapse of multiple transactions.</p> <p>Behavior should be the same before and after EIP-6780.</p> Test using <ul> <li>Different initial balances for the self-destructing contract</li> <li>CREATE2 only</li> </ul> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\"create_opcode\", [Op.CREATE2])  # Can only recreate using CREATE2\n@pytest.mark.parametrize(\n    \"sendall_recipient_addresses\",\n    [\n        pytest.param(\n            [Address(0x1000)],\n            id=\"selfdestruct_other_address\",\n        ),\n        pytest.param(\n            [SELF_ADDRESS],\n            id=\"selfdestruct_to_self\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 100_000])\n@pytest.mark.parametrize(\"recreate_times\", [1])\n@pytest.mark.parametrize(\"call_times\", [1])\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_recreate_self_destructed_contract_different_txs(\n    blockchain_test: BlockchainTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    selfdestruct_contract_initial_balance: int,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    create_opcode: Op,\n    recreate_times: int,  # Number of times to recreate the contract in different transactions\n    call_times: int,  # Number of times to call the self-destructing contract in the same tx\n):\n    \"\"\"\n    Test that a contract can be recreated after it has self-destructed, over the lapse\n    of multiple transactions.\n\n    Behavior should be the same before and after EIP-6780.\n\n    Test using:\n        - Different initial balances for the self-destructing contract\n        - CREATE2 only\n    \"\"\"\n    entry_code_storage = Storage()\n    sendall_amount = selfdestruct_contract_initial_balance\n\n    # Bytecode used to create the contract\n    assert create_opcode == Op.CREATE2, \"cannot recreate contract using CREATE opcode\"\n    create_bytecode = Op.CREATE2(0, 0, len(bytes(selfdestruct_contract_initcode)), 0)\n\n    # Entry code that will be executed, creates the contract and then calls it\n    entry_code = (\n        # Initcode is already deployed at initcode_copy_from_address, so just copy it\n        Op.EXTCODECOPY(\n            initcode_copy_from_address,\n            0,\n            0,\n            len(bytes(selfdestruct_contract_initcode)),\n        )\n        + Op.SSTORE(\n            Op.CALLDATALOAD(0),\n            create_bytecode,\n        )\n    )\n\n    for i in range(call_times):\n        entry_code += Op.CALL(\n            Op.GASLIMIT,\n            selfdestruct_contract_address,\n            i,\n            0,\n            0,\n            0,\n            0,\n        )\n        sendall_amount += i\n\n    entry_code += Op.STOP\n\n    txs: List[Transaction] = []\n    nonce = count()\n    for i in range(recreate_times + 1):\n        txs.append(\n            Transaction(\n                ty=0x0,\n                data=Hash(i),\n                chain_id=0x0,\n                nonce=next(nonce),\n                to=entry_code_address,\n                gas_limit=100_000_000,\n                gas_price=10,\n                protected=False,\n            )\n        )\n        entry_code_storage[i] = selfdestruct_contract_address\n\n    pre[entry_code_address] = Account(code=entry_code)\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=entry_code,\n            storage=entry_code_storage,\n        ),\n        selfdestruct_contract_address: Account.NONEXISTENT,  # type: ignore\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n    }\n    if sendall_recipient_addresses[0] != selfdestruct_contract_address:\n        post[sendall_recipient_addresses[0]] = Account(balance=sendall_amount, storage={0: 1})\n\n    blockchain_test(genesis_environment=env, pre=pre, post=post, blocks=[Block(txs=txs)])\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_selfdestruct_pre_existing","title":"<code>test_selfdestruct_pre_existing(state_test, eip_enabled, env, pre, entry_code_address, selfdestruct_contract_address, selfdestruct_code, selfdestruct_contract_initial_balance, sendall_recipient_addresses, call_times)</code>","text":"<p>Test calling a previously created account that contains a selfdestruct, and verify its balance is sent to the destination address.</p> <p>After EIP-6780, the balance should be sent to the send-all recipient address, similar to the behavior before the EIP, but the account is not deleted.</p> Test using <ul> <li>Different send-all recipient addresses: single, multiple, including self</li> <li>Different initial balances for the self-destructing contract</li> </ul> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_times,sendall_recipient_addresses\",\n    [\n        pytest.param(\n            1,\n            [Address(0x1000)],\n            id=\"single_call\",\n        ),\n        pytest.param(\n            1,\n            [PRE_EXISTING_SELFDESTRUCT_ADDRESS],\n            id=\"single_call_self\",\n        ),\n        pytest.param(\n            2,\n            [Address(0x1000)],\n            id=\"multiple_calls_single_sendall_recipient\",\n        ),\n        pytest.param(\n            2,\n            [PRE_EXISTING_SELFDESTRUCT_ADDRESS],\n            id=\"multiple_calls_single_self_recipient\",\n        ),\n        pytest.param(\n            3,\n            [Address(0x1000), Address(0x2000), Address(0x3000)],\n            id=\"multiple_calls_multiple_sendall_recipients\",\n        ),\n        pytest.param(\n            3,\n            [PRE_EXISTING_SELFDESTRUCT_ADDRESS, Address(0x2000), Address(0x3000)],\n            id=\"multiple_calls_multiple_sendall_recipients_including_self\",\n        ),\n        pytest.param(\n            3,\n            [Address(0x1000), Address(0x2000), PRE_EXISTING_SELFDESTRUCT_ADDRESS],\n            id=\"multiple_calls_multiple_sendall_recipients_including_self_last\",\n        ),\n        pytest.param(\n            6,\n            [PRE_EXISTING_SELFDESTRUCT_ADDRESS, Address(0x2000), Address(0x3000)],\n            id=\"multiple_calls_multiple_repeating_sendall_recipients_including_self\",\n        ),\n        pytest.param(\n            6,\n            [Address(0x1000), Address(0x2000), PRE_EXISTING_SELFDESTRUCT_ADDRESS],\n            id=\"multiple_calls_multiple_repeating_sendall_recipients_including_self_last\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 100_000])\n@pytest.mark.parametrize(\n    \"selfdestruct_contract_address\", [PRE_EXISTING_SELFDESTRUCT_ADDRESS], ids=[\"pre_existing\"]\n)\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_selfdestruct_pre_existing(\n    state_test: StateTestFiller,\n    eip_enabled: bool,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_contract_address: Address,\n    selfdestruct_code: SupportsBytes,\n    selfdestruct_contract_initial_balance: int,\n    sendall_recipient_addresses: List[Address],\n    call_times: int,\n):\n    \"\"\"\n    Test calling a previously created account that contains a selfdestruct, and verify its balance\n    is sent to the destination address.\n\n    After EIP-6780, the balance should be sent to the send-all recipient address, similar to\n    the behavior before the EIP, but the account is not deleted.\n\n    Test using:\n        - Different send-all recipient addresses: single, multiple, including self\n        - Different initial balances for the self-destructing contract\n    \"\"\"\n    entry_code_storage = Storage()\n\n    # Create a dict to record the expected final balances\n    sendall_final_balances = dict(\n        zip(sendall_recipient_addresses, [0] * len(sendall_recipient_addresses))\n    )\n    selfdestruct_contract_current_balance = selfdestruct_contract_initial_balance\n\n    # Entry code in this case will simply call the pre-existing self-destructing contract,\n    # as many times as required\n    entry_code = b\"\"\n\n    # Call the self-destructing contract multiple times as required, increasing the wei sent each\n    # time\n    for i, sendall_recipient in zip(range(call_times), cycle(sendall_recipient_addresses)):\n        entry_code += Op.MSTORE(0, sendall_recipient)\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                selfdestruct_contract_address,  # Address\n                i,  # Value\n                0,\n                32,\n                0,\n                0,\n            ),\n        )\n        selfdestruct_contract_current_balance += i\n\n        # Balance is always sent to other contracts\n        if sendall_recipient != selfdestruct_contract_address:\n            sendall_final_balances[sendall_recipient] += selfdestruct_contract_current_balance\n\n        # Balance is only kept by the self-destructing contract if we are sending to self and the\n        # EIP is activated, otherwise the balance is destroyed\n        if sendall_recipient != selfdestruct_contract_address or not eip_enabled:\n            selfdestruct_contract_current_balance = 0\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(selfdestruct_contract_current_balance),\n            Op.BALANCE(selfdestruct_contract_address),\n        )\n\n    # Check the EXTCODE* properties of the self-destructing contract\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(32, 1)\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n    }\n\n    # Check the balances of the sendall recipients\n    for address, balance in sendall_final_balances.items():\n        if address != selfdestruct_contract_address:\n            post[address] = Account(balance=balance, storage={0: 1})\n\n    if eip_enabled:\n        balance = selfdestruct_contract_current_balance\n        post[selfdestruct_contract_address] = Account(\n            balance=balance,\n            code=selfdestruct_code,\n            storage={0: call_times},\n        )\n    else:\n        post[selfdestruct_contract_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=100_000,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_selfdestruct_created_same_block_different_tx","title":"<code>test_selfdestruct_created_same_block_different_tx(blockchain_test, eip_enabled, env, pre, entry_code_address, selfdestruct_contract_address, selfdestruct_code, selfdestruct_contract_initcode, selfdestruct_contract_initial_balance, sendall_recipient_addresses, call_times)</code>","text":"<p>Test that if an account created in the same block that contains a selfdestruct is called, its balance is sent to the send-all address, but the account is not deleted.</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 1])\n@pytest.mark.parametrize(\"call_times\", [1, 10])\n@pytest.mark.parametrize(\n    \"selfdestruct_contract_address,entry_code_address\",\n    [(compute_create_address(TestAddress, 0), compute_create_address(TestAddress, 1))],\n)\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_selfdestruct_created_same_block_different_tx(\n    blockchain_test: BlockchainTestFiller,\n    eip_enabled: bool,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_contract_address: Address,\n    selfdestruct_code: SupportsBytes,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_initial_balance: int,\n    sendall_recipient_addresses: List[Address],\n    call_times: int,\n):\n    \"\"\"\n    Test that if an account created in the same block that contains a selfdestruct is\n    called, its balance is sent to the send-all address, but the account is not deleted.\n    \"\"\"\n    entry_code_storage = Storage()\n    sendall_amount = selfdestruct_contract_initial_balance\n    entry_code = b\"\"\n\n    # Entry code in this case will simply call the pre-existing self-destructing contract,\n    # as many times as required\n\n    # Call the self-destructing contract multiple times as required, increasing the wei sent each\n    # time\n    for i in range(call_times):\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                selfdestruct_contract_address,  # Address\n                i,  # Value\n                0,\n                0,\n                0,\n                0,\n            ),\n        )\n\n        sendall_amount += i\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(0),\n            Op.BALANCE(selfdestruct_contract_address),\n        )\n\n    # Check the EXTCODE* properties of the self-destructing contract\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(32, 1)\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n        sendall_recipient_addresses[0]: Account(balance=sendall_amount, storage={0: 1}),\n    }\n\n    if eip_enabled:\n        post[selfdestruct_contract_address] = Account(\n            balance=0, code=selfdestruct_code, storage={0: call_times}\n        )\n    else:\n        post[selfdestruct_contract_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    txs = [\n        Transaction(\n            ty=0x0,\n            value=0,\n            data=selfdestruct_contract_initcode,\n            chain_id=0x0,\n            nonce=next(nonce),\n            to=None,\n            gas_limit=100_000_000,\n            gas_price=10,\n            protected=False,\n        ),\n        Transaction(\n            ty=0x0,\n            value=100_000,\n            data=entry_code,\n            chain_id=0x0,\n            nonce=next(nonce),\n            to=None,\n            gas_limit=100_000_000,\n            gas_price=10,\n            protected=False,\n        ),\n    ]\n\n    blockchain_test(genesis_environment=env, pre=pre, post=post, blocks=[Block(txs=txs)])\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_delegatecall_from_new_contract_to_pre_existing_contract","title":"<code>test_delegatecall_from_new_contract_to_pre_existing_contract(state_test, env, pre, entry_code_address, selfdestruct_code, selfdestruct_contract_initcode, selfdestruct_contract_address, sendall_recipient_addresses, initcode_copy_from_address, create_opcode, call_times, selfdestruct_contract_initial_balance)</code>","text":"<p>Test that if an account created in the current transaction delegate-call a previously created account that executes self-destruct, the calling account is deleted.</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\n    \"selfdestruct_code\",\n    [\n        pytest.param(\n            Op.DELEGATECALL(\n                Op.GAS,\n                PRE_EXISTING_SELFDESTRUCT_ADDRESS,\n                0,\n                0,\n                0,\n                0,\n            ),\n            id=\"delegatecall\",\n        ),\n        pytest.param(\n            Op.CALLCODE(\n                Op.GAS,\n                PRE_EXISTING_SELFDESTRUCT_ADDRESS,\n                0,\n                0,\n                0,\n                0,\n                0,\n            ),\n            id=\"callcode\",\n        ),\n    ],\n)  # The self-destruct code is delegatecall\n@pytest.mark.parametrize(\"call_times\", [1])\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 1])\n@pytest.mark.parametrize(\"create_opcode\", [Op.CREATE])\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_delegatecall_from_new_contract_to_pre_existing_contract(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_code: SupportsBytes,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    create_opcode: Op,\n    call_times: int,\n    selfdestruct_contract_initial_balance: int,\n):\n    \"\"\"\n    Test that if an account created in the current transaction delegate-call a previously created\n    account that executes self-destruct, the calling account is deleted.\n    \"\"\"\n    # Our entry point is an initcode that in turn creates a self-destructing contract\n    entry_code_storage = Storage()\n    sendall_amount = 0\n\n    # Bytecode used to create the contract, can be CREATE or CREATE2\n    create_args = [\n        0,  # Value\n        0,  # Offset\n        len(bytes(selfdestruct_contract_initcode)),  # Length\n    ]\n    if create_opcode == Op.CREATE2:\n        # CREATE2 requires a salt argument\n        create_args.append(0)\n    create_bytecode = create_opcode(*create_args)\n\n    # Entry code that will be executed, creates the contract and then calls it in the same tx\n    entry_code = (\n        # Initcode is already deployed at `initcode_copy_from_address`, so just copy it\n        Op.EXTCODECOPY(\n            initcode_copy_from_address,\n            0,\n            0,\n            len(bytes(selfdestruct_contract_initcode)),\n        )\n        # And we store the created address for verification purposes\n        + Op.SSTORE(\n            entry_code_storage.store_next(selfdestruct_contract_address),\n            create_bytecode,\n        )\n    )\n\n    # Store the EXTCODE* properties of the created address\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Call the self-destructing contract multiple times as required, increasing the wei sent each\n    # time\n    for i in range(call_times):\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                selfdestruct_contract_address,  # Address\n                i,  # Value\n                0,\n                0,\n                0,\n                0,\n            ),\n        )\n\n        sendall_amount += i\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(0),\n            Op.BALANCE(selfdestruct_contract_address),\n        )\n\n    # Check the EXTCODE* properties of the self-destructing contract again\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(max(len(bytes(selfdestruct_contract_initcode)), 32), 1)\n\n    if selfdestruct_contract_initial_balance &gt; 0:\n        # Address where the contract is created already had some balance,\n        # which must be included in the send-all operation\n        sendall_amount += selfdestruct_contract_initial_balance\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n        selfdestruct_contract_address: Account.NONEXISTENT,  # type: ignore\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n        sendall_recipient_addresses[0]: Account(balance=sendall_amount, storage={0: 1}),\n    }\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=100_000,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_delegatecall_from_pre_existing_contract_to_new_contract","title":"<code>test_delegatecall_from_pre_existing_contract_to_new_contract(state_test, eip_enabled, env, pre, entry_code_address, selfdestruct_code, selfdestruct_contract_initcode, selfdestruct_contract_address, sendall_recipient_addresses, initcode_copy_from_address, call_opcode, create_opcode, call_times, selfdestruct_contract_initial_balance)</code>","text":"<p>Test that if an account created in the current transaction contains a self-destruct and is delegate-called by an account created before the current transaction, the calling account is not deleted.</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\"create_opcode\", [Op.CREATE, Op.CREATE2])\n@pytest.mark.parametrize(\"call_opcode\", [Op.DELEGATECALL, Op.CALLCODE])\n@pytest.mark.parametrize(\"call_times\", [1])\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 1])\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_delegatecall_from_pre_existing_contract_to_new_contract(\n    state_test: StateTestFiller,\n    eip_enabled: bool,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_code: SupportsBytes,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    call_opcode: Op,\n    create_opcode: Op,\n    call_times: int,\n    selfdestruct_contract_initial_balance: int,\n):\n    \"\"\"\n    Test that if an account created in the current transaction contains a self-destruct and is\n    delegate-called by an account created before the current transaction, the calling account\n    is not deleted.\n    \"\"\"\n    # Add the contract that delegate calls to the newly created contract\n    delegate_caller_address = Address(\"0x2222222222222222222222222222222222222222\")\n    call_args: List[int | bytes] = [\n        Op.GAS(),\n        selfdestruct_contract_address,\n        0,\n        0,\n        0,\n        0,\n    ]\n    if call_opcode == Op.CALLCODE:\n        # CALLCODE requires `value`\n        call_args.append(0)\n    delegate_caller_code = call_opcode(*call_args)\n    pre[delegate_caller_address] = Account(code=delegate_caller_code)\n\n    # Our entry point is an initcode that in turn creates a self-destructing contract\n    entry_code_storage = Storage()\n    sendall_amount = 0\n\n    # Bytecode used to create the contract, can be CREATE or CREATE2\n    create_args = [\n        0,  # Value\n        0,  # Offset\n        len(bytes(selfdestruct_contract_initcode)),  # Length\n    ]\n    if create_opcode == Op.CREATE2:\n        # CREATE2 requires a salt argument\n        create_args.append(0)\n    create_bytecode = create_opcode(*create_args)\n\n    # Entry code that will be executed, creates the contract and then calls it in the same tx\n    entry_code = (\n        # Initcode is already deployed at `initcode_copy_from_address`, so just copy it\n        Op.EXTCODECOPY(\n            initcode_copy_from_address,\n            0,\n            0,\n            len(bytes(selfdestruct_contract_initcode)),\n        )\n        # And we store the created address for verification purposes\n        + Op.SSTORE(\n            entry_code_storage.store_next(selfdestruct_contract_address),\n            create_bytecode,\n        )\n    )\n\n    # Store the EXTCODE* properties of the pre-existing address\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(delegate_caller_code)),\n        Op.EXTCODESIZE(delegate_caller_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(delegate_caller_code)),\n        Op.EXTCODEHASH(delegate_caller_address),\n    )\n\n    # Now instead of calling the newly created contract directly, we delegate call to it\n    # from a pre-existing contract, and the contract must not self-destruct\n    for i in range(call_times):\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                delegate_caller_address,  # Address\n                i,  # Value\n                0,\n                0,\n                0,\n                0,\n            ),\n        )\n\n        sendall_amount += i\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(0),\n            Op.BALANCE(delegate_caller_address),\n        )\n\n    # Check the EXTCODE* properties of the pre-existing address again\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(delegate_caller_code))),\n        Op.EXTCODESIZE(delegate_caller_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(delegate_caller_code))),\n        Op.EXTCODEHASH(delegate_caller_address),\n    )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(max(len(bytes(selfdestruct_contract_initcode)), 32), 1)\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n        selfdestruct_contract_address: Account(\n            code=selfdestruct_code, balance=selfdestruct_contract_initial_balance\n        ),\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n        sendall_recipient_addresses[0]: Account(balance=sendall_amount, storage={0: 1}),\n    }\n\n    if eip_enabled:\n        post[delegate_caller_address] = Account(code=delegate_caller_code, balance=0)\n    else:\n        post[delegate_caller_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=100_000,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/#tests.cancun.eip6780_selfdestruct.test_selfdestruct.test_create_selfdestruct_same_tx_increased_nonce","title":"<code>test_create_selfdestruct_same_tx_increased_nonce(state_test, env, pre, entry_code_address, selfdestruct_code, selfdestruct_contract_initcode, selfdestruct_contract_address, sendall_recipient_addresses, initcode_copy_from_address, create_opcode, call_times, selfdestruct_contract_initial_balance)</code>","text":"<p>Verify that a contract can self-destruct if it was created in the same transaction, even when its nonce has been increased due to contract creation.</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code> <pre><code>@pytest.mark.parametrize(\n    \"selfdestruct_pre_bytecode\",\n    [\n        pytest.param(\n            Op.MSTORE(0, Op.PUSH32(initcode))\n            + Op.POP(Op.CREATE(0, 32 - len(initcode), len(initcode))),\n            id=\"increase_nonce_by_create\",\n        )\n    ],\n)\n@pytest.mark.parametrize(\"create_opcode\", [Op.CREATE, Op.CREATE2])\n@pytest.mark.parametrize(\"selfdestruct_contract_initial_balance\", [0, 100_000])\n@pytest.mark.parametrize(\n    \"call_times,sendall_recipient_addresses\",\n    [\n        pytest.param(1, [Address(0x1000)], id=\"single_call\"),\n        pytest.param(5, [Address(0x1000)], id=\"multiple_calls_single beneficiary\"),\n    ],\n)\n@pytest.mark.valid_from(\"Shanghai\")\ndef test_create_selfdestruct_same_tx_increased_nonce(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_code: SupportsBytes,\n    selfdestruct_contract_initcode: SupportsBytes,\n    selfdestruct_contract_address: Address,\n    sendall_recipient_addresses: List[Address],\n    initcode_copy_from_address: Address,\n    create_opcode: Op,\n    call_times: int,\n    selfdestruct_contract_initial_balance: int,\n):\n    \"\"\"\n    Verify that a contract can self-destruct if it was created in the same transaction, even when\n    its nonce has been increased due to contract creation.\n    \"\"\"\n    # Our entry point is an initcode that in turn creates a self-destructing contract\n    entry_code_storage = Storage()\n\n    # Create a dict to record the expected final balances\n    sendall_final_balances = dict(\n        zip(sendall_recipient_addresses, [0] * len(sendall_recipient_addresses))\n    )\n    selfdestruct_contract_current_balance = selfdestruct_contract_initial_balance\n\n    # Bytecode used to create the contract, can be CREATE or CREATE2\n    create_args = [\n        0,  # Value\n        0,  # Offset\n        len(bytes(selfdestruct_contract_initcode)),  # Length\n    ]\n    if create_opcode == Op.CREATE2:\n        # CREATE2 requires a salt argument\n        create_args.append(0)\n    create_bytecode = create_opcode(*create_args)\n\n    # Entry code that will be executed, creates the contract and then calls it in the same tx\n    entry_code = (\n        # Initcode is already deployed at `initcode_copy_from_address`, so just copy it\n        Op.EXTCODECOPY(\n            initcode_copy_from_address,\n            0,\n            0,\n            len(bytes(selfdestruct_contract_initcode)),\n        )\n        # And we store the created address for verification purposes\n        + Op.SSTORE(\n            entry_code_storage.store_next(selfdestruct_contract_address),\n            create_bytecode,\n        )\n    )\n\n    # Store the EXTCODE* properties of the created address\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Call the self-destructing contract multiple times as required, increasing the wei sent each\n    # time\n    for i, sendall_recipient in zip(range(call_times), cycle(sendall_recipient_addresses)):\n        entry_code += Op.MSTORE(0, sendall_recipient)\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(1),\n            Op.CALL(\n                Op.GASLIMIT,  # Gas\n                selfdestruct_contract_address,  # Address\n                i,  # Value\n                0,\n                32,\n                0,\n                0,\n            ),\n        )\n        selfdestruct_contract_current_balance += i\n\n        # Balance is always sent to other contracts\n        if sendall_recipient != selfdestruct_contract_address:\n            sendall_final_balances[sendall_recipient] += selfdestruct_contract_current_balance\n\n        # Self-destructing contract must always have zero balance after the call because the\n        # self-destruct always happens in the same transaction in this test\n        selfdestruct_contract_current_balance = 0\n\n        entry_code += Op.SSTORE(\n            entry_code_storage.store_next(0),\n            Op.BALANCE(selfdestruct_contract_address),\n        )\n\n    # Check the EXTCODE* properties of the self-destructing contract again\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(len(bytes(selfdestruct_code))),\n        Op.EXTCODESIZE(selfdestruct_contract_address),\n    )\n\n    entry_code += Op.SSTORE(\n        entry_code_storage.store_next(keccak256(bytes(selfdestruct_code))),\n        Op.EXTCODEHASH(selfdestruct_contract_address),\n    )\n\n    # Lastly return zero so the entry point contract is created and we can retain the stored\n    # values for verification.\n    entry_code += Op.RETURN(max(len(bytes(selfdestruct_contract_initcode)), 32), 1)\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x00\",\n            storage=entry_code_storage,\n        ),\n        initcode_copy_from_address: Account(\n            code=selfdestruct_contract_initcode,\n        ),\n    }\n\n    # Check the balances of the sendall recipients\n    for address, balance in sendall_final_balances.items():\n        post[address] = Account(balance=balance, storage={0: 1})\n\n    # Check the new contracts created from the self-destructing contract were correctly created.\n    for address in [\n        compute_create_address(selfdestruct_contract_address, i + 1) for i in range(call_times)\n    ]:\n        post[address] = Account(\n            code=b\"\\x00\",\n        )\n\n    post[selfdestruct_contract_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=100_000,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct/index/test_cases/","title":"Test Selfdestruct - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct.py</code>:</p> <pre><code>test_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Cancun-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-single_call-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-single_call_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE]\ntest_create_selfdestruct_same_tx[fork_Prague-state_test-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Shanghai-state_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Cancun-state_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-blockchain_test_hive--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_0-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_0-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_100000-call_times_0-create_opcode_CREATE2]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE]\ntest_self_destructing_initcode[fork_Prague-state_test--selfdestruct_contract_initial_balance_100000-call_times_1-create_opcode_CREATE2]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Shanghai-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Cancun-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Cancun-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Cancun-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Cancun-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Cancun-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Prague-blockchain_test_hive--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Prague-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Prague-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_0-tx_value_100000]\ntest_self_destructing_initcode_create_tx[fork_Prague-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_0]\ntest_self_destructing_initcode_create_tx[fork_Prague-state_test--selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-selfdestruct_contract_initial_balance_100000-tx_value_100000]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Shanghai-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Cancun-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_0-selfdestruct_to_self-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_other_address-create_opcode_CREATE2]\ntest_recreate_self_destructed_contract_different_txs[fork_Prague-blockchain_test_hive-call_times_1-recreate_times_1-selfdestruct_contract_initial_balance_100000-selfdestruct_to_self-create_opcode_CREATE2]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Shanghai-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Cancun-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-blockchain_test_hive-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-single_call_self]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_0-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-single_call_self]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_sendall_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_single_self_recipient]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_sendall_recipients_including_self_last]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self]\ntest_selfdestruct_pre_existing[fork_Prague-state_test-pre_existing-selfdestruct_contract_initial_balance_100000-multiple_calls_multiple_repeating_sendall_recipients_including_self_last]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Cancun-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_1-selfdestruct_contract_initial_balance_1]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_0]\ntest_selfdestruct_created_same_block_different_tx[fork_Prague-blockchain_test_hive-selfdestruct_contract_address_0x6295ee1b4f6dd65047762f924ecd367c17eabf8f-entry_code_address_0xec0e71ad0a90ffe1909d27dac207f7680abba42d-call_times_10-selfdestruct_contract_initial_balance_1]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Shanghai-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Cancun-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-blockchain_test_hive-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_0-call_times_1-callcode]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-delegatecall]\ntest_delegatecall_from_new_contract_to_pre_existing_contract[fork_Prague-state_test-create_opcode_CREATE-selfdestruct_contract_initial_balance_1-call_times_1-callcode]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Shanghai-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Cancun-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-blockchain_test_hive-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_0-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_DELEGATECALL-create_opcode_CREATE2]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE]\ntest_delegatecall_from_pre_existing_contract_to_new_contract[fork_Prague-state_test-selfdestruct_contract_initial_balance_1-call_times_1-call_opcode_CALLCODE-create_opcode_CREATE2]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Shanghai-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Cancun-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-blockchain_test_hive-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-single_call-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-single_call-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_0-create_opcode_CREATE2-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE-increase_nonce_by_create]\ntest_create_selfdestruct_same_tx_increased_nonce[fork_Prague-state_test-multiple_calls_single beneficiary-selfdestruct_contract_initial_balance_100000-create_opcode_CREATE2-increase_nonce_by_create]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip6780_selfdestruct/test_selfdestruct.py\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert/","title":"Test Selfdestruct Revert","text":"<p>Documentation for <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py\n</code></pre> <p>tests for selfdestruct interaction with revert</p>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert/#tests.cancun.eip6780_selfdestruct.test_selfdestruct_revert.test_selfdestruct_created_in_same_tx_with_revert","title":"<code>test_selfdestruct_created_in_same_tx_with_revert(state_test, env, pre, entry_code_address, selfdestruct_on_outer_call, selfdestruct_with_transfer_contract_code, selfdestruct_with_transfer_contract_initcode, selfdestruct_with_transfer_contract_address, selfdestruct_recipient_address, selfdestruct_with_transfer_initcode_copy_from_address, recursive_revert_contract_address, recursive_revert_contract_code)</code>","text":"Given <p>Contract A which has methods to receive balance and selfdestruct, and was created in current tx</p> <p>Test the following call sequence:      Transfer value to A and call A.selfdestruct.      Recurse into a new call from transfers value to A, calls A.selfdestruct, and reverts.</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py</code> <pre><code>@pytest.mark.parametrize(\n    \"selfdestruct_on_outer_call\",\n    [0, 1, 2],\n    ids=[\n        \"no_outer_selfdestruct\",\n        \"outer_selfdestruct_before_inner_call\",\n        \"outer_selfdestruct_after_inner_call\",\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_selfdestruct_created_in_same_tx_with_revert(  # noqa SC200\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: Dict[Address, Account],\n    entry_code_address: Address,\n    selfdestruct_on_outer_call: int,\n    selfdestruct_with_transfer_contract_code: SupportsBytes,\n    selfdestruct_with_transfer_contract_initcode: SupportsBytes,\n    selfdestruct_with_transfer_contract_address: Address,\n    selfdestruct_recipient_address: Address,\n    selfdestruct_with_transfer_initcode_copy_from_address: Address,\n    recursive_revert_contract_address: Address,\n    recursive_revert_contract_code: SupportsBytes,\n):\n    \"\"\"\n    Given:\n        Contract A which has methods to receive balance and selfdestruct, and was created in current tx\n    Test the following call sequence:\n         Transfer value to A and call A.selfdestruct.\n         Recurse into a new call from transfers value to A, calls A.selfdestruct, and reverts.\n    \"\"\"  # noqa: E501\n    entry_code = Op.EXTCODECOPY(\n        selfdestruct_with_transfer_initcode_copy_from_address,\n        0,\n        0,\n        len(bytes(selfdestruct_with_transfer_contract_initcode)),\n    )\n\n    entry_code += Op.SSTORE(\n        0,\n        Op.CREATE(\n            0, 0, len(bytes(selfdestruct_with_transfer_contract_initcode))  # Value  # Offset\n        ),\n    )\n\n    entry_code += Op.CALL(\n        Op.GASLIMIT(),\n        recursive_revert_contract_address,\n        0,  # value\n        0,  # arg offset\n        0,  # arg length\n        0,  # ret offset\n        0,  # ret length\n    )\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(\n            code=\"0x\", storage=Storage({0: selfdestruct_with_transfer_contract_address})\n        ),\n        selfdestruct_with_transfer_initcode_copy_from_address: Account(\n            code=selfdestruct_with_transfer_contract_initcode,\n        ),\n        recursive_revert_contract_address: Account(\n            code=recursive_revert_contract_code,\n            storage=Storage({1: 1}),\n        ),\n    }\n\n    if selfdestruct_on_outer_call &gt; 0:\n        post[selfdestruct_with_transfer_contract_address] = Account.NONEXISTENT  # type: ignore\n        post[selfdestruct_recipient_address] = Account(\n            balance=1 if selfdestruct_on_outer_call == 1 else 2,\n        )\n    else:\n        post[selfdestruct_with_transfer_contract_address] = Account(\n            balance=1,\n            code=selfdestruct_with_transfer_contract_code,\n            storage=Storage(\n                {\n                    # 2 value transfers (1 in outer call, 1 in reverted inner call)\n                    0: 1,\n                    # 1 selfdestruct in reverted inner call\n                    1: 0,\n                }\n            ),\n        )\n        post[selfdestruct_recipient_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=0,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert/#tests.cancun.eip6780_selfdestruct.test_selfdestruct_revert.test_selfdestruct_not_created_in_same_tx_with_revert","title":"<code>test_selfdestruct_not_created_in_same_tx_with_revert(state_test, env, entry_code_address, selfdestruct_on_outer_call, selfdestruct_with_transfer_contract_code, selfdestruct_with_transfer_contract_address, selfdestruct_recipient_address, recursive_revert_contract_address, recursive_revert_contract_code)</code>","text":"<p>Same test as selfdestruct_created_in_same_tx_with_revert except selfdestructable contract is pre-existing</p> Source code in <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py</code> <pre><code>@pytest.mark.parametrize(\n    \"selfdestruct_on_outer_call\",\n    [0, 1, 2],\n    ids=[\n        \"no_outer_selfdestruct\",\n        \"outer_selfdestruct_before_inner_call\",\n        \"outer_selfdestruct_after_inner_call\",\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_selfdestruct_not_created_in_same_tx_with_revert(\n    state_test: StateTestFiller,\n    env: Environment,\n    entry_code_address: Address,\n    selfdestruct_on_outer_call: int,\n    selfdestruct_with_transfer_contract_code: SupportsBytes,\n    selfdestruct_with_transfer_contract_address: Address,\n    selfdestruct_recipient_address: Address,\n    recursive_revert_contract_address: Address,\n    recursive_revert_contract_code: SupportsBytes,\n):\n    \"\"\"\n    Same test as selfdestruct_created_in_same_tx_with_revert except selfdestructable contract\n    is pre-existing\n    \"\"\"\n    entry_code = Op.CALL(\n        Op.GASLIMIT(),\n        recursive_revert_contract_address,\n        0,  # value\n        0,  # arg offset\n        0,  # arg length\n        0,  # ret offset\n        0,  # ret length\n    )\n\n    pre: Dict[Address, Account] = {\n        TestAddress: Account(balance=100_000_000_000_000_000_000),\n        selfdestruct_with_transfer_contract_address: Account(\n            code=selfdestruct_with_transfer_contract_code\n        ),\n        recursive_revert_contract_address: Account(\n            code=bytes(recursive_revert_contract_code), balance=2\n        ),\n    }\n\n    post: Dict[Address, Account] = {\n        entry_code_address: Account(code=\"0x\"),\n    }\n\n    if selfdestruct_on_outer_call &gt; 0:\n        post[selfdestruct_with_transfer_contract_address] = Account(\n            balance=1 if selfdestruct_on_outer_call == 1 else 0,\n            code=selfdestruct_with_transfer_contract_code,\n            storage=Storage(\n                {\n                    # 2 value transfers: 1 in outer call, 1 in reverted inner call\n                    0: 1,\n                    # 1 selfdestruct in reverted inner call\n                    1: 1,\n                }\n            ),\n        )\n        post[selfdestruct_recipient_address] = Account(\n            balance=1 if selfdestruct_on_outer_call == 1 else 2\n        )\n    else:\n        post[selfdestruct_with_transfer_contract_address] = Account(\n            balance=1,\n            code=selfdestruct_with_transfer_contract_code,\n            storage=Storage(\n                {\n                    # 2 value transfers: 1 in outer call, 1 in reverted inner call\n                    0: 1,\n                    # 2 selfdestructs: 1 in outer call, 1 in reverted inner call # noqa SC100\n                    1: 0,\n                }\n            ),\n        )\n        post[selfdestruct_recipient_address] = Account.NONEXISTENT  # type: ignore\n\n    nonce = count()\n    tx = Transaction(\n        ty=0x0,\n        value=0,\n        data=entry_code,\n        chain_id=0x0,\n        nonce=next(nonce),\n        to=None,\n        gas_limit=100_000_000,\n        gas_price=10,\n        protected=False,\n    )\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert/index/test_cases/","title":"Test Selfdestruct Revert - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py</code>:</p> <pre><code>test_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-blockchain_test-no_outer_selfdestruct]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-blockchain_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-blockchain_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-blockchain_test_hive-no_outer_selfdestruct]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-blockchain_test_hive-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-blockchain_test_hive-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-state_test-no_outer_selfdestruct]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-state_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Cancun-state_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-blockchain_test-no_outer_selfdestruct]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-blockchain_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-blockchain_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-blockchain_test_hive-no_outer_selfdestruct]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-blockchain_test_hive-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-blockchain_test_hive-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-state_test-no_outer_selfdestruct]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-state_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_created_in_same_tx_with_revert[fork_Prague-state_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-blockchain_test-no_outer_selfdestruct]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-blockchain_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-blockchain_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-blockchain_test_hive-no_outer_selfdestruct]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-blockchain_test_hive-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-blockchain_test_hive-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-state_test-no_outer_selfdestruct]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-state_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Cancun-state_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-blockchain_test-no_outer_selfdestruct]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-blockchain_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-blockchain_test-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-blockchain_test_hive-no_outer_selfdestruct]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-blockchain_test_hive-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-blockchain_test_hive-outer_selfdestruct_after_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-state_test-no_outer_selfdestruct]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-state_test-outer_selfdestruct_before_inner_call]\ntest_selfdestruct_not_created_in_same_tx_with_revert[fork_Prague-state_test-outer_selfdestruct_after_inner_call]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip6780_selfdestruct/test_selfdestruct_revert.py\n</code></pre>"},{"location":"tests/cancun/eip7516_blobgasfee/","title":"EIP-7516 Blobgasfee","text":"<p>Documentation for <code>tests/cancun/eip7516_blobgasfee</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip7516_blobgasfee\n</code></pre> <p>Tests for EIP-7516: BLOBBASEFEE opcode</p>"},{"location":"tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode/","title":"Test Blobgasfee Opcode","text":"<p>Documentation for <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py\n</code></pre> Tests EIP-7516: BLOBBASEFEE opcode <p>Test BLOBGASFEE opcode EIP-7516: BLOBBASEFEE opcode</p>"},{"location":"tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode/#tests.cancun.eip7516_blobgasfee.test_blobgasfee_opcode.test_blobbasefee_stack_overflow","title":"<code>test_blobbasefee_stack_overflow(state_test, pre, tx, call_fails)</code>","text":"<p>Tests that the BLOBBASEFEE opcode produces a stack overflow by using it repeatedly.</p> Source code in <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"callee_code,call_fails\",\n    [\n        pytest.param(Op.BLOBBASEFEE * 1024, False, id=\"no_stack_overflow\"),\n        pytest.param(Op.BLOBBASEFEE * 1025, True, id=\"stack_overflow\"),\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blobbasefee_stack_overflow(\n    state_test: StateTestFiller,\n    pre: Alloc,\n    tx: Transaction,\n    call_fails: bool,\n):\n    \"\"\"\n    Tests that the BLOBBASEFEE opcode produces a stack overflow by using it repeatedly.\n    \"\"\"\n    post = {\n        code_caller_address: Account(\n            storage={1: 0 if call_fails else 1},\n        ),\n        code_callee_address: Account(\n            balance=0,\n        ),\n    }\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode/#tests.cancun.eip7516_blobgasfee.test_blobgasfee_opcode.test_blobbasefee_out_of_gas","title":"<code>test_blobbasefee_out_of_gas(state_test, pre, tx, call_fails)</code>","text":"<p>Tests that the BLOBBASEFEE opcode fails with insufficient gas.</p> Source code in <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_gas,call_fails\",\n    [\n        pytest.param(BLOBBASEFEE_GAS, False, id=\"enough_gas\"),\n        pytest.param(BLOBBASEFEE_GAS - 1, True, id=\"out_of_gas\"),\n    ],\n)\n@pytest.mark.valid_from(\"Cancun\")\ndef test_blobbasefee_out_of_gas(\n    state_test: StateTestFiller,\n    pre: Alloc,\n    tx: Transaction,\n    call_fails: bool,\n):\n    \"\"\"\n    Tests that the BLOBBASEFEE opcode fails with insufficient gas.\n    \"\"\"\n    post = {\n        code_caller_address: Account(\n            storage={1: 0 if call_fails else 1},\n        ),\n        code_callee_address: Account(\n            balance=0,\n        ),\n    }\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode/#tests.cancun.eip7516_blobgasfee.test_blobgasfee_opcode.test_blobbasefee_before_fork","title":"<code>test_blobbasefee_before_fork(state_test, pre, tx)</code>","text":"<p>Tests that the BLOBBASEFEE opcode results on exception when called before the fork.</p> Source code in <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code> <pre><code>@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_blobbasefee_before_fork(\n    state_test: StateTestFiller,\n    pre: Alloc,\n    tx: Transaction,\n):\n    \"\"\"\n    Tests that the BLOBBASEFEE opcode results on exception when called before the fork.\n    \"\"\"\n    # Fork happens at timestamp 15_000\n    timestamp = 7_500\n    code_caller_account = pre[code_caller_address]\n    assert code_caller_account is not None\n    pre[code_caller_address] = code_caller_account.copy(\n        storage={1: 1},\n    )\n    post = {\n        code_caller_address: Account(\n            storage={1: 0},\n        ),\n        code_callee_address: Account(\n            balance=0,\n        ),\n    }\n    state_test(\n        env=Environment(\n            timestamp=timestamp,\n        ),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode/#tests.cancun.eip7516_blobgasfee.test_blobgasfee_opcode.test_blobbasefee_during_fork","title":"<code>test_blobbasefee_during_fork(blockchain_test, pre, tx)</code>","text":"<p>Tests that the BLOBBASEFEE opcode results on exception when called before the fork and succeeds when called after the fork.</p> Source code in <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code> <pre><code>@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_blobbasefee_during_fork(\n    blockchain_test: BlockchainTestFiller,\n    pre: Alloc,\n    tx: Transaction,\n):\n    \"\"\"\n    Tests that the BLOBBASEFEE opcode results on exception when called before the fork and\n    succeeds when called after the fork.\n    \"\"\"\n    code_caller_pre_storage = Storage()\n    code_caller_post_storage = Storage()\n\n    nonce = count(0)\n\n    timestamps = [7_500, 14_999, 15_000]\n\n    blocks = []\n\n    for block_number, timestamp in enumerate(timestamps, start=1):\n        blocks.append(\n            Block(\n                txs=[tx.with_nonce(next(nonce))],\n                timestamp=timestamp,\n            ),\n        )\n        # pre-set storage just to make sure we detect the change\n        code_caller_pre_storage[block_number] = 0xFF\n        code_caller_post_storage[block_number] = 0 if timestamp &lt; 15_000 else 1\n\n    code_caller_account = pre[code_caller_address]\n    assert code_caller_account is not None\n    pre[code_caller_address] = code_caller_account.copy(\n        storage=code_caller_pre_storage,\n    )\n    post = {\n        code_caller_address: Account(\n            storage=code_caller_post_storage,\n        ),\n        code_callee_address: Account(\n            balance=0,\n        ),\n    }\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode/index/test_cases/","title":"Test Blobgasfee Opcode - Test Cases","text":"<p>Test cases generated from <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py</code>:</p> <pre><code>test_blobbasefee_stack_overflow[fork_Cancun-blockchain_test-no_stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Cancun-blockchain_test-stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Cancun-blockchain_test_hive-no_stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Cancun-blockchain_test_hive-stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Cancun-state_test-no_stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Cancun-state_test-stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Prague-blockchain_test-no_stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Prague-blockchain_test-stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Prague-blockchain_test_hive-no_stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Prague-blockchain_test_hive-stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Prague-state_test-no_stack_overflow]\ntest_blobbasefee_stack_overflow[fork_Prague-state_test-stack_overflow]\ntest_blobbasefee_out_of_gas[fork_Cancun-blockchain_test-enough_gas]\ntest_blobbasefee_out_of_gas[fork_Cancun-blockchain_test-out_of_gas]\ntest_blobbasefee_out_of_gas[fork_Cancun-blockchain_test_hive-enough_gas]\ntest_blobbasefee_out_of_gas[fork_Cancun-blockchain_test_hive-out_of_gas]\ntest_blobbasefee_out_of_gas[fork_Cancun-state_test-enough_gas]\ntest_blobbasefee_out_of_gas[fork_Cancun-state_test-out_of_gas]\ntest_blobbasefee_out_of_gas[fork_Prague-blockchain_test-enough_gas]\ntest_blobbasefee_out_of_gas[fork_Prague-blockchain_test-out_of_gas]\ntest_blobbasefee_out_of_gas[fork_Prague-blockchain_test_hive-enough_gas]\ntest_blobbasefee_out_of_gas[fork_Prague-blockchain_test_hive-out_of_gas]\ntest_blobbasefee_out_of_gas[fork_Prague-state_test-enough_gas]\ntest_blobbasefee_out_of_gas[fork_Prague-state_test-out_of_gas]\ntest_blobbasefee_before_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test]\ntest_blobbasefee_before_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive]\ntest_blobbasefee_before_fork[fork_ShanghaiToCancunAtTime15k-state_test]\ntest_blobbasefee_during_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test]\ntest_blobbasefee_during_fork[fork_ShanghaiToCancunAtTime15k-blockchain_test_hive]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/cancun/eip7516_blobgasfee/test_blobgasfee_opcode.py\n</code></pre>"},{"location":"tests/constantinople/","title":"Constantinople","text":"<p>Documentation for <code>tests/constantinople</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/constantinople\n</code></pre> <p>Test cases for EVM functionality introduced in Constantinople.</p>"},{"location":"tests/constantinople/create2/","title":"Create2","text":"<p>Documentation for <code>tests/constantinople/create2</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/constantinople/create2\n</code></pre> <p>abstract: Test EIP-1014: Skinny CREATE2</p> <pre><code>Tests for  [EIP-1014: Skinny CREATE2](https://eips.ethereum.org/EIPS/eip-1014).\n</code></pre>"},{"location":"tests/constantinople/create2/test_recreate/","title":"Test Recreate","text":"<p>Documentation for <code>tests/constantinople/create2/test_recreate.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/constantinople/create2/test_recreate.py\n</code></pre> <p>Test Account Self-destruction and Re-creation</p>"},{"location":"tests/constantinople/create2/test_recreate/#tests.constantinople.create2.test_recreate.test_recreate","title":"<code>test_recreate(blockchain_test, fork, recreate_on_separate_block)</code>","text":"<p>Test that the storage is cleared when a contract is first destructed then re-created using CREATE2.</p> Source code in <code>tests/constantinople/create2/test_recreate.py</code> <pre><code>@pytest.mark.parametrize(\"recreate_on_separate_block\", [True, False])\n@pytest.mark.valid_from(\"Constantinople\")\n@pytest.mark.valid_until(\"Shanghai\")\ndef test_recreate(\n    blockchain_test: BlockchainTestFiller, fork: Fork, recreate_on_separate_block: bool\n):\n    \"\"\"\n    Test that the storage is cleared when a contract is first destructed then re-created using\n    CREATE2.\n    \"\"\"\n    env = Environment()\n\n    creator_address = 0x100\n    creator_contract_code = Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE) + Op.CREATE2(\n        0, 0, Op.CALLDATASIZE, 0\n    )\n\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000),\n        creator_address: Account(\n            code=creator_contract_code,\n            nonce=1,\n        ),\n    }\n\n    deploy_code = Yul(\n        \"\"\"\n        {\n            switch callvalue()\n            case 0 {\n                selfdestruct(0)\n            }\n            default {\n                sstore(0, callvalue())\n            }\n        }\n        \"\"\",\n        fork=fork,\n    )\n\n    initcode = Initcode(deploy_code=deploy_code)\n\n    create_tx = Transaction(\n        nonce=0,\n        gas_limit=100000000,\n        to=creator_address,\n        data=initcode,\n    )\n\n    created_contract_address = compute_create2_address(\n        address=creator_address, salt=0, initcode=initcode\n    )\n\n    set_storage_tx = Transaction(\n        nonce=1,\n        gas_limit=100000000,\n        to=created_contract_address,\n        value=1,\n    )\n\n    blocks = [Block(txs=[create_tx, set_storage_tx])]\n\n    destruct_tx = Transaction(\n        nonce=2,\n        gas_limit=100000000,\n        to=created_contract_address,\n        value=0,\n    )\n\n    balance = 1\n    send_funds_tx = Transaction(\n        nonce=3,\n        gas_limit=100000000,\n        to=created_contract_address,\n        value=balance,\n    )\n\n    re_create_tx = Transaction(\n        nonce=4,\n        gas_limit=100000000,\n        to=creator_address,\n        data=initcode,\n    )\n\n    if recreate_on_separate_block:\n        blocks.append(Block(txs=[destruct_tx, send_funds_tx]))\n        blocks.append(Block(txs=[re_create_tx]))\n    else:\n        blocks.append(Block(txs=[destruct_tx, send_funds_tx, re_create_tx]))\n\n    post = {\n        created_contract_address: Account(\n            nonce=1,\n            balance=balance,\n            code=deploy_code,\n            storage={},\n        ),\n    }\n\n    blockchain_test(genesis_environment=env, pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/constantinople/create2/test_recreate/index/test_cases/","title":"Test Recreate - Test Cases","text":"<p>Test cases generated from <code>tests/constantinople/create2/test_recreate.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/constantinople/create2/test_recreate.py</code>:</p> <pre><code>test_recreate[fork_Constantinople-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_Constantinople-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_ConstantinopleFix-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_ConstantinopleFix-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_Istanbul-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_Istanbul-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_Berlin-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_Berlin-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_London-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_London-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_Paris-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_Paris-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_Paris-blockchain_test_hive-recreate_on_separate_block_True]\ntest_recreate[fork_Paris-blockchain_test_hive-recreate_on_separate_block_False]\ntest_recreate[fork_Shanghai-blockchain_test-recreate_on_separate_block_True]\ntest_recreate[fork_Shanghai-blockchain_test-recreate_on_separate_block_False]\ntest_recreate[fork_Shanghai-blockchain_test_hive-recreate_on_separate_block_True]\ntest_recreate[fork_Shanghai-blockchain_test_hive-recreate_on_separate_block_False]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/constantinople/create2/test_recreate.py\n</code></pre>"},{"location":"tests/frontier/","title":"Frontier","text":"<p>Documentation for <code>tests/frontier</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/frontier\n</code></pre> <p>Test cases for EVM functionality introduced in Frontier.</p>"},{"location":"tests/frontier/opcodes/","title":"Opcodes","text":"<p>Documentation for <code>tests/frontier/opcodes</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/frontier/opcodes\n</code></pre> <p>Test for opcodes introduced in Frontier.</p>"},{"location":"tests/frontier/opcodes/test_call_and_callcode_gas_calculation/","title":"Test Call And Callcode Gas Calculation","text":"<p>Documentation for <code>tests/frontier/opcodes/test_call_and_callcode_gas_calculation.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/frontier/opcodes/test_call_and_callcode_gas_calculation.py\n</code></pre> Tests the nested CALL/CALLCODE opcode gas consumption with a positive value transfer. <p>This test is designed to investigate an issue identified in EthereumJS, as reported in: ethereumjs/ethereumjs-monorepo#3194.</p> <p>The issue pertains to the incorrect gas calculation for CALL/CALLCODE operations with a positive value transfer, due to the pre-addition of the gas stipend (2300) to the currently available gas instead of adding it to the new call frame. This bug was specific to the case where insufficient gas was provided for the CALL/CALLCODE operation. Due to the pre-addition of the stipend to the currently available gas, the case for insufficient gas was not properly failing with an out-of-gas error.</p> <p>Test setup: Given two smart contract accounts, 0x0A (caller) and 0x0B (callee): 1) An arbitrary transaction calls into the contract 0x0A. 2) Contract 0x0A executes a CALL to contract 0x0B with a specific gas limit (X). 3) Contract 0x0B then attempts a CALL/CALLCODE to a non-existent contract 0x0C,    with a positive value transfer (activating the gas stipend). 4) If the gas X provided by contract 0x0A to 0x0B is sufficient, contract 0x0B    will push 0x01 onto the stack after returning to the call frame in 0x0A. Otherwise, it    should push 0x00, indicating the insufficiency of gas X (for the bug in EthereumJS, the    CALL/CALLCODE operation would return 0x01 due to the pre-addition of the gas stipend). 5) The resulting stack value is saved into contract 0x0A's storage, allowing us to    verify whether the provided gas was sufficient or insufficient.</p>"},{"location":"tests/frontier/opcodes/test_call_and_callcode_gas_calculation/#tests.frontier.opcodes.test_call_and_callcode_gas_calculation.test_value_transfer_gas_calculation","title":"<code>test_value_transfer_gas_calculation(state_test, pre, caller_tx, post)</code>","text":"<p>Tests the nested CALL/CALLCODE opcode gas consumption with a positive value transfer.</p> Source code in <code>tests/frontier/opcodes/test_call_and_callcode_gas_calculation.py</code> <pre><code>@pytest.mark.parametrize(\n    \"callee_opcode, caller_gas_limit, is_sufficient_gas\",\n    [\n        (Op.CALL, CALL_SUFFICIENT_GAS, True),\n        (Op.CALL, CALL_SUFFICIENT_GAS - 1, False),\n        (Op.CALLCODE, CALLCODE_SUFFICIENT_GAS, True),\n        (Op.CALLCODE, CALLCODE_SUFFICIENT_GAS - 1, False),\n    ],\n)\n@pytest.mark.valid_from(\"London\")\n@pytest.mark.valid_until(\"Shanghai\")\ndef test_value_transfer_gas_calculation(\n    state_test: StateTestFiller,\n    pre: Dict[str, Account],\n    caller_tx: Transaction,\n    post: Dict[str, Account],\n):\n    \"\"\"\n    Tests the nested CALL/CALLCODE opcode gas consumption with a positive value transfer.\n    \"\"\"\n    state_test(env=Environment(), pre=pre, post=post, tx=caller_tx)\n</code></pre>"},{"location":"tests/frontier/opcodes/test_call_and_callcode_gas_calculation/index/test_cases/","title":"Test Call And Callcode Gas Calculation - Test Cases","text":"<p>Test cases generated from <code>tests/frontier/opcodes/test_call_and_callcode_gas_calculation.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/frontier/opcodes/test_call_and_callcode_gas_calculation.py</code>:</p> <pre><code>test_value_transfer_gas_calculation[fork_London-blockchain_test-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_London-blockchain_test-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_London-blockchain_test-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_London-blockchain_test-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_London-state_test-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_London-state_test-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_London-state_test-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_London-state_test-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test_hive-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test_hive-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test_hive-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Paris-blockchain_test_hive-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Paris-state_test-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Paris-state_test-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Paris-state_test-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Paris-state_test-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test_hive-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test_hive-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test_hive-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Shanghai-blockchain_test_hive-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Shanghai-state_test-callee_opcode_CALL-caller_gas_limit_36620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Shanghai-state_test-callee_opcode_CALL-caller_gas_limit_36619-is_sufficient_gas_False]\ntest_value_transfer_gas_calculation[fork_Shanghai-state_test-callee_opcode_CALLCODE-caller_gas_limit_11620-is_sufficient_gas_True]\ntest_value_transfer_gas_calculation[fork_Shanghai-state_test-callee_opcode_CALLCODE-caller_gas_limit_11619-is_sufficient_gas_False]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/frontier/opcodes/test_call_and_callcode_gas_calculation.py\n</code></pre>"},{"location":"tests/frontier/opcodes/test_dup/","title":"Test DUP","text":"<p>Documentation for <code>tests/frontier/opcodes/test_dup.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/frontier/opcodes/test_dup.py\n</code></pre> Test DUP <p>Test the DUP opcodes.</p>"},{"location":"tests/frontier/opcodes/test_dup/#tests.frontier.opcodes.test_dup.test_dup","title":"<code>test_dup(state_test, fork, dup_opcode)</code>","text":"<p>Test the DUP1-DUP16 opcodes.</p> <p>note: Test case ported from:</p> <pre><code>- [ethereum/tests/GeneralStateTests/VMTests/vmTests/dup.json](https://github.com/ethereum/tests/blob/develop/GeneralStateTests/VMTests/vmTests/dup.json)\nby Ori Pomerantz.\n</code></pre> Source code in <code>tests/frontier/opcodes/test_dup.py</code> <pre><code>@pytest.mark.parametrize(\n    \"dup_opcode\",\n    [\n        Op.DUP1,\n        Op.DUP2,\n        Op.DUP3,\n        Op.DUP4,\n        Op.DUP5,\n        Op.DUP6,\n        Op.DUP7,\n        Op.DUP8,\n        Op.DUP9,\n        Op.DUP10,\n        Op.DUP11,\n        Op.DUP12,\n        Op.DUP13,\n        Op.DUP14,\n        Op.DUP15,\n        Op.DUP16,\n    ],\n    ids=lambda op: str(op),\n)\ndef test_dup(\n    state_test: StateTestFiller,\n    fork: str,\n    dup_opcode: Op,\n):\n    \"\"\"\n    Test the DUP1-DUP16 opcodes.\n\n    note: Test case ported from:\n\n        - [ethereum/tests/GeneralStateTests/VMTests/vmTests/dup.json](https://github.com/ethereum/tests/blob/develop/GeneralStateTests/VMTests/vmTests/dup.json)\n        by Ori Pomerantz.\n    \"\"\"  # noqa: E501\n    env = Environment()\n    pre = {TestAddress: Account(balance=1000000000000000000000)}\n    post = {}\n\n    account = Address(0x100)\n\n    # Push 0x00 - 0x10 onto the stack\n    account_code = b\"\".join([Op.PUSH1(i) for i in range(0x11)])\n\n    # Use the DUP opcode\n    account_code += dup_opcode\n\n    # Save each stack value into different keys in storage\n    account_code += b\"\".join([Op.PUSH1(i) + Op.SSTORE for i in range(0x11)])\n\n    pre[account] = Account(code=account_code)\n\n    tx = Transaction(\n        ty=0x0,\n        nonce=0,\n        to=account,\n        gas_limit=500000,\n        gas_price=10,\n        protected=False if fork in [Frontier, Homestead] else True,\n        data=\"\",\n    )\n\n    \"\"\"\n    Storage will be structured as follows:\n\n    0x00: 0x10-0x01 (Depending on DUP opcode)\n    0x01: 0x10\n    0x02: 0x0F\n    0x03: 0x0E\n    0x04: 0x0D\n    0x05: 0x0C\n    0x06: 0x0B\n    0x07: 0x0A\n    0x08: 0x09\n    0x09: 0x08\n    0x0A: 0x07\n    0x0B: 0x06\n    0x0C: 0x05\n    0x0D: 0x04\n    0x0E: 0x03\n    0x0F: 0x02\n    0x10: 0x01\n\n    DUP1 copies the first element of the stack (0x10).\n    DUP16 copies the 16th element of the stack (0x01).\n    \"\"\"\n    s: Storage.StorageDictType = dict(zip(range(1, 17), range(16, 0, -1)))\n    s[0] = 16 - (dup_opcode.int() - 0x80)\n\n    post[account] = Account(storage=s)\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/frontier/opcodes/test_dup/index/test_cases/","title":"Test DUP - Test Cases","text":"<p>Test cases generated from <code>tests/frontier/opcodes/test_dup.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/frontier/opcodes/test_dup.py</code>:</p> <pre><code>test_dup[fork_Frontier-blockchain_test-DUP1]\ntest_dup[fork_Frontier-blockchain_test-DUP2]\ntest_dup[fork_Frontier-blockchain_test-DUP3]\ntest_dup[fork_Frontier-blockchain_test-DUP4]\ntest_dup[fork_Frontier-blockchain_test-DUP5]\ntest_dup[fork_Frontier-blockchain_test-DUP6]\ntest_dup[fork_Frontier-blockchain_test-DUP7]\ntest_dup[fork_Frontier-blockchain_test-DUP8]\ntest_dup[fork_Frontier-blockchain_test-DUP9]\ntest_dup[fork_Frontier-blockchain_test-DUP10]\ntest_dup[fork_Frontier-blockchain_test-DUP11]\ntest_dup[fork_Frontier-blockchain_test-DUP12]\ntest_dup[fork_Frontier-blockchain_test-DUP13]\ntest_dup[fork_Frontier-blockchain_test-DUP14]\ntest_dup[fork_Frontier-blockchain_test-DUP15]\ntest_dup[fork_Frontier-blockchain_test-DUP16]\ntest_dup[fork_Frontier-state_test-DUP1]\ntest_dup[fork_Frontier-state_test-DUP2]\ntest_dup[fork_Frontier-state_test-DUP3]\ntest_dup[fork_Frontier-state_test-DUP4]\ntest_dup[fork_Frontier-state_test-DUP5]\ntest_dup[fork_Frontier-state_test-DUP6]\ntest_dup[fork_Frontier-state_test-DUP7]\ntest_dup[fork_Frontier-state_test-DUP8]\ntest_dup[fork_Frontier-state_test-DUP9]\ntest_dup[fork_Frontier-state_test-DUP10]\ntest_dup[fork_Frontier-state_test-DUP11]\ntest_dup[fork_Frontier-state_test-DUP12]\ntest_dup[fork_Frontier-state_test-DUP13]\ntest_dup[fork_Frontier-state_test-DUP14]\ntest_dup[fork_Frontier-state_test-DUP15]\ntest_dup[fork_Frontier-state_test-DUP16]\ntest_dup[fork_Homestead-blockchain_test-DUP1]\ntest_dup[fork_Homestead-blockchain_test-DUP2]\ntest_dup[fork_Homestead-blockchain_test-DUP3]\ntest_dup[fork_Homestead-blockchain_test-DUP4]\ntest_dup[fork_Homestead-blockchain_test-DUP5]\ntest_dup[fork_Homestead-blockchain_test-DUP6]\ntest_dup[fork_Homestead-blockchain_test-DUP7]\ntest_dup[fork_Homestead-blockchain_test-DUP8]\ntest_dup[fork_Homestead-blockchain_test-DUP9]\ntest_dup[fork_Homestead-blockchain_test-DUP10]\ntest_dup[fork_Homestead-blockchain_test-DUP11]\ntest_dup[fork_Homestead-blockchain_test-DUP12]\ntest_dup[fork_Homestead-blockchain_test-DUP13]\ntest_dup[fork_Homestead-blockchain_test-DUP14]\ntest_dup[fork_Homestead-blockchain_test-DUP15]\ntest_dup[fork_Homestead-blockchain_test-DUP16]\ntest_dup[fork_Homestead-state_test-DUP1]\ntest_dup[fork_Homestead-state_test-DUP2]\ntest_dup[fork_Homestead-state_test-DUP3]\ntest_dup[fork_Homestead-state_test-DUP4]\ntest_dup[fork_Homestead-state_test-DUP5]\ntest_dup[fork_Homestead-state_test-DUP6]\ntest_dup[fork_Homestead-state_test-DUP7]\ntest_dup[fork_Homestead-state_test-DUP8]\ntest_dup[fork_Homestead-state_test-DUP9]\ntest_dup[fork_Homestead-state_test-DUP10]\ntest_dup[fork_Homestead-state_test-DUP11]\ntest_dup[fork_Homestead-state_test-DUP12]\ntest_dup[fork_Homestead-state_test-DUP13]\ntest_dup[fork_Homestead-state_test-DUP14]\ntest_dup[fork_Homestead-state_test-DUP15]\ntest_dup[fork_Homestead-state_test-DUP16]\ntest_dup[fork_Byzantium-blockchain_test-DUP1]\ntest_dup[fork_Byzantium-blockchain_test-DUP2]\ntest_dup[fork_Byzantium-blockchain_test-DUP3]\ntest_dup[fork_Byzantium-blockchain_test-DUP4]\ntest_dup[fork_Byzantium-blockchain_test-DUP5]\ntest_dup[fork_Byzantium-blockchain_test-DUP6]\ntest_dup[fork_Byzantium-blockchain_test-DUP7]\ntest_dup[fork_Byzantium-blockchain_test-DUP8]\ntest_dup[fork_Byzantium-blockchain_test-DUP9]\ntest_dup[fork_Byzantium-blockchain_test-DUP10]\ntest_dup[fork_Byzantium-blockchain_test-DUP11]\ntest_dup[fork_Byzantium-blockchain_test-DUP12]\ntest_dup[fork_Byzantium-blockchain_test-DUP13]\ntest_dup[fork_Byzantium-blockchain_test-DUP14]\ntest_dup[fork_Byzantium-blockchain_test-DUP15]\ntest_dup[fork_Byzantium-blockchain_test-DUP16]\ntest_dup[fork_Byzantium-state_test-DUP1]\ntest_dup[fork_Byzantium-state_test-DUP2]\ntest_dup[fork_Byzantium-state_test-DUP3]\ntest_dup[fork_Byzantium-state_test-DUP4]\ntest_dup[fork_Byzantium-state_test-DUP5]\ntest_dup[fork_Byzantium-state_test-DUP6]\ntest_dup[fork_Byzantium-state_test-DUP7]\ntest_dup[fork_Byzantium-state_test-DUP8]\ntest_dup[fork_Byzantium-state_test-DUP9]\ntest_dup[fork_Byzantium-state_test-DUP10]\ntest_dup[fork_Byzantium-state_test-DUP11]\ntest_dup[fork_Byzantium-state_test-DUP12]\ntest_dup[fork_Byzantium-state_test-DUP13]\ntest_dup[fork_Byzantium-state_test-DUP14]\ntest_dup[fork_Byzantium-state_test-DUP15]\ntest_dup[fork_Byzantium-state_test-DUP16]\ntest_dup[fork_Constantinople-blockchain_test-DUP1]\ntest_dup[fork_Constantinople-blockchain_test-DUP2]\ntest_dup[fork_Constantinople-blockchain_test-DUP3]\ntest_dup[fork_Constantinople-blockchain_test-DUP4]\ntest_dup[fork_Constantinople-blockchain_test-DUP5]\ntest_dup[fork_Constantinople-blockchain_test-DUP6]\ntest_dup[fork_Constantinople-blockchain_test-DUP7]\ntest_dup[fork_Constantinople-blockchain_test-DUP8]\ntest_dup[fork_Constantinople-blockchain_test-DUP9]\ntest_dup[fork_Constantinople-blockchain_test-DUP10]\ntest_dup[fork_Constantinople-blockchain_test-DUP11]\ntest_dup[fork_Constantinople-blockchain_test-DUP12]\ntest_dup[fork_Constantinople-blockchain_test-DUP13]\ntest_dup[fork_Constantinople-blockchain_test-DUP14]\ntest_dup[fork_Constantinople-blockchain_test-DUP15]\ntest_dup[fork_Constantinople-blockchain_test-DUP16]\ntest_dup[fork_Constantinople-state_test-DUP1]\ntest_dup[fork_Constantinople-state_test-DUP2]\ntest_dup[fork_Constantinople-state_test-DUP3]\ntest_dup[fork_Constantinople-state_test-DUP4]\ntest_dup[fork_Constantinople-state_test-DUP5]\ntest_dup[fork_Constantinople-state_test-DUP6]\ntest_dup[fork_Constantinople-state_test-DUP7]\ntest_dup[fork_Constantinople-state_test-DUP8]\ntest_dup[fork_Constantinople-state_test-DUP9]\ntest_dup[fork_Constantinople-state_test-DUP10]\ntest_dup[fork_Constantinople-state_test-DUP11]\ntest_dup[fork_Constantinople-state_test-DUP12]\ntest_dup[fork_Constantinople-state_test-DUP13]\ntest_dup[fork_Constantinople-state_test-DUP14]\ntest_dup[fork_Constantinople-state_test-DUP15]\ntest_dup[fork_Constantinople-state_test-DUP16]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP1]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP2]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP3]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP4]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP5]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP6]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP7]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP8]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP9]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP10]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP11]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP12]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP13]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP14]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP15]\ntest_dup[fork_ConstantinopleFix-blockchain_test-DUP16]\ntest_dup[fork_ConstantinopleFix-state_test-DUP1]\ntest_dup[fork_ConstantinopleFix-state_test-DUP2]\ntest_dup[fork_ConstantinopleFix-state_test-DUP3]\ntest_dup[fork_ConstantinopleFix-state_test-DUP4]\ntest_dup[fork_ConstantinopleFix-state_test-DUP5]\ntest_dup[fork_ConstantinopleFix-state_test-DUP6]\ntest_dup[fork_ConstantinopleFix-state_test-DUP7]\ntest_dup[fork_ConstantinopleFix-state_test-DUP8]\ntest_dup[fork_ConstantinopleFix-state_test-DUP9]\ntest_dup[fork_ConstantinopleFix-state_test-DUP10]\ntest_dup[fork_ConstantinopleFix-state_test-DUP11]\ntest_dup[fork_ConstantinopleFix-state_test-DUP12]\ntest_dup[fork_ConstantinopleFix-state_test-DUP13]\ntest_dup[fork_ConstantinopleFix-state_test-DUP14]\ntest_dup[fork_ConstantinopleFix-state_test-DUP15]\ntest_dup[fork_ConstantinopleFix-state_test-DUP16]\ntest_dup[fork_Istanbul-blockchain_test-DUP1]\ntest_dup[fork_Istanbul-blockchain_test-DUP2]\ntest_dup[fork_Istanbul-blockchain_test-DUP3]\ntest_dup[fork_Istanbul-blockchain_test-DUP4]\ntest_dup[fork_Istanbul-blockchain_test-DUP5]\ntest_dup[fork_Istanbul-blockchain_test-DUP6]\ntest_dup[fork_Istanbul-blockchain_test-DUP7]\ntest_dup[fork_Istanbul-blockchain_test-DUP8]\ntest_dup[fork_Istanbul-blockchain_test-DUP9]\ntest_dup[fork_Istanbul-blockchain_test-DUP10]\ntest_dup[fork_Istanbul-blockchain_test-DUP11]\ntest_dup[fork_Istanbul-blockchain_test-DUP12]\ntest_dup[fork_Istanbul-blockchain_test-DUP13]\ntest_dup[fork_Istanbul-blockchain_test-DUP14]\ntest_dup[fork_Istanbul-blockchain_test-DUP15]\ntest_dup[fork_Istanbul-blockchain_test-DUP16]\ntest_dup[fork_Istanbul-state_test-DUP1]\ntest_dup[fork_Istanbul-state_test-DUP2]\ntest_dup[fork_Istanbul-state_test-DUP3]\ntest_dup[fork_Istanbul-state_test-DUP4]\ntest_dup[fork_Istanbul-state_test-DUP5]\ntest_dup[fork_Istanbul-state_test-DUP6]\ntest_dup[fork_Istanbul-state_test-DUP7]\ntest_dup[fork_Istanbul-state_test-DUP8]\ntest_dup[fork_Istanbul-state_test-DUP9]\ntest_dup[fork_Istanbul-state_test-DUP10]\ntest_dup[fork_Istanbul-state_test-DUP11]\ntest_dup[fork_Istanbul-state_test-DUP12]\ntest_dup[fork_Istanbul-state_test-DUP13]\ntest_dup[fork_Istanbul-state_test-DUP14]\ntest_dup[fork_Istanbul-state_test-DUP15]\ntest_dup[fork_Istanbul-state_test-DUP16]\ntest_dup[fork_Berlin-blockchain_test-DUP1]\ntest_dup[fork_Berlin-blockchain_test-DUP2]\ntest_dup[fork_Berlin-blockchain_test-DUP3]\ntest_dup[fork_Berlin-blockchain_test-DUP4]\ntest_dup[fork_Berlin-blockchain_test-DUP5]\ntest_dup[fork_Berlin-blockchain_test-DUP6]\ntest_dup[fork_Berlin-blockchain_test-DUP7]\ntest_dup[fork_Berlin-blockchain_test-DUP8]\ntest_dup[fork_Berlin-blockchain_test-DUP9]\ntest_dup[fork_Berlin-blockchain_test-DUP10]\ntest_dup[fork_Berlin-blockchain_test-DUP11]\ntest_dup[fork_Berlin-blockchain_test-DUP12]\ntest_dup[fork_Berlin-blockchain_test-DUP13]\ntest_dup[fork_Berlin-blockchain_test-DUP14]\ntest_dup[fork_Berlin-blockchain_test-DUP15]\ntest_dup[fork_Berlin-blockchain_test-DUP16]\ntest_dup[fork_Berlin-state_test-DUP1]\ntest_dup[fork_Berlin-state_test-DUP2]\ntest_dup[fork_Berlin-state_test-DUP3]\ntest_dup[fork_Berlin-state_test-DUP4]\ntest_dup[fork_Berlin-state_test-DUP5]\ntest_dup[fork_Berlin-state_test-DUP6]\ntest_dup[fork_Berlin-state_test-DUP7]\ntest_dup[fork_Berlin-state_test-DUP8]\ntest_dup[fork_Berlin-state_test-DUP9]\ntest_dup[fork_Berlin-state_test-DUP10]\ntest_dup[fork_Berlin-state_test-DUP11]\ntest_dup[fork_Berlin-state_test-DUP12]\ntest_dup[fork_Berlin-state_test-DUP13]\ntest_dup[fork_Berlin-state_test-DUP14]\ntest_dup[fork_Berlin-state_test-DUP15]\ntest_dup[fork_Berlin-state_test-DUP16]\ntest_dup[fork_London-blockchain_test-DUP1]\ntest_dup[fork_London-blockchain_test-DUP2]\ntest_dup[fork_London-blockchain_test-DUP3]\ntest_dup[fork_London-blockchain_test-DUP4]\ntest_dup[fork_London-blockchain_test-DUP5]\ntest_dup[fork_London-blockchain_test-DUP6]\ntest_dup[fork_London-blockchain_test-DUP7]\ntest_dup[fork_London-blockchain_test-DUP8]\ntest_dup[fork_London-blockchain_test-DUP9]\ntest_dup[fork_London-blockchain_test-DUP10]\ntest_dup[fork_London-blockchain_test-DUP11]\ntest_dup[fork_London-blockchain_test-DUP12]\ntest_dup[fork_London-blockchain_test-DUP13]\ntest_dup[fork_London-blockchain_test-DUP14]\ntest_dup[fork_London-blockchain_test-DUP15]\ntest_dup[fork_London-blockchain_test-DUP16]\ntest_dup[fork_London-state_test-DUP1]\ntest_dup[fork_London-state_test-DUP2]\ntest_dup[fork_London-state_test-DUP3]\ntest_dup[fork_London-state_test-DUP4]\ntest_dup[fork_London-state_test-DUP5]\ntest_dup[fork_London-state_test-DUP6]\ntest_dup[fork_London-state_test-DUP7]\ntest_dup[fork_London-state_test-DUP8]\ntest_dup[fork_London-state_test-DUP9]\ntest_dup[fork_London-state_test-DUP10]\ntest_dup[fork_London-state_test-DUP11]\ntest_dup[fork_London-state_test-DUP12]\ntest_dup[fork_London-state_test-DUP13]\ntest_dup[fork_London-state_test-DUP14]\ntest_dup[fork_London-state_test-DUP15]\ntest_dup[fork_London-state_test-DUP16]\ntest_dup[fork_Paris-blockchain_test-DUP1]\ntest_dup[fork_Paris-blockchain_test-DUP2]\ntest_dup[fork_Paris-blockchain_test-DUP3]\ntest_dup[fork_Paris-blockchain_test-DUP4]\ntest_dup[fork_Paris-blockchain_test-DUP5]\ntest_dup[fork_Paris-blockchain_test-DUP6]\ntest_dup[fork_Paris-blockchain_test-DUP7]\ntest_dup[fork_Paris-blockchain_test-DUP8]\ntest_dup[fork_Paris-blockchain_test-DUP9]\ntest_dup[fork_Paris-blockchain_test-DUP10]\ntest_dup[fork_Paris-blockchain_test-DUP11]\ntest_dup[fork_Paris-blockchain_test-DUP12]\ntest_dup[fork_Paris-blockchain_test-DUP13]\ntest_dup[fork_Paris-blockchain_test-DUP14]\ntest_dup[fork_Paris-blockchain_test-DUP15]\ntest_dup[fork_Paris-blockchain_test-DUP16]\ntest_dup[fork_Paris-blockchain_test_hive-DUP1]\ntest_dup[fork_Paris-blockchain_test_hive-DUP2]\ntest_dup[fork_Paris-blockchain_test_hive-DUP3]\ntest_dup[fork_Paris-blockchain_test_hive-DUP4]\ntest_dup[fork_Paris-blockchain_test_hive-DUP5]\ntest_dup[fork_Paris-blockchain_test_hive-DUP6]\ntest_dup[fork_Paris-blockchain_test_hive-DUP7]\ntest_dup[fork_Paris-blockchain_test_hive-DUP8]\ntest_dup[fork_Paris-blockchain_test_hive-DUP9]\ntest_dup[fork_Paris-blockchain_test_hive-DUP10]\ntest_dup[fork_Paris-blockchain_test_hive-DUP11]\ntest_dup[fork_Paris-blockchain_test_hive-DUP12]\ntest_dup[fork_Paris-blockchain_test_hive-DUP13]\ntest_dup[fork_Paris-blockchain_test_hive-DUP14]\ntest_dup[fork_Paris-blockchain_test_hive-DUP15]\ntest_dup[fork_Paris-blockchain_test_hive-DUP16]\ntest_dup[fork_Paris-state_test-DUP1]\ntest_dup[fork_Paris-state_test-DUP2]\ntest_dup[fork_Paris-state_test-DUP3]\ntest_dup[fork_Paris-state_test-DUP4]\ntest_dup[fork_Paris-state_test-DUP5]\ntest_dup[fork_Paris-state_test-DUP6]\ntest_dup[fork_Paris-state_test-DUP7]\ntest_dup[fork_Paris-state_test-DUP8]\ntest_dup[fork_Paris-state_test-DUP9]\ntest_dup[fork_Paris-state_test-DUP10]\ntest_dup[fork_Paris-state_test-DUP11]\ntest_dup[fork_Paris-state_test-DUP12]\ntest_dup[fork_Paris-state_test-DUP13]\ntest_dup[fork_Paris-state_test-DUP14]\ntest_dup[fork_Paris-state_test-DUP15]\ntest_dup[fork_Paris-state_test-DUP16]\ntest_dup[fork_Shanghai-blockchain_test-DUP1]\ntest_dup[fork_Shanghai-blockchain_test-DUP2]\ntest_dup[fork_Shanghai-blockchain_test-DUP3]\ntest_dup[fork_Shanghai-blockchain_test-DUP4]\ntest_dup[fork_Shanghai-blockchain_test-DUP5]\ntest_dup[fork_Shanghai-blockchain_test-DUP6]\ntest_dup[fork_Shanghai-blockchain_test-DUP7]\ntest_dup[fork_Shanghai-blockchain_test-DUP8]\ntest_dup[fork_Shanghai-blockchain_test-DUP9]\ntest_dup[fork_Shanghai-blockchain_test-DUP10]\ntest_dup[fork_Shanghai-blockchain_test-DUP11]\ntest_dup[fork_Shanghai-blockchain_test-DUP12]\ntest_dup[fork_Shanghai-blockchain_test-DUP13]\ntest_dup[fork_Shanghai-blockchain_test-DUP14]\ntest_dup[fork_Shanghai-blockchain_test-DUP15]\ntest_dup[fork_Shanghai-blockchain_test-DUP16]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP1]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP2]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP3]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP4]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP5]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP6]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP7]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP8]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP9]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP10]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP11]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP12]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP13]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP14]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP15]\ntest_dup[fork_Shanghai-blockchain_test_hive-DUP16]\ntest_dup[fork_Shanghai-state_test-DUP1]\ntest_dup[fork_Shanghai-state_test-DUP2]\ntest_dup[fork_Shanghai-state_test-DUP3]\ntest_dup[fork_Shanghai-state_test-DUP4]\ntest_dup[fork_Shanghai-state_test-DUP5]\ntest_dup[fork_Shanghai-state_test-DUP6]\ntest_dup[fork_Shanghai-state_test-DUP7]\ntest_dup[fork_Shanghai-state_test-DUP8]\ntest_dup[fork_Shanghai-state_test-DUP9]\ntest_dup[fork_Shanghai-state_test-DUP10]\ntest_dup[fork_Shanghai-state_test-DUP11]\ntest_dup[fork_Shanghai-state_test-DUP12]\ntest_dup[fork_Shanghai-state_test-DUP13]\ntest_dup[fork_Shanghai-state_test-DUP14]\ntest_dup[fork_Shanghai-state_test-DUP15]\ntest_dup[fork_Shanghai-state_test-DUP16]\ntest_dup[fork_Cancun-blockchain_test-DUP1]\ntest_dup[fork_Cancun-blockchain_test-DUP2]\ntest_dup[fork_Cancun-blockchain_test-DUP3]\ntest_dup[fork_Cancun-blockchain_test-DUP4]\ntest_dup[fork_Cancun-blockchain_test-DUP5]\ntest_dup[fork_Cancun-blockchain_test-DUP6]\ntest_dup[fork_Cancun-blockchain_test-DUP7]\ntest_dup[fork_Cancun-blockchain_test-DUP8]\ntest_dup[fork_Cancun-blockchain_test-DUP9]\ntest_dup[fork_Cancun-blockchain_test-DUP10]\ntest_dup[fork_Cancun-blockchain_test-DUP11]\ntest_dup[fork_Cancun-blockchain_test-DUP12]\ntest_dup[fork_Cancun-blockchain_test-DUP13]\ntest_dup[fork_Cancun-blockchain_test-DUP14]\ntest_dup[fork_Cancun-blockchain_test-DUP15]\ntest_dup[fork_Cancun-blockchain_test-DUP16]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP1]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP2]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP3]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP4]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP5]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP6]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP7]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP8]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP9]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP10]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP11]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP12]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP13]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP14]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP15]\ntest_dup[fork_Cancun-blockchain_test_hive-DUP16]\ntest_dup[fork_Cancun-state_test-DUP1]\ntest_dup[fork_Cancun-state_test-DUP2]\ntest_dup[fork_Cancun-state_test-DUP3]\ntest_dup[fork_Cancun-state_test-DUP4]\ntest_dup[fork_Cancun-state_test-DUP5]\ntest_dup[fork_Cancun-state_test-DUP6]\ntest_dup[fork_Cancun-state_test-DUP7]\ntest_dup[fork_Cancun-state_test-DUP8]\ntest_dup[fork_Cancun-state_test-DUP9]\ntest_dup[fork_Cancun-state_test-DUP10]\ntest_dup[fork_Cancun-state_test-DUP11]\ntest_dup[fork_Cancun-state_test-DUP12]\ntest_dup[fork_Cancun-state_test-DUP13]\ntest_dup[fork_Cancun-state_test-DUP14]\ntest_dup[fork_Cancun-state_test-DUP15]\ntest_dup[fork_Cancun-state_test-DUP16]\ntest_dup[fork_Prague-blockchain_test-DUP1]\ntest_dup[fork_Prague-blockchain_test-DUP2]\ntest_dup[fork_Prague-blockchain_test-DUP3]\ntest_dup[fork_Prague-blockchain_test-DUP4]\ntest_dup[fork_Prague-blockchain_test-DUP5]\ntest_dup[fork_Prague-blockchain_test-DUP6]\ntest_dup[fork_Prague-blockchain_test-DUP7]\ntest_dup[fork_Prague-blockchain_test-DUP8]\ntest_dup[fork_Prague-blockchain_test-DUP9]\ntest_dup[fork_Prague-blockchain_test-DUP10]\ntest_dup[fork_Prague-blockchain_test-DUP11]\ntest_dup[fork_Prague-blockchain_test-DUP12]\ntest_dup[fork_Prague-blockchain_test-DUP13]\ntest_dup[fork_Prague-blockchain_test-DUP14]\ntest_dup[fork_Prague-blockchain_test-DUP15]\ntest_dup[fork_Prague-blockchain_test-DUP16]\ntest_dup[fork_Prague-blockchain_test_hive-DUP1]\ntest_dup[fork_Prague-blockchain_test_hive-DUP2]\ntest_dup[fork_Prague-blockchain_test_hive-DUP3]\ntest_dup[fork_Prague-blockchain_test_hive-DUP4]\ntest_dup[fork_Prague-blockchain_test_hive-DUP5]\ntest_dup[fork_Prague-blockchain_test_hive-DUP6]\ntest_dup[fork_Prague-blockchain_test_hive-DUP7]\ntest_dup[fork_Prague-blockchain_test_hive-DUP8]\ntest_dup[fork_Prague-blockchain_test_hive-DUP9]\ntest_dup[fork_Prague-blockchain_test_hive-DUP10]\ntest_dup[fork_Prague-blockchain_test_hive-DUP11]\ntest_dup[fork_Prague-blockchain_test_hive-DUP12]\ntest_dup[fork_Prague-blockchain_test_hive-DUP13]\ntest_dup[fork_Prague-blockchain_test_hive-DUP14]\ntest_dup[fork_Prague-blockchain_test_hive-DUP15]\ntest_dup[fork_Prague-blockchain_test_hive-DUP16]\ntest_dup[fork_Prague-state_test-DUP1]\ntest_dup[fork_Prague-state_test-DUP2]\ntest_dup[fork_Prague-state_test-DUP3]\ntest_dup[fork_Prague-state_test-DUP4]\ntest_dup[fork_Prague-state_test-DUP5]\ntest_dup[fork_Prague-state_test-DUP6]\ntest_dup[fork_Prague-state_test-DUP7]\ntest_dup[fork_Prague-state_test-DUP8]\ntest_dup[fork_Prague-state_test-DUP9]\ntest_dup[fork_Prague-state_test-DUP10]\ntest_dup[fork_Prague-state_test-DUP11]\ntest_dup[fork_Prague-state_test-DUP12]\ntest_dup[fork_Prague-state_test-DUP13]\ntest_dup[fork_Prague-state_test-DUP14]\ntest_dup[fork_Prague-state_test-DUP15]\ntest_dup[fork_Prague-state_test-DUP16]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/frontier/opcodes/test_dup.py\n</code></pre>"},{"location":"tests/frontier/opcodes/test_selfdestruct/","title":"Test Selfdestruct","text":"<p>Documentation for <code>tests/frontier/opcodes/test_selfdestruct.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/frontier/opcodes/test_selfdestruct.py\n</code></pre> <p>Test the SELFDESTRUCT opcode.</p>"},{"location":"tests/frontier/opcodes/test_selfdestruct/#tests.frontier.opcodes.test_selfdestruct.test_double_kill","title":"<code>test_double_kill(blockchain_test)</code>","text":"<p>Test that when two transactions attempt to destruct a contract, the second transaction actually resurrects the contract as an empty account (prior to Spurious Dragon).</p> Source code in <code>tests/frontier/opcodes/test_selfdestruct.py</code> <pre><code>@pytest.mark.valid_from(\"Frontier\")\n@pytest.mark.valid_until(\"Homestead\")\ndef test_double_kill(blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Test that when two transactions attempt to destruct a contract,\n    the second transaction actually resurrects the contract as an empty account (prior to Spurious\n    Dragon).\n    \"\"\"\n    env = Environment()\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000),\n    }\n\n    deploy_code = Op.SELFDESTRUCT(Op.ADDRESS)\n\n    initcode = Initcode(deploy_code=deploy_code)\n\n    create_tx = Transaction(\n        nonce=0,\n        gas_limit=100000000,\n        protected=False,\n        to=None,\n        data=initcode,\n    )\n\n    created_contract_address = compute_create_address(address=TestAddress, nonce=0)\n\n    block_1 = Block(txs=[create_tx])\n\n    first_kill = Transaction(\n        nonce=1,\n        gas_limit=100000000,\n        protected=False,\n        to=created_contract_address,\n    )\n\n    second_kill = Transaction(\n        nonce=2,\n        gas_limit=100000000,\n        protected=False,\n        to=created_contract_address,\n    )\n\n    block_2 = Block(txs=[first_kill, second_kill])\n\n    post = {\n        created_contract_address: Account(\n            nonce=0,\n            balance=0,\n            code=b\"\",\n            storage={},\n        ),\n    }\n\n    blockchain_test(genesis_environment=env, pre=pre, post=post, blocks=[block_1, block_2])\n</code></pre>"},{"location":"tests/frontier/opcodes/test_selfdestruct/index/test_cases/","title":"Test Selfdestruct - Test Cases","text":"<p>Test cases generated from <code>tests/frontier/opcodes/test_selfdestruct.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/frontier/opcodes/test_selfdestruct.py</code>:</p> <pre><code>test_double_kill[fork_Frontier-blockchain_test]\ntest_double_kill[fork_Homestead-blockchain_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/frontier/opcodes/test_selfdestruct.py\n</code></pre>"},{"location":"tests/homestead/","title":"Homestead","text":"<p>Documentation for <code>tests/homestead</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/homestead\n</code></pre> <p>Test cases for EVM functionality introduced in Homestead.</p>"},{"location":"tests/homestead/yul/","title":"Yul","text":"<p>Documentation for <code>tests/homestead/yul</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/homestead/yul\n</code></pre> <p>Tests using Yul source for contracts.</p>"},{"location":"tests/homestead/yul/test_yul_example/","title":"Test Yul Example","text":"<p>Documentation for <code>tests/homestead/yul/test_yul_example.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/homestead/yul/test_yul_example.py\n</code></pre> <p>Test Yul Source Code Examples</p>"},{"location":"tests/homestead/yul/test_yul_example/#tests.homestead.yul.test_yul_example.test_yul","title":"<code>test_yul(state_test, yul, fork)</code>","text":"<p>Test YUL compiled bytecode.</p> Source code in <code>tests/homestead/yul/test_yul_example.py</code> <pre><code>@pytest.mark.valid_from(\"Homestead\")\ndef test_yul(state_test: StateTestFiller, yul: YulCompiler, fork: Fork):\n    \"\"\"\n    Test YUL compiled bytecode.\n    \"\"\"\n    env = Environment()\n\n    pre = {\n        \"0x1000000000000000000000000000000000000000\": Account(\n            balance=0x0BA1A9CE0BA1A9CE,\n            code=yul(\n                \"\"\"\n            {\n                function f(a, b) -&gt; c {\n                    c := add(a, b)\n                }\n\n                sstore(0, f(1, 2))\n                return(0, 32)\n            }\n            \"\"\"\n            ),\n        ),\n        TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE),\n    }\n\n    tx = Transaction(\n        ty=0x0,\n        chain_id=0x01,\n        nonce=0,\n        to=\"0x1000000000000000000000000000000000000000\",\n        gas_limit=500000,\n        gas_price=10,\n        protected=False if fork in [Frontier, Homestead] else True,\n    )\n\n    post = {\n        \"0x1000000000000000000000000000000000000000\": Account(\n            storage={\n                0x00: 0x03,\n            },\n        ),\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/homestead/yul/test_yul_example/index/test_cases/","title":"Test Yul Example - Test Cases","text":"<p>Test cases generated from <code>tests/homestead/yul/test_yul_example.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/homestead/yul/test_yul_example.py</code>:</p> <pre><code>test_yul[fork_Homestead-blockchain_test]\ntest_yul[fork_Homestead-state_test]\ntest_yul[fork_Byzantium-blockchain_test]\ntest_yul[fork_Byzantium-state_test]\ntest_yul[fork_Constantinople-blockchain_test]\ntest_yul[fork_Constantinople-state_test]\ntest_yul[fork_ConstantinopleFix-blockchain_test]\ntest_yul[fork_ConstantinopleFix-state_test]\ntest_yul[fork_Istanbul-blockchain_test]\ntest_yul[fork_Istanbul-state_test]\ntest_yul[fork_Berlin-blockchain_test]\ntest_yul[fork_Berlin-state_test]\ntest_yul[fork_London-blockchain_test]\ntest_yul[fork_London-state_test]\ntest_yul[fork_Paris-blockchain_test]\ntest_yul[fork_Paris-blockchain_test_hive]\ntest_yul[fork_Paris-state_test]\ntest_yul[fork_Shanghai-blockchain_test]\ntest_yul[fork_Shanghai-blockchain_test_hive]\ntest_yul[fork_Shanghai-state_test]\ntest_yul[fork_Cancun-blockchain_test]\ntest_yul[fork_Cancun-blockchain_test_hive]\ntest_yul[fork_Cancun-state_test]\ntest_yul[fork_Prague-blockchain_test]\ntest_yul[fork_Prague-blockchain_test_hive]\ntest_yul[fork_Prague-state_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/homestead/yul/test_yul_example.py\n</code></pre>"},{"location":"tests/istanbul/","title":"Istanbul","text":"<p>Documentation for <code>tests/istanbul</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/istanbul\n</code></pre> <p>Test cases for EVM functionality introduced in Istanbul.</p>"},{"location":"tests/istanbul/eip1344_chainid/","title":"EIP-1344 CHAINID","text":"<p>Documentation for <code>tests/istanbul/eip1344_chainid</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/istanbul/eip1344_chainid\n</code></pre> Tests EIP-1344: ChainID Opcode <p>Test cases for EIP-1344: ChainID Opcode.</p>"},{"location":"tests/istanbul/eip1344_chainid/test_chainid/","title":"Test CHAINID","text":"<p>Documentation for <code>tests/istanbul/eip1344_chainid/test_chainid.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/istanbul/eip1344_chainid/test_chainid.py\n</code></pre> Tests EIP-1344: CHAINID opcode <p>Test cases for EIP-1344: CHAINID opcode.</p>"},{"location":"tests/istanbul/eip1344_chainid/test_chainid/#tests.istanbul.eip1344_chainid.test_chainid.test_chainid","title":"<code>test_chainid(state_test)</code>","text":"<p>Test CHAINID opcode.</p> Source code in <code>tests/istanbul/eip1344_chainid/test_chainid.py</code> <pre><code>@pytest.mark.valid_from(\"Istanbul\")\ndef test_chainid(state_test: StateTestFiller):\n    \"\"\"\n    Test CHAINID opcode.\n    \"\"\"\n    env = Environment(\n        fee_recipient=\"0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba\",\n        difficulty=0x20000,\n        gas_limit=10000000000,\n        number=1,\n        timestamp=1000,\n    )\n\n    pre = {\n        Address(0x100): Account(code=Op.SSTORE(1, Op.CHAINID) + Op.STOP),\n        TestAddress: Account(balance=1000000000000000000000),\n    }\n\n    tx = Transaction(\n        ty=0x0,\n        chain_id=0x01,\n        nonce=0,\n        to=Address(0x100),\n        gas_limit=100000000,\n        gas_price=10,\n    )\n\n    post = {\n        Address(0x100): Account(code=\"0x4660015500\", storage={\"0x01\": \"0x01\"}),\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre>"},{"location":"tests/istanbul/eip1344_chainid/test_chainid/index/test_cases/","title":"Test CHAINID - Test Cases","text":"<p>Test cases generated from <code>tests/istanbul/eip1344_chainid/test_chainid.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/istanbul/eip1344_chainid/test_chainid.py</code>:</p> <pre><code>test_chainid[fork_Istanbul-blockchain_test]\ntest_chainid[fork_Istanbul-state_test]\ntest_chainid[fork_Berlin-blockchain_test]\ntest_chainid[fork_Berlin-state_test]\ntest_chainid[fork_London-blockchain_test]\ntest_chainid[fork_London-state_test]\ntest_chainid[fork_Paris-blockchain_test]\ntest_chainid[fork_Paris-blockchain_test_hive]\ntest_chainid[fork_Paris-state_test]\ntest_chainid[fork_Shanghai-blockchain_test]\ntest_chainid[fork_Shanghai-blockchain_test_hive]\ntest_chainid[fork_Shanghai-state_test]\ntest_chainid[fork_Cancun-blockchain_test]\ntest_chainid[fork_Cancun-blockchain_test_hive]\ntest_chainid[fork_Cancun-state_test]\ntest_chainid[fork_Prague-blockchain_test]\ntest_chainid[fork_Prague-blockchain_test_hive]\ntest_chainid[fork_Prague-state_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/istanbul/eip1344_chainid/test_chainid.py\n</code></pre>"},{"location":"tests/paris/","title":"Paris","text":"<p>Documentation for <code>tests/paris</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/paris\n</code></pre> <p>Test cases for EVM functionality introduced in Paris (Merge).</p>"},{"location":"tests/paris/security/","title":"Security","text":"<p>Documentation for <code>tests/paris/security</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/paris/security\n</code></pre> <p>Ethereum execution client tests related to security issues.</p>"},{"location":"tests/paris/security/test_selfdestruct_balance_bug/","title":"Test Selfdestruct Balance Bug","text":"<p>Documentation for <code>tests/paris/security/test_selfdestruct_balance_bug.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/paris/security/test_selfdestruct_balance_bug.py\n</code></pre> Tests the Consensus Flaw During Block Processing related to SELFDESTRUCT <p>Tests the consensus-vulnerability reported in go-ethereum/security/advisories/GHSA-xw37-57qp-9mm4.</p> <p>To reproduce the issue with this test case:</p> <ol> <li>Fill the test with the most recent geth evm version.</li> <li>Run the fixture output within a vulnerable geth version: v1.9.20 &gt; geth &gt;=     v1.9.4.</li> </ol>"},{"location":"tests/paris/security/test_selfdestruct_balance_bug/#tests.paris.security.test_selfdestruct_balance_bug.test_tx_selfdestruct_balance_bug","title":"<code>test_tx_selfdestruct_balance_bug(blockchain_test, yul)</code>","text":"<p>Test that the vulnerability is not present by checking the balance of the <code>0xaa</code> contract after executing specific transactions:</p> <ol> <li> <p>Start with contract <code>0xaa</code> which has initial balance of 3 wei.     <code>0xaa</code> contract code simply performs a self-destruct to itself.</p> </li> <li> <p>Send a transaction (tx 1) to invoke caller contract <code>0xcc</code> (which     has a balance of 1 wei), which in turn invokes <code>0xaa</code> with a 1 wei call.</p> </li> <li> <p>Store the balance of <code>0xaa</code> after the first transaction     is processed. <code>0xaa</code> self-destructed. Expected outcome: 0 wei.</p> </li> <li> <p>Send another transaction (tx 2) to call 0xaa with 5 wei.</p> </li> <li> <p>Store the balance of <code>0xaa</code> after the second transaction     is processed. No self-destruct. Expected outcome: 5 wei.</p> </li> <li> <p>Verify that:</p> <ul> <li>Call within tx 1 is successful, i.e <code>0xaa</code> self-destructed.</li> <li>The balances of <code>0xaa</code> after each tx are correct.</li> <li>During tx 2, code in <code>0xaa</code> does not execute,     hence self-destruct mechanism does not trigger.</li> </ul> </li> </ol> Source code in <code>tests/paris/security/test_selfdestruct_balance_bug.py</code> <pre><code>@pytest.mark.compile_yul_with(\"Paris\")  # Shanghai refuses to compile SELFDESTRUCT\n@pytest.mark.valid_from(\"Constantinople\")\ndef test_tx_selfdestruct_balance_bug(blockchain_test: BlockchainTestFiller, yul: YulCompiler):\n    \"\"\"\n    Test that the vulnerability is not present by checking the balance of the\n    `0xaa` contract after executing specific transactions:\n\n    1. Start with contract `0xaa` which has initial balance of 3 wei.\n        `0xaa` contract code simply performs a self-destruct to itself.\n\n    2. Send a transaction (tx 1) to invoke caller contract `0xcc` (which\n        has a balance of 1 wei), which in turn invokes `0xaa` with a 1 wei call.\n\n    3. Store the balance of `0xaa` after the first transaction\n        is processed. `0xaa` self-destructed. Expected outcome: 0 wei.\n\n    4. Send another transaction (tx 2) to call 0xaa with 5 wei.\n\n    5. Store the balance of `0xaa` after the second transaction\n        is processed. No self-destruct. Expected outcome: 5 wei.\n\n    6. Verify that:\n        - Call within tx 1 is successful, i.e `0xaa` self-destructed.\n        - The balances of `0xaa` after each tx are correct.\n        - During tx 2, code in `0xaa` does not execute,\n            hence self-destruct mechanism does not trigger.\n    \"\"\"\n    aa_code = Initcode(\n        deploy_code=yul(\n            \"\"\"\n        {\n            /* 1st entrance is self-destruct */\n            if eq(0, callvalue()) {\n                selfdestruct(0x00000000000000000000000000000000000000AA)\n            }\n\n            /* 2nd entrance is other rnd code execution */\n            if eq(1, callvalue()) {\n                let x := selfbalance()\n                sstore(0, x)\n            }\n        }\n        \"\"\"\n        ),\n    )\n\n    aa_location = compute_create_address(0xCC, 1)\n\n    cc_code = (\n        Op.EXTCODECOPY(0xAA, 0, 0, Op.EXTCODESIZE(0xAA))\n        + Op.CREATE(\n            3,  # Initial balance of 3 wei\n            0,\n            Op.EXTCODESIZE(0xAA),\n        )\n        + Op.SSTORE(0xCA1101, Op.CALL(100000, aa_location, 0, 0, 0, 0, 0))\n        + Op.CALL(100000, aa_location, 1, 0, 0, 0, 0)\n    )\n\n    balance_code = Op.SSTORE(0xBA1AA, Op.BALANCE(aa_location))\n\n    pre = {\n        # sender\n        TestAddress: Account(balance=1000000000),\n        # caller\n        Address(0xCC): Account(balance=1000000000, code=cc_code, nonce=1),\n        # stores balance of 0xaa after each tx 1\n        Address(0xBA11): Account(code=balance_code),\n        # stores balance of 0xaa after each tx 2\n        Address(0xBA12): Account(code=balance_code),\n        # Initcode of the self-destruct contract\n        Address(0xAA): Account(code=aa_code),\n    }\n\n    blocks = [\n        Block(\n            txs=[\n                # Sender invokes caller, caller invokes 0xaa:\n                # calling with 1 wei call\n                Transaction(\n                    nonce=0,\n                    to=Address(0xCC),\n                    gas_limit=1000000,\n                    gas_price=10,\n                ),\n                # Dummy tx to store balance of 0xaa after first TX.\n                Transaction(\n                    nonce=1,\n                    to=Address(0xBA11),\n                    gas_limit=100000,\n                    gas_price=10,\n                ),\n                # Sender calls 0xaa with 5 wei.\n                Transaction(\n                    nonce=2,\n                    to=aa_location,\n                    gas_limit=100000,\n                    gas_price=10,\n                    value=5,\n                ),\n                # Dummy tx to store balance of 0xaa after second TX.\n                Transaction(\n                    nonce=3,\n                    to=Address(0xBA12),\n                    gas_limit=100000,\n                    gas_price=10,\n                ),\n            ],\n        ),\n    ]\n\n    post = {\n        # Check call from caller has succeeded.\n        Address(0xCC): Account(nonce=2, storage={0xCA1101: 1}),\n        # Check balance of 0xaa after tx 1 is 0 wei, i.e self-destructed.\n        # Vulnerable versions should return 1 wei.\n        Address(0xBA11): Account(storage={0xBA1AA: 0}),\n        # Check that 0xaa exists and balance after tx 2 is 5 wei.\n        # Vulnerable versions should return 6 wei.\n        Address(0xBA12): Account(storage={0xBA1AA: 5}),\n        aa_location: Account(storage={0: 0}),\n    }\n\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/paris/security/test_selfdestruct_balance_bug/index/test_cases/","title":"Test Selfdestruct Balance Bug - Test Cases","text":"<p>Test cases generated from <code>tests/paris/security/test_selfdestruct_balance_bug.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/paris/security/test_selfdestruct_balance_bug.py</code>:</p> <pre><code>test_tx_selfdestruct_balance_bug[fork_Constantinople-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_ConstantinopleFix-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Istanbul-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Berlin-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_London-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Paris-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Paris-blockchain_test_hive]\ntest_tx_selfdestruct_balance_bug[fork_Shanghai-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Shanghai-blockchain_test_hive]\ntest_tx_selfdestruct_balance_bug[fork_Cancun-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Cancun-blockchain_test_hive]\ntest_tx_selfdestruct_balance_bug[fork_Prague-blockchain_test]\ntest_tx_selfdestruct_balance_bug[fork_Prague-blockchain_test_hive]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/paris/security/test_selfdestruct_balance_bug.py\n</code></pre>"},{"location":"tests/prague/","title":"Prague","text":"<p>Documentation for <code>tests/prague</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Test cases for EVM functionality introduced in Prague.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/","title":"EIP-2537 Bls 12 381 Precompiles","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-2537: Precompile for BLS12-381 curve operations <p>Tests for EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/spec.py</code>.</p> <p>Defines EIP-2537 specification constants and functions.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/spec/#tests.prague.eip2537_bls_12_381_precompiles.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-2537 specifications as defined at https://eips.ethereum.org/EIPS/eip-2537</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-2537 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-2537\n    \"\"\"\n\n    # Addresses\n    G1ADD = 0x0B\n    G1MUL = 0x0C\n    G1MSM = 0x0D\n    G2ADD = 0x0E\n    G2MUL = 0x0F\n    G2MSM = 0x10\n    PAIRING = 0x11\n    MAP_FP_TO_G1 = 0x12\n    MAP_FP2_TO_G2 = 0x13\n\n    # Gas constants\n    G1ADD_GAS = 500\n    G1MUL_GAS = 12_000\n    G2ADD_GAS = 800\n    G2MUL_GAS = 45_000\n    MAP_FP_TO_G1_GAS = 5_500\n    MAP_FP2_TO_G2_GAS = 75_000\n    PAIRING_BASE_GAS = 65_000\n    PAIRING_PER_PAIR_GAS = 43_000\n\n    # Other constants\n    B_COEFFICIENT = 0x04\n    X = -0xD201000000010000\n    Q = X**4 - X**2 + 1\n    P = (X - 1) ** 2 * Q // 3 + X\n    LEN_PER_PAIR = len(PointG1() + PointG2())\n    MSM_MULTIPLIER = 1_000\n    MSM_DISCOUNT_TABLE = MSM_DISCOUNT_TABLE\n\n    # Test constants (from https://github.com/ethereum/bls12-381-tests/tree/eip-2537)\n    P1 = PointG1(  # random point in G1\n        0x112B98340EEE2777CC3C14163DEA3EC97977AC3DC5C70DA32E6E87578F44912E902CCEF9EFE28D4A78B8999DFBCA9426,  # noqa: E501\n        0x186B28D92356C4DFEC4B5201AD099DBDEDE3781F8998DDF929B4CD7756192185CA7B8F4EF7088F813270AC3D48868A21,  # noqa: E501\n    )\n    G1 = PointG1(\n        0x17F1D3A73197D7942695638C4FA9AC0FC3688C4F9774B905A14E3A3F171BAC586C55E83FF97A1AEFFB3AF00ADB22C6BB,  # noqa: E501\n        0x8B3F481E3AAA0F1A09E30ED741D8AE4FCF5E095D5D00AF600DB18CB2C04B3EDD03CC744A2888AE40CAA232946C5E7E1,  # noqa: E501\n    )\n    # point at infinity in G1\n    INF_G1 = PointG1(0, 0)\n    # random point in G2\n    P2 = PointG2(\n        (\n            0x103121A2CEAAE586D240843A398967325F8EB5A93E8FEA99B62B9F88D8556C80DD726A4B30E84A36EEABAF3592937F27,  # noqa: E501\n            0x86B990F3DA2AEAC0A36143B7D7C824428215140DB1BB859338764CB58458F081D92664F9053B50B3FBD2E4723121B68,  # noqa: E501\n        ),\n        (\n            0xF9E7BA9A86A8F7624AA2B42DCC8772E1AF4AE115685E60ABC2C9B90242167ACEF3D0BE4050BF935EED7C3B6FC7BA77E,  # noqa: E501\n            0xD22C3652D0DC6F0FC9316E14268477C2049EF772E852108D269D9C38DBA1D4802E8DAE479818184C08F9A569D878451,  # noqa: E501\n        ),\n    )\n    G2 = PointG2(\n        (\n            0x24AA2B2F08F0A91260805272DC51051C6E47AD4FA403B02B4510B647AE3D1770BAC0326A805BBEFD48056C8C121BDB8,  # noqa: E501\n            0x13E02B6052719F607DACD3A088274F65596BD0D09920B61AB5DA61BBDC7F5049334CF11213945D57E5AC7D055D042B7E,  # noqa: E501\n        ),\n        (\n            0xCE5D527727D6E118CC9CDC6DA2E351AADFD9BAA8CBDD3A76D429A695160D12C923AC9CC3BACA289E193548608B82801,  # noqa: E501\n            0x606C4A02EA734CC32ACD2B02BC28B99CB3E287E85A763AF267492AB572E99AB3F370D275CEC1DA1AAA9075FF05F79BE,  # noqa: E501\n        ),\n    )\n    # point at infinity in G2\n    INF_G2 = PointG2((0, 0), (0, 0))\n\n    # Other test constants\n    # point not in subgroup in curve Fp\n    P1_NOT_IN_SUBGROUP = PointG1(0, 2)\n    P1_NOT_IN_SUBGROUP_TIMES_2 = PointG1(0, P - 2)\n    # point not in subgroup in curve Fp2\n    P2_NOT_IN_SUBGROUP = PointG2(\n        (1, 1),\n        (\n            0x17FAA6201231304F270B858DAD9462089F2A5B83388E4B10773ABC1EEF6D193B9FCE4E8EA2D9D28E3C3A315AA7DE14CA,  # noqa: E501\n            0xCC12449BE6AC4E7F367E7242250427C4FB4C39325D3164AD397C1837A90F0EA1A534757DF374DD6569345EB41ED76E,  # noqa: E501\n        ),\n    )\n    P2_NOT_IN_SUBGROUP_TIMES_2 = PointG2(\n        (\n            0x919F97860ECC3E933E3477FCAC0E2E4FCC35A6E886E935C97511685232456263DEF6665F143CCCCB44C733333331553,  # noqa: E501\n            0x18B4376B50398178FA8D78ED2654B0FFD2A487BE4DBE6B69086E61B283F4E9D58389CCCB8EDC99995718A66666661555,  # noqa: E501\n        ),\n        (\n            0x26898F699C4B07A405AB4183A10B47F923D1C0FDA1018682DD2CCC88968C1B90D44534D6B9270CF57F8DC6D4891678A,  # noqa: E501\n            0x3270414330EAD5EC92219A03A24DFA059DBCBE610868BE1851CC13DAC447F60B40D41113FD007D3307B19ADD4B0F061,  # noqa: E501\n        ),\n    )\n\n    # Pairing precompile results\n    PAIRING_TRUE = int.to_bytes(1, length=32, byteorder=\"big\")\n    PAIRING_FALSE = int.to_bytes(0, length=32, byteorder=\"big\")\n\n    # Returned on precompile failure\n    INVALID = b\"\"\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add/","title":"Test Bls12 G1add","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_G1ADD precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_G1ADD precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1add.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1ADD precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"add_G1_bls.json\")\n    + [\n        pytest.param(\n            Spec.INF_G1 + Spec.INF_G1,\n            Spec.INF_G1,\n            id=\"inf_plus_inf\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP + Spec.P1_NOT_IN_SUBGROUP,\n            Spec.P1_NOT_IN_SUBGROUP_TIMES_2,\n            id=\"not_in_subgroup_1\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP + Spec.P1_NOT_IN_SUBGROUP_TIMES_2,\n            Spec.INF_G1,\n            id=\"not_in_subgroup_2\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1ADD precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1add.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_G1ADD precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-add_G1_bls.json\")\n    + [\n        pytest.param(\n            PointG1(0, 1) + Spec.INF_G1,\n            id=\"invalid_point_a_1\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y - 1) + Spec.INF_G1,\n            id=\"invalid_point_a_2\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y + 1) + Spec.INF_G1,\n            id=\"invalid_point_a_3\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.x) + Spec.INF_G1,\n            id=\"invalid_point_a_4\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y - 1) + Spec.P1,\n            id=\"invalid_point_a_5\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG1(0, 1),\n            id=\"invalid_point_b_1\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG1(Spec.P1.x, Spec.P1.y - 1),\n            id=\"invalid_point_b_2\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG1(Spec.P1.x, Spec.P1.y + 1),\n            id=\"invalid_point_b_3\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG1(Spec.P1.x, Spec.P1.x),\n            id=\"invalid_point_b_4\",\n        ),\n        pytest.param(\n            Spec.P1 + PointG1(Spec.P1.x, Spec.P1.y - 1),\n            id=\"invalid_point_b_5\",\n        ),\n        pytest.param(\n            PointG1(Spec.P, 0) + Spec.INF_G1,\n            id=\"a_x_equal_to_p\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG1(Spec.P, 0),\n            id=\"b_x_equal_to_p\",\n        ),\n        pytest.param(\n            PointG1(0, Spec.P) + Spec.INF_G1,\n            id=\"a_y_equal_to_p\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG1(0, Spec.P),\n            id=\"b_y_equal_to_p\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G1)[1:] + Spec.INF_G1,\n            id=\"invalid_encoding_a\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + b\"\\x80\" + bytes(Spec.INF_G1)[1:],\n            id=\"invalid_encoding_b\",\n        ),\n        pytest.param(\n            (Spec.INF_G1 + PointG1(Spec.P1.x, Spec.P1.x))[:-1],\n            id=\"input_too_short\",\n        ),\n        pytest.param(\n            b\"\\x00\" + (Spec.INF_G1 + PointG1(Spec.P1.x, Spec.P1.x)),\n            id=\"input_too_long\",\n        ),\n        pytest.param(\n            b\"\",\n            id=\"zero_length_input\",\n        ),\n        pytest.param(\n            Spec.G1,\n            id=\"only_one_point\",\n        ),\n        pytest.param(\n            Spec.G2 + Spec.G2,\n            id=\"g2_points\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_G1ADD precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1add.test_gas","title":"<code>test_gas(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1ADD precompile gas requirements.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output,precompile_gas_modifier\",\n    [\n        pytest.param(\n            Spec.INF_G1 + Spec.INF_G1,\n            Spec.INF_G1,\n            1,\n            id=\"extra_gas\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + Spec.INF_G1,\n            Spec.INVALID,\n            -1,\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\ndef test_gas(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1ADD precompile gas requirements.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1add.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1ADD precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G1 + Spec.INF_G1,\n            Spec.INF_G1,\n            id=\"inf_plus_inf\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1ADD precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add/index/test_cases/","title":"Test Bls12 G1add - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g1add_g1+p1-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_p1+g1-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_g1_wrong_order+g1-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_(g1+0=g1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_(p1+0=p1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_(g1-g1=0)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_(p1-p1=0)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1add_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-blockchain_test-inf_plus_inf-]\ntest_valid[fork_Prague-blockchain_test-not_in_subgroup_1-]\ntest_valid[fork_Prague-blockchain_test-not_in_subgroup_2-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_g1+p1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_p1+g1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_g1_wrong_order+g1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_(g1+0=g1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_(p1+0=p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_(g1-g1=0)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_(p1-p1=0)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1add_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-inf_plus_inf-]\ntest_valid[fork_Prague-blockchain_test_hive-not_in_subgroup_1-]\ntest_valid[fork_Prague-blockchain_test_hive-not_in_subgroup_2-]\ntest_valid[fork_Prague-state_test-bls_g1add_g1+p1-]\ntest_valid[fork_Prague-state_test-bls_g1add_p1+g1-]\ntest_valid[fork_Prague-state_test-bls_g1add_g1_wrong_order+g1-]\ntest_valid[fork_Prague-state_test-bls_g1add_(g1+0=g1)-]\ntest_valid[fork_Prague-state_test-bls_g1add_(p1+0=p1)-]\ntest_valid[fork_Prague-state_test-bls_g1add_(g1-g1=0)-]\ntest_valid[fork_Prague-state_test-bls_g1add_(p1-p1=0)-]\ntest_valid[fork_Prague-state_test-bls_g1add_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-state_test-bls_g1add_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-state_test-inf_plus_inf-]\ntest_valid[fork_Prague-state_test-not_in_subgroup_1-]\ntest_valid[fork_Prague-state_test-not_in_subgroup_2-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1add_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1add_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1add_large_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1add_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1add_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_5-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_4-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_5-]\ntest_invalid[fork_Prague-blockchain_test--a_x_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--b_x_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--a_y_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--b_y_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding_a-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding_b-]\ntest_invalid[fork_Prague-blockchain_test--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test--only_one_point-]\ntest_invalid[fork_Prague-blockchain_test--g2_points-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1add_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1add_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1add_large_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1add_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1add_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_5-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_5-]\ntest_invalid[fork_Prague-blockchain_test_hive--a_x_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--b_x_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--a_y_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--b_y_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding_a-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding_b-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test_hive--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--only_one_point-]\ntest_invalid[fork_Prague-blockchain_test_hive--g2_points-]\ntest_invalid[fork_Prague-state_test--bls_g1add_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_g1add_short_input-]\ntest_invalid[fork_Prague-state_test--bls_g1add_large_input-]\ntest_invalid[fork_Prague-state_test--bls_g1add_point_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_g2add_invalid_field_element-]\ntest_invalid[fork_Prague-state_test--bls_g1add_violate_top_bytes-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_5-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_4-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_5-]\ntest_invalid[fork_Prague-state_test--a_x_equal_to_p-]\ntest_invalid[fork_Prague-state_test--b_x_equal_to_p-]\ntest_invalid[fork_Prague-state_test--a_y_equal_to_p-]\ntest_invalid[fork_Prague-state_test--b_y_equal_to_p-]\ntest_invalid[fork_Prague-state_test--invalid_encoding_a-]\ntest_invalid[fork_Prague-state_test--invalid_encoding_b-]\ntest_invalid[fork_Prague-state_test--input_too_short-]\ntest_invalid[fork_Prague-state_test--input_too_long-]\ntest_invalid[fork_Prague-state_test--zero_length_input-]\ntest_invalid[fork_Prague-state_test--only_one_point-]\ntest_invalid[fork_Prague-state_test--g2_points-]\ntest_gas[fork_Prague-blockchain_test-extra_gas-]\ntest_gas[fork_Prague-blockchain_test-insufficient_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-extra_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-insufficient_gas-]\ntest_gas[fork_Prague-state_test-extra_gas-]\ntest_gas[fork_Prague-state_test-insufficient_gas-]\ntest_call_types[fork_Prague-blockchain_test-inf_plus_inf-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_plus_inf-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_plus_inf-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_plus_inf-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_plus_inf-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_plus_inf-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-inf_plus_inf-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-inf_plus_inf-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-inf_plus_inf-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1add.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm/","title":"Test Bls12 G1msm","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_G1MSM precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_G1MSM precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1msm.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MSM precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"multiexp_G1_bls.json\")\n    + [\n        pytest.param(\n            (Spec.P1 + Scalar(Spec.Q)) * (len(Spec.MSM_DISCOUNT_TABLE) - 1),\n            Spec.INF_G1,\n            id=\"max_discount\",\n        ),\n        pytest.param(\n            (Spec.P1 + Scalar(Spec.Q)) * len(Spec.MSM_DISCOUNT_TABLE),\n            Spec.INF_G1,\n            id=\"max_discount_plus_1\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MSM precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1msm.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MSM precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-multiexp_G1_bls.json\")\n    + [\n        pytest.param(\n            PointG1(0, 1) + Scalar(0),\n            id=\"invalid_point_1\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y - 1) + Scalar(0),\n            id=\"invalid_point_2\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y + 1) + Scalar(0),\n            id=\"invalid_point_3\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.x) + Scalar(0),\n            id=\"invalid_point_4\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G1)[1:] + Scalar(0),\n            id=\"invalid_encoding\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G1)[1:] + Scalar(0),\n            id=\"invalid_encoding\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP + Scalar(Spec.Q),\n            id=\"not_in_subgroup_1\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP_TIMES_2 + Scalar(Spec.Q),\n            id=\"not_in_subgroup_2\",\n        ),\n        pytest.param(\n            Spec.G1,\n            id=\"bls_g1_truncated_input\",\n        ),\n    ],\n    # Input length tests can be found in ./test_bls12_variable_length_input_contracts.py\n)\n@pytest.mark.parametrize(\n    \"precompile_gas_modifier\", [100_000], ids=[\"\"]\n)  # Add gas so that won't be the cause of failure\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MSM precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1msm.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MSM precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G1 + Scalar(0),\n            Spec.INF_G1,\n            id=\"inf_times_zero\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MSM precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm/index/test_cases/","title":"Test Bls12 G1msm - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g1multiexp_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(1*g1=g1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(1*p1=p1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(0*g1=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(0*p1=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(2g1+inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(inf+inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(2g1+2p1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_multiple-]\ntest_valid[fork_Prague-blockchain_test-max_discount-]\ntest_valid[fork_Prague-blockchain_test-max_discount_plus_1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(1*g1=g1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(1*p1=p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(0*g1=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(0*p1=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(2g1+inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(inf+inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(2g1+2p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_multiple-]\ntest_valid[fork_Prague-blockchain_test_hive-max_discount-]\ntest_valid[fork_Prague-blockchain_test_hive-max_discount_plus_1-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(1*g1=g1)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(1*p1=p1)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(0*g1=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(0*p1=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(x*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(2g1+inf)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(inf+inf)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(2g1+2p1)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_multiple-]\ntest_valid[fork_Prague-state_test-max_discount-]\ntest_valid[fork_Prague-state_test-max_discount_plus_1-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_empty_input-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_short_input-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_long_input-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1multiexp_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test---invalid_point_1-]\ntest_invalid[fork_Prague-blockchain_test---invalid_point_2-]\ntest_invalid[fork_Prague-blockchain_test---invalid_point_3-]\ntest_invalid[fork_Prague-blockchain_test---invalid_point_4-]\ntest_invalid[fork_Prague-blockchain_test---invalid_encoding0-]\ntest_invalid[fork_Prague-blockchain_test---invalid_encoding1-]\ntest_invalid[fork_Prague-blockchain_test---not_in_subgroup_1-]\ntest_invalid[fork_Prague-blockchain_test---not_in_subgroup_2-]\ntest_invalid[fork_Prague-blockchain_test---bls_g1_truncated_input-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_long_input-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1multiexp_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive---invalid_point_1-]\ntest_invalid[fork_Prague-blockchain_test_hive---invalid_point_2-]\ntest_invalid[fork_Prague-blockchain_test_hive---invalid_point_3-]\ntest_invalid[fork_Prague-blockchain_test_hive---invalid_point_4-]\ntest_invalid[fork_Prague-blockchain_test_hive---invalid_encoding0-]\ntest_invalid[fork_Prague-blockchain_test_hive---invalid_encoding1-]\ntest_invalid[fork_Prague-blockchain_test_hive---not_in_subgroup_1-]\ntest_invalid[fork_Prague-blockchain_test_hive---not_in_subgroup_2-]\ntest_invalid[fork_Prague-blockchain_test_hive---bls_g1_truncated_input-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_empty_input-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_short_input-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_long_input-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_invalid_field_element-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_violate_top_bytes-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_point_not_on_curve-]\ntest_invalid[fork_Prague-state_test---bls_g1multiexp_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-state_test---invalid_point_1-]\ntest_invalid[fork_Prague-state_test---invalid_point_2-]\ntest_invalid[fork_Prague-state_test---invalid_point_3-]\ntest_invalid[fork_Prague-state_test---invalid_point_4-]\ntest_invalid[fork_Prague-state_test---invalid_encoding0-]\ntest_invalid[fork_Prague-state_test---invalid_encoding1-]\ntest_invalid[fork_Prague-state_test---not_in_subgroup_1-]\ntest_invalid[fork_Prague-state_test---not_in_subgroup_2-]\ntest_invalid[fork_Prague-state_test---bls_g1_truncated_input-]\ntest_call_types[fork_Prague-blockchain_test-inf_times_zero-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_times_zero-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_times_zero-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_times_zero-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_times_zero-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_times_zero-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-inf_times_zero-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-inf_times_zero-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-inf_times_zero-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1msm.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul/","title":"Test Bls12 G1mul","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_G1MUL precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_G1MUL precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1mul.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MUL precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"mul_G1_bls.json\")\n    + [\n        pytest.param(\n            Spec.INF_G1 + Scalar(0),\n            Spec.INF_G1,\n            id=\"bls_g1mul_(0*inf=inf)\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + Scalar(2**256 - 1),\n            Spec.INF_G1,\n            id=\"bls_g1mul_(2**256-1*inf=inf)\",\n        ),\n        pytest.param(\n            Spec.P1 + Scalar(2**256 - 1),\n            PointG1(\n                0x3DA1F13DDEF2B8B5A46CD543CE56C0A90B8B3B0D6D43DEC95836A5FD2BACD6AA8F692601F870CF22E05DDA5E83F460B,  # noqa: E501\n                0x18D64F3C0E9785365CBDB375795454A8A4FA26F30B9C4F6E33CA078EB5C29B7AEA478B076C619BC1ED22B14C95569B2D,  # noqa: E501\n            ),\n            id=\"bls_g1mul_(2**256-1*P1)\",\n        ),\n        pytest.param(\n            Spec.P1 + Scalar(Spec.Q - 1),\n            -Spec.P1,  # negated P1\n            id=\"bls_g1mul_(q-1*P1)\",\n        ),\n        pytest.param(\n            Spec.P1 + Scalar(Spec.Q),\n            Spec.INF_G1,\n            id=\"bls_g1mul_(q*P1)\",\n        ),\n        pytest.param(\n            Spec.P1 + Scalar(Spec.Q + 1),\n            Spec.P1,\n            id=\"bls_g1mul_(q+1*P1)\",\n        ),\n        pytest.param(\n            Spec.P1 + Scalar(2 * Spec.Q),\n            Spec.INF_G1,\n            id=\"bls_g1mul_(2q*P1)\",\n        ),\n        pytest.param(\n            Spec.P1 + Scalar((2**256 // Spec.Q) * Spec.Q),\n            Spec.INF_G1,\n            id=\"bls_g1mul_(Nq*P1)\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MUL precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1mul.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_G1MUL precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-mul_G1_bls.json\")\n    + [\n        pytest.param(\n            PointG1(0, 1) + Scalar(0),\n            id=\"invalid_point_1\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y - 1) + Scalar(0),\n            id=\"invalid_point_2\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.y + 1) + Scalar(0),\n            id=\"invalid_point_3\",\n        ),\n        pytest.param(\n            PointG1(Spec.P1.x, Spec.P1.x) + Scalar(0),\n            id=\"invalid_point_4\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G1)[1:] + Scalar(0),\n            id=\"invalid_encoding\",\n        ),\n        pytest.param(\n            (Spec.INF_G1 + Scalar(0))[:-1],\n            id=\"input_too_short\",\n        ),\n        pytest.param(\n            b\"\\x00\" + (Spec.INF_G1 + Scalar(0)),\n            id=\"input_too_long\",\n        ),\n        pytest.param(\n            b\"\",\n            id=\"zero_length_input\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP + Scalar(1),\n            id=\"bls_g1mul_not_in_subgroup_1\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP_TIMES_2 + Scalar(1),\n            id=\"bls_g1mul_not_in_subgroup_2\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP_TIMES_2 + Scalar(Spec.Q),\n            id=\"bls_g1mul_not_in_subgroup_times_q\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP + Scalar(Spec.Q),\n            id=\"bls_g1mul_not_in_subgroup_times_q_2\",\n        ),\n        pytest.param(\n            Spec.G1 + Spec.G1,\n            id=\"bls_g1_add_input_invalid_length\",\n        ),\n        pytest.param(\n            Spec.G2 + Spec.G2,\n            id=\"bls_g2_add_input_invalid_length\",\n        ),\n        pytest.param(\n            Spec.G1,\n            id=\"bls_g1_truncated_input\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_G1MUL precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1mul.test_gas","title":"<code>test_gas(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MUL precompile gas requirements.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output,precompile_gas_modifier\",\n    [\n        pytest.param(\n            Spec.INF_G1 + Scalar(0),\n            Spec.INF_G1,\n            1,\n            id=\"extra_gas\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + Scalar(0),\n            Spec.INVALID,\n            -1,\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\ndef test_gas(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MUL precompile gas requirements.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g1mul.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MUL precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G1 + Scalar(0),\n            Spec.INF_G1,\n            id=\"bls_g1mul_(0*inf=inf)\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MUL precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul/index/test_cases/","title":"Test Bls12 G1mul - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g1mul_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(1*g1=g1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(1*p1=p1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(0*g1=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(0*p1=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_random*g1-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_random*p1-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_random*g1_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_random*p1_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(0*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(2**256-1*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(2**256-1*P1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(q-1*P1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(q*P1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(q+1*P1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(2q*P1)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1mul_(Nq*P1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(1*g1=g1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(1*p1=p1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(0*g1=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(0*p1=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_random*g1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_random*p1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_random*g1_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_random*p1_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(0*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(2**256-1*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(2**256-1*P1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(q-1*P1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(q*P1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(q+1*P1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(2q*P1)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1mul_(Nq*P1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(g1+g1=2*g1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(p1+p1=2*p1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(1*g1=g1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(1*p1=p1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(0*g1=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(0*p1=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(x*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_random*g1-]\ntest_valid[fork_Prague-state_test-bls_g1mul_random*p1-]\ntest_valid[fork_Prague-state_test-bls_g1mul_random*g1_unnormalized_scalar-]\ntest_valid[fork_Prague-state_test-bls_g1mul_random*p1_unnormalized_scalar-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(0*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(2**256-1*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(2**256-1*P1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(q-1*P1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(q*P1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(q+1*P1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(2q*P1)-]\ntest_valid[fork_Prague-state_test-bls_g1mul_(Nq*P1)-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_large_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_4-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_not_in_subgroup_1-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_not_in_subgroup_2-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_not_in_subgroup_times_q-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1mul_not_in_subgroup_times_q_2-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1_truncated_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_large_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test_hive--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_not_in_subgroup_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_not_in_subgroup_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_not_in_subgroup_times_q-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1mul_not_in_subgroup_times_q_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1_truncated_input-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_short_input-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_large_input-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_invalid_field_element-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_point_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_violate_top_bytes-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-state_test--invalid_point_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_4-]\ntest_invalid[fork_Prague-state_test--invalid_encoding-]\ntest_invalid[fork_Prague-state_test--input_too_short-]\ntest_invalid[fork_Prague-state_test--input_too_long-]\ntest_invalid[fork_Prague-state_test--zero_length_input-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_not_in_subgroup_1-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_not_in_subgroup_2-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_not_in_subgroup_times_q-]\ntest_invalid[fork_Prague-state_test--bls_g1mul_not_in_subgroup_times_q_2-]\ntest_invalid[fork_Prague-state_test--bls_g1_add_input_invalid_length-]\ntest_invalid[fork_Prague-state_test--bls_g2_add_input_invalid_length-]\ntest_invalid[fork_Prague-state_test--bls_g1_truncated_input-]\ntest_gas[fork_Prague-blockchain_test-extra_gas-]\ntest_gas[fork_Prague-blockchain_test-insufficient_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-extra_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-insufficient_gas-]\ntest_gas[fork_Prague-state_test-extra_gas-]\ntest_gas[fork_Prague-state_test-insufficient_gas-]\ntest_call_types[fork_Prague-blockchain_test-bls_g1mul_(0*inf=inf)-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-bls_g1mul_(0*inf=inf)-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-bls_g1mul_(0*inf=inf)-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-bls_g1mul_(0*inf=inf)-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-bls_g1mul_(0*inf=inf)-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-bls_g1mul_(0*inf=inf)-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-bls_g1mul_(0*inf=inf)-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-bls_g1mul_(0*inf=inf)-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-bls_g1mul_(0*inf=inf)-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g1mul.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add/","title":"Test Bls12 G2add","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_G2ADD precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_G2ADD precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2add.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2ADD precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"add_G2_bls.json\")\n    + [\n        pytest.param(\n            Spec.P2_NOT_IN_SUBGROUP + Spec.P2_NOT_IN_SUBGROUP,\n            Spec.P2_NOT_IN_SUBGROUP_TIMES_2,\n            id=\"not_in_subgroup\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2ADD precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2add.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_G2ADD precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-add_G2_bls.json\")\n    + [\n        pytest.param(\n            PointG2((1, 0), (0, 0)) + Spec.INF_G2,\n            id=\"invalid_point_a_1\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (1, 0)) + Spec.INF_G2,\n            id=\"invalid_point_a_2\",\n        ),\n        pytest.param(\n            PointG2((0, 1), (0, 0)) + Spec.INF_G2,\n            id=\"invalid_point_a_3\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (0, 1)) + Spec.INF_G2,\n            id=\"invalid_point_a_4\",\n        ),\n        pytest.param(\n            PointG2(Spec.P2.x, (Spec.P2.y[0], Spec.P2.y[1] - 1)) + Spec.P2,\n            id=\"invalid_point_a_5\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((1, 0), (0, 0)),\n            id=\"invalid_point_b_1\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((0, 0), (1, 0)),\n            id=\"invalid_point_b_2\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((0, 1), (0, 0)),\n            id=\"invalid_point_b_3\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((0, 0), (0, 1)),\n            id=\"invalid_point_b_4\",\n        ),\n        pytest.param(\n            Spec.P2 + PointG2(Spec.P2.x, (Spec.P2.y[0], Spec.P2.y[1] - 1)),\n            id=\"invalid_point_b_5\",\n        ),\n        pytest.param(\n            PointG2((Spec.P, 0), (0, 0)) + Spec.INF_G2,\n            id=\"a_x_1_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, Spec.P), (0, 0)) + Spec.INF_G2,\n            id=\"a_x_2_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (Spec.P, 0)) + Spec.INF_G2,\n            id=\"a_y_1_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (0, Spec.P)) + Spec.INF_G2,\n            id=\"a_y_2_equal_to_p\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((Spec.P, 0), (0, 0)),\n            id=\"b_x_1_equal_to_p\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((0, Spec.P), (0, 0)),\n            id=\"b_x_2_equal_to_p\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((0, 0), (Spec.P, 0)),\n            id=\"b_y_1_equal_to_p\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + PointG2((0, 0), (0, Spec.P)),\n            id=\"b_y_2_equal_to_p\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G2)[1:] + Spec.INF_G2,\n            id=\"invalid_encoding_a\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + b\"\\x80\" + bytes(Spec.INF_G2)[1:],\n            id=\"invalid_encoding_b\",\n        ),\n        pytest.param(\n            (Spec.INF_G2 + Spec.INF_G2)[:-1],\n            id=\"input_too_short\",\n        ),\n        pytest.param(\n            b\"\\x00\" + (Spec.INF_G2 + Spec.INF_G2),\n            id=\"input_too_long\",\n        ),\n        pytest.param(\n            b\"\",\n            id=\"zero_length_input\",\n        ),\n        pytest.param(\n            Spec.G2,\n            id=\"only_one_point\",\n        ),\n        pytest.param(\n            Spec.G1 + Spec.G1,\n            id=\"g1_points\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_G2ADD precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2add.test_gas","title":"<code>test_gas(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2ADD precompile gas requirements.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output,precompile_gas_modifier\",\n    [\n        pytest.param(\n            Spec.INF_G2 + Spec.INF_G2,\n            Spec.INF_G2,\n            1,\n            id=\"extra_gas\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + Spec.INF_G2,\n            Spec.INVALID,\n            -1,\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\ndef test_gas(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2ADD precompile gas requirements.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2add.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2ADD precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G2 + Spec.INF_G2,\n            Spec.INF_G2,\n            id=\"inf_plus_inf\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2ADD precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add/index/test_cases/","title":"Test Bls12 G2add - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g2add_g2+p2-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_p2+g2-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_g2_wrong_order+g2-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_(g2+0=g2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_(p2+0=p2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_(g2-g2=0)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_(p2-p2=0)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2add_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-blockchain_test-not_in_subgroup-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_g2+p2-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_p2+g2-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_g2_wrong_order+g2-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_(g2+0=g2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_(p2+0=p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_(g2-g2=0)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_(p2-p2=0)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2add_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-not_in_subgroup-]\ntest_valid[fork_Prague-state_test-bls_g2add_g2+p2-]\ntest_valid[fork_Prague-state_test-bls_g2add_p2+g2-]\ntest_valid[fork_Prague-state_test-bls_g2add_g2_wrong_order+g2-]\ntest_valid[fork_Prague-state_test-bls_g2add_(g2+0=g2)-]\ntest_valid[fork_Prague-state_test-bls_g2add_(p2+0=p2)-]\ntest_valid[fork_Prague-state_test-bls_g2add_(g2-g2=0)-]\ntest_valid[fork_Prague-state_test-bls_g2add_(p2-p2=0)-]\ntest_valid[fork_Prague-state_test-bls_g2add_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-state_test-bls_g2add_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-state_test-not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_long_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2add_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_5-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_4-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_b_5-]\ntest_invalid[fork_Prague-blockchain_test--a_x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--a_x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--a_y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--a_y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--b_x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--b_x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--b_y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--b_y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding_a-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding_b-]\ntest_invalid[fork_Prague-blockchain_test--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test--only_one_point-]\ntest_invalid[fork_Prague-blockchain_test--g1_points-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_long_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2add_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_5-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_b_5-]\ntest_invalid[fork_Prague-blockchain_test_hive--a_x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--a_x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--a_y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--a_y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--b_x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--b_x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--b_y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--b_y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding_a-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding_b-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test_hive--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--only_one_point-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_points-]\ntest_invalid[fork_Prague-state_test--bls_g2add_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_g2add_short_input-]\ntest_invalid[fork_Prague-state_test--bls_g2add_long_input-]\ntest_invalid[fork_Prague-state_test--bls_g2add_point_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_g2add_invalid_field_element-]\ntest_invalid[fork_Prague-state_test--bls_g2add_violate_top_bytes-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_5-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_4-]\ntest_invalid[fork_Prague-state_test--invalid_point_b_5-]\ntest_invalid[fork_Prague-state_test--a_x_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--a_x_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--a_y_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--a_y_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--b_x_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--b_x_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--b_y_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--b_y_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--invalid_encoding_a-]\ntest_invalid[fork_Prague-state_test--invalid_encoding_b-]\ntest_invalid[fork_Prague-state_test--input_too_short-]\ntest_invalid[fork_Prague-state_test--input_too_long-]\ntest_invalid[fork_Prague-state_test--zero_length_input-]\ntest_invalid[fork_Prague-state_test--only_one_point-]\ntest_invalid[fork_Prague-state_test--g1_points-]\ntest_gas[fork_Prague-blockchain_test-extra_gas-]\ntest_gas[fork_Prague-blockchain_test-insufficient_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-extra_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-insufficient_gas-]\ntest_gas[fork_Prague-state_test-extra_gas-]\ntest_gas[fork_Prague-state_test-insufficient_gas-]\ntest_call_types[fork_Prague-blockchain_test-inf_plus_inf-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_plus_inf-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_plus_inf-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_plus_inf-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_plus_inf-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_plus_inf-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-inf_plus_inf-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-inf_plus_inf-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-inf_plus_inf-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2add.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm/","title":"Test Bls12 G2msm","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_G2MSM precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_G2MSM precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2msm.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MSM precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py</code> <pre><code>@pytest.mark.parametrize(\"input,expected_output\", vectors_from_file(\"multiexp_G2_bls.json\"))\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MSM precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2msm.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_G2MSM precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-multiexp_G2_bls.json\")\n    + [\n        pytest.param(\n            PointG2((1, 0), (0, 0)) + Scalar(0),\n            id=\"invalid_point_a_1\",\n        ),\n        pytest.param(\n            PointG2((0, 1), (0, 0)) + Scalar(0),\n            id=\"invalid_point_a_2\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (1, 0)) + Scalar(0),\n            id=\"invalid_point_a_3\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (0, 1)) + Scalar(0),\n            id=\"invalid_point_a_4\",\n        ),\n        pytest.param(\n            PointG2((Spec.P, 0), (0, 0)) + Scalar(0),\n            id=\"x_1_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, Spec.P), (0, 0)) + Scalar(0),\n            id=\"x_2_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (Spec.P, 0)) + Scalar(0),\n            id=\"y_1_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (0, Spec.P)) + Scalar(0),\n            id=\"y_2_equal_to_p\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G2)[1:] + Scalar(0),\n            id=\"invalid_encoding\",\n        ),\n        pytest.param(\n            Spec.P2_NOT_IN_SUBGROUP + Scalar(1),\n            id=\"bls_g2mul_not_in_subgroup\",\n        ),\n        pytest.param(\n            Spec.G2,\n            id=\"bls_g2_truncated_input\",\n        ),\n        # Input length tests can be found in ./test_bls12_variable_length_input_contracts.py\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_G2MSM precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2msm.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MSM precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G2 + Scalar(0),\n            Spec.INF_G2,\n            id=\"inf_times_zero\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MSM precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm/index/test_cases/","title":"Test Bls12 G2msm - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g2multiexp_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(1*g2=g2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(1*p2=p2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(0*g2=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(0*p2=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(2g2+inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(2p2+inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g1multiexp_(inf+inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_(2g2+2p2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2multiexp_multiple-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(1*g2=g2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(1*p2=p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(0*g2=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(0*p2=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(2g2+inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(2p2+inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1multiexp_(inf+inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_(2g2+2p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2multiexp_multiple-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(1*g2=g2)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(1*p2=p2)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(0*g2=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(0*p2=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(x*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(2g2+inf)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(2p2+inf)-]\ntest_valid[fork_Prague-state_test-bls_g1multiexp_(inf+inf)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_(2g2+2p2)-]\ntest_valid[fork_Prague-state_test-bls_g2multiexp_multiple-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2multiexp_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2multiexp_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2multiexp_long_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2multiexp_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2multiexp_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2multiexp_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test--x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2_truncated_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2multiexp_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2multiexp_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2multiexp_long_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2multiexp_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2multiexp_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2multiexp_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2_truncated_input-]\ntest_invalid[fork_Prague-state_test--bls_g2multiexp_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_g2multiexp_short_input-]\ntest_invalid[fork_Prague-state_test--bls_g2multiexp_long_input-]\ntest_invalid[fork_Prague-state_test--bls_g2multiexp_violate_top_bytes-]\ntest_invalid[fork_Prague-state_test--bls_g2multiexp_invalid_field_element-]\ntest_invalid[fork_Prague-state_test--bls_g2multiexp_point_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_pairing_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-state_test--x_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--x_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--y_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--y_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--invalid_encoding-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_not_in_subgroup-]\ntest_invalid[fork_Prague-state_test--bls_g2_truncated_input-]\ntest_call_types[fork_Prague-blockchain_test-inf_times_zero-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_times_zero-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_times_zero-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_times_zero-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_times_zero-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_times_zero-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-inf_times_zero-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-inf_times_zero-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-inf_times_zero-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2msm.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul/","title":"Test Bls12 G2mul","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_G2MUL precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_G2MUL precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2mul.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MUL precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"mul_G2_bls.json\")\n    + [\n        pytest.param(\n            Spec.INF_G2 + Scalar(0),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(0*inf=inf)\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + Scalar(2**256 - 1),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(2**256-1*inf=inf)\",\n        ),\n        pytest.param(\n            Spec.P2 + Scalar(2**256 - 1),\n            PointG2(\n                (\n                    0x2663E1C3431E174CA80E5A84489569462E13B52DA27E7720AF5567941603475F1F9BC0102E13B92A0A21D96B94E9B22,  # noqa: E501\n                    0x6A80D056486365020A6B53E2680B2D72D8A93561FC2F72B960936BB16F509C1A39C4E4174A7C9219E3D7EF130317C05,  # noqa: E501\n                ),\n                (\n                    0xC49EAD39E9EB7E36E8BC25824299661D5B6D0E200BBC527ECCB946134726BF5DBD861E8E6EC946260B82ED26AFE15FB,  # noqa: E501\n                    0x5397DAD1357CF8333189821B737172B18099ECF7EE8BDB4B3F05EBCCDF40E1782A6C71436D5ACE0843D7F361CBC6DB2,  # noqa: E501\n                ),\n            ),\n            id=\"bls_g2mul_(2**256-1*P2)\",\n        ),\n        pytest.param(\n            Spec.P2 + Scalar(Spec.Q - 1),\n            -Spec.P2,  # negated P2\n            id=\"bls_g2mul_(q-1*P2)\",\n        ),\n        pytest.param(\n            Spec.P2 + Scalar(Spec.Q),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(q*P2)\",\n        ),\n        pytest.param(\n            Spec.G2 + Scalar(Spec.Q),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(q*G2)\",\n        ),\n        pytest.param(\n            Spec.P2 + Scalar(Spec.Q + 1),\n            Spec.P2,\n            id=\"bls_g2mul_(q+1*P2)\",\n        ),\n        pytest.param(\n            Spec.P2 + Scalar(2 * Spec.Q),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(2q*P2)\",\n        ),\n        pytest.param(\n            Spec.P2 + Scalar((2**256 // Spec.Q) * Spec.Q),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(Nq*P2)\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MUL precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2mul.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_G2MUL precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-mul_G2_bls.json\")\n    + [\n        pytest.param(\n            PointG2((1, 0), (0, 0)) + Scalar(0),\n            id=\"invalid_point_a_1\",\n        ),\n        pytest.param(\n            PointG2((0, 1), (0, 0)) + Scalar(0),\n            id=\"invalid_point_a_2\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (1, 0)) + Scalar(0),\n            id=\"invalid_point_a_3\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (0, 1)) + Scalar(0),\n            id=\"invalid_point_a_4\",\n        ),\n        pytest.param(\n            PointG2((Spec.P, 0), (0, 0)) + Scalar(0),\n            id=\"x_1_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, Spec.P), (0, 0)) + Scalar(0),\n            id=\"x_2_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (Spec.P, 0)) + Scalar(0),\n            id=\"y_1_equal_to_p\",\n        ),\n        pytest.param(\n            PointG2((0, 0), (0, Spec.P)) + Scalar(0),\n            id=\"y_2_equal_to_p\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G2)[1:] + Scalar(0),\n            id=\"invalid_encoding\",\n        ),\n        pytest.param(\n            (Spec.INF_G2 + Scalar(0))[:-1],\n            id=\"input_too_short\",\n        ),\n        pytest.param(\n            b\"\\x00\" + (Spec.INF_G2 + Scalar(0)),\n            id=\"input_too_long\",\n        ),\n        pytest.param(\n            b\"\",\n            id=\"zero_length_input\",\n        ),\n        pytest.param(\n            Spec.P2_NOT_IN_SUBGROUP + Scalar(1),\n            id=\"bls_g2mul_not_in_subgroup\",\n        ),\n        pytest.param(\n            Spec.P2_NOT_IN_SUBGROUP + Scalar(2),\n            id=\"bls_g2mul_not_in_subgroup_times_2\",\n        ),\n        pytest.param(\n            Spec.P2_NOT_IN_SUBGROUP + Scalar(Spec.Q),\n            id=\"bls_g2mul_not_in_subgroup_times_q\",\n        ),\n        pytest.param(\n            Spec.G1 + Spec.G1,\n            id=\"bls_g1_add_input_invalid_length\",\n        ),\n        pytest.param(\n            Spec.G2 + Spec.G2,\n            id=\"bls_g2_add_input_invalid_length\",\n        ),\n        pytest.param(\n            Spec.G2,\n            id=\"bls_g2_truncated_input\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_G2MUL precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2mul.test_gas","title":"<code>test_gas(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MUL precompile gas requirements.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output,precompile_gas_modifier\",\n    [\n        pytest.param(\n            Spec.INF_G2 + Scalar(0),\n            Spec.INF_G2,\n            1,\n            id=\"extra_gas\",\n        ),\n        pytest.param(\n            Spec.INF_G2 + Scalar(0),\n            Spec.INVALID,\n            -1,\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\ndef test_gas(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MUL precompile gas requirements.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_g2mul.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MUL using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G2 + Scalar(0),\n            Spec.INF_G2,\n            id=\"bls_g2mul_(0*inf=inf)\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MUL using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul/index/test_cases/","title":"Test Bls12 G2mul - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g2mul_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(1*g2=g2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(1*p2=p2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(0*g2=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(0*p2=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_random*g2-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_random*p2-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_random*g2_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_random*p2_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(0*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(2**256-1*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(2**256-1*P2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(q-1*P2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(q*P2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(q*G2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(q+1*P2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(2q*P2)-]\ntest_valid[fork_Prague-blockchain_test-bls_g2mul_(Nq*P2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(1*g2=g2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(1*p2=p2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(0*g2=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(0*p2=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(x*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_random*g2-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_random*p2-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_random*g2_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_random*p2_unnormalized_scalar-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(0*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(2**256-1*inf=inf)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(2**256-1*P2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(q-1*P2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(q*P2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(q*G2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(q+1*P2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(2q*P2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2mul_(Nq*P2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(g2+g2=2*g2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(p2+p2=2*p2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(1*g2=g2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(1*p2=p2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(0*g2=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(0*p2=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(x*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_random*g2-]\ntest_valid[fork_Prague-state_test-bls_g2mul_random*p2-]\ntest_valid[fork_Prague-state_test-bls_g2mul_random*g2_unnormalized_scalar-]\ntest_valid[fork_Prague-state_test-bls_g2mul_random*p2_unnormalized_scalar-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(0*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(2**256-1*inf=inf)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(2**256-1*P2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(q-1*P2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(q*P2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(q*G2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(q+1*P2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(2q*P2)-]\ntest_valid[fork_Prague-state_test-bls_g2mul_(Nq*P2)-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_large_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test--x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_not_in_subgroup_times_2-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2mul_not_in_subgroup_times_q-]\ntest_invalid[fork_Prague-blockchain_test--bls_g1_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test--bls_g2_truncated_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_large_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_point_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_violate_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_point_a_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--x_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--x_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--y_1_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--y_2_equal_to_p-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test_hive--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_not_in_subgroup_times_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2mul_not_in_subgroup_times_q-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g1_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2_add_input_invalid_length-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_g2_truncated_input-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_short_input-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_large_input-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_invalid_field_element-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_point_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_violate_top_bytes-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_1-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_2-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_3-]\ntest_invalid[fork_Prague-state_test--invalid_point_a_4-]\ntest_invalid[fork_Prague-state_test--x_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--x_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--y_1_equal_to_p-]\ntest_invalid[fork_Prague-state_test--y_2_equal_to_p-]\ntest_invalid[fork_Prague-state_test--invalid_encoding-]\ntest_invalid[fork_Prague-state_test--input_too_short-]\ntest_invalid[fork_Prague-state_test--input_too_long-]\ntest_invalid[fork_Prague-state_test--zero_length_input-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_not_in_subgroup-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_not_in_subgroup_times_2-]\ntest_invalid[fork_Prague-state_test--bls_g2mul_not_in_subgroup_times_q-]\ntest_invalid[fork_Prague-state_test--bls_g1_add_input_invalid_length-]\ntest_invalid[fork_Prague-state_test--bls_g2_add_input_invalid_length-]\ntest_invalid[fork_Prague-state_test--bls_g2_truncated_input-]\ntest_gas[fork_Prague-blockchain_test-extra_gas-]\ntest_gas[fork_Prague-blockchain_test-insufficient_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-extra_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-insufficient_gas-]\ntest_gas[fork_Prague-state_test-extra_gas-]\ntest_gas[fork_Prague-state_test-insufficient_gas-]\ntest_call_types[fork_Prague-blockchain_test-bls_g2mul_(0*inf=inf)-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-bls_g2mul_(0*inf=inf)-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-bls_g2mul_(0*inf=inf)-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-bls_g2mul_(0*inf=inf)-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-bls_g2mul_(0*inf=inf)-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-bls_g2mul_(0*inf=inf)-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-bls_g2mul_(0*inf=inf)-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-bls_g2mul_(0*inf=inf)-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-bls_g2mul_(0*inf=inf)-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_g2mul.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2/","title":"Test Bls12 Map Fp2 To G2","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_MAP_FP2_TO_G2 precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_MAP_FP2_TO_G2 precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp2_to_g2.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_MAP_FP2_TO_G2 precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"map_fp2_to_G2_bls.json\")\n    + [\n        pytest.param(\n            FP2((0, 0)),\n            G2_POINT_ZERO_FP,\n            id=\"fp_0\",\n        ),\n        pytest.param(\n            FP2((Spec.P - 1, Spec.P - 1)),\n            PointG2(\n                (\n                    0x9BF1B857D8C15F317F649ACCFA7023EF21CFC03059936B83B487DB476FF9D2FE64C6147140A5F0A436B875F51FFDF07,  # noqa: E501\n                    0xBB10E09BDF236CB2951BD7BCC044E1B9A6BB5FD4B2019DCC20FFDE851D52D4F0D1A32382AF9D7DA2C5BA27E0F1C69E6,  # noqa: E501\n                ),\n                (\n                    0xDD416A927AB1C15490AB753C973FD377387B12EFCBE6BED2BF768B9DC95A0CA04D1A8F0F30DBC078A2350A1F823CFD3,  # noqa: E501\n                    0x171565CE4FCD047B35EA6BCEE4EF6FDBFEC8CC73B7ACDB3A1EC97A776E13ACDFEFFC21ED6648E3F0EEC53DDB6C20FB61,  # noqa: E501\n                ),\n            ),\n            id=\"fp_p_minus_1\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_MAP_FP2_TO_G2 precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp2_to_g2.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_MAP_FP_TO_G2 precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-map_fp2_to_G2_bls.json\")\n    + [\n        pytest.param(b\"\\x80\" + bytes(FP2((0, 0)))[1:], id=\"invalid_encoding\"),\n        pytest.param(bytes(FP2((0, 0)))[1:], id=\"input_too_short\"),\n        pytest.param(b\"\\x00\" + FP2((0, 0)), id=\"input_too_long\"),\n        pytest.param(b\"\", id=\"zero_length_input\"),\n        pytest.param(FP2((Spec.P, 0)), id=\"fq_eq_q\"),\n        pytest.param(FP2((0, Spec.P)), id=\"fq_eq_q_2\"),\n        pytest.param(FP2((2**512 - 1, 0)), id=\"fq_eq_2_512_minus_1\"),\n        pytest.param(FP2((0, 2**512 - 1)), id=\"fq_eq_2_512_minus_1_2\"),\n        pytest.param(Spec.G2, id=\"g2_input\"),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_MAP_FP_TO_G2 precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp2_to_g2.test_gas","title":"<code>test_gas(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_MAP_FP_TO_G2 precompile gas requirements.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output,precompile_gas_modifier\",\n    [\n        pytest.param(\n            FP2((0, 0)),\n            G2_POINT_ZERO_FP,\n            1,\n            id=\"extra_gas\",\n        ),\n        pytest.param(\n            FP2((0, 0)),\n            Spec.INVALID,\n            -1,\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\ndef test_gas(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_MAP_FP_TO_G2 precompile gas requirements.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp2_to_g2.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_MAP_FP_TO_G2 precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            FP2((0, 0)),\n            G2_POINT_ZERO_FP,\n            id=\"fp_0\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_MAP_FP_TO_G2 precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2/index/test_cases/","title":"Test Bls12 Map Fp2 To G2 - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g2map_-]\ntest_valid[fork_Prague-blockchain_test-bls_g2map_616263-]\ntest_valid[fork_Prague-blockchain_test-bls_g2map_6162636465663031-]\ntest_valid[fork_Prague-blockchain_test-bls_g2map_713132385f717171-]\ntest_valid[fork_Prague-blockchain_test-bls_g2map_613531325f616161-]\ntest_valid[fork_Prague-blockchain_test-fp_0-]\ntest_valid[fork_Prague-blockchain_test-fp_p_minus_1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2map_-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2map_616263-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2map_6162636465663031-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2map_713132385f717171-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g2map_613531325f616161-]\ntest_valid[fork_Prague-blockchain_test_hive-fp_0-]\ntest_valid[fork_Prague-blockchain_test_hive-fp_p_minus_1-]\ntest_valid[fork_Prague-state_test-bls_g2map_-]\ntest_valid[fork_Prague-state_test-bls_g2map_616263-]\ntest_valid[fork_Prague-state_test-bls_g2map_6162636465663031-]\ntest_valid[fork_Prague-state_test-bls_g2map_713132385f717171-]\ntest_valid[fork_Prague-state_test-bls_g2map_613531325f616161-]\ntest_valid[fork_Prague-state_test-fp_0-]\ntest_valid[fork_Prague-state_test-fp_p_minus_1-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg2_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg2_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg2_long_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg2_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg2_invalid_fq_element-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test--fq_eq_q-]\ntest_invalid[fork_Prague-blockchain_test--fq_eq_q_2-]\ntest_invalid[fork_Prague-blockchain_test--fq_eq_2_512_minus_1-]\ntest_invalid[fork_Prague-blockchain_test--fq_eq_2_512_minus_1_2-]\ntest_invalid[fork_Prague-blockchain_test--g2_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg2_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg2_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg2_long_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg2_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg2_invalid_fq_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test_hive--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--fq_eq_q-]\ntest_invalid[fork_Prague-blockchain_test_hive--fq_eq_q_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--fq_eq_2_512_minus_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--fq_eq_2_512_minus_1_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--g2_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg2_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg2_short_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg2_long_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg2_top_bytes-]\ntest_invalid[fork_Prague-state_test--bls_mapg2_invalid_fq_element-]\ntest_invalid[fork_Prague-state_test--invalid_encoding-]\ntest_invalid[fork_Prague-state_test--input_too_short-]\ntest_invalid[fork_Prague-state_test--input_too_long-]\ntest_invalid[fork_Prague-state_test--zero_length_input-]\ntest_invalid[fork_Prague-state_test--fq_eq_q-]\ntest_invalid[fork_Prague-state_test--fq_eq_q_2-]\ntest_invalid[fork_Prague-state_test--fq_eq_2_512_minus_1-]\ntest_invalid[fork_Prague-state_test--fq_eq_2_512_minus_1_2-]\ntest_invalid[fork_Prague-state_test--g2_input-]\ntest_gas[fork_Prague-blockchain_test-extra_gas-]\ntest_gas[fork_Prague-blockchain_test-insufficient_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-extra_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-insufficient_gas-]\ntest_gas[fork_Prague-state_test-extra_gas-]\ntest_gas[fork_Prague-state_test-insufficient_gas-]\ntest_call_types[fork_Prague-blockchain_test-fp_0-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-fp_0-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-fp_0-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-fp_0-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-fp_0-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-fp_0-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-fp_0-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-fp_0-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-fp_0-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp2_to_g2.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1/","title":"Test Bls12 Map Fp To G1","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_MAP_FP_TO_G1 precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_MAP_FP_TO_G1 precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp_to_g1.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_MAP_FP_TO_G1 precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"map_fp_to_G1_bls.json\")\n    + [\n        pytest.param(\n            FP(0),\n            G1_POINT_ZERO_FP,\n            id=\"fp_0\",\n        ),\n        pytest.param(\n            FP(Spec.P - 1),\n            PointG1(\n                0x1073311196F8EF19477219CCEE3A48035FF432295AA9419EED45D186027D88B90832E14C4F0E2AA4D15F54D1C3ED0F93,  # noqa: E501\n                0x16B3A3B2E3DDDF6A11459DDAF657FDE21C4F10282A56029D9B55AB3CE1F41E1CF39AD27E0EA35823C7D3250E81FF3D66,  # noqa: E501\n            ),\n            id=\"fp_p_minus_1\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_MAP_FP_TO_G1 precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp_to_g1.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_MAP_FP_TO_G1 precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-map_fp_to_G1_bls.json\")\n    + [\n        pytest.param(b\"\\x80\" + bytes(FP(0))[1:], id=\"invalid_encoding\"),\n        pytest.param(bytes(FP(0))[1:], id=\"input_too_short\"),\n        pytest.param(b\"\\x00\" + FP(0), id=\"input_too_long\"),\n        pytest.param(b\"\", id=\"zero_length_input\"),\n        pytest.param(FP(Spec.P), id=\"fq_eq_q\"),\n        pytest.param(FP(2**512 - 1), id=\"fq_eq_2_512_minus_1\"),\n        pytest.param(Spec.G1, id=\"g1_point_input\"),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_MAP_FP_TO_G1 precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp_to_g1.test_gas","title":"<code>test_gas(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_MAP_FP_TO_G1 precompile gas requirements.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output,precompile_gas_modifier\",\n    [\n        pytest.param(\n            FP(0),\n            G1_POINT_ZERO_FP,\n            1,\n            id=\"extra_gas\",\n        ),\n        pytest.param(\n            FP(0),\n            Spec.INVALID,\n            -1,\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\ndef test_gas(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_MAP_FP_TO_G1 precompile gas requirements.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_map_fp_to_g1.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_MAP_FP_TO_G1 precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            FP(0),\n            G1_POINT_ZERO_FP,\n            id=\"fp_0\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_MAP_FP_TO_G1 precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1/index/test_cases/","title":"Test Bls12 Map Fp To G1 - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_g1map_-]\ntest_valid[fork_Prague-blockchain_test-bls_g1map_616263-]\ntest_valid[fork_Prague-blockchain_test-bls_g1map_6162636465663031-]\ntest_valid[fork_Prague-blockchain_test-bls_g1map_713132385f717171-]\ntest_valid[fork_Prague-blockchain_test-bls_g1map_613531325f616161-]\ntest_valid[fork_Prague-blockchain_test-fp_0-]\ntest_valid[fork_Prague-blockchain_test-fp_p_minus_1-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1map_-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1map_616263-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1map_6162636465663031-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1map_713132385f717171-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_g1map_613531325f616161-]\ntest_valid[fork_Prague-blockchain_test_hive-fp_0-]\ntest_valid[fork_Prague-blockchain_test_hive-fp_p_minus_1-]\ntest_valid[fork_Prague-state_test-bls_g1map_-]\ntest_valid[fork_Prague-state_test-bls_g1map_616263-]\ntest_valid[fork_Prague-state_test-bls_g1map_6162636465663031-]\ntest_valid[fork_Prague-state_test-bls_g1map_713132385f717171-]\ntest_valid[fork_Prague-state_test-bls_g1map_613531325f616161-]\ntest_valid[fork_Prague-state_test-fp_0-]\ntest_valid[fork_Prague-state_test-fp_p_minus_1-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg1_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg1_short_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg1_large_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_mapg1_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--bls_invalid_fq_element-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test--fq_eq_q-]\ntest_invalid[fork_Prague-blockchain_test--fq_eq_2_512_minus_1-]\ntest_invalid[fork_Prague-blockchain_test--g1_point_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg1_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg1_short_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg1_large_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_mapg1_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_invalid_fq_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_short-]\ntest_invalid[fork_Prague-blockchain_test_hive--input_too_long-]\ntest_invalid[fork_Prague-blockchain_test_hive--zero_length_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--fq_eq_q-]\ntest_invalid[fork_Prague-blockchain_test_hive--fq_eq_2_512_minus_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_point_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg1_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg1_short_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg1_large_input-]\ntest_invalid[fork_Prague-state_test--bls_mapg1_top_bytes-]\ntest_invalid[fork_Prague-state_test--bls_invalid_fq_element-]\ntest_invalid[fork_Prague-state_test--invalid_encoding-]\ntest_invalid[fork_Prague-state_test--input_too_short-]\ntest_invalid[fork_Prague-state_test--input_too_long-]\ntest_invalid[fork_Prague-state_test--zero_length_input-]\ntest_invalid[fork_Prague-state_test--fq_eq_q-]\ntest_invalid[fork_Prague-state_test--fq_eq_2_512_minus_1-]\ntest_invalid[fork_Prague-state_test--g1_point_input-]\ntest_gas[fork_Prague-blockchain_test-extra_gas-]\ntest_gas[fork_Prague-blockchain_test-insufficient_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-extra_gas-]\ntest_gas[fork_Prague-blockchain_test_hive-insufficient_gas-]\ntest_gas[fork_Prague-state_test-extra_gas-]\ntest_gas[fork_Prague-state_test-insufficient_gas-]\ntest_call_types[fork_Prague-blockchain_test-fp_0-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-fp_0-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-fp_0-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-fp_0-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-fp_0-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-fp_0-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-fp_0-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-fp_0-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-fp_0-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_map_fp_to_g1.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing/","title":"Test Bls12 Pairing","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12_PAIRING precompile of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12_PAIRING precompile of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_pairing.test_valid","title":"<code>test_valid(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_PAIRING precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input,expected_output\",\n    vectors_from_file(\"pairing_check_bls.json\")\n    + [\n        pytest.param(\n            Spec.INF_G1 + Spec.INF_G2,\n            Spec.PAIRING_TRUE,\n            id=\"inf_pair\",\n        ),\n        pytest.param(\n            (Spec.INF_G1 + Spec.INF_G2) * 1000,\n            Spec.PAIRING_TRUE,\n            id=\"multi_inf_pair\",\n        ),\n    ],\n)\ndef test_valid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_PAIRING precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_pairing.test_invalid","title":"<code>test_invalid(state_test, pre, post, tx)</code>","text":"<p>Negative tests for the BLS12_PAIRING precompile.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py</code> <pre><code>@pytest.mark.parametrize(\n    \"input\",\n    vectors_from_file(\"fail-pairing_check_bls.json\")\n    + [\n        pytest.param(\n            PointG1(Spec.P, 0) + Spec.INF_G2,\n            id=\"g1_P_g2_inf_1\",\n        ),\n        pytest.param(\n            PointG1(0, Spec.P) + Spec.INF_G2,\n            id=\"g1_P_g2_inf_2\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG2((Spec.P, 0), (0, 0)),\n            id=\"g1_inf_g2_P_1\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG2((0, Spec.P), (0, 0)),\n            id=\"g1_inf_g2_P_2\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG2((0, 0), (Spec.P, 0)),\n            id=\"g1_inf_g2_P_3\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + PointG2((0, 0), (0, Spec.P)),\n            id=\"g1_inf_g2_P_4\",\n        ),\n        pytest.param(\n            b\"\\x80\" + bytes(Spec.INF_G1)[1:] + Spec.INF_G2,\n            id=\"invalid_encoding_g1\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + b\"\\x80\" + bytes(Spec.INF_G2)[1:],\n            id=\"invalid_encoding_g2\",\n        ),\n        pytest.param(\n            (Spec.INF_G1 + Spec.INF_G2) * 1000 + PointG1(Spec.P, 0) + Spec.INF_G2,\n            id=\"multi_inf_plus_g1_P_g2_inf_1\",\n        ),\n        pytest.param(\n            Spec.P1_NOT_IN_SUBGROUP + Spec.INF_G2,\n            id=\"P1_not_in_subgroup\",\n        ),\n        pytest.param(\n            Spec.INF_G1 + Spec.P2_NOT_IN_SUBGROUP,\n            id=\"P2_not_in_subgroup\",\n        ),\n        # Input length tests can be found in ./test_bls12_variable_length_input_contracts.py\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\ndef test_invalid(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Negative tests for the BLS12_PAIRING precompile.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_pairing.test_call_types","title":"<code>test_call_types(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_PAIRING precompile using different call types.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py</code> <pre><code>@pytest.mark.parametrize(\n    \"call_opcode\",\n    [\n        Op.STATICCALL,\n        Op.DELEGATECALL,\n        Op.CALLCODE,\n    ],\n)\n@pytest.mark.parametrize(\n    \"input,expected_output\",\n    [\n        pytest.param(\n            Spec.INF_G1 + Spec.INF_G2,\n            Spec.PAIRING_TRUE,\n            id=\"inf_pair\",\n        ),\n    ],\n)\ndef test_call_types(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_PAIRING precompile using different call types.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing/index/test_cases/","title":"Test Bls12 Pairing - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py</code>:</p> <pre><code>test_valid[fork_Prague-blockchain_test-bls_pairing_e(G1,0)=e(0,G2)-]\ntest_valid[fork_Prague-blockchain_test-bls_pairing_non-degeneracy-]\ntest_valid[fork_Prague-blockchain_test-bls_pairing_bilinearity-]\ntest_valid[fork_Prague-blockchain_test-bls_pairing_e(G1,-G2)=e(-G1,G2)-]\ntest_valid[fork_Prague-blockchain_test-bls_pairing_e(aG1,bG2)=e(abG1,G2)-]\ntest_valid[fork_Prague-blockchain_test-bls_pairing_e(aG1,bG2)=e(G1,abG2)-]\ntest_valid[fork_Prague-blockchain_test-inf_pair-]\ntest_valid[fork_Prague-blockchain_test-multi_inf_pair-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_pairing_e(G1,0)=e(0,G2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_pairing_non-degeneracy-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_pairing_bilinearity-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_pairing_e(G1,-G2)=e(-G1,G2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_pairing_e(aG1,bG2)=e(abG1,G2)-]\ntest_valid[fork_Prague-blockchain_test_hive-bls_pairing_e(aG1,bG2)=e(G1,abG2)-]\ntest_valid[fork_Prague-blockchain_test_hive-inf_pair-]\ntest_valid[fork_Prague-blockchain_test_hive-multi_inf_pair-]\ntest_valid[fork_Prague-state_test-bls_pairing_e(G1,0)=e(0,G2)-]\ntest_valid[fork_Prague-state_test-bls_pairing_non-degeneracy-]\ntest_valid[fork_Prague-state_test-bls_pairing_bilinearity-]\ntest_valid[fork_Prague-state_test-bls_pairing_e(G1,-G2)=e(-G1,G2)-]\ntest_valid[fork_Prague-state_test-bls_pairing_e(aG1,bG2)=e(abG1,G2)-]\ntest_valid[fork_Prague-state_test-bls_pairing_e(aG1,bG2)=e(G1,abG2)-]\ntest_valid[fork_Prague-state_test-inf_pair-]\ntest_valid[fork_Prague-state_test-multi_inf_pair-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_empty_input-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_missing_data-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_extra_data-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_g1_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_g2_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--bls_pairing_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--g1_P_g2_inf_1-]\ntest_invalid[fork_Prague-blockchain_test--g1_P_g2_inf_2-]\ntest_invalid[fork_Prague-blockchain_test--g1_inf_g2_P_1-]\ntest_invalid[fork_Prague-blockchain_test--g1_inf_g2_P_2-]\ntest_invalid[fork_Prague-blockchain_test--g1_inf_g2_P_3-]\ntest_invalid[fork_Prague-blockchain_test--g1_inf_g2_P_4-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding_g1-]\ntest_invalid[fork_Prague-blockchain_test--invalid_encoding_g2-]\ntest_invalid[fork_Prague-blockchain_test--multi_inf_plus_g1_P_g2_inf_1-]\ntest_invalid[fork_Prague-blockchain_test--P1_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test--P2_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_empty_input-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_missing_data-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_extra_data-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_top_bytes-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_invalid_field_element-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_g1_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_g2_not_on_curve-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--bls_pairing_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_P_g2_inf_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_P_g2_inf_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_inf_g2_P_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_inf_g2_P_2-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_inf_g2_P_3-]\ntest_invalid[fork_Prague-blockchain_test_hive--g1_inf_g2_P_4-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding_g1-]\ntest_invalid[fork_Prague-blockchain_test_hive--invalid_encoding_g2-]\ntest_invalid[fork_Prague-blockchain_test_hive--multi_inf_plus_g1_P_g2_inf_1-]\ntest_invalid[fork_Prague-blockchain_test_hive--P1_not_in_subgroup-]\ntest_invalid[fork_Prague-blockchain_test_hive--P2_not_in_subgroup-]\ntest_invalid[fork_Prague-state_test--bls_pairing_empty_input-]\ntest_invalid[fork_Prague-state_test--bls_pairing_missing_data-]\ntest_invalid[fork_Prague-state_test--bls_pairing_extra_data-]\ntest_invalid[fork_Prague-state_test--bls_pairing_top_bytes-]\ntest_invalid[fork_Prague-state_test--bls_pairing_invalid_field_element-]\ntest_invalid[fork_Prague-state_test--bls_pairing_g1_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_pairing_g2_not_on_curve-]\ntest_invalid[fork_Prague-state_test--bls_pairing_g1_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-state_test--bls_pairing_g2_not_in_correct_subgroup-]\ntest_invalid[fork_Prague-state_test--g1_P_g2_inf_1-]\ntest_invalid[fork_Prague-state_test--g1_P_g2_inf_2-]\ntest_invalid[fork_Prague-state_test--g1_inf_g2_P_1-]\ntest_invalid[fork_Prague-state_test--g1_inf_g2_P_2-]\ntest_invalid[fork_Prague-state_test--g1_inf_g2_P_3-]\ntest_invalid[fork_Prague-state_test--g1_inf_g2_P_4-]\ntest_invalid[fork_Prague-state_test--invalid_encoding_g1-]\ntest_invalid[fork_Prague-state_test--invalid_encoding_g2-]\ntest_invalid[fork_Prague-state_test--multi_inf_plus_g1_P_g2_inf_1-]\ntest_invalid[fork_Prague-state_test--P1_not_in_subgroup-]\ntest_invalid[fork_Prague-state_test--P2_not_in_subgroup-]\ntest_call_types[fork_Prague-blockchain_test-inf_pair-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_pair-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test-inf_pair-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_pair-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_pair-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-blockchain_test_hive-inf_pair-call_opcode_CALLCODE-]\ntest_call_types[fork_Prague-state_test-inf_pair-call_opcode_STATICCALL-]\ntest_call_types[fork_Prague-state_test-inf_pair-call_opcode_DELEGATECALL-]\ntest_call_types[fork_Prague-state_test-inf_pair-call_opcode_CALLCODE-]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_pairing.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork/","title":"Test Bls12 Precompiles Before Fork","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests BLS12 precompiles of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests BLS12 precompiles of EIP-2537: Precompile for BLS12-381 curve operations before the Prague hard fork is active</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_precompiles_before_fork.test_precompile_before_fork","title":"<code>test_precompile_before_fork(state_test, pre, post, tx)</code>","text":"<p>Test all BLS12 precompiles before the Prague hard fork is active.</p> <p>The call must succeed but the output must be empty.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_address,input\",\n    [\n        pytest.param(\n            Spec.G1ADD,\n            Spec.INF_G1 + Spec.INF_G1,\n            id=\"G1ADD\",\n        ),\n        pytest.param(\n            Spec.G1MSM,\n            Spec.INF_G1 + Scalar(0),\n            id=\"G1MSM\",\n        ),\n        pytest.param(\n            Spec.G1MUL,\n            Spec.INF_G1 + Scalar(0),\n            id=\"G1MUL\",\n        ),\n        pytest.param(\n            Spec.G2ADD,\n            Spec.INF_G2 + Spec.INF_G2,\n            id=\"G2ADD\",\n        ),\n        pytest.param(\n            Spec.G2MSM,\n            Spec.INF_G2 + Scalar(0),\n            id=\"G2MSM\",\n        ),\n        pytest.param(\n            Spec.G2MUL,\n            Spec.INF_G2 + Scalar(0),\n            id=\"G2MUL\",\n        ),\n        pytest.param(\n            Spec.PAIRING,\n            Spec.INF_G1 + Spec.INF_G2,\n            id=\"PAIRING\",\n        ),\n        pytest.param(\n            Spec.MAP_FP_TO_G1,\n            FP(0),\n            id=\"MAP_FP_TO_G1\",\n        ),\n        pytest.param(\n            Spec.MAP_FP2_TO_G2,\n            FP2((0, 0)),\n            id=\"MAP_FP2_TO_G2\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output,call_succeeds\", [pytest.param(b\"\", True, id=\"\")])\ndef test_precompile_before_fork(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test all BLS12 precompiles before the Prague hard fork is active.\n\n    The call must succeed but the output must be empty.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork/index/test_cases/","title":"Test Bls12 Precompiles Before Fork - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py</code>:</p> <pre><code>test_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--G1ADD]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--G1MSM]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--G1MUL]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--G2ADD]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--G2MSM]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--G2MUL]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--PAIRING]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--MAP_FP_TO_G1]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test--MAP_FP2_TO_G2]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--G1ADD]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--G1MSM]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--G1MUL]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--G2ADD]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--G2MSM]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--G2MUL]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--PAIRING]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--MAP_FP_TO_G1]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-blockchain_test_hive--MAP_FP2_TO_G2]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--G1ADD]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--G1MSM]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--G1MUL]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--G2ADD]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--G2MSM]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--G2MUL]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--PAIRING]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--MAP_FP_TO_G1]\ntest_precompile_before_fork[fork_CancunToPragueAtTime15k-state_test--MAP_FP2_TO_G2]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_precompiles_before_fork.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/","title":"Test Bls12 Variable Length Input Contracts","text":"<p>Documentation for <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests minimum gas and input length for BLS12_G1MSM, BLS12_G2MSM, BLS12_PAIRING precompiles of EIP-2537: Precompile for BLS12-381 curve operations <p>Tests minimum gas and input length for BLS12_G1MSM, BLS12_G2MSM, BLS12_PAIRING precompiles of EIP-2537: Precompile for BLS12-381 curve operations.</p>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_valid_gas_g1msm","title":"<code>test_valid_gas_g1msm(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MSM discount gas table in full, by expecting the call to succeed for all possible input lengths because the appropriate amount of gas is provided.</p> <p>If any of the calls fail, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [G1_GAS(i * G1_MSM_K_INPUT_LENGTH) for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            [i * G1_MSM_K_INPUT_LENGTH for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"exact_gas_full_discount_table\",\n        ),\n        pytest.param(\n            [\n                G1_GAS(i * G1_MSM_K_INPUT_LENGTH) + 1\n                for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))\n            ],\n            [i * G1_MSM_K_INPUT_LENGTH for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"one_extra_gas_full_discount_table\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [PointG1()], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.G1MSM])\ndef test_valid_gas_g1msm(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MSM discount gas table in full, by expecting the call to succeed for\n    all possible input lengths because the appropriate amount of gas is provided.\n\n    If any of the calls fail, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_invalid_gas_g1msm","title":"<code>test_invalid_gas_g1msm(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MSM discount gas table in full, by expecting the call to fail for all possible input lengths because the appropriate amount of gas is not provided.</p> <p>If any of the calls succeeds, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [0],\n            [G1_MSM_K_INPUT_LENGTH],\n            id=\"zero_gas_passed\",\n        ),\n        pytest.param(\n            [\n                G1_GAS(i * G1_MSM_K_INPUT_LENGTH) - 1\n                for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))\n            ],\n            [i * G1_MSM_K_INPUT_LENGTH for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"insufficient_gas_full_discount_table\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.G1MSM])\ndef test_invalid_gas_g1msm(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MSM discount gas table in full, by expecting the call to fail for\n    all possible input lengths because the appropriate amount of gas is not provided.\n\n    If any of the calls succeeds, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_invalid_length_g1msm","title":"<code>test_invalid_length_g1msm(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G1MSM discount gas table in full, by expecting the call to fail for all possible input lengths provided because they are too long or short, or zero length.</p> <p>If any of the calls succeeds, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [G1_GAS(G1_MSM_K_INPUT_LENGTH)],\n            [0],\n            id=\"zero_length_input\",\n        ),\n        pytest.param(\n            [G1_GAS(i * G1_MSM_K_INPUT_LENGTH) for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            [(i * G1_MSM_K_INPUT_LENGTH) - 1 for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"input_one_byte_too_short_full_discount_table\",\n        ),\n        pytest.param(\n            [G1_GAS(i * G1_MSM_K_INPUT_LENGTH) for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            [(i * G1_MSM_K_INPUT_LENGTH) + 1 for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"input_one_byte_too_long_full_discount_table\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.G1MSM])\ndef test_invalid_length_g1msm(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G1MSM discount gas table in full, by expecting the call to fail for\n    all possible input lengths provided because they are too long or short, or zero length.\n\n    If any of the calls succeeds, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_valid_gas_g2msm","title":"<code>test_valid_gas_g2msm(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MSM discount gas table in full, by expecting the call to succeed for all possible input lengths because the appropriate amount of gas is provided.</p> <p>If any of the calls fail, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [G2_GAS(i * G2_MSM_K_INPUT_LENGTH) for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            [i * G2_MSM_K_INPUT_LENGTH for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"exact_gas_full_discount_table\",\n        ),\n        pytest.param(\n            [\n                G2_GAS(i * G2_MSM_K_INPUT_LENGTH) + 1\n                for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))\n            ],\n            [i * G2_MSM_K_INPUT_LENGTH for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"one_extra_gas_full_discount_table\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [PointG2()], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.G2MSM])\ndef test_valid_gas_g2msm(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MSM discount gas table in full, by expecting the call to succeed for\n    all possible input lengths because the appropriate amount of gas is provided.\n\n    If any of the calls fail, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_invalid_gas_g2msm","title":"<code>test_invalid_gas_g2msm(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MSM discount gas table in full, by expecting the call to fail for all possible input lengths because the appropriate amount of gas is not provided.</p> <p>If any of the calls succeeds, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [0],\n            [G2_MSM_K_INPUT_LENGTH],\n            id=\"zero_gas_passed\",\n        ),\n        pytest.param(\n            [\n                G2_GAS(i * G2_MSM_K_INPUT_LENGTH) - 1\n                for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))\n            ],\n            [i * G2_MSM_K_INPUT_LENGTH for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"insufficient_gas_full_discount_table\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.G2MSM])\ndef test_invalid_gas_g2msm(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MSM discount gas table in full, by expecting the call to fail for\n    all possible input lengths because the appropriate amount of gas is not provided.\n\n    If any of the calls succeeds, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_invalid_length_g2msm","title":"<code>test_invalid_length_g2msm(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_G2MSM discount gas table in full, by expecting the call to fail for all possible input lengths provided because they are too long or short, or zero length.</p> <p>If any of the calls succeeds, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [G2_GAS(G2_MSM_K_INPUT_LENGTH)],\n            [0],\n            id=\"zero_length_input\",\n        ),\n        pytest.param(\n            [G2_GAS(i * G2_MSM_K_INPUT_LENGTH) for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            [(i * G2_MSM_K_INPUT_LENGTH) - 1 for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"input_one_byte_too_short_full_discount_table\",\n        ),\n        pytest.param(\n            [G2_GAS(i * G2_MSM_K_INPUT_LENGTH) for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            [(i * G2_MSM_K_INPUT_LENGTH) + 1 for i in range(1, len(Spec.MSM_DISCOUNT_TABLE))],\n            id=\"input_one_byte_too_long_full_discount_table\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.G2MSM])\ndef test_invalid_length_g2msm(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_G2MSM discount gas table in full, by expecting the call to fail for\n    all possible input lengths provided because they are too long or short, or zero length.\n\n    If any of the calls succeeds, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_valid_gas_pairing","title":"<code>test_valid_gas_pairing(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_PAIRING precompile, by expecting the call to succeed for all possible input lengths (up to k == PAIRINGS_TO_TEST).</p> <p>If any of the calls fails, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [PAIRING_GAS(i * Spec.LEN_PER_PAIR) for i in range(1, PAIRINGS_TO_TEST + 1)],\n            [i * Spec.LEN_PER_PAIR for i in range(1, PAIRINGS_TO_TEST + 1)],\n            id=\"sufficient_gas\",\n        ),\n        pytest.param(\n            [PAIRING_GAS(i * Spec.LEN_PER_PAIR) + 1 for i in range(1, PAIRINGS_TO_TEST + 1)],\n            [i * Spec.LEN_PER_PAIR for i in range(1, PAIRINGS_TO_TEST + 1)],\n            id=\"extra_gas\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.PAIRING_TRUE], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.PAIRING])\ndef test_valid_gas_pairing(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_PAIRING precompile, by expecting the call to succeed for all possible input\n    lengths (up to k == PAIRINGS_TO_TEST).\n\n    If any of the calls fails, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_invalid_gas_pairing","title":"<code>test_invalid_gas_pairing(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_PAIRING precompile, by expecting the call to fail for all possible input lengths (up to k == PAIRINGS_TO_TEST) because the appropriate amount of gas is not provided.</p> <p>If any of the calls succeeds, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [0],\n            [Spec.LEN_PER_PAIR],\n            id=\"zero_gas_passed\",\n        ),\n        pytest.param(\n            [PAIRING_GAS(i * Spec.LEN_PER_PAIR) - 1 for i in range(1, PAIRINGS_TO_TEST + 1)],\n            [i * Spec.LEN_PER_PAIR for i in range(1, PAIRINGS_TO_TEST + 1)],\n            id=\"insufficient_gas\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.PAIRING])\ndef test_invalid_gas_pairing(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_PAIRING precompile, by expecting the call to fail for all possible input\n    lengths (up to k == PAIRINGS_TO_TEST) because the appropriate amount of gas is not provided.\n\n    If any of the calls succeeds, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/#tests.prague.eip2537_bls_12_381_precompiles.test_bls12_variable_length_input_contracts.test_invalid_length_pairing","title":"<code>test_invalid_length_pairing(state_test, pre, post, tx)</code>","text":"<p>Test the BLS12_PAIRING precompile, by expecting the call to fail for all possible input lengths (up to k == PAIRINGS_TO_TEST) because the incorrect input length was used.</p> <p>If any of the calls succeeds, the test will fail.</p> Source code in <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code> <pre><code>@pytest.mark.parametrize(\n    \"precompile_gas_list,precompile_data_length_list\",\n    [\n        pytest.param(\n            [PAIRING_GAS(Spec.LEN_PER_PAIR)],\n            [0],\n            id=\"zero_length\",\n        ),\n        pytest.param(\n            [PAIRING_GAS(i * Spec.LEN_PER_PAIR) for i in range(1, PAIRINGS_TO_TEST + 1)],\n            [(i * Spec.LEN_PER_PAIR) - 1 for i in range(1, PAIRINGS_TO_TEST + 1)],\n            id=\"input_too_short\",\n        ),\n        pytest.param(\n            [PAIRING_GAS(i * Spec.LEN_PER_PAIR) for i in range(1, PAIRINGS_TO_TEST + 1)],\n            [(i * Spec.LEN_PER_PAIR) + 1 for i in range(1, PAIRINGS_TO_TEST + 1)],\n            id=\"input_too_long\",\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"expected_output\", [Spec.INVALID], ids=[\"\"])\n@pytest.mark.parametrize(\"tx_gas_limit\", [100_000_000], ids=[\"\"])\n@pytest.mark.parametrize(\"precompile_address\", [Spec.PAIRING])\ndef test_invalid_length_pairing(\n    state_test: StateTestFiller,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n):\n    \"\"\"\n    Test the BLS12_PAIRING precompile, by expecting the call to fail for all possible input\n    lengths (up to k == PAIRINGS_TO_TEST) because the incorrect input length was used.\n\n    If any of the calls succeeds, the test will fail.\n    \"\"\"\n    state_test(\n        env=Environment(),\n        pre=pre,\n        tx=tx,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts/index/test_cases/","title":"Test Bls12 Variable Length Input Contracts - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py</code>:</p> <pre><code>test_valid_gas_g1msm[fork_Prague-blockchain_test-precompile_address_13---exact_gas_full_discount_table]\ntest_valid_gas_g1msm[fork_Prague-blockchain_test-precompile_address_13---one_extra_gas_full_discount_table]\ntest_valid_gas_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---exact_gas_full_discount_table]\ntest_valid_gas_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---one_extra_gas_full_discount_table]\ntest_valid_gas_g1msm[fork_Prague-state_test-precompile_address_13---exact_gas_full_discount_table]\ntest_valid_gas_g1msm[fork_Prague-state_test-precompile_address_13---one_extra_gas_full_discount_table]\ntest_invalid_gas_g1msm[fork_Prague-blockchain_test-precompile_address_13---zero_gas_passed]\ntest_invalid_gas_g1msm[fork_Prague-blockchain_test-precompile_address_13---insufficient_gas_full_discount_table]\ntest_invalid_gas_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---zero_gas_passed]\ntest_invalid_gas_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---insufficient_gas_full_discount_table]\ntest_invalid_gas_g1msm[fork_Prague-state_test-precompile_address_13---zero_gas_passed]\ntest_invalid_gas_g1msm[fork_Prague-state_test-precompile_address_13---insufficient_gas_full_discount_table]\ntest_invalid_length_g1msm[fork_Prague-blockchain_test-precompile_address_13---zero_length_input]\ntest_invalid_length_g1msm[fork_Prague-blockchain_test-precompile_address_13---input_one_byte_too_short_full_discount_table]\ntest_invalid_length_g1msm[fork_Prague-blockchain_test-precompile_address_13---input_one_byte_too_long_full_discount_table]\ntest_invalid_length_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---zero_length_input]\ntest_invalid_length_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---input_one_byte_too_short_full_discount_table]\ntest_invalid_length_g1msm[fork_Prague-blockchain_test_hive-precompile_address_13---input_one_byte_too_long_full_discount_table]\ntest_invalid_length_g1msm[fork_Prague-state_test-precompile_address_13---zero_length_input]\ntest_invalid_length_g1msm[fork_Prague-state_test-precompile_address_13---input_one_byte_too_short_full_discount_table]\ntest_invalid_length_g1msm[fork_Prague-state_test-precompile_address_13---input_one_byte_too_long_full_discount_table]\ntest_valid_gas_g2msm[fork_Prague-blockchain_test-precompile_address_16---exact_gas_full_discount_table]\ntest_valid_gas_g2msm[fork_Prague-blockchain_test-precompile_address_16---one_extra_gas_full_discount_table]\ntest_valid_gas_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---exact_gas_full_discount_table]\ntest_valid_gas_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---one_extra_gas_full_discount_table]\ntest_valid_gas_g2msm[fork_Prague-state_test-precompile_address_16---exact_gas_full_discount_table]\ntest_valid_gas_g2msm[fork_Prague-state_test-precompile_address_16---one_extra_gas_full_discount_table]\ntest_invalid_gas_g2msm[fork_Prague-blockchain_test-precompile_address_16---zero_gas_passed]\ntest_invalid_gas_g2msm[fork_Prague-blockchain_test-precompile_address_16---insufficient_gas_full_discount_table]\ntest_invalid_gas_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---zero_gas_passed]\ntest_invalid_gas_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---insufficient_gas_full_discount_table]\ntest_invalid_gas_g2msm[fork_Prague-state_test-precompile_address_16---zero_gas_passed]\ntest_invalid_gas_g2msm[fork_Prague-state_test-precompile_address_16---insufficient_gas_full_discount_table]\ntest_invalid_length_g2msm[fork_Prague-blockchain_test-precompile_address_16---zero_length_input]\ntest_invalid_length_g2msm[fork_Prague-blockchain_test-precompile_address_16---input_one_byte_too_short_full_discount_table]\ntest_invalid_length_g2msm[fork_Prague-blockchain_test-precompile_address_16---input_one_byte_too_long_full_discount_table]\ntest_invalid_length_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---zero_length_input]\ntest_invalid_length_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---input_one_byte_too_short_full_discount_table]\ntest_invalid_length_g2msm[fork_Prague-blockchain_test_hive-precompile_address_16---input_one_byte_too_long_full_discount_table]\ntest_invalid_length_g2msm[fork_Prague-state_test-precompile_address_16---zero_length_input]\ntest_invalid_length_g2msm[fork_Prague-state_test-precompile_address_16---input_one_byte_too_short_full_discount_table]\ntest_invalid_length_g2msm[fork_Prague-state_test-precompile_address_16---input_one_byte_too_long_full_discount_table]\ntest_valid_gas_pairing[fork_Prague-blockchain_test-precompile_address_17---sufficient_gas]\ntest_valid_gas_pairing[fork_Prague-blockchain_test-precompile_address_17---extra_gas]\ntest_valid_gas_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---sufficient_gas]\ntest_valid_gas_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---extra_gas]\ntest_valid_gas_pairing[fork_Prague-state_test-precompile_address_17---sufficient_gas]\ntest_valid_gas_pairing[fork_Prague-state_test-precompile_address_17---extra_gas]\ntest_invalid_gas_pairing[fork_Prague-blockchain_test-precompile_address_17---zero_gas_passed]\ntest_invalid_gas_pairing[fork_Prague-blockchain_test-precompile_address_17---insufficient_gas]\ntest_invalid_gas_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---zero_gas_passed]\ntest_invalid_gas_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---insufficient_gas]\ntest_invalid_gas_pairing[fork_Prague-state_test-precompile_address_17---zero_gas_passed]\ntest_invalid_gas_pairing[fork_Prague-state_test-precompile_address_17---insufficient_gas]\ntest_invalid_length_pairing[fork_Prague-blockchain_test-precompile_address_17---zero_length]\ntest_invalid_length_pairing[fork_Prague-blockchain_test-precompile_address_17---input_too_short]\ntest_invalid_length_pairing[fork_Prague-blockchain_test-precompile_address_17---input_too_long]\ntest_invalid_length_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---zero_length]\ntest_invalid_length_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---input_too_short]\ntest_invalid_length_pairing[fork_Prague-blockchain_test_hive-precompile_address_17---input_too_long]\ntest_invalid_length_pairing[fork_Prague-state_test-precompile_address_17---zero_length]\ntest_invalid_length_pairing[fork_Prague-state_test-precompile_address_17---input_too_short]\ntest_invalid_length_pairing[fork_Prague-state_test-precompile_address_17---input_too_long]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2537_bls_12_381_precompiles/test_bls12_variable_length_input_contracts.py\n</code></pre>"},{"location":"tests/prague/eip2537_bls_12_381_precompiles/vectors/test-vectors./","title":"Test Vectors for EIP-2537 - Precompile for BLS12-381 curve operations","text":"<p>These test vectors are derived from BLS 12-381 tests</p>"},{"location":"tests/prague/eip2935_historical_block_hashes_from_state/","title":"EIP-2935 Historical Block Hashes From State","text":"<p>Documentation for <code>tests/prague/eip2935_historical_block_hashes_from_state</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2935_historical_block_hashes_from_state --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2935_historical_block_hashes_from_state --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client EIP-2935 Tests</p>"},{"location":"tests/prague/eip2935_historical_block_hashes_from_state/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip2935_historical_block_hashes_from_state/spec.py</code>.</p> <p>Defines EIP-2935 specification constants and functions.</p>"},{"location":"tests/prague/eip2935_historical_block_hashes_from_state/spec/#tests.prague.eip2935_historical_block_hashes_from_state.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-2935 specifications as defined at https://eips.ethereum.org/EIPS/eip-2935</p> Source code in <code>tests/prague/eip2935_historical_block_hashes_from_state/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-2935 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-2935\n    \"\"\"\n\n    HISTORY_STORAGE_ADDRESS = 0x25A219378DAD9B3503C8268C9CA836A52427A4FB\n    HISTORY_SERVE_WINDOW = 8192\n    BLOCKHASH_OLD_WINDOW = 256\n</code></pre>"},{"location":"tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes/","title":"Test Block Hashes","text":"<p>Documentation for <code>tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-2935: Serve historical block hashes from state <p>Test EIP-2935: Serve historical block hashes from state</p>"},{"location":"tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes/#tests.prague.eip2935_historical_block_hashes_from_state.test_block_hashes.test_block_hashes_history_at_transition","title":"<code>test_block_hashes_history_at_transition(blockchain_test, blocks_before_fork)</code>","text":"<p>Test the fork transition and that the block hashes of previous blocks, even blocks before the fork, are included in the state at the moment of the transition.</p> Source code in <code>tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blocks_before_fork\",\n    [\n        pytest.param(1, id=\"fork_at_1\"),\n        pytest.param(Spec.BLOCKHASH_OLD_WINDOW, id=\"fork_at_BLOCKHASH_OLD_WINDOW\"),\n        pytest.param(\n            Spec.BLOCKHASH_OLD_WINDOW + 1,\n            id=\"fork_at_BLOCKHASH_OLD_WINDOW_plus_1\",\n        ),\n        pytest.param(\n            Spec.BLOCKHASH_OLD_WINDOW + 2,\n            id=\"fork_at_BLOCKHASH_OLD_WINDOW_plus_2\",\n        ),\n        pytest.param(\n            Spec.HISTORY_SERVE_WINDOW + 1,\n            id=\"fork_at_HISTORY_SERVE_WINDOW_plus_1\",\n            marks=pytest.mark.skip(\"To be re-evaluated when updating the tests for new spec\"),\n        ),\n    ],\n)\n@pytest.mark.valid_at_transition_to(\"Prague\")\ndef test_block_hashes_history_at_transition(\n    blockchain_test: BlockchainTestFiller,\n    blocks_before_fork: int,\n):\n    \"\"\"\n    Test the fork transition and that the block hashes of previous blocks, even blocks\n    before the fork, are included in the state at the moment of the transition.\n    \"\"\"\n    # Fork happens at timestamp 15_000, and genesis counts as a block before fork.\n    blocks: List[Block] = []\n    assert blocks_before_fork &gt;= 1 and blocks_before_fork &lt; FORK_TIMESTAMP\n\n    pre = {TestAddress: Account(balance=10_000_000_000)}\n    post: Dict[Address, Account] = {}\n    tx_nonce = count(0)\n\n    current_code_address = 0x10000\n    for i in range(1, blocks_before_fork):\n        txs: List[Transaction] = []\n        if i == blocks_before_fork - 1:\n            # On the last block before the fork, BLOCKHASH must return values for the last 256\n            # blocks but not for the blocks before that.\n            # And HISTORY_STORAGE_ADDRESS should be empty.\n            code = b\"\"\n            storage = Storage()\n\n            # Check the last block before the window\n            code += generate_block_check_code(\n                block_number=(\n                    i - Spec.BLOCKHASH_OLD_WINDOW - 1\n                    if i &gt; Spec.BLOCKHASH_OLD_WINDOW\n                    else None  # Chain not long enough, no block to check\n                ),\n                populated_blockhash=False,\n                populated_contract=False,\n                storage=storage,\n            )\n\n            # Check the first block inside the window\n            code += generate_block_check_code(\n                block_number=(\n                    i - Spec.BLOCKHASH_OLD_WINDOW\n                    if i &gt; Spec.BLOCKHASH_OLD_WINDOW\n                    else 0  # Entire chain is inside the window, check genesis\n                ),\n                populated_blockhash=True,\n                populated_contract=False,\n                storage=storage,\n            )\n\n            txs.append(\n                Transaction(\n                    to=current_code_address,\n                    gas_limit=10_000_000,\n                    nonce=next(tx_nonce),\n                )\n            )\n            pre[Address(current_code_address)] = Account(code=code, nonce=1)\n            post[Address(current_code_address)] = Account(storage=storage)\n            current_code_address += 0x100\n        blocks.append(Block(timestamp=i, txs=txs))\n\n    # Add the fork block\n    current_block_number = len(blocks) + 1\n    txs = []\n    # On the block after the fork, BLOCKHASH must return values for the last\n    # Spec.HISTORY_SERVE_WINDOW blocks.\n    # And HISTORY_STORAGE_ADDRESS should be also serve the same values.\n    code = b\"\"\n    storage = Storage()\n\n    # Check the last block before the window\n    code += generate_block_check_code(\n        block_number=(\n            current_block_number - Spec.HISTORY_SERVE_WINDOW - 1\n            if current_block_number &gt; Spec.HISTORY_SERVE_WINDOW\n            else None  # Chain not long enough, no block to check\n        ),\n        populated_blockhash=False,\n        populated_contract=False,\n        storage=storage,\n    )\n\n    # Check the first block inside the window\n    code += generate_block_check_code(\n        block_number=(\n            current_block_number - Spec.HISTORY_SERVE_WINDOW\n            if current_block_number &gt; Spec.HISTORY_SERVE_WINDOW\n            else 0  # Entire chain is inside the window, check genesis\n        ),\n        populated_blockhash=True,\n        populated_contract=True,\n        storage=storage,\n    )\n\n    txs.append(\n        Transaction(\n            to=current_code_address,\n            gas_limit=10_000_000,\n            nonce=next(tx_nonce),\n        )\n    )\n    pre[Address(current_code_address)] = Account(code=code, nonce=1)\n    post[Address(current_code_address)] = Account(storage=storage)\n    current_code_address += 0x100\n\n    blocks.append(Block(timestamp=FORK_TIMESTAMP, txs=txs))\n\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        blocks=blocks,\n        post=post,\n    )\n</code></pre>"},{"location":"tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes/index/test_cases/","title":"Test Block Hashes - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py</code>:</p> <pre><code>test_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test-fork_at_1]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test-fork_at_BLOCKHASH_OLD_WINDOW]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test-fork_at_BLOCKHASH_OLD_WINDOW_plus_1]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test-fork_at_BLOCKHASH_OLD_WINDOW_plus_2]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test-fork_at_HISTORY_SERVE_WINDOW_plus_1]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test_hive-fork_at_1]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test_hive-fork_at_BLOCKHASH_OLD_WINDOW]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test_hive-fork_at_BLOCKHASH_OLD_WINDOW_plus_1]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test_hive-fork_at_BLOCKHASH_OLD_WINDOW_plus_2]\ntest_block_hashes_history_at_transition[fork_CancunToPragueAtTime15k-blockchain_test_hive-fork_at_HISTORY_SERVE_WINDOW_plus_1]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip2935_historical_block_hashes_from_state/test_block_hashes.py\n</code></pre>"},{"location":"tests/prague/eip6110_deposits/","title":"EIP-6110 Deposits","text":"<p>Documentation for <code>tests/prague/eip6110_deposits</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip6110_deposits --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip6110_deposits --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client EIP-6110 Tests</p>"},{"location":"tests/prague/eip6110_deposits/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip6110_deposits/spec.py</code>.</p> <p>Defines EIP-6110 specification constants and functions.</p>"},{"location":"tests/prague/eip6110_deposits/spec/#tests.prague.eip6110_deposits.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-6110 specifications as defined at https://eips.ethereum.org/EIPS/eip-6110</p> Source code in <code>tests/prague/eip6110_deposits/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-6110 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-6110\n    \"\"\"\n\n    DEPOSIT_CONTRACT_ADDRESS = 0x00000000219AB540356CBB839CBE05303D7705FA\n</code></pre>"},{"location":"tests/prague/eip6110_deposits/test_deposits/","title":"Test Deposits","text":"<p>Documentation for <code>tests/prague/eip6110_deposits/test_deposits.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip6110_deposits/test_deposits.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip6110_deposits/test_deposits.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-6110: Supply validator deposits on chain <p>Test EIP-6110: Supply validator deposits on chain.</p>"},{"location":"tests/prague/eip6110_deposits/test_deposits/#tests.prague.eip6110_deposits.test_deposits.test_deposit","title":"<code>test_deposit(blockchain_test, pre, blocks)</code>","text":"<p>Test making a deposit to the beacon chain deposit contract.</p> Source code in <code>tests/prague/eip6110_deposits/test_deposits.py</code> <pre><code>@pytest.mark.parametrize(\n    \"requests\",\n    [\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"single_deposit_from_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=120_000_000_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                    sender_balance=120_000_001_000_000_000 * 10**9,\n                ),\n            ],\n            id=\"single_deposit_from_eoa_huge_amount\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x1,\n                    ),\n                ),\n            ],\n            id=\"multiple_deposit_from_same_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=i,\n                    ),\n                )\n                for i in range(200)\n            ],\n            id=\"multiple_deposit_from_same_eoa_high_count\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                    sender_account=TestAccount1,\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x1,\n                    ),\n                    sender_account=TestAccount2,\n                ),\n            ],\n            id=\"multiple_deposit_from_different_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=999_999_999,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"multiple_deposit_from_same_eoa_first_reverts\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=999_999_999,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"multiple_deposit_from_same_eoa_last_reverts\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                        # From traces, gas used by the first tx is 82,718 so reduce by one here\n                        gas_limit=0x1431D,\n                        valid=False,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"multiple_deposit_from_same_eoa_first_oog\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                        # From traces, gas used by the second tx is 68,594 so reduce by one here\n                        gas_limit=0x10BF1,\n                        valid=False,\n                    ),\n                ),\n            ],\n            id=\"multiple_deposit_from_same_eoa_last_oog\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                        calldata_modifier=lambda _: b\"\",\n                        valid=False,\n                    ),\n                ),\n            ],\n            id=\"send_eth_from_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"single_deposit_from_contract\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x1,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"multiple_deposits_from_contract\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=i,\n                        )\n                        for i in range(1000)\n                    ],\n                    tx_gas_limit=60_000_000,\n                ),\n            ],\n            id=\"many_deposits_from_contract\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=999_999_999,\n                            signature=0x03,\n                            index=0x0,\n                            valid=False,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"multiple_deposits_from_contract_first_reverts\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=999_999_999,\n                            signature=0x03,\n                            index=0x1,\n                            valid=False,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"multiple_deposits_from_contract_last_reverts\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            gas_limit=100,\n                            index=0x0,\n                            valid=False,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            gas_limit=1_000_000,\n                            index=0x0,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"multiple_deposits_from_contract_first_oog\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                            gas_limit=1_000_000,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                            gas_limit=100,\n                            valid=False,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"multiple_deposits_from_contract_last_oog\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                            valid=False,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x1,\n                            valid=False,\n                        ),\n                    ],\n                    extra_code=Op.REVERT(0, 0),\n                ),\n            ],\n            id=\"multiple_deposits_from_contract_caller_reverts\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                            valid=False,\n                        ),\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=0x1,\n                            valid=False,\n                        ),\n                    ],\n                    extra_code=Macros.OOG(),\n                ),\n            ],\n            id=\"multiple_deposits_from_contract_caller_oog\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=1_000_000_000,\n                            signature=0x03,\n                            index=i,\n                            valid=False,\n                        )\n                        for i in range(1000)\n                    ],\n                    tx_gas_limit=23_738_700,\n                ),\n            ],\n            id=\"many_deposits_from_contract_oog\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                        ),\n                    ],\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x1,\n                    ),\n                ),\n            ],\n            id=\"single_deposit_from_contract_single_deposit_from_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x1,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"single_deposit_from_eoa_single_deposit_from_contract\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x1,\n                        ),\n                    ],\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x2,\n                    ),\n                ),\n            ],\n            id=\"single_deposit_from_contract_between_eoa_deposits\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x0,\n                        ),\n                    ],\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x1,\n                    ),\n                ),\n                DepositContract(\n                    request=[\n                        DepositRequest(\n                            pubkey=0x01,\n                            withdrawal_credentials=0x02,\n                            amount=32_000_000_000,\n                            signature=0x03,\n                            index=0x2,\n                        ),\n                    ],\n                ),\n            ],\n            id=\"single_deposit_from_eoa_between_contract_deposits\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                        valid=False,\n                    ),\n                    call_type=Op.DELEGATECALL,\n                ),\n            ],\n            id=\"single_deposit_from_contract_delegatecall\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                        valid=False,\n                    ),\n                    call_type=Op.STATICCALL,\n                ),\n            ],\n            id=\"single_deposit_from_contract_staticcall\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                        valid=False,\n                    ),\n                    call_type=Op.CALLCODE,\n                ),\n            ],\n            id=\"single_deposit_from_contract_callcode\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                    call_depth=3,\n                ),\n            ],\n            id=\"single_deposit_from_contract_call_depth_3\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                    call_depth=1024,\n                    tx_gas_limit=2_500_000_000_000,\n                ),\n            ],\n            id=\"single_deposit_from_contract_call_high_depth\",\n        ),\n        # TODO: Send eth with the transaction to the contract\n    ],\n)\ndef test_deposit(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict[Address, Account],\n    blocks: List[Block],\n):\n    \"\"\"\n    Test making a deposit to the beacon chain deposit contract.\n    \"\"\"\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"tests/prague/eip6110_deposits/test_deposits/#tests.prague.eip6110_deposits.test_deposits.test_deposit_negative","title":"<code>test_deposit_negative(blockchain_test, pre, blocks)</code>","text":"<p>Test producing a block with the incorrect deposits in the body of the block, and/or Engine API payload.</p> Source code in <code>tests/prague/eip6110_deposits/test_deposits.py</code> <pre><code>@pytest.mark.parametrize(\n    \"requests,block_body_override_requests,exception\",\n    [\n        pytest.param(\n            [],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                ),\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"no_deposits_non_empty_requests_list\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_empty_requests_list\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x02,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_pubkey_mismatch\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x03,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_credentials_mismatch\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=2_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_amount_mismatch\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x04,\n                    index=0x0,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_signature_mismatch\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x1,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_index_mismatch\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x1,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x1,\n                ),\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                ),\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"two_deposits_out_of_order\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=1_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                ),\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=1_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                ),\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_duplicate_in_requests_list\",\n        ),\n    ],\n)\ndef test_deposit_negative(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict[Address, Account],\n    blocks: List[Block],\n):\n    \"\"\"\n    Test producing a block with the incorrect deposits in the body of the block,\n    and/or Engine API payload.\n    \"\"\"\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"tests/prague/eip6110_deposits/test_deposits/index/test_cases/","title":"Test Deposits - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip6110_deposits/test_deposits.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip6110_deposits/test_deposits.py</code>:</p> <pre><code>test_deposit[fork_Prague-blockchain_test-single_deposit_from_eoa]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_eoa_huge_amount]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_same_eoa]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_same_eoa_high_count]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_different_eoa]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_same_eoa_first_reverts]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_same_eoa_last_reverts]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_same_eoa_first_oog]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposit_from_same_eoa_last_oog]\ntest_deposit[fork_Prague-blockchain_test-send_eth_from_eoa]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract]\ntest_deposit[fork_Prague-blockchain_test-many_deposits_from_contract]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract_first_reverts]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract_last_reverts]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract_first_oog]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract_last_oog]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract_caller_reverts]\ntest_deposit[fork_Prague-blockchain_test-multiple_deposits_from_contract_caller_oog]\ntest_deposit[fork_Prague-blockchain_test-many_deposits_from_contract_oog]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_single_deposit_from_eoa]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_eoa_single_deposit_from_contract]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_between_eoa_deposits]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_eoa_between_contract_deposits]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_delegatecall]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_staticcall]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_callcode]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_call_depth_3]\ntest_deposit[fork_Prague-blockchain_test-single_deposit_from_contract_call_high_depth]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_eoa]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_eoa_huge_amount]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_same_eoa]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_same_eoa_high_count]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_different_eoa]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_same_eoa_first_reverts]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_same_eoa_last_reverts]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_same_eoa_first_oog]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposit_from_same_eoa_last_oog]\ntest_deposit[fork_Prague-blockchain_test_hive-send_eth_from_eoa]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract]\ntest_deposit[fork_Prague-blockchain_test_hive-many_deposits_from_contract]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract_first_reverts]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract_last_reverts]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract_first_oog]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract_last_oog]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract_caller_reverts]\ntest_deposit[fork_Prague-blockchain_test_hive-multiple_deposits_from_contract_caller_oog]\ntest_deposit[fork_Prague-blockchain_test_hive-many_deposits_from_contract_oog]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_single_deposit_from_eoa]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_eoa_single_deposit_from_contract]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_between_eoa_deposits]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_eoa_between_contract_deposits]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_delegatecall]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_staticcall]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_callcode]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_call_depth_3]\ntest_deposit[fork_Prague-blockchain_test_hive-single_deposit_from_contract_call_high_depth]\ntest_deposit_negative[fork_Prague-blockchain_test-no_deposits_non_empty_requests_list]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_empty_requests_list]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_pubkey_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_credentials_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_amount_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_signature_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_index_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test-two_deposits_out_of_order]\ntest_deposit_negative[fork_Prague-blockchain_test-single_deposit_duplicate_in_requests_list]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-no_deposits_non_empty_requests_list]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_empty_requests_list]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_pubkey_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_credentials_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_amount_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_signature_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_index_mismatch]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-two_deposits_out_of_order]\ntest_deposit_negative[fork_Prague-blockchain_test_hive-single_deposit_duplicate_in_requests_list]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip6110_deposits/test_deposits.py\n</code></pre>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/","title":"EIP-7002 El Triggerable Withdrawals","text":"<p>Documentation for <code>tests/prague/eip7002_el_triggerable_withdrawals</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7002_el_triggerable_withdrawals --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7002_el_triggerable_withdrawals --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client EIP-7002 Tests</p>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip7002_el_triggerable_withdrawals/spec.py</code>.</p> <p>Common procedures to test EIP-7002: Execution layer triggerable withdrawals</p>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/spec/#tests.prague.eip7002_el_triggerable_withdrawals.spec.Spec","title":"<code>Spec</code>  <code>dataclass</code>","text":"<p>Parameters from the EIP-7002 specifications as defined at https://eips.ethereum.org/EIPS/eip-7002#configuration</p> <p>If the parameter is not currently used within the tests, it is commented out.</p> Source code in <code>tests/prague/eip7002_el_triggerable_withdrawals/spec.py</code> <pre><code>@dataclass(frozen=True)\nclass Spec:\n    \"\"\"\n    Parameters from the EIP-7002 specifications as defined at\n    https://eips.ethereum.org/EIPS/eip-7002#configuration\n\n    If the parameter is not currently used within the tests, it is commented\n    out.\n    \"\"\"\n\n    WITHDRAWAL_REQUEST_PREDEPLOY_ADDRESS = 0x00A3CA265EBCB825B45F985A16CEFB49958CE017\n    SYSTEM_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n\n    EXCESS_WITHDRAWAL_REQUESTS_STORAGE_SLOT = 0\n    WITHDRAWAL_REQUEST_COUNT_STORAGE_SLOT = 1\n    WITHDRAWAL_REQUEST_QUEUE_HEAD_STORAGE_SLOT = (\n        2  # Pointer to head of the withdrawal request message queue\n    )\n    WITHDRAWAL_REQUEST_QUEUE_TAIL_STORAGE_SLOT = (\n        3  # Pointer to the tail of the withdrawal request message queue\n    )\n    WITHDRAWAL_REQUEST_QUEUE_STORAGE_OFFSET = (\n        4  # The start memory slot of the in-state withdrawal request message queue\n    )\n    MAX_WITHDRAWAL_REQUESTS_PER_BLOCK = (\n        16  # Maximum number of withdrawal requests that can be de-queued into a block\n    )\n    TARGET_WITHDRAWAL_REQUESTS_PER_BLOCK = 2\n    MIN_WITHDRAWAL_REQUEST_FEE = 1\n    WITHDRAWAL_REQUEST_FEE_UPDATE_FRACTION = 17\n    EXCESS_RETURN_GAS_STIPEND = 2300\n\n    MAX_AMOUNT = 2**64 - 1\n\n    @staticmethod\n    def fake_exponential(factor: int, numerator: int, denominator: int) -&gt; int:\n        \"\"\"\n        Used to calculate the withdrawal request fee.\n        \"\"\"\n        i = 1\n        output = 0\n        numerator_accumulator = factor * denominator\n        while numerator_accumulator &gt; 0:\n            output += numerator_accumulator\n            numerator_accumulator = (numerator_accumulator * numerator) // (denominator * i)\n            i += 1\n        return output // denominator\n\n    @staticmethod\n    def get_fee(excess_withdrawal_requests: int) -&gt; int:\n        \"\"\"\n        Calculate the fee for the excess withdrawal requests.\n        \"\"\"\n        return Spec.fake_exponential(\n            Spec.MIN_WITHDRAWAL_REQUEST_FEE,\n            excess_withdrawal_requests,\n            Spec.WITHDRAWAL_REQUEST_FEE_UPDATE_FRACTION,\n        )\n\n    @staticmethod\n    def get_excess_withdrawal_requests(previous_excess: int, count: int) -&gt; int:\n        \"\"\"\n        Calculate the new excess withdrawal requests.\n        \"\"\"\n        if previous_excess + count &gt; Spec.TARGET_WITHDRAWAL_REQUESTS_PER_BLOCK:\n            return previous_excess + count - Spec.TARGET_WITHDRAWAL_REQUESTS_PER_BLOCK\n        return 0\n</code></pre>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests/","title":"Test Withdrawal Requests","text":"<p>Documentation for <code>tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-7002: Execution layer triggerable withdrawals <p>Test execution layer triggered exits EIP-7002: Execution layer triggerable withdrawals</p>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests/#tests.prague.eip7002_el_triggerable_withdrawals.test_withdrawal_requests.test_withdrawal_requests","title":"<code>test_withdrawal_requests(blockchain_test, blocks, pre)</code>","text":"<p>Test making a withdrawal request to the beacon chain.</p> Source code in <code>tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py</code> <pre><code>@pytest.mark.parametrize(\n    \"blocks_withdrawal_requests\",\n    [\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_single_withdrawal_request_from_eoa\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=0,\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_single_withdrawal_request_from_eoa_insufficient_fee\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            calldata_modifier=lambda x: x[:-1],\n                            valid=False,\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_single_withdrawal_request_from_eoa_input_too_short\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            calldata_modifier=lambda x: x + b\"\\x00\",\n                            valid=False,\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_single_withdrawal_request_from_eoa_input_too_long\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x02,\n                            amount=Spec.MAX_AMOUNT - 1,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_request_from_same_eoa\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x02,\n                            amount=Spec.MAX_AMOUNT - 1,\n                            fee=Spec.get_fee(0),\n                        ),\n                        sender_account=TestAccount2,\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_request_from_different_eoa\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=i + 1,\n                            amount=0 if i % 2 == 0 else Spec.MAX_AMOUNT,\n                            fee=Spec.get_fee(0),\n                        ),\n                    )\n                    for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                ],\n            ],\n            id=\"single_block_max_withdrawal_requests_from_eoa\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=0,\n                        ),\n                    ),\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x02,\n                            amount=Spec.MAX_AMOUNT - 1,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_request_first_reverts\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x02,\n                            amount=Spec.MAX_AMOUNT - 1,\n                            fee=0,\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_request_last_reverts\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            # Value obtained from trace minus one\n                            gas_limit=114_247 - 1,\n                            valid=False,\n                        ),\n                    ),\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x02,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_request_first_oog\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x02,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            # Value obtained from trace minus one\n                            gas_limit=80_047 - 1,\n                            valid=False,\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_request_last_oog\",\n        ),\n        pytest.param(\n            [\n                # Block 1\n                [\n                    WithdrawalRequestTransaction(\n                        request=WithdrawalRequest(\n                            validator_public_key=i + 1,\n                            amount=0 if i % 2 == 0 else Spec.MAX_AMOUNT,\n                            fee=Spec.get_fee(0),\n                        ),\n                    )\n                    for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK * 2)\n                ],\n                # Block 2, no new withdrawal requests, but queued requests from previous block\n                [],\n                # Block 3, no new nor queued withdrawal requests\n                [],\n            ],\n            id=\"multiple_block_above_max_withdrawal_requests_from_eoa\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                        ),\n                    ),\n                ],\n            ],\n            id=\"single_block_single_withdrawal_request_from_contract\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                fee=Spec.get_fee(0),\n                            )\n                            for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                        ],\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=1,\n                                amount=Spec.MAX_AMOUNT,\n                                fee=0,\n                            )\n                        ]\n                        + [\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                fee=Spec.get_fee(0),\n                            )\n                            for i in range(1, Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                        ],\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract_first_reverts\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                fee=Spec.get_fee(0),\n                            )\n                            for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK - 1)\n                        ]\n                        + [\n                            WithdrawalRequest(\n                                validator_public_key=Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK,\n                                amount=Spec.MAX_AMOUNT - 1\n                                if (Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK - 1) % 2 == 0\n                                else 0,\n                                fee=0,\n                            )\n                        ],\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract_last_reverts\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=1,\n                                amount=Spec.MAX_AMOUNT - 1,\n                                gas_limit=100,\n                                fee=Spec.get_fee(0),\n                                valid=False,\n                            )\n                        ]\n                        + [\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                gas_limit=1_000_000,\n                                fee=Spec.get_fee(0),\n                                valid=True,\n                            )\n                            for i in range(1, Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                        ],\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract_first_oog\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                fee=Spec.get_fee(0),\n                                gas_limit=1_000_000,\n                                valid=True,\n                            )\n                            for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                        ]\n                        + [\n                            WithdrawalRequest(\n                                validator_public_key=Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK,\n                                amount=Spec.MAX_AMOUNT - 1,\n                                gas_limit=100,\n                                fee=Spec.get_fee(0),\n                                valid=False,\n                            )\n                        ],\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract_last_oog\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                fee=Spec.get_fee(0),\n                                valid=False,\n                            )\n                            for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                        ],\n                        extra_code=Op.REVERT(0, 0),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract_caller_reverts\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=[\n                            WithdrawalRequest(\n                                validator_public_key=i + 1,\n                                amount=Spec.MAX_AMOUNT - 1 if i % 2 == 0 else 0,\n                                fee=Spec.get_fee(0),\n                                valid=False,\n                            )\n                            for i in range(Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK)\n                        ],\n                        extra_code=Macros.OOG(),\n                    ),\n                ],\n            ],\n            id=\"single_block_multiple_withdrawal_requests_from_contract_caller_oog\",\n        ),\n        pytest.param(\n            # Test the first 50 fee increments\n            get_n_fee_increment_blocks(50),\n            id=\"multiple_block_fee_increments\",\n        ),\n        pytest.param(\n            [\n                [\n                    WithdrawalRequestContract(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            valid=False,\n                        ),\n                        call_type=Op.DELEGATECALL,\n                    ),\n                    WithdrawalRequestContract(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            valid=False,\n                        ),\n                        call_type=Op.STATICCALL,\n                    ),\n                    WithdrawalRequestContract(\n                        request=WithdrawalRequest(\n                            validator_public_key=0x01,\n                            amount=0,\n                            fee=Spec.get_fee(0),\n                            valid=False,\n                        ),\n                        call_type=Op.CALLCODE,\n                    ),\n                ],\n            ],\n            id=\"single_block_single_withdrawal_request_delegatecall_staticcall_callcode\",\n        ),\n    ],\n)\ndef test_withdrawal_requests(\n    blockchain_test: BlockchainTestFiller,\n    blocks: List[Block],\n    pre: Dict[Address, Account],\n):\n    \"\"\"\n    Test making a withdrawal request to the beacon chain.\n    \"\"\"\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests/#tests.prague.eip7002_el_triggerable_withdrawals.test_withdrawal_requests.test_withdrawal_requests_negative","title":"<code>test_withdrawal_requests_negative(blockchain_test, requests, block_body_override_requests, exception)</code>","text":"<p>Test blocks where the requests list and the actual withdrawal requests that happened in the block's transactions do not match.</p> Source code in <code>tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py</code> <pre><code>@pytest.mark.parametrize(\n    \"requests,block_body_override_requests,exception\",\n    [\n        pytest.param(\n            [],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=0,\n                    source_address=Address(0),\n                ),\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"no_withdrawals_non_empty_requests_list\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n            ],\n            [],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_withdrawal_request_empty_requests_list\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n            ],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x02,\n                    amount=0,\n                    source_address=TestAddress,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_withdrawal_request_public_key_mismatch\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n            ],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=1,\n                    source_address=TestAddress,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_withdrawal_request_amount_mismatch\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n            ],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=0,\n                    source_address=TestAddress2,\n                )\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_withdrawal_request_source_address_mismatch\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x02,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n            ],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x02,\n                    amount=0,\n                    source_address=TestAddress,\n                ),\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=0,\n                    source_address=TestAddress,\n                ),\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"two_withdrawal_requests_out_of_order\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=Spec.get_fee(0),\n                    ),\n                ),\n            ],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=0,\n                    source_address=TestAddress,\n                ),\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=0,\n                    source_address=TestAddress,\n                ),\n            ],\n            BlockException.INVALID_REQUESTS,\n            id=\"single_withdrawal_requests_duplicate_in_requests_list\",\n        ),\n    ],\n)\ndef test_withdrawal_requests_negative(\n    blockchain_test: BlockchainTestFiller,\n    requests: List[WithdrawalRequestInteractionBase],\n    block_body_override_requests: List[WithdrawalRequest],\n    exception: BlockException,\n):\n    \"\"\"\n    Test blocks where the requests list and the actual withdrawal requests that happened in the\n    block's transactions do not match.\n    \"\"\"\n    # No previous block so fee is the base\n    fee = 1\n    current_block_requests = []\n    for w in requests:\n        current_block_requests += w.valid_requests(fee)\n    included_requests = current_block_requests[: Spec.MAX_WITHDRAWAL_REQUESTS_PER_BLOCK]\n\n    pre: Dict[Address, Account] = {}\n    for d in requests:\n        d.update_pre(pre)\n\n    address_nonce: Dict[Address, int] = {}\n    txs = []\n    for r in requests:\n        nonce = 0\n        if r.sender_account.address in address_nonce:\n            nonce = address_nonce[r.sender_account.address]\n        txs.append(r.transaction(nonce))\n        address_nonce[r.sender_account.address] = nonce + 1\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=[\n            Block(\n                txs=txs,\n                header_verify=Header(\n                    requests_root=included_requests,\n                ),\n                requests=block_body_override_requests,\n                exception=exception,\n            )\n        ],\n    )\n</code></pre>"},{"location":"tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests/index/test_cases/","title":"Test Withdrawal Requests - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py</code>:</p> <pre><code>test_withdrawal_requests[fork_Prague-blockchain_test-single_block_single_withdrawal_request_from_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_single_withdrawal_request_from_eoa_insufficient_fee]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_single_withdrawal_request_from_eoa_input_too_short]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_single_withdrawal_request_from_eoa_input_too_long]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_request_from_same_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_request_from_different_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_max_withdrawal_requests_from_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_request_first_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_request_last_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_request_first_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_request_last_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test-multiple_block_above_max_withdrawal_requests_from_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_single_withdrawal_request_from_contract]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract_first_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract_last_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract_first_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract_last_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract_caller_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_multiple_withdrawal_requests_from_contract_caller_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test-multiple_block_fee_increments]\ntest_withdrawal_requests[fork_Prague-blockchain_test-single_block_single_withdrawal_request_delegatecall_staticcall_callcode]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_single_withdrawal_request_from_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_single_withdrawal_request_from_eoa_insufficient_fee]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_single_withdrawal_request_from_eoa_input_too_short]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_single_withdrawal_request_from_eoa_input_too_long]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_request_from_same_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_request_from_different_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_max_withdrawal_requests_from_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_request_first_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_request_last_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_request_first_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_request_last_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-multiple_block_above_max_withdrawal_requests_from_eoa]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_single_withdrawal_request_from_contract]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract_first_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract_last_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract_first_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract_last_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract_caller_reverts]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_multiple_withdrawal_requests_from_contract_caller_oog]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-multiple_block_fee_increments]\ntest_withdrawal_requests[fork_Prague-blockchain_test_hive-single_block_single_withdrawal_request_delegatecall_staticcall_callcode]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-no_withdrawals_non_empty_requests_list]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-single_withdrawal_request_empty_requests_list]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-single_withdrawal_request_public_key_mismatch]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-single_withdrawal_request_amount_mismatch]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-single_withdrawal_request_source_address_mismatch]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-two_withdrawal_requests_out_of_order]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test-single_withdrawal_requests_duplicate_in_requests_list]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-no_withdrawals_non_empty_requests_list]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-single_withdrawal_request_empty_requests_list]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-single_withdrawal_request_public_key_mismatch]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-single_withdrawal_request_amount_mismatch]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-single_withdrawal_request_source_address_mismatch]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-two_withdrawal_requests_out_of_order]\ntest_withdrawal_requests_negative[fork_Prague-blockchain_test_hive-single_withdrawal_requests_duplicate_in_requests_list]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip7002_el_triggerable_withdrawals/test_withdrawal_requests.py\n</code></pre>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/","title":"EIP-7685 General Purpose El Requests","text":"<p>Documentation for <code>tests/prague/eip7685_general_purpose_el_requests</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7685_general_purpose_el_requests --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7685_general_purpose_el_requests --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client EIP-7685 Tests</p>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip7685_general_purpose_el_requests/spec.py</code>.</p> <p>Common procedures to test EIP-7685: General purpose execution layer requests</p>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals/","title":"Test Deposits Withdrawals","text":"<p>Documentation for <code>tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-7685: General purpose execution layer requests <p>Cross testing for withdrawal and deposit request for EIP-7685: General purpose execution layer requests</p>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals/#tests.prague.eip7685_general_purpose_el_requests.test_deposits_withdrawals.test_valid_deposit_withdrawal_requests","title":"<code>test_valid_deposit_withdrawal_requests(blockchain_test, pre, blocks)</code>","text":"<p>Test making a deposit to the beacon chain deposit contract and a withdrawal in the same block.</p> Source code in <code>tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\n    \"requests\",\n    [\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n            ],\n            id=\"single_deposit_from_eoa_single_withdrawal_from_eoa\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"single_withdrawal_from_eoa_single_deposit_from_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x1,\n                    ),\n                ),\n            ],\n            id=\"two_deposits_from_eoa_single_withdrawal_from_eoa\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=1,\n                        fee=1,\n                    ),\n                ),\n            ],\n            id=\"two_withdrawals_from_eoa_single_deposit_from_eoa\",\n        ),\n        pytest.param(\n            [\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n                WithdrawalRequestContract(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n            ],\n            id=\"single_deposit_from_contract_single_withdrawal_from_contract\",\n        ),\n        pytest.param(\n            [\n                WithdrawalRequestContract(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n                DepositContract(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            id=\"single_withdrawal_from_contract_single_deposit_from_contract\",\n        ),\n        # TODO: Deposit and withdrawal in the same transaction\n    ],\n)\ndef test_valid_deposit_withdrawal_requests(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict[Address, Account],\n    blocks: List[Block],\n):\n    \"\"\"\n    Test making a deposit to the beacon chain deposit contract and a withdrawal in the same block.\n    \"\"\"\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals/#tests.prague.eip7685_general_purpose_el_requests.test_deposits_withdrawals.test_valid_deposit_withdrawal_request_from_same_tx","title":"<code>test_valid_deposit_withdrawal_request_from_same_tx(blockchain_test, deposit_first)</code>","text":"<p>Test making a deposit to the beacon chain deposit contract and a withdrawal in the same tx.</p> Source code in <code>tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\n    \"deposit_first\",\n    [\n        pytest.param(True, id=\"deposit_first\"),\n        pytest.param(False, id=\"withdrawal_first\"),\n    ],\n)\ndef test_valid_deposit_withdrawal_request_from_same_tx(\n    blockchain_test: BlockchainTestFiller,\n    deposit_first: bool,\n):\n    \"\"\"\n    Test making a deposit to the beacon chain deposit contract and a withdrawal in the same tx.\n    \"\"\"\n    contract_address = 0x200\n    withdrawal_request_fee = 1\n    deposit_request = DepositRequest(\n        pubkey=0x01,\n        withdrawal_credentials=0x02,\n        amount=32_000_000_000,\n        signature=0x03,\n        index=0x0,\n    )\n    withdrawal_request = WithdrawalRequest(\n        validator_public_key=0x01,\n        amount=0,\n        source_address=contract_address,\n    )\n    if deposit_first:\n        calldata = deposit_request.calldata + withdrawal_request.calldata\n        contract_code = (\n            Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n            + Op.POP(\n                Op.CALL(\n                    Op.GAS,\n                    Spec_EIP6110.DEPOSIT_CONTRACT_ADDRESS,\n                    deposit_request.value,\n                    0,\n                    len(deposit_request.calldata),\n                    0,\n                    0,\n                )\n            )\n            + Op.POP(\n                Op.CALL(\n                    Op.GAS,\n                    Spec_EIP7002.WITHDRAWAL_REQUEST_PREDEPLOY_ADDRESS,\n                    withdrawal_request_fee,\n                    len(deposit_request.calldata),\n                    len(withdrawal_request.calldata),\n                    0,\n                    0,\n                )\n            )\n        )\n    else:\n        calldata = withdrawal_request.calldata + deposit_request.calldata\n        contract_code = (\n            Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n            + Op.POP(\n                Op.CALL(\n                    Op.GAS,\n                    Spec_EIP7002.WITHDRAWAL_REQUEST_PREDEPLOY_ADDRESS,\n                    withdrawal_request_fee,\n                    0,\n                    len(withdrawal_request.calldata),\n                    0,\n                    0,\n                )\n            )\n            + Op.POP(\n                Op.CALL(\n                    Op.GAS,\n                    Spec_EIP6110.DEPOSIT_CONTRACT_ADDRESS,\n                    deposit_request.value,\n                    len(withdrawal_request.calldata),\n                    len(deposit_request.calldata),\n                    0,\n                    0,\n                )\n            )\n        )\n\n    pre = {\n        TestAddress: Account(\n            balance=10**18,\n        ),\n        contract_address: Account(\n            code=contract_code,\n            balance=deposit_request.value + withdrawal_request_fee,\n        ),\n    }\n\n    tx = Transaction(\n        nonce=0,\n        gas_limit=1_000_000,\n        gas_price=0x07,\n        to=contract_address,\n        value=0,\n        data=calldata,\n    )\n\n    block = Block(\n        txs=[tx],\n        header_verify=Header(\n            requests_root=[deposit_request, withdrawal_request],\n        ),\n    )\n\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=[block],\n    )\n</code></pre>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals/#tests.prague.eip7685_general_purpose_el_requests.test_deposits_withdrawals.test_invalid_deposit_withdrawal_requests","title":"<code>test_invalid_deposit_withdrawal_requests(blockchain_test, pre, blocks)</code>","text":"<p>Negative testing for deposits and withdrawals in the same block.</p> Source code in <code>tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\n    \"requests,block_body_override_requests,exception\",\n    [\n        pytest.param(\n            [\n                WithdrawalRequestTransaction(\n                    request=WithdrawalRequest(\n                        validator_public_key=0x01,\n                        amount=0,\n                        fee=1,\n                    ),\n                ),\n                DepositTransaction(\n                    request=DepositRequest(\n                        pubkey=0x01,\n                        withdrawal_credentials=0x02,\n                        amount=32_000_000_000,\n                        signature=0x03,\n                        index=0x0,\n                    ),\n                ),\n            ],\n            [\n                WithdrawalRequest(\n                    validator_public_key=0x01,\n                    amount=0,\n                    source_address=TestAddress,\n                ),\n                DepositRequest(\n                    pubkey=0x01,\n                    withdrawal_credentials=0x02,\n                    amount=32_000_000_000,\n                    signature=0x03,\n                    index=0x0,\n                ),\n            ],\n            # TODO: on the Engine API, the issue should be detected as an invalid block hash\n            BlockException.INVALID_REQUESTS,\n            id=\"single_deposit_from_eoa_single_withdrawal_from_eoa_incorrect_order\",\n        ),\n    ],\n)\ndef test_invalid_deposit_withdrawal_requests(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict[Address, Account],\n    blocks: List[Block],\n):\n    \"\"\"\n    Negative testing for deposits and withdrawals in the same block.\n    \"\"\"\n    blockchain_test(\n        genesis_environment=Environment(),\n        pre=pre,\n        post={},\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals/index/test_cases/","title":"Test Deposits Withdrawals - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py</code>:</p> <pre><code>test_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test-single_deposit_from_eoa_single_withdrawal_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test-single_withdrawal_from_eoa_single_deposit_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test-two_deposits_from_eoa_single_withdrawal_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test-two_withdrawals_from_eoa_single_deposit_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test-single_deposit_from_contract_single_withdrawal_from_contract]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test-single_withdrawal_from_contract_single_deposit_from_contract]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-single_deposit_from_eoa_single_withdrawal_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-single_withdrawal_from_eoa_single_deposit_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-two_deposits_from_eoa_single_withdrawal_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-two_withdrawals_from_eoa_single_deposit_from_eoa]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-single_deposit_from_contract_single_withdrawal_from_contract]\ntest_valid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-single_withdrawal_from_contract_single_deposit_from_contract]\ntest_valid_deposit_withdrawal_request_from_same_tx[fork_Prague-blockchain_test-deposit_first]\ntest_valid_deposit_withdrawal_request_from_same_tx[fork_Prague-blockchain_test-withdrawal_first]\ntest_valid_deposit_withdrawal_request_from_same_tx[fork_Prague-blockchain_test_hive-deposit_first]\ntest_valid_deposit_withdrawal_request_from_same_tx[fork_Prague-blockchain_test_hive-withdrawal_first]\ntest_invalid_deposit_withdrawal_requests[fork_Prague-blockchain_test-single_deposit_from_eoa_single_withdrawal_from_eoa_incorrect_order]\ntest_invalid_deposit_withdrawal_requests[fork_Prague-blockchain_test_hive-single_deposit_from_eoa_single_withdrawal_from_eoa_incorrect_order]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/prague/eip7685_general_purpose_el_requests/test_deposits_withdrawals.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/","title":"EIP-7692 Eof V1","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1 --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1 --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Test cases for all EIPs mentioned in the EOF V1 meta-EIP.</p>"},{"location":"tests/prague/eip7692_eof_v1/tracker./","title":"EOF Testing Coverage Tracker","text":"<ul> <li> Example Test Case 1</li> <li> Example Test Case 2 (./eip3540_eof_v1/test_example_valid_invalid.py::test_example_valid_invalid)</li> <li> Example Test Case 3 (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-3540-eof-evm-object-format-v1","title":"EIP-3540: EOF - EVM Object Format v1","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation","title":"Validation","text":"<ul> <li> Empty code is not a valid EOF (ethereum/tests: src/EOFTestsFiller/efValidation/validate_empty_code_Copier.json)</li> <li> Valid container without data section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/minimal_valid_EOF1_code_Copier.json)</li> <li> Valid container with data section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/minimal_valid_EOF1_code_with_data_Copier.json)</li> <li> Valid container with truncated data section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_truncated_section_Copier.json)</li> <li> Valid container with data section truncated to empty (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Valid containers with multiple code sections (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml src/EOFTestsFiller/efValidation/minimal_valid_EOF1_multiple_code_sections_Copier.json)</li> <li> Valid containers with max number of code sections (ethereum/tests: src/EOFTestsFiller/efValidation/many_code_sections_1024_Copier.json)</li> <li> Too many code sections (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_too_many_code_sections_Copier.json src/EOFTestsFiller/efValidation/too_many_code_sections_Copier.json)</li> <li> Truncated magic (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Valid container except magic (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/validate_EOF_prefix_Copier.json)</li> <li> Truncated before version  (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Valid container except version (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/validate_EOF_version_Copier.json)</li> <li> Truncated before type section header (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Truncated before type section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_incomplete_section_size_Copier.json)</li> <li> Truncated type section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_incomplete_section_size_Copier.json)</li> <li> No type section header (ethereum/tests: src/EOFTestsFiller/efValidation/EOF1_no_type_section_Copier.json)</li> <li> Truncated before code section header (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml)</li> <li> Truncated before code section number (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml )</li> <li> Truncated code section number (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_incomplete_section_size_Copier.json)</li> <li> Truncated before code section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Truncated code section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_incomplete_section_size_Copier.json)</li> <li> No code section header (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_code_section_missing_Copier.json) </li> <li> 0 code section number (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml)</li> <li> 0 code section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml ./src/EOFTestsFiller/efValidation/EOF1_code_section_0_size_Copier.json)</li> <li> 0 code section size with non-empty data section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> No container sections, truncated before data section header (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Container sections present, truncated before data section header (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml)</li> <li> Truncated before data section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_incomplete_section_size_Copier.json)</li> <li> Truncated data section size (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_incomplete_section_size_Copier.json)</li> <li> Truncated before header terminator (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_header_not_terminated_Copier.json)</li> <li> Truncated before type section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_truncated_section_Copier.json)</li> <li> Type section truncated before outputs (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Type section truncated before max_stack_height (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Type section truncated max_stack_height (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_truncated_section_Copier.json)</li> <li> Truncated before code sections (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Truncated code section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_truncated_section_Copier.json)</li> <li> Data section empty, trailing bytes (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_trailing_bytes_Copier.json)</li> <li> Data section non-empty, trailing bytes (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_trailing_bytes_Copier.json)</li> <li> Wrong order of sections (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_section_order_Copier.json ./src/EOFTestsFiller/efValidation/EOF1_data_section_before_code_section_Copier.json ./src/EOFTestsFiller/efValidation/EOF1_data_section_before_types_section_Copier.json src/EOFTestsFiller/efValidation/EOF1_type_section_not_first_Copier.json)</li> <li> No data section header (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml src/EOFTestsFiller/efValidation/data_section_missing_Copier.json)</li> <li> Multiple data sections (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Unknown section id (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_unknown_section_Copier.json)</li> <li> Type section size != 4 * code section number (ethereum/tests: ./src/EOFTestsFiller/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_invalid_type_section_size_Copier.json src/EOFTestsFiller/efValidation/EOF1_types_section_0_size_Copier.json)</li> <li> Code section with max max_stack_height (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> Code section with max_stack_height above limit (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> Valid code sections with inputs/outputs</li> <li> Valid code section with max inputs</li> <li> Valid code section with max outputs</li> <li> Code sections with invalid number of inputs/outputs (above limit)</li> <li> 0 section with inputs/outputs (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_invalid_section_0_type_Copier.json)</li> <li> Multiple type section headers (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_multiple_type_sections_Copier.json)</li> <li> Multiple code section headers (ethereum/tests: src/EOFTestsFiller/efValidation/multiple_code_sections_headers_Copier.json)</li> <li> Multiple data section headers (ethereum/tests: src/EOFTestsFiller/efValidation/EOF1_multiple_data_sections_Copier.json)</li> <li> Container without type section (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_type_section_missing_Copier.json src/EOFTestsFiller/efValidation/EOF1_types_section_missing_Copier.json)</li> <li> Container without code sections (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Container without data section (ethereum/tests: ./src/EOFTestsFiller/EIP3540/validInvalidFiller.yml)</li> <li> Valid containers without data section and with subcontainers (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_Copier.json)</li> <li> Valid containers with data section and with subcontainers (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_Copier.json)</li> <li> Valid container with maximum number of subcontainers (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_Copier.json)</li> <li> Container with number of subcontainers above the limit (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> Subcontainer section header truncated before subcontainer number (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> Subcontainer section header truncated before subcontainer size (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> Truncated subcontainer size (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> 0 container section number (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> 0 container size (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> Truncated container section body (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_embedded_container_invalid_Copier.json)</li> <li> Multiple container section headers</li> <li> Invalid subcontainer</li> <li> Invalid subcontainer on a deep nesting level</li> <li> Max number of inputs/outputs in a section (ethereum/tests: src/EOFTestsFiller/efValidation/max_arguments_count_Copier.json)</li> <li> Number of inputs/outputs in a section above the limit (ethereum/tests: src/EOFTestsFiller/efValidation/max_arguments_count_Copier.json)</li> <li> Section max_stack_height above limit (ethereum/tests: src/EOFTestsFiller/efValidation/max_stack_height_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#execution","title":"Execution","text":"<ul> <li> Execution of EOF contracts (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_ExecutionFiller.yml)</li> <li> Legacy executing EXTCODESIZE of EOF contract (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_ExecutionFiller.yml)</li> <li> Legacy executing EXTCODEHASH of EOF contract (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_ExecutionFiller.yml)</li> <li> Legacy executing EXTCODECOPY of EOF contract (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_ExecutionFiller.yml)</li> <li> <code>*CALLs</code> from legacy contracts to EOF contracts (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> <code>EXT*CALLs</code> from EOF to legacy contracts (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> EXTDELEGATECALL from EOF to EOF contract (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> EXTDELEGATECALL from EOF to legacy contract failing (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> EXTDELEGATECALL from EOF to EOA failing</li> <li> EXTDELEGATECALL from EOF to empty account failing</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-3670-eof-code-validation","title":"EIP-3670: EOF - Code Validation","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_1","title":"Validation","text":"<ul> <li> Code section with invalid opcodes is rejected (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_undefined_opcodes_Copier.json src/EOFTestsFiller/EIP3670/validInvalidFiller.yml)</li> <li> INVALID opcode is valid (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> Truncated PUSH data (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml src/EOFTestsFiller/efValidation/EOF1_truncated_push_Copier.json src/EOFTestsFiller/EIP3670/validInvalidFiller.yml)</li> <li> Opcodes deprecated in EOF are rejected (ethereum/tests: src/EOFTestsFiller/efValidation/deprecated_instructions_Copier.json ethereum/tests: src/EOFTestsFiller/EIP3670/validInvalidFiller.yml)</li> <li> Codes with each valid opcodes (ethereum/tests: src/EOFTestsFiller/EIP3670/validInvalidFiller.yml)</li> <li> Undefined instruction after terminating instruction (ethereum/tests: src/EOFTestsFiller/EIP3670/validInvalidFiller.yml)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-4200-eof-static-relative-jumps","title":"EIP-4200: EOF - Static relative jumps","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_2","title":"Validation","text":"<ul> <li> Valid RJUMP with various offsets (ethereum/tests: src/EOFTestsFiller/efValidation/EOF1_valid_rjump_Copier.json src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMP with maximum offset (ethereum/tests: src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMP with minimum offset</li> <li> Valid RJUMPI with various offsets (ethereum/tests: src/EOFTestsFiller/efValidation/EOF1_valid_rjumpi_Copier.json src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMPI with maximum offset (ethereum/offset: src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMPI with minimum offset</li> <li> Valid RJUMPV with various number of offsets and various offsets (ethereum/tests: src/EOFTestsFiller/efValidation/EOF1_valid_rjumpv_Copier.json src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMPV with table size 256 (ethereum/tests: src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMPV containing maximum offset (ethereum/tests: src/EOFTestsFiller/EIP4200/validInvalidFiller.yml)</li> <li> Valid RJUMPV containing minimum offset</li> <li> Truncated before RJUMP immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjump_truncated_Copier.json)</li> <li> Truncated RJUMP immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjump_truncated_Copier.json)</li> <li> RJUMP out of container bounds (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjump_invalid_destination_Copier.json)</li> <li> RJUMP out of section bounds (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjump_invalid_destination_Copier.json)</li> <li> RJUMP into immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjump_invalid_destination_Copier.json)</li> <li> Truncated before RJUMPI immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpi_truncated_Copier.json)</li> <li> Truncated RJUMPI immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpi_truncated_Copier.json)</li> <li> RJUMPI out of container bounds (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpi_invalid_destination_Copier.json)</li> <li> RJUMPI out of section bounds (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpi_invalid_destination_Copier.json)</li> <li> RJUMPI into immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpi_invalid_destination_Copier.json)</li> <li> Truncated before RJUMPV immediate</li> <li> Truncated RJUMPV immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpv_truncated_Copier.json)</li> <li> RJUMPV out of container bounds (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpv_invalid_destination_Copier.json)</li> <li> RJUMPV out of section bounds (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpv_invalid_destination_Copier.json)</li> <li> RJUMPV into immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_rjumpv_invalid_destination_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-4750-eof-functions","title":"EIP-4750: EOF - Functions","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_3","title":"Validation","text":"<ul> <li> Valid CALLFs  (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> CALLFs to non-existing sections  (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml src/EOFTestsFiller/efValidation/callf_invalid_code_section_index_Copier.json)</li> <li> Truncated CALLF immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_callf_truncated_Copier.json)</li> <li> Unreachable code sections (ethereum/tests: src/EOFTestsFiller/efValidation/unreachable_code_sections_Copier.json)</li> <li> Sections reachable from other sections, but not reachable from section 0 (ethereum/tests: src/EOFTestsFiller/efValidation/unreachable_code_sections_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-5450-eof-stack-validation","title":"EIP-5450: EOF - Stack Validation","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_4","title":"Validation","text":"<ul> <li> Check all terminating opcodes (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> Code section not terminating (executing beyond section end) (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> Stack underflows (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> CALLF stack underflows (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> RETF with extra items on stack (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> Wrong max_stack_height (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml src/EOFTestsFiller/efValidation/max_stack_height_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-6206-eof-jumpf-and-non-returning-functions","title":"EIP-6206: EOF - JUMPF and non-returning functions","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_5","title":"Validation","text":"<ul> <li> 0 section returning (ethereum/tests: ./src/EOFTestsFiller/efExample/validInvalidFiller.yml)</li> <li> CALLF into non-returning function (ethereum/tests: src/EOFTestsFiller/efValidation/callf_into_nonreturning_Copier.json)</li> <li> Valid JUMPF into sections with equal number of outputs (ethereum/tests: src/EOFTestsFiller/efValidation/jumpf_equal_outputs_Copier.json)</li> <li> Valid JUMPF into sections with different but compatible number of outputs (ethereum/tests: src/EOFTestsFiller/efValidation/jumpf_compatible_outputs_Copier.json)</li> <li> JUMPF into sections with incompatible outputs (ethereum/tests: src/EOFTestsFiller/efValidation/jumpf_incompatible_outputs_Copier.json)</li> <li> Non-returning section without JUMPF (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Non-returning section with JUMPF (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Returning section with RETF (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Returning section with JUMPF (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Returning section with JUMPF to returning and RETF (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Returning section with JUMPF to non-returning and RETF (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Invalid non-returning flag (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> <li> Circular JUMPF between two sections (ethereum/tests: src/EOFTestsFiller/efValidation/non_returning_status_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-7480-eof-data-section-access-instructions","title":"EIP-7480: EOF - Data section access instructions","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_6","title":"Validation","text":"<ul> <li> Valid DATALOADN with various offsets (ethereum/tests: src/EOFTestsFiller/efValidation/dataloadn_Copier.json)</li> <li> Truncated DATALOADN immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_dataloadn_truncated_Copier.json)</li> <li> DATALOADN offset out of bounds (ethereum/tests: src/EOFTestsFiller/efValidation/dataloadn_Copier.json)</li> <li> DATALOADN accessing not full word (ethereum/tests: src/EOFTestsFiller/efValidation/dataloadn_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-663-swapn-dupn-and-exchange-instructions","title":"EIP-663: SWAPN, DUPN and EXCHANGE instructions","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_7","title":"Validation","text":"<ul> <li> A DUPN instruction causes stack overflow</li> <li> A DUPN instruction causes stack underflow</li> <li> A DUPN instruction causes max stack height mismatch</li> <li> A SWAPN instruction causes stack underflow</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#execution_1","title":"Execution","text":"<ul> <li> Positive tests for DUPN instructions (./eip663_dupn_swapn_exchange/test_dupn.py::test_dupn_all_valid_immediates)</li> <li> Positive tests for SWAPN instructions (./eip663_dupn_swapn_exchange/test_swapn.py::test_swapn_all_valid_immediates)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-7069-revamped-call-instructions","title":"EIP-7069: Revamped CALL instructions","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#execution_2","title":"Execution","text":"<ul> <li> EXTSTATICCALL from EOF to pure legacy contract (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> EXTSTATICCALL from EOF to non-pure legacy contract failing (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> EXTSTATICCALL from EOF to pure EOF contract (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> <li> EXTSTATICCALL from EOF to non-pure EOF contract failing (ethereum/tests: src/EIPTestsFiller/StateTests/stEOF/stEIP3540/EOF1_CallsFiller.yml)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-7620-eof-contract-creation","title":"EIP-7620: EOF Contract Creation","text":""},{"location":"tests/prague/eip7692_eof_v1/tracker./#validation_8","title":"Validation","text":"<ul> <li> Valid EOFCREATEs referring to various container numbers (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_eofcreate_valid_Copier.json)</li> <li> Truncated before EOFCREATE immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_eofcreate_invalid_Copier.json)</li> <li> EOFCREATE is not a valid terminating instruction (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_eofcreate_invalid_Copier.json)</li> <li> EOFCREATE immediate referring to non-existing container (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_eofcreate_invalid_Copier.json)</li> <li> EOFCREATE immediate referring to container with truncated data (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_eofcreate_invalid_Copier.json)</li> <li> Valid RETURNCONTRACTs referring to various container numbers (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_returncontract_valid_Copier.json)</li> <li> Truncated before RETURNCONTRACT immediate (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_returncontract_invalid_Copier.json)</li> <li> RETURNCONTRACT immediate referring to non-existing container (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_returncontract_invalid_Copier.json)</li> <li> Unreachable code after RETURNCONTRACT, check that RETURNCONTRACT is terminating (ethereum/tests: ./src/EOFTestsFiller/efValidation/EOF1_returncontract_invalid_Copier.json)</li> </ul>"},{"location":"tests/prague/eip7692_eof_v1/tracker./#eip-7698-eof-creation-transaction","title":"EIP-7698: EOF - Creation transaction","text":""},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/","title":"EIP-3540 Eof V1","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1 --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1 --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client EVM Object Format Tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/spec.py</code>.</p> <p>EOF V1 Constants used throughout all tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation/","title":"Test Code Validation","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF V1 Code Validation tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_code_validation.test_legacy_initcode_valid_eof_v1_contract","title":"<code>test_legacy_initcode_valid_eof_v1_contract(eof_test, container)</code>","text":"<p>Test creating various types of valid EOF V1 contracts using legacy initcode and a contract creating transaction.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py</code> <pre><code>@pytest.mark.parametrize(\n    \"container\",\n    ALL_VALID,\n    ids=container_name,\n)\ndef test_legacy_initcode_valid_eof_v1_contract(\n    eof_test: EOFTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test creating various types of valid EOF V1 contracts using legacy\n    initcode and a contract creating transaction.\n    \"\"\"\n    assert (\n        container.validity_error is None\n    ), f\"Valid container with validity error: {container.validity_error}\"\n    eof_test(\n        data=bytes(container),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_code_validation.test_legacy_initcode_invalid_eof_v1_contract","title":"<code>test_legacy_initcode_invalid_eof_v1_contract(eof_test, container)</code>","text":"<p>Test creating various types of valid EOF V1 contracts using legacy initcode and a contract creating transaction.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py</code> <pre><code>@pytest.mark.parametrize(\n    \"container\",\n    ALL_INVALID,\n    ids=container_name,\n)\ndef test_legacy_initcode_invalid_eof_v1_contract(\n    eof_test: EOFTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test creating various types of valid EOF V1 contracts using legacy\n    initcode and a contract creating transaction.\n    \"\"\"\n    assert container.validity_error is not None, \"Invalid container without validity error\"\n    eof_test(\n        data=bytes(container),\n        expect_exception=container.validity_error,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation/index/test_cases/","title":"Test Code Validation - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py</code>:</p> <pre><code>test_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_single_data_section]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_data_section_contents]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-data_section_contents_incomplete]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-max_code_sections]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-max_code_sections_plus_data]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-max_code_sections_plus_container]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-max_code_sections_plus_data_plus_container]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_max_stack_size]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_input_maximum]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_output_maximum]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-multiple_code_section_max_inputs_max_outputs]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_no_data_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-incomplete_magic]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_version]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_type_header]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_type_section_size]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-code_section_size_incomplete_1]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-code_section_size_incomplete_2]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-code_section_size_incomplete_3]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-code_section_size_incomplete_4]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-code_section_size_incomplete_5]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_data_section_size]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-data_section_size_incomplete]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_sections]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-invalid_magic_01]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-invalid_magic_ff]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-invalid_version_zero]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-invalid_version_plus_one]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-invalid_version_high]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_code_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-too_many_code_sections]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-zero_code_sections_header]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_section_terminator_1]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_section_terminator_2]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_section_terminator_3]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_code_section_contents]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-incomplete_code_section_contents]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-trailing_bytes_after_code_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-empty_code_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-empty_code_section_with_non_empty_data]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-data_section_preceding_code_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-data_section_without_code_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_section_terminator_3a]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_section_terminator_4a]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-trailing_bytes_after_data_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-multiple_data_sections]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-multiple_code_and_data_sections_1]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-multiple_code_and_data_sections_2]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-unknown_section_1]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-unknown_section_2]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-unknown_section_empty]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-no_type_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-too_many_type_sections]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-empty_type_section]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-type_section_too_small_1]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-type_section_too_small_2]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-type_section_too_big]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_non_zero_inputs]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_non_zero_outputs]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-multiple_code_section_non_zero_inputs]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-multiple_code_section_non_zero_outputs]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-data_section_before_code_with_type]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-data_section_listed_in_type]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_incomplete_type]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_incomplete_type_2]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_input_too_large]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_output_too_large]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-single_code_section_max_stack_size_too_large]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_code_validation.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example/","title":"Test Eof Example","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF Classes example use</p>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_eof_example.test_eof_example","title":"<code>test_eof_example(eof_test)</code>","text":"<p>Example of python EOF classes</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py</code> <pre><code>def test_eof_example(eof_test: EOFTestFiller):\n    \"\"\"\n    Example of python EOF classes\n    \"\"\"\n    # Lets construct an EOF container code\n    eof_code = Container(\n        name=\"valid_container_example\",\n        sections=[\n            # TYPES section is constructed automatically based on CODE\n            # CODE section\n            Section.Code(\n                code=Op.CALLF[1](Op.PUSH0) + Op.STOP,  # bytecode to be deployed in the body\n                # Code: call section 1 with a single zero as input, then stop.\n                code_inputs=0,  # define code header (in body) input bytes\n                code_outputs=NON_RETURNING_SECTION,  # define code header (in body) output bytes\n                max_stack_height=1,  # define code header (in body) stack size\n            ),\n            # There can be multiple code sections\n            Section.Code(\n                # Remove input and call section 2 with no inputs, then remove output and return\n                code=Op.POP + Op.CALLF[2]() + Op.POP + Op.RETF,\n                code_inputs=1,\n                code_outputs=0,\n                max_stack_height=1,\n            ),\n            Section.Code(\n                # Call section 3 with two inputs (address twice), return\n                code=Op.CALLF[3](Op.DUP1, Op.ADDRESS) + Op.POP + Op.POP + Op.RETF,\n                code_inputs=0,\n                code_outputs=1,\n                max_stack_height=3,\n            ),\n            Section.Code(\n                # Duplicate one input and return\n                code=Op.DUP1 + Op.RETF,\n                code_inputs=2,\n                code_outputs=3,\n                max_stack_height=3,\n            ),\n            # DATA section\n            Section.Data(\"0xef\"),\n        ],\n    )\n\n    # This will construct a valid EOF container with these bytes\n    assert bytes(eof_code) == bytes.fromhex(\n        \"ef0001010010020004000500060008000204000100008000010100000100010003020300035fe300010050\"\n        \"e3000250e43080e300035050e480e4ef\"\n    )\n\n    eof_test(\n        data=eof_code,\n        expect_exception=eof_code.validity_error,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_eof_example.test_eof_example_custom_fields","title":"<code>test_eof_example_custom_fields(eof_test)</code>","text":"<p>Example of python EOF container class tuning</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py</code> <pre><code>def test_eof_example_custom_fields(eof_test: EOFTestFiller):\n    \"\"\"\n    Example of python EOF container class tuning\n    \"\"\"\n    # if you need to overwrite certain structure bytes, you can use customization\n    # this is useful for unit testing the eof structure format, you can reorganize sections\n    # and overwrite the header bytes for testing purposes\n    # most of the combinations are covered by the unit tests\n\n    # This features are subject for development and will change in the future\n\n    eof_code = Container(\n        name=\"valid_container_example_2\",\n        magic=b\"\\xef\\x00\",  # magic can be overwritten for test purposes, (default is 0xEF00)\n        version=b\"\\x01\",  # version can be overwritten for testing purposes (default is 0x01)\n        header_terminator=b\"\\x00\",  # terminator byte can be overwritten (default is 0x00)\n        extra=b\"\",  # extra bytes to be trailed after the container body bytes (default is None)\n        sections=[\n            # TYPES section is constructed automatically based on CODE\n            # CODE section\n            Section.Code(\n                code=Op.PUSH1(2)\n                + Op.STOP,  # this is the actual bytecode to be deployed in the body\n                code_inputs=0,  # define code header (in body) input bytes\n                code_outputs=NON_RETURNING_SECTION,  # define code header (in body) output bytes\n                max_stack_height=1,  # define code header (in body) stack size\n            ),\n            # DATA section\n            Section.Data(\n                data=\"0xef\",\n                # custom_size overrides the size bytes, so you can put only 1 byte into data\n                # but still make the header size of 2 to produce invalid section\n                # if custom_size != len(data), the section will be invalid\n                custom_size=1,\n            ),\n        ],\n        # auto generate types section based on provided code sections\n        # AutoSection.ONLY_BODY - means the section will be generated only for the body bytes\n        # AutoSection.ONLY_BODY - means the section will be generated only for the header bytes\n        auto_type_section=AutoSection.AUTO,\n        # auto generate default data section (0x empty), by default is True\n        auto_data_section=True,\n        # auto sort section by order 01 02 03 04\n        # AutoSection.ONLY_BODY - means the sorting will be done only for the body bytes\n        # AutoSection.ONLY_BODY - means the section will be done only for the header bytes\n        auto_sort_sections=AutoSection.AUTO,\n    )\n\n    eof_test(\n        data=eof_code,\n        expect_exception=eof_code.validity_error,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_eof_example.test_eof_example_parameters","title":"<code>test_eof_example_parameters(eof_test, data_section_bytes, code_section_code, exception)</code>","text":"<p>Example of python EOF classes</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py</code> <pre><code>@pytest.mark.parametrize(\n    \"data_section_bytes\",\n    (\"0x01\", \"0xef\"),\n)\n@pytest.mark.parametrize(\n    \"code_section_code, exception\",\n    [(Op.PUSH1(10) + Op.STOP, None), (Op.PUSH1(14), EOFException.MISSING_STOP_OPCODE)],\n)\ndef test_eof_example_parameters(\n    eof_test: EOFTestFiller,\n    data_section_bytes: BytesConvertible,\n    code_section_code: BytesConvertible,\n    exception: EOFException,\n):\n    \"\"\"\n    Example of python EOF classes\n    \"\"\"\n    eof_code = Container(\n        name=\"parametrized_eof_example\",\n        sections=[\n            Section.Code(\n                code=code_section_code,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=1,\n            ),\n            Section.Data(data_section_bytes),\n        ],\n        validity_error=exception,\n    )\n\n    eof_test(\n        data=eof_code,\n        expect_exception=eof_code.validity_error,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example/index/test_cases/","title":"Test Eof Example - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py</code>:</p> <pre><code>test_eof_example[fork_CancunEIP7692-eof_test]\ntest_eof_example_custom_fields[fork_CancunEIP7692-eof_test]\ntest_eof_example_parameters[fork_CancunEIP7692-eof_test-code_section_code_b'`\\n\\x00'-exception_None-data_section_bytes_0x01]\ntest_eof_example_parameters[fork_CancunEIP7692-eof_test-code_section_code_b'`\\n\\x00'-exception_None-data_section_bytes_0xef]\ntest_eof_example_parameters[fork_CancunEIP7692-eof_test-code_section_code_b'`\\x0e'-exception_EOFException.MISSING_STOP_OPCODE-data_section_bytes_0x01]\ntest_eof_example_parameters[fork_CancunEIP7692-eof_test-code_section_code_b'`\\x0e'-exception_EOFException.MISSING_STOP_OPCODE-data_section_bytes_0xef]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_eof_example.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid/","title":"Test Example Valid Invalid","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF Classes example use</p>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_example_valid_invalid.test_example_valid_invalid","title":"<code>test_example_valid_invalid(eof_test, eof_code, expected_hex_bytecode, exception)</code>","text":"<p>Verify eof container construction and exception</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py</code> <pre><code>@pytest.mark.parametrize(\n    \"eof_code,expected_hex_bytecode,exception\",\n    [\n        pytest.param(\n            # Check that simple EOF1 deploys\n            Container(\n                name=\"EOF1V0001\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Op.POP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0xef\"),\n                ],\n            ),\n            \"ef000101000402000100030400010000800001305000ef\",\n            None,\n            id=\"simple_eof_1_deploy\",\n        ),\n        pytest.param(\n            # Check that EOF1 undersize data is ok (4 declared, 2 provided)\n            # https://github.com/ipsilon/eof/blob/main/spec/eof.md#data-section-lifecycle\n            Container(\n                name=\"EOF1V0016\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Op.POP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad\", custom_size=4),\n                ],\n            ),\n            \"ef0001010004020001000304000400008000013050000bad\",\n            None,\n            id=\"undersize_data_ok\",\n        ),\n        pytest.param(\n            # Check that EOF1 with too many or too few bytes fails\n            Container(\n                name=\"EOF1I0006\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Op.POP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A70BAD\", custom_size=4),\n                ],\n            ),\n            \"ef0001010004020001000304000400008000013050000bad60A70BAD\",\n            EOFException.INVALID_SECTION_BODIES_SIZE,\n            id=\"oversize_data_fail\",\n        ),\n        pytest.param(\n            # Check that data section size is valid\n            Container(\n                name=\"EOF1V0001\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Op.POP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000304000400008000013050000bad60A7\",\n            None,\n            id=\"data_ok\",\n        ),\n        pytest.param(\n            # Check that EOF1 with an illegal opcode fails\n            Container(\n                name=\"EOF1I0008\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Opcode(0xEF) + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef00010100040200010003040004000080000130ef000bad60A7\",\n            EOFException.UNDEFINED_INSTRUCTION,\n            id=\"illegal_opcode_fail\",\n        ),\n        pytest.param(\n            # Check that valid EOF1 can include 0xFE, the designated invalid opcode\n            Container(\n                name=\"EOF1V0004\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Op.POP + Op.INVALID,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000304000400008000013050fe0bad60A7\",\n            None,\n            id=\"fe_opcode_ok\",\n        ),\n        pytest.param(\n            # Check that EOF1 with a bad end of sections number fails\n            Container(\n                name=\"EOF1I0005\",\n                sections=[\n                    Section.Code(\n                        code=Op.ADDRESS + Op.POP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0xef\"),\n                ],\n                header_terminator=Bytes(b\"\\xFF\"),\n            ),\n            \"ef00010100040200010003040001ff00800001305000ef\",\n            EOFException.MISSING_TERMINATOR,\n            id=\"headers_terminator_invalid\",\n        ),\n        pytest.param(\n            # Check that code that uses a new style relative jump succeeds\n            Container(\n                name=\"EOF1V0008\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH0\n                        + Op.RJUMPI[3]\n                        + Op.RJUMP[3]\n                        + Op.RJUMP[3]\n                        + Op.RJUMP[-6]\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000E04000400008000015FE10003E00003E00003E0FFFA000bad60A7\",\n            None,\n            id=\"rjump_valid\",\n        ),\n        pytest.param(\n            # Sections with unreachable code fail\n            Container(\n                name=\"EOF1I0023\",\n                sections=[\n                    Section.Code(\n                        code=Op.RJUMP[1] + Op.NOOP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=0,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef000101000402000100050400040000800000E000015B000bad60A7\",\n            EOFException.UNREACHABLE_INSTRUCTIONS,\n            id=\"unreachable_code\",\n        ),\n        pytest.param(\n            # Check that code that uses a new style conditional jump succeeds\n            Container(\n                name=\"EOF1V0011\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(1) + Op.RJUMPI[1] + Op.NOOP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000704000400008000016001E100015B000bad60A7\",\n            None,\n            id=\"rjumpi_valid\",\n        ),\n        pytest.param(\n            # Sections that end with a legit terminating opcode are OK\n            Container(\n                name=\"EOF1V0014\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH0\n                        + Op.CALLDATALOAD\n                        + Op.RJUMPV[0, 3, 6, 9]\n                        + Op.JUMPF[1]\n                        + Op.JUMPF[2]\n                        + Op.JUMPF[3]\n                        + Op.CALLF[4]\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Code(\n                        code=Op.PUSH0 + Op.PUSH0 + Op.RETURN,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=2,\n                    ),\n                    Section.Code(\n                        code=Op.PUSH0 + Op.PUSH0 + Op.REVERT,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=2,\n                    ),\n                    Section.Code(\n                        code=Op.INVALID,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=0,\n                    ),\n                    Section.Code(\n                        code=Op.RETF,\n                        code_inputs=0,\n                        code_outputs=0,\n                        max_stack_height=0,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"EF0001010014020005001900030003000100010400040000800001008000020080000200800000000\"\n            \"000005f35e2030000000300060009e50001e50002e50003e30004005f5ff35f5ffdfee40bad60a7\",\n            None,\n            id=\"rjumpv_section_terminator_valid\",\n        ),\n        pytest.param(\n            # Check that jump tables work\n            Container(\n                name=\"EOF1V0013\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(1)\n                        + Op.RJUMPV[2, 0]\n                        + Op.ADDRESS\n                        + Op.POP\n                        + Op.ADDRESS\n                        + Op.POP\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000D04000400008000016001E2010002000030503050000bad60A7\",\n            None,\n            id=\"jump_tables_valid\",\n        ),\n        pytest.param(\n            # Check that jumps into the middle on an opcode are not allowed\n            Container(\n                name=\"EOF1I0019\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(1)\n                        + Op.RJUMPV[b\"\\x02\\x00\\x02\\xFF\\xFF\"]\n                        + Op.ADDRESS\n                        + Op.POP\n                        + Op.ADDRESS\n                        + Op.POP\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000D04000400008000016001E2020002FFFF30503050000bad60A7\",\n            EOFException.INVALID_RJUMP_DESTINATION,\n            id=\"rjump_invalid\",\n        ),\n        pytest.param(\n            # TODO why here is expected an exception by the comment but test is valid\n            # Check that you can't get to the same opcode with two different stack heights\n            Container(\n                name=\"EOF1I0020\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(1) + Op.RJUMPI[1] + Op.ADDRESS + Op.NOOP + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000804000400008000016001E10001305B000bad60A7\",\n            None,\n            id=\"jump_to_opcode_ok\",\n        ),\n        pytest.param(\n            # Check that jumps into the middle on an opcode are not allowed\n            Container(\n                name=\"EOF1I0019\",\n                sections=[\n                    Section.Code(\n                        code=Op.RJUMP[3] + Op.RJUMP[2] + Op.RJUMP[-6] + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=0,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef0001010004020001000A0400040000800000E00003E00002E0FFFA000bad60A7\",\n            EOFException.INVALID_RJUMP_DESTINATION,\n            id=\"rjump_3_2_m6_fails\",\n        ),\n        pytest.param(\n            # Check that jumps into the middle on an opcode are not allowed\n            Container(\n                name=\"EOF1I0019\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(0)\n                        + Op.PUSH1(0)\n                        + Op.PUSH1(0)\n                        + Op.RJUMPI[3]\n                        + Op.RJUMPI[2]\n                        + Op.RJUMPI[-6]\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=3,\n                    ),\n                    Section.Data(\"0x0bad60A7\"),\n                ],\n            ),\n            \"ef000101000402000100100400040000800003600060006000E10003E10002E1FFFA000bad60A7\",\n            EOFException.INVALID_RJUMP_DESTINATION,\n            id=\"push1_0_0_0_rjump_3_2_m6_fails\",\n        ),\n        pytest.param(\n            # Check that that code that uses removed opcodes fails\n            Container(\n                name=\"EOF1I0015\",\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(3) + Op.JUMP + Op.JUMPDEST + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=1,\n                    ),\n                    Section.Data(\"0xef\"),\n                ],\n            ),\n            \"ef0001010004020001000504000100008000016003565B00ef\",\n            EOFException.UNDEFINED_INSTRUCTION,\n            id=\"jump_jumpdest_fails\",\n        ),\n    ],\n)\ndef test_example_valid_invalid(\n    eof_test: EOFTestFiller,\n    eof_code: Container,\n    expected_hex_bytecode: str,\n    exception: EOFException | None,\n):\n    \"\"\"\n    Verify eof container construction and exception\n    \"\"\"\n    # TODO remove this after Container class implementation is reliable\n    assert bytes(eof_code).hex() == bytes.fromhex(expected_hex_bytecode).hex()\n\n    eof_test(\n        data=eof_code,\n        expect_exception=exception,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_example_valid_invalid.test_code_section_header_body_mismatch","title":"<code>test_code_section_header_body_mismatch(eof_test, skip_header_listing, skip_body_listing, skip_types_body_listing, skip_types_header_listing, expected_code, expected_exception)</code>","text":"<p>Inconsistent number of code sections (between types and code)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py</code> <pre><code>@pytest.mark.parametrize(\n    \"skip_header_listing, skip_body_listing, skip_types_body_listing, skip_types_header_listing,\"\n    \"expected_code, expected_exception\",\n    [\n        (\n            # Data 16 test case of valid invalid eof ori filler\n            True,  # second section is not in code header array\n            True,  # second section is not in container's body (it's code bytes)\n            False,  # but it's code input bytes still listed in container's body\n            False,  # but it's code input bytes size still added to types section size\n            \"ef000101000802000100030400040000800001000000003050000bad60A7\",\n            EOFException.INVALID_TYPE_SECTION_SIZE,\n        ),\n        (\n            True,  # second section is not in code header array\n            False,  # second section code is in container's body (3050000)\n            False,  # but it's code input bytes still listed in container's body\n            False,  # but it's code input bytes size still added to types section size\n            \"ef000101000802000100030400040000800001000000003050003050000bad60A7\",\n            EOFException.INVALID_TYPE_SECTION_SIZE,\n        ),\n        (\n            False,  # second section is mentioned in code header array (0003)\n            True,  # second section is not in container's body (it's code bytes)\n            False,  # but it's code input bytes still listed in container's body\n            False,  # but it's code input bytes size still added to types section size\n            \"ef0001010008020002000300030400040000800001000000003050000bad60A7\",\n            EOFException.UNREACHABLE_CODE_SECTIONS,\n        ),\n        (\n            False,  # second section is mentioned in code header array (0003)\n            False,  # second section code is in container's body (3050000)\n            False,  # but it's code input bytes still listed in container's body\n            False,  # but it's code input bytes size still added to types section size\n            \"ef0001010008020002000300030400040000800001000000003050003050000bad60A7\",\n            EOFException.UNREACHABLE_CODE_SECTIONS,\n        ),\n        (\n            # Data 17 test case of valid invalid eof ori filler\n            True,  # second section is not in code header array\n            True,  # second section is not in container's body (it's code bytes)\n            True,  # it's code input bytes are not listed in container's body (00000000)\n            False,  # but it's code input bytes size still added to types section size\n            \"ef0001010008020001000304000400008000013050000bad60a7\",\n            EOFException.INVALID_TYPE_SECTION_SIZE,\n        ),\n        (\n            True,  # second section is not in code header array\n            True,  # second section is not in container's body (it's code bytes)\n            True,  # it's code input bytes are not listed in container's body (00000000)\n            True,  # and it is bytes size is not counted in types header\n            \"ef0001010004020001000304000400008000013050000bad60a7\",\n            None,\n        ),\n    ],\n)\ndef test_code_section_header_body_mismatch(\n    eof_test: EOFTestFiller,\n    skip_header_listing: bool,\n    skip_body_listing: bool,\n    skip_types_body_listing: bool,\n    skip_types_header_listing: bool,\n    expected_code: str,\n    expected_exception: EOFException | None,\n):\n    \"\"\"\n    Inconsistent number of code sections (between types and code)\n    \"\"\"\n    eof_code = Container(\n        name=\"EOF1I0018\",\n        sections=[\n            Section.Code(\n                code=Op.ADDRESS + Op.POP + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=1,\n            ),\n            Section.Code(\n                code=Op.ADDRESS + Op.POP + Op.STOP,\n                code_inputs=0,\n                code_outputs=0,\n                max_stack_height=0,\n                # weather to not mention it in code section header list\n                skip_header_listing=skip_header_listing,\n                # weather to not print it's code in containers body\n                skip_body_listing=skip_body_listing,\n                # weather to not print it's input bytes in containers body\n                skip_types_body_listing=skip_types_body_listing,\n                # weather to not calculate it's input bytes size in types section's header\n                skip_types_header_listing=skip_types_header_listing,\n            ),\n            Section.Data(\"0x0bad60A7\"),\n        ],\n    )\n\n    # TODO remove this after Container class implementation is reliable\n    assert bytes(eof_code).hex() == bytes.fromhex(expected_code).hex()\n\n    eof_test(\n        data=eof_code,\n        expect_exception=expected_exception,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid/index/test_cases/","title":"Test Example Valid Invalid - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py</code>:</p> <pre><code>test_example_valid_invalid[fork_CancunEIP7692-eof_test-simple_eof_1_deploy]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-undersize_data_ok]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-oversize_data_fail]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-data_ok]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-illegal_opcode_fail]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-fe_opcode_ok]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-headers_terminator_invalid]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-rjump_valid]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-unreachable_code]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-rjumpi_valid]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-rjumpv_section_terminator_valid]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-jump_tables_valid]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-rjump_invalid]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-jump_to_opcode_ok]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-rjump_3_2_m6_fails]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-push1_0_0_0_rjump_3_2_m6_fails]\ntest_example_valid_invalid[fork_CancunEIP7692-eof_test-jump_jumpdest_fails]\ntest_code_section_header_body_mismatch[fork_CancunEIP7692-eof_test-skip_header_listing_True-skip_body_listing_True-skip_types_body_listing_False-skip_types_header_listing_False-expected_code_ef000101000802000100030400040000800001000000003050000bad60A7-expected_exception_EOFException.INVALID_TYPE_SECTION_SIZE]\ntest_code_section_header_body_mismatch[fork_CancunEIP7692-eof_test-skip_header_listing_True-skip_body_listing_False-skip_types_body_listing_False-skip_types_header_listing_False-expected_code_ef000101000802000100030400040000800001000000003050003050000bad60A7-expected_exception_EOFException.INVALID_TYPE_SECTION_SIZE]\ntest_code_section_header_body_mismatch[fork_CancunEIP7692-eof_test-skip_header_listing_False-skip_body_listing_True-skip_types_body_listing_False-skip_types_header_listing_False-expected_code_ef0001010008020002000300030400040000800001000000003050000bad60A7-expected_exception_EOFException.UNREACHABLE_CODE_SECTIONS]\ntest_code_section_header_body_mismatch[fork_CancunEIP7692-eof_test-skip_header_listing_False-skip_body_listing_False-skip_types_body_listing_False-skip_types_header_listing_False-expected_code_ef0001010008020002000300030400040000800001000000003050003050000bad60A7-expected_exception_EOFException.UNREACHABLE_CODE_SECTIONS]\ntest_code_section_header_body_mismatch[fork_CancunEIP7692-eof_test-skip_header_listing_True-skip_body_listing_True-skip_types_body_listing_True-skip_types_header_listing_False-expected_code_ef0001010008020001000304000400008000013050000bad60a7-expected_exception_EOFException.INVALID_TYPE_SECTION_SIZE]\ntest_code_section_header_body_mismatch[fork_CancunEIP7692-eof_test-skip_header_listing_True-skip_body_listing_True-skip_types_body_listing_True-skip_types_header_listing_True-expected_code_ef0001010004020001000304000400008000013050000bad60a7-expected_exception_None]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_example_valid_invalid.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function/","title":"Test Execution Function","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Execution of CALLF, RETF opcodes within EOF V1 containers tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_execution_function.test_eof_functions_contract_call_succeed","title":"<code>test_eof_functions_contract_call_succeed(state_test, container)</code>","text":"<p>Test simple contracts that are simply expected to succeed on call.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py</code> <pre><code>@pytest.mark.parametrize(\"container\", CALL_SUCCEED_CONTRACTS, ids=lambda x: x.name)\ndef test_eof_functions_contract_call_succeed(\n    state_test: StateTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test simple contracts that are simply expected to succeed on call.\n    \"\"\"\n    env = Environment()\n\n    caller_contract = Op.SSTORE(0, Op.CALL(Op.GAS, 0x200, 0, 0, 0, 0, 0)) + Op.STOP()\n\n    pre = {\n        TestAddress: Account(\n            balance=1000000000000000000000,\n            nonce=1,\n        ),\n        Address(0x100): Account(\n            code=caller_contract,\n            nonce=1,\n        ),\n        Address(0x200): Account(\n            code=container,\n            nonce=1,\n        ),\n    }\n\n    tx = Transaction(\n        nonce=1,\n        to=Address(0x100),\n        gas_limit=50000000,\n        gas_price=10,\n        protected=False,\n        data=\"\",\n    )\n\n    post = {Address(0x100): Account(storage={0: 1})}\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_execution_function.test_eof_functions_contract_call_fail","title":"<code>test_eof_functions_contract_call_fail(state_test, container)</code>","text":"<p>Test simple contracts that are simply expected to fail on call.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py</code> <pre><code>@pytest.mark.parametrize(\"container\", CALL_FAIL_CONTRACTS, ids=lambda x: x.name)\ndef test_eof_functions_contract_call_fail(\n    state_test: StateTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test simple contracts that are simply expected to fail on call.\n    \"\"\"\n    env = Environment()\n\n    caller_contract = Op.SSTORE(Op.CALL(Op.GAS, 0x200, 0, 0, 0, 0, 0), 1) + Op.STOP()\n\n    pre = {\n        TestAddress: Account(\n            balance=1000000000000000000000,\n            nonce=1,\n        ),\n        Address(0x100): Account(\n            code=caller_contract,\n            nonce=1,\n        ),\n        Address(0x200): Account(\n            code=container,\n            nonce=1,\n        ),\n    }\n\n    tx = Transaction(\n        nonce=1,\n        to=Address(0x100),\n        gas_limit=50000000,\n        gas_price=10,\n        protected=False,\n        data=\"\",\n    )\n\n    post = {Address(0x100): Account(storage={0: 1})}\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function/#tests.prague.eip7692_eof_v1.eip3540_eof_v1.test_execution_function.test_eof_functions_contract_call_within_deep_nested","title":"<code>test_eof_functions_contract_call_within_deep_nested(state_test, container)</code>","text":"<p>Test performing a call within a nested callf and verify correct behavior of return stack in calling contract.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py</code> <pre><code>@pytest.mark.parametrize(\"container\", CALL_FAIL_CONTRACTS, ids=lambda x: x.name)\ndef test_eof_functions_contract_call_within_deep_nested(\n    state_test: StateTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test performing a call within a nested callf and verify correct behavior of\n    return stack in calling contract.\n    \"\"\"\n    env = Environment()\n\n    pre = {\n        TestAddress: Account(\n            balance=1000000000000000000000,\n            nonce=1,\n        ),\n        Address(0x100): Account(\n            code=contract_call_within_deep_nested_callf,\n        ),\n        Address(0x200): Account(\n            code=Op.SSTORE(0, 1) + Op.STOP(),\n        ),\n    }\n    tx = Transaction(\n        nonce=1,\n        to=Address(0x100),\n        gas_limit=50000000,\n        gas_price=10,\n        protected=False,\n        data=\"\",\n    )\n    post = {\n        Address(0x100): Account(storage={i: 1 for i in range(MAX_CODE_SECTIONS)}),\n        Address(0x200): Account(\n            storage={\n                0: 1,\n            }\n        ),\n    }\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function/index/test_cases/","title":"Test Execution Function - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py</code>:</p> <pre><code>test_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test-function_finishes_contract_execution]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test-max_recursive_callf]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test-max_recursive_callf_sstore]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test-max_recursive_callf_memory]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test_hive-function_finishes_contract_execution]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test_hive-max_recursive_callf]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test_hive-max_recursive_callf_sstore]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-blockchain_test_hive-max_recursive_callf_memory]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-state_test-function_finishes_contract_execution]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-state_test-max_recursive_callf]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-state_test-max_recursive_callf_sstore]\ntest_eof_functions_contract_call_succeed[fork_CancunEIP7692-state_test-max_recursive_callf_memory]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test-invalid_opcode]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test-overflow_recursive_callf]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test-overflow_recursive_callf_sstore]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test-overflow_recursive_callf_memory]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test_hive-invalid_opcode]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test_hive-overflow_recursive_callf]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test_hive-overflow_recursive_callf_sstore]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-blockchain_test_hive-overflow_recursive_callf_memory]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-state_test-invalid_opcode]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-state_test-overflow_recursive_callf]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-state_test-overflow_recursive_callf_sstore]\ntest_eof_functions_contract_call_fail[fork_CancunEIP7692-state_test-overflow_recursive_callf_memory]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test-invalid_opcode]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test-overflow_recursive_callf]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test-overflow_recursive_callf_sstore]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test-overflow_recursive_callf_memory]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test_hive-invalid_opcode]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test_hive-overflow_recursive_callf]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test_hive-overflow_recursive_callf_sstore]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-blockchain_test_hive-overflow_recursive_callf_memory]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-state_test-invalid_opcode]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-state_test-overflow_recursive_callf]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-state_test-overflow_recursive_callf_sstore]\ntest_eof_functions_contract_call_within_deep_nested[fork_CancunEIP7692-state_test-overflow_recursive_callf_memory]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip3540_eof_v1/test_execution_function.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/","title":"EIP-4200 Relative Jumps","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF tests for EIP-4200 relative jumps</p>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/","title":"Test Rjump","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF JUMPF tests covering stack and code validation rules.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_positive_negative","title":"<code>test_rjump_positive_negative(eof_state_test)</code>","text":"<p>EOF1V4200_0001 (Valid) EOF code containing RJUMP (Positive, Negative)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_positive_negative(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0001 (Valid) EOF code containing RJUMP (Positive, Negative)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH0\n                    + Op.RJUMPI[3]\n                    + Op.RJUMP[7]\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP\n                    + Op.RJUMP[-10],\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_positive_negative_with_data","title":"<code>test_rjump_positive_negative_with_data(eof_state_test)</code>","text":"<p>EOF1V4200_0001 (Valid) EOF code containing RJUMP (Positive, Negative)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_positive_negative_with_data(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0001 (Valid) EOF code containing RJUMP (Positive, Negative)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH0\n                    + Op.RJUMPI[3]\n                    + Op.RJUMP[7]\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP\n                    + Op.RJUMP[-10],\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                ),\n                Section.Data(data=b\"\\xde\\xad\\xbe\\xef\"),\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_zero","title":"<code>test_rjump_zero(eof_state_test)</code>","text":"<p>EOF1V4200_0002 (Valid) EOF code containing RJUMP (Zero)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_zero(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0002 (Valid) EOF code containing RJUMP (Zero)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[0] + Op.SSTORE(slot_code_worked, value_code_worked) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_maxes","title":"<code>test_rjump_maxes(eof_state_test)</code>","text":"<p>EOF1V4200_0003 EOF with RJUMP containing the maximum positive and negative offset (32767)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_maxes(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0003 EOF with RJUMP containing the maximum positive and negative offset (32767)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH0\n                    + Op.RJUMPI[3]  # The push/jumpi is to allow the NOOPs to be forward referenced\n                    + Op.RJUMP[0x7FFF]\n                    + Op.NOOP * (0x7FFF - 7)\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP\n                    + Op.RJUMP[0x8000],\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_truncated_rjump","title":"<code>test_rjump_truncated_rjump(eof_test)</code>","text":"<p>EOF1I4200_0001 (Invalid) EOF code containing truncated RJUMP</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_truncated_rjump(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0001 (Invalid) EOF code containing truncated RJUMP\"\"\"\n    eof_test(\n        data=Container(\n            sections=[Section.Code(code=Op.RJUMP, code_outputs=NON_RETURNING_SECTION)],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_truncated_rjump_2","title":"<code>test_rjump_truncated_rjump_2(eof_test)</code>","text":"<p>EOF1I4200_0002 (Invalid) EOF code containing truncated RJUMP</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_truncated_rjump_2(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0002 (Invalid) EOF code containing truncated RJUMP\"\"\"\n    eof_test(\n        data=Container(\n            sections=[Section.Code(code=Op.RJUMP + Op.STOP, code_outputs=NON_RETURNING_SECTION)],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_header","title":"<code>test_rjump_into_header(eof_test)</code>","text":"<p>EOF1I4200_0003 (Invalid) EOF code containing RJUMP with target outside code bounds (Jumping into header)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_header(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0003 (Invalid) EOF code containing RJUMP with target outside code bounds\n    (Jumping into header)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(code=Op.RJUMP[-5], code_outputs=NON_RETURNING_SECTION),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_before_header","title":"<code>test_rjump_before_header(eof_test)</code>","text":"<p>EOF1I4200_0004 (Invalid) EOF code containing RJUMP with target outside code bounds (Jumping before code begin)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_before_header(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0004 (Invalid) EOF code containing RJUMP with target outside code bounds\n    (Jumping before code begin)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[-23],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_data","title":"<code>test_rjump_into_data(eof_test)</code>","text":"<p>EOF1I4200_0005 (Invalid) EOF code containing RJUMP with target outside code bounds (Jumping into data section)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_data(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0005 (Invalid) EOF code containing RJUMP with target outside code bounds\n    (Jumping into data section)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[2],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Data(data=b\"\\xaa\\xbb\\xcc\"),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_outside_other_section_before","title":"<code>test_rjump_outside_other_section_before(eof_test)</code>","text":"<p>EOF code containing RJUMP with target outside code bounds (prior code section)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_outside_other_section_before(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target outside code bounds (prior code section)\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.JUMPF[1],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Code(\n                    code=Op.RJUMP[-6],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_outside_other_section_after","title":"<code>test_rjump_outside_other_section_after(eof_test)</code>","text":"<p>EOF code containing RJUMP with target outside code bounds (Subsequent code section)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_outside_other_section_after(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target outside code bounds (Subsequent code section)\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.JUMPF[1],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Code(\n                    code=Op.RJUMP[3] + Op.JUMPF[2],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Code(\n                    code=Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_after_container","title":"<code>test_rjump_after_container(eof_test)</code>","text":"<p>EOF1I4200_0006 (Invalid) EOF code containing RJUMP with target outside code bounds (Jumping after code end)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_after_container(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0006 (Invalid) EOF code containing RJUMP with target outside code bounds\n    (Jumping after code end)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[2],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_to_code_end","title":"<code>test_rjump_to_code_end(eof_test)</code>","text":"<p>EOF1I4200_0007 (Invalid) EOF code containing RJUMP with target outside code bounds (Jumping to code end)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_to_code_end(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0007 (Invalid) EOF code containing RJUMP with target outside code bounds\n    (Jumping to code end)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[1] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_self","title":"<code>test_rjump_into_self(eof_test)</code>","text":"<p>EOF1I4200_0008 (Invalid) EOF code containing RJUMP with target self RJUMP immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_self(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0008 (Invalid) EOF code containing RJUMP with target self RJUMP immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[-1],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_rjump","title":"<code>test_rjump_into_rjump(eof_test)</code>","text":"<p>EOF1I4200_0009 (Invalid) EOF code containing RJUMP with target other RJUMP immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_rjump(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0009 (Invalid) EOF code containing RJUMP with target other RJUMP immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[1] + Op.RJUMP[0],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_rjumpi","title":"<code>test_rjump_into_rjumpi(eof_test)</code>","text":"<p>EOF1I4200_0010 (Invalid) EOF code containing RJUMP with target RJUMPI immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_rjumpi(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0010 (Invalid) EOF code containing RJUMP with target RJUMPI immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[5] + Op.STOP + Op.PUSH1(1) + Op.RJUMPI[-6] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_push_1","title":"<code>test_rjump_into_push_1(eof_test, jump)</code>","text":"<p>EOF1I4200_0011 (Invalid) EOF code containing RJUMP with target PUSH1 immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>@pytest.mark.parametrize(\"jump\", [JumpDirection.FORWARD, JumpDirection.BACKWARD])\ndef test_rjump_into_push_1(eof_test: EOFTestFiller, jump: JumpDirection):\n    \"\"\"EOF1I4200_0011 (Invalid) EOF code containing RJUMP with target PUSH1 immediate\"\"\"\n    code = (\n        Op.PUSH1[1] + Op.RJUMP[-4] if jump == JumpDirection.BACKWARD else Op.RJUMP[1] + Op.PUSH1[1]\n    )\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=code,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_push_n","title":"<code>test_rjump_into_push_n(eof_test, opcode, jump, data_portion_end)</code>","text":"<p>EOF1I4200_0011 (Invalid) EOF code containing RJUMP with target PUSH2+ immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>@pytest.mark.parametrize(\n    \"opcode\",\n    [\n        Op.PUSH2,\n        Op.PUSH3,\n        Op.PUSH4,\n        Op.PUSH5,\n        Op.PUSH6,\n        Op.PUSH7,\n        Op.PUSH8,\n        Op.PUSH9,\n        Op.PUSH10,\n        Op.PUSH11,\n        Op.PUSH12,\n        Op.PUSH13,\n        Op.PUSH14,\n        Op.PUSH15,\n        Op.PUSH16,\n        Op.PUSH17,\n        Op.PUSH18,\n        Op.PUSH19,\n        Op.PUSH20,\n        Op.PUSH21,\n        Op.PUSH22,\n        Op.PUSH23,\n        Op.PUSH24,\n        Op.PUSH25,\n        Op.PUSH26,\n        Op.PUSH27,\n        Op.PUSH28,\n        Op.PUSH29,\n        Op.PUSH30,\n        Op.PUSH31,\n        Op.PUSH32,\n    ],\n)\n@pytest.mark.parametrize(\"jump\", [JumpDirection.FORWARD, JumpDirection.BACKWARD])\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjump_into_push_n(\n    eof_test: EOFTestFiller,\n    opcode: Op,\n    jump: JumpDirection,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0011 (Invalid) EOF code containing RJUMP with target PUSH2+ immediate\"\"\"\n    data_portion_length = int.from_bytes(opcode, byteorder=\"big\") - 0x5F\n    if jump == JumpDirection.FORWARD:\n        offset = data_portion_length if data_portion_end else 1\n        code = Op.RJUMP[offset] + opcode[0]\n    else:\n        offset = -4 if data_portion_end else -4 - data_portion_length + 1\n        code = opcode[0] + Op.RJUMP[offset]\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=code,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_rjumpv","title":"<code>test_rjump_into_rjumpv(eof_test, target_rjumpv_table_size, data_portion_end)</code>","text":"<p>EOF1I4200_0012 (Invalid) EOF code containing RJUMP with target RJUMPV immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>@pytest.mark.parametrize(\"target_rjumpv_table_size\", [1, 256])\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjump_into_rjumpv(\n    eof_test: EOFTestFiller,\n    target_rjumpv_table_size: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0012 (Invalid) EOF code containing RJUMP with target RJUMPV immediate\"\"\"\n    invalid_destination = 4 + (2 * target_rjumpv_table_size) if data_portion_end else 4\n    target_jump_table = [0 for _ in range(target_rjumpv_table_size)]\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[invalid_destination]\n                    + Op.STOP\n                    + Op.PUSH1(1)\n                    + Op.RJUMPV[target_jump_table]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_callf","title":"<code>test_rjump_into_callf(eof_test, data_portion_end)</code>","text":"<p>EOF1I4200_0013 (Invalid) EOF code containing RJUMP with target CALLF immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjump_into_callf(\n    eof_test: EOFTestFiller,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0013 (Invalid) EOF code containing RJUMP with target CALLF immediate\"\"\"\n    invalid_destination = 2 if data_portion_end else 1\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[invalid_destination] + Op.CALLF[1] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Code(\n                    code=Op.SSTORE(1, 1) + Op.RETF,\n                    code_outputs=0,\n                    max_stack_height=2,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_dupn","title":"<code>test_rjump_into_dupn(eof_test)</code>","text":"<p>EOF code containing RJUMP with target DUPN immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_dupn(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target DUPN immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.RJUMP[1]\n                    + Op.DUPN[1]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_swapn","title":"<code>test_rjump_into_swapn(eof_test)</code>","text":"<p>EOF code containing RJUMP with target SWAPN immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_swapn(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target SWAPN immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.RJUMP[1]\n                    + Op.SWAPN[1]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_exchange","title":"<code>test_rjump_into_exchange(eof_test)</code>","text":"<p>EOF code containing RJUMP with target EXCHANGE immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_exchange(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target EXCHANGE immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(2)\n                    + Op.PUSH1(3)\n                    + Op.RJUMP[1]\n                    + Op.EXCHANGE[0x00]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=3,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_eofcreate","title":"<code>test_rjump_into_eofcreate(eof_test)</code>","text":"<p>EOF code containing RJUMP with target EOFCREATE immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_eofcreate(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target EOFCREATE immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.RJUMP[1] + Op.EOFCREATE[0](0, 0, 0, 0) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n                Section.Container(\n                    container=Container(\n                        sections=[\n                            Section.Code(\n                                code=Op.RETURNCONTRACT[0](0, 0),\n                                code_outputs=NON_RETURNING_SECTION,\n                                max_stack_height=2,\n                            ),\n                            Section.Container(\n                                container=Container(\n                                    sections=[\n                                        Section.Code(\n                                            code=Op.STOP,\n                                            code_outputs=NON_RETURNING_SECTION,\n                                        )\n                                    ]\n                                )\n                            ),\n                        ]\n                    )\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjump.test_rjump_into_returncontract","title":"<code>test_rjump_into_returncontract(eof_test)</code>","text":"<p>EOF code containing RJUMP with target RETURNCONTRACT immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code> <pre><code>def test_rjump_into_returncontract(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target RETURNCONTRACT immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.EOFCREATE[0](0, 0, 0, 0) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n                Section.Container(\n                    container=Container(\n                        sections=[\n                            Section.Code(\n                                code=Op.RJUMP[5] + Op.RETURNCONTRACT[0](0, 0),\n                                code_outputs=NON_RETURNING_SECTION,\n                                max_stack_height=2,\n                            ),\n                            Section.Container(\n                                container=Container(\n                                    sections=[\n                                        Section.Code(\n                                            code=Op.STOP,\n                                            code_outputs=NON_RETURNING_SECTION,\n                                        )\n                                    ]\n                                )\n                            ),\n                        ]\n                    )\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump/index/test_cases/","title":"Test Rjump - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py</code>:</p> <pre><code>test_rjump_positive_negative[fork_CancunEIP7692-eof_test]\ntest_rjump_positive_negative[fork_CancunEIP7692-state_test]\ntest_rjump_positive_negative[fork_CancunEIP7692-blockchain_test]\ntest_rjump_positive_negative[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjump_positive_negative_with_data[fork_CancunEIP7692-eof_test]\ntest_rjump_positive_negative_with_data[fork_CancunEIP7692-state_test]\ntest_rjump_positive_negative_with_data[fork_CancunEIP7692-blockchain_test]\ntest_rjump_positive_negative_with_data[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjump_zero[fork_CancunEIP7692-eof_test]\ntest_rjump_zero[fork_CancunEIP7692-state_test]\ntest_rjump_zero[fork_CancunEIP7692-blockchain_test]\ntest_rjump_zero[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjump_maxes[fork_CancunEIP7692-eof_test]\ntest_rjump_maxes[fork_CancunEIP7692-state_test]\ntest_rjump_maxes[fork_CancunEIP7692-blockchain_test]\ntest_rjump_maxes[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjump_truncated_rjump[fork_CancunEIP7692-eof_test]\ntest_rjump_truncated_rjump_2[fork_CancunEIP7692-eof_test]\ntest_rjump_into_header[fork_CancunEIP7692-eof_test]\ntest_rjump_before_header[fork_CancunEIP7692-eof_test]\ntest_rjump_into_data[fork_CancunEIP7692-eof_test]\ntest_rjump_outside_other_section_before[fork_CancunEIP7692-eof_test]\ntest_rjump_outside_other_section_after[fork_CancunEIP7692-eof_test]\ntest_rjump_after_container[fork_CancunEIP7692-eof_test]\ntest_rjump_to_code_end[fork_CancunEIP7692-eof_test]\ntest_rjump_into_self[fork_CancunEIP7692-eof_test]\ntest_rjump_into_rjump[fork_CancunEIP7692-eof_test]\ntest_rjump_into_rjumpi[fork_CancunEIP7692-eof_test]\ntest_rjump_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD]\ntest_rjump_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH2]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH3]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH4]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH5]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH6]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH7]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH8]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH9]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH10]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH11]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH12]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH13]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH14]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH15]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH16]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH17]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH18]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH19]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH20]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH21]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH22]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH23]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH24]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH25]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH26]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH27]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH28]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH29]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH30]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH31]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH32]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH2]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH3]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH4]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH5]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH6]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH7]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH8]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH9]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH10]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH11]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH12]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH13]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH14]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH15]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH16]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH17]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH18]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH19]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH20]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH21]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH22]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH23]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH24]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH25]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH26]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH27]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH28]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH29]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH30]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH31]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH32]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH2]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH3]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH4]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH5]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH6]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH7]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH8]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH9]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH10]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH11]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH12]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH13]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH14]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH15]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH16]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH17]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH18]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH19]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH20]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH21]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH22]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH23]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH24]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH25]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH26]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH27]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH28]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH29]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH30]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH31]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH32]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH2]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH3]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH4]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH5]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH6]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH7]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH8]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH9]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH10]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH11]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH12]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH13]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH14]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH15]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH16]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH17]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH18]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH19]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH20]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH21]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH22]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH23]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH24]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH25]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH26]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH27]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH28]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH29]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH30]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH31]\ntest_rjump_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH32]\ntest_rjump_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-target_rjumpv_table_size_1]\ntest_rjump_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-target_rjumpv_table_size_256]\ntest_rjump_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-target_rjumpv_table_size_1]\ntest_rjump_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-target_rjumpv_table_size_256]\ntest_rjump_into_callf[fork_CancunEIP7692-eof_test-data_portion_end]\ntest_rjump_into_callf[fork_CancunEIP7692-eof_test-data_portion_start]\ntest_rjump_into_dupn[fork_CancunEIP7692-eof_test]\ntest_rjump_into_swapn[fork_CancunEIP7692-eof_test]\ntest_rjump_into_exchange[fork_CancunEIP7692-eof_test]\ntest_rjump_into_eofcreate[fork_CancunEIP7692-eof_test]\ntest_rjump_into_returncontract[fork_CancunEIP7692-eof_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjump.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/","title":"Test Rjumpi","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF JUMPF tests covering stack and code validation rules.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_condition_forwards","title":"<code>test_rjumpi_condition_forwards(state_test, calldata)</code>","text":"<p>Test RJUMPI contract switching based on external input</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\n    \"calldata\",\n    [pytest.param(b\"\\x00\", id=\"False\"), pytest.param(b\"\\x01\", id=\"True\")],\n)\ndef test_rjumpi_condition_forwards(\n    state_test: StateTestFiller,\n    calldata: bytes,\n):\n    \"\"\"Test RJUMPI contract switching based on external input\"\"\"\n    env = Environment()\n    tx = Transaction(\n        nonce=1,\n        gas_limit=10_000_000,\n        data=calldata,\n    )\n    pre = {\n        TestAddress: Account(balance=10**18, nonce=tx.nonce),\n        tx.to: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(0)\n                        + Op.CALLDATALOAD\n                        + Op.RJUMPI[6]\n                        + Op.SSTORE(slot_conditional_result, value_calldata_false)\n                        + Op.STOP\n                        + Op.SSTORE(slot_conditional_result, value_calldata_true)\n                        + Op.STOP,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=2,\n                    )\n                ]\n            ),\n            nonce=1,\n        ),\n    }\n    post = {\n        tx.to: Account(\n            storage={\n                slot_conditional_result: value_calldata_false\n                if calldata == b\"\\0\"\n                else value_calldata_true\n            }\n        )\n    }\n    state_test(env=env, tx=tx, pre=pre, post=post)\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_condition_backwards","title":"<code>test_rjumpi_condition_backwards(state_test, calldata)</code>","text":"<p>Test RJUMPI contract switching based on external input</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\n    \"calldata\",\n    [pytest.param(b\"\\x00\", id=\"False\"), pytest.param(b\"\\x01\", id=\"True\")],\n)\ndef test_rjumpi_condition_backwards(\n    state_test: StateTestFiller,\n    calldata: bytes,\n):\n    \"\"\"Test RJUMPI contract switching based on external input\"\"\"\n    env = Environment()\n    tx = Transaction(\n        nonce=1,\n        gas_limit=10_000_000,\n        data=calldata,\n    )\n    pre = {\n        TestAddress: Account(balance=10**18, nonce=tx.nonce),\n        tx.to: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH1(1)\n                        + Op.RJUMPI[6]\n                        + Op.SSTORE(slot_conditional_result, value_calldata_true)\n                        + Op.STOP\n                        + Op.PUSH0\n                        + Op.CALLDATALOAD\n                        + Op.RJUMPI[-11]\n                        + Op.SSTORE(slot_conditional_result, value_calldata_false)\n                        + Op.STOP,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=2,\n                    )\n                ]\n            ),\n            nonce=1,\n        ),\n    }\n    post = {\n        tx.to: Account(\n            storage={\n                slot_conditional_result: value_calldata_false\n                if calldata == b\"\\0\"\n                else value_calldata_true\n            }\n        )\n    }\n    state_test(env=env, tx=tx, pre=pre, post=post)\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_condition_zero","title":"<code>test_rjumpi_condition_zero(state_test, calldata)</code>","text":"<p>Test RJUMPI contract switching based on external input</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\n    \"calldata\",\n    [pytest.param(b\"\\x00\", id=\"False\"), pytest.param(b\"\\x01\", id=\"True\")],\n)\ndef test_rjumpi_condition_zero(\n    state_test: StateTestFiller,\n    calldata: bytes,\n):\n    \"\"\"Test RJUMPI contract switching based on external input\"\"\"\n    env = Environment()\n    tx = Transaction(\n        nonce=1,\n        gas_limit=10_000_000,\n        data=calldata,\n    )\n    pre = {\n        TestAddress: Account(balance=10**18, nonce=tx.nonce),\n        tx.to: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.PUSH0\n                        + Op.CALLDATALOAD\n                        + Op.RJUMPI[0]\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=2,\n                    )\n                ]\n            ),\n            nonce=1,\n        ),\n    }\n    post = {tx.to: Account(storage={slot_code_worked: value_code_worked})}\n    state_test(env=env, tx=tx, pre=pre, post=post)\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_forwards","title":"<code>test_rjumpi_forwards(eof_state_test)</code>","text":"<p>EOF1V4200_0004 (Valid) EOF code containing RJUMPI (Positive)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_forwards(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0004 (Valid) EOF code containing RJUMPI (Positive)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPI[3]\n                    + Op.NOOP\n                    + Op.NOOP\n                    + Op.STOP\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_backwards","title":"<code>test_rjumpi_backwards(eof_state_test)</code>","text":"<p>EOF1V4200_0005 (Valid) EOF code containing RJUMPI (Negative)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_backwards(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0005 (Valid) EOF code containing RJUMPI (Negative)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPI[7]\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP\n                    + Op.PUSH1(1)\n                    + Op.RJUMPI[-12]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_zero","title":"<code>test_rjumpi_zero(eof_state_test)</code>","text":"<p>EOF1V4200_0006 (Valid) EOF code containing RJUMPI (Zero)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_zero(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0006 (Valid) EOF code containing RJUMPI (Zero)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPI[0]\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_max_forward","title":"<code>test_rjumpi_max_forward(eof_state_test)</code>","text":"<p>EOF1V4200_0007 (Valid) EOF with RJUMPI containing the maximum offset (32767)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_max_forward(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0007 (Valid) EOF with RJUMPI containing the maximum offset (32767)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPI[32767]\n                    + Op.NOOP * 32768\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_max_backward","title":"<code>test_rjumpi_max_backward(eof_state_test)</code>","text":"<p>EOF with RJUMPI containing the maximum negative offset (-32768)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_max_backward(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF with RJUMPI containing the maximum negative offset (-32768)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH0\n                    + Op.RJUMPI[0x7FFF]\n                    + Op.NOOP * (0x7FFF - 7)\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP\n                    + Op.PUSH0\n                    + Op.RJUMPI[0x8000]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    ),\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjump_truncated","title":"<code>test_rjump_truncated(eof_test)</code>","text":"<p>EOF1I4200_0014 (Invalid) EOF code containing truncated RJUMPI</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjump_truncated(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0014 (Invalid) EOF code containing truncated RJUMPI\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0) + Op.RJUMPI,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjump_truncated_2","title":"<code>test_rjump_truncated_2(eof_test)</code>","text":"<p>EOF1I4200_0015 (Invalid) EOF code containing truncated RJUMPI</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjump_truncated_2(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0015 (Invalid) EOF code containing truncated RJUMPI\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0) + Op.RJUMPI + b\"\\0\",\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_header","title":"<code>test_rjumpi_into_header(eof_test)</code>","text":"<p>EOF1I4200_0016 (Invalid) EOF code containing RJUMPI with target outside code bounds (Jumping into header)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_header(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0016 (Invalid) EOF code containing RJUMPI with target outside code bounds\n    (Jumping into header)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[-7] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_jump_before_header","title":"<code>test_rjumpi_jump_before_header(eof_test)</code>","text":"<p>EOF1I4200_0017 (Invalid) EOF code containing RJUMPI with target outside code bounds (Jumping to before code begin)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_jump_before_header(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0017 (Invalid) EOF code containing RJUMPI with target outside code bounds\n    (Jumping to before code begin)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[-25] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_data","title":"<code>test_rjumpi_into_data(eof_test)</code>","text":"<p>EOF1I4200_0018 (Invalid) EOF code containing RJUMPI with target outside code bounds (Jumping into data section)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_data(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0018 (Invalid) EOF code containing RJUMPI with target outside code bounds\n    (Jumping into data section)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[2] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n                Section.Data(data=b\"\\xaa\\xbb\\xcc\"),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_after_container","title":"<code>test_rjumpi_after_container(eof_test)</code>","text":"<p>EOF1I4200_0019 (Invalid) EOF code containing RJUMPI with target outside code bounds (Jumping to after code end)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_after_container(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0019 (Invalid) EOF code containing RJUMPI with target outside code bounds\n    (Jumping to after code end)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[2] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_to_code_end","title":"<code>test_rjumpi_to_code_end(eof_test)</code>","text":"<p>EOF1I4200_0020 (Invalid) EOF code containing RJUMPI with target outside code bounds (Jumping to code end)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_to_code_end(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    EOF1I4200_0020 (Invalid) EOF code containing RJUMPI with target outside code bounds\n    (Jumping to code end)\n    \"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[1] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_self","title":"<code>test_rjumpi_into_self(eof_test)</code>","text":"<p>EOF1I4200_0021 (Invalid) EOF code containing RJUMPI with target same RJUMPI immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_self(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0021 (Invalid) EOF code containing RJUMPI with target same RJUMPI immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[-1] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_rjump","title":"<code>test_rjumpi_into_rjump(eof_test)</code>","text":"<p>EOF1I4200_0023 (Invalid) EOF code containing RJUMPI with target RJUMP immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_rjump(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0023 (Invalid) EOF code containing RJUMPI with target RJUMP immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[3] + Op.STOP + Op.RJUMP[-9],\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_rjumpi","title":"<code>test_rjumpi_into_rjumpi(eof_test)</code>","text":"<p>EOF1I4200_0022 (Invalid) EOF code containing RJUMPI with target other RJUMPI immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_rjumpi(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0022 (Invalid) EOF code containing RJUMPI with target other RJUMPI immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPI[5]\n                    + Op.STOP\n                    + Op.PUSH1(1)\n                    + Op.RJUMPI[-11]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_push_1","title":"<code>test_rjumpi_into_push_1(eof_test, jump)</code>","text":"<p>EOF1I4200_0024 (Invalid) EOF code containing RJUMPI with target PUSH1 immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\"jump\", [JumpDirection.FORWARD, JumpDirection.BACKWARD])\ndef test_rjumpi_into_push_1(\n    eof_test: EOFTestFiller,\n    jump: JumpDirection,\n):\n    \"\"\"EOF1I4200_0024 (Invalid) EOF code containing RJUMPI with target PUSH1 immediate\"\"\"\n    code = (\n        Op.PUSH1(1) + Op.RJUMPI[-4] + Op.STOP\n        if jump == JumpDirection.BACKWARD\n        else Op.PUSH1(1) + Op.RJUMPI[1] + Op.STOP\n    )\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=code,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_push_n","title":"<code>test_rjumpi_into_push_n(eof_test, opcode, jump, data_portion_end)</code>","text":"<p>EOF1I4200_0024 (Invalid) EOF code containing RJUMPI with target PUSH2+ immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\n    \"opcode\",\n    [\n        Op.PUSH2,\n        Op.PUSH3,\n        Op.PUSH4,\n        Op.PUSH5,\n        Op.PUSH6,\n        Op.PUSH7,\n        Op.PUSH8,\n        Op.PUSH9,\n        Op.PUSH10,\n        Op.PUSH11,\n        Op.PUSH12,\n        Op.PUSH13,\n        Op.PUSH14,\n        Op.PUSH15,\n        Op.PUSH16,\n        Op.PUSH17,\n        Op.PUSH18,\n        Op.PUSH19,\n        Op.PUSH20,\n        Op.PUSH21,\n        Op.PUSH22,\n        Op.PUSH23,\n        Op.PUSH24,\n        Op.PUSH25,\n        Op.PUSH26,\n        Op.PUSH27,\n        Op.PUSH28,\n        Op.PUSH29,\n        Op.PUSH30,\n        Op.PUSH31,\n        Op.PUSH32,\n    ],\n)\n@pytest.mark.parametrize(\"jump\", [JumpDirection.FORWARD, JumpDirection.BACKWARD])\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpi_into_push_n(\n    eof_test: EOFTestFiller,\n    opcode: Op,\n    jump: JumpDirection,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0024 (Invalid) EOF code containing RJUMPI with target PUSH2+ immediate\"\"\"\n    data_portion_length = int.from_bytes(opcode, byteorder=\"big\") - 0x5F\n    if jump == JumpDirection.FORWARD:\n        offset = data_portion_length if data_portion_end else 1\n        code = Op.PUSH1(1) + Op.RJUMPI[offset] + opcode[0]\n    else:\n        offset = -4 if data_portion_end else -4 - data_portion_length + 1\n        code = opcode[0] + Op.RJUMPI[offset]\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=code,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_rjumpv","title":"<code>test_rjumpi_into_rjumpv(eof_test, target_rjumpv_table_size, data_portion_end)</code>","text":"<p>EOF1I4200_0025 (Invalid) EOF code containing RJUMPI with target RJUMPV immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\"target_rjumpv_table_size\", [1, 256])\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpi_into_rjumpv(\n    eof_test: EOFTestFiller,\n    target_rjumpv_table_size: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0025 (Invalid) EOF code containing RJUMPI with target RJUMPV immediate\"\"\"\n    invalid_destination = 4 + (2 * target_rjumpv_table_size) if data_portion_end else 4\n    target_jump_table = [0 for _ in range(target_rjumpv_table_size)]\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPI[invalid_destination]\n                    + Op.STOP\n                    + Op.PUSH1(1)\n                    + Op.RJUMPV[target_jump_table]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_callf","title":"<code>test_rjumpi_into_callf(eof_test, data_portion_end)</code>","text":"<p>EOF1I4200_0026 (Invalid) EOF code containing RJUMPI with target CALLF immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpi_into_callf(\n    eof_test: EOFTestFiller,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0026 (Invalid) EOF code containing RJUMPI with target CALLF immediate\"\"\"\n    invalid_destination = 2 if data_portion_end else 1\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPI[invalid_destination] + Op.CALLF[1] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n                Section.Code(\n                    code=Op.SSTORE(1, 1) + Op.RETF,\n                    code_outputs=0,\n                    max_stack_height=2,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_dupn","title":"<code>test_rjumpi_into_dupn(eof_test)</code>","text":"<p>EOF code containing RJUMP with target DUPN immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_dupn(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target DUPN immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.RJUMPI[1]\n                    + Op.DUPN[1]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=3,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_swapn","title":"<code>test_rjumpi_into_swapn(eof_test)</code>","text":"<p>EOF code containing RJUMP with target SWAPN immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_swapn(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target SWAPN immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.RJUMPI[1]\n                    + Op.SWAPN[1]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=3,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjump_into_exchange","title":"<code>test_rjump_into_exchange(eof_test)</code>","text":"<p>EOF code containing RJUMP with target EXCHANGE immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjump_into_exchange(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target EXCHANGE immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(2)\n                    + Op.PUSH1(3)\n                    + Op.PUSH1(1)\n                    + Op.RJUMPI[1]\n                    + Op.EXCHANGE[0x00]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_eofcreate","title":"<code>test_rjumpi_into_eofcreate(eof_test)</code>","text":"<p>EOF code containing RJUMP with target EOFCREATE immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_eofcreate(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target EOFCREATE immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH0 + Op.RJUMPI[9] + Op.EOFCREATE[0](0, 0, 0, 0) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n                Section.Container(\n                    container=Container(\n                        sections=[\n                            Section.Code(\n                                code=Op.RETURNCONTRACT[0](0, 0),\n                                code_outputs=NON_RETURNING_SECTION,\n                                max_stack_height=2,\n                            ),\n                            Section.Container(\n                                container=Container(\n                                    sections=[\n                                        Section.Code(\n                                            code=Op.STOP,\n                                            code_outputs=NON_RETURNING_SECTION,\n                                        )\n                                    ]\n                                )\n                            ),\n                        ]\n                    )\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpi.test_rjumpi_into_returncontract","title":"<code>test_rjumpi_into_returncontract(eof_test)</code>","text":"<p>EOF code containing RJUMP with target RETURNCONTRACT immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code> <pre><code>def test_rjumpi_into_returncontract(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing RJUMP with target RETURNCONTRACT immediate\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.EOFCREATE[0](0, 0, 0, 0) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n                Section.Container(\n                    container=Container(\n                        sections=[\n                            Section.Code(\n                                code=Op.PUSH0 + Op.RJUMPI[5] + Op.RETURNCONTRACT[0](0, 0),\n                                code_outputs=NON_RETURNING_SECTION,\n                                max_stack_height=2,\n                            ),\n                            Section.Container(\n                                container=Container(\n                                    sections=[\n                                        Section.Code(\n                                            code=Op.STOP,\n                                            code_outputs=NON_RETURNING_SECTION,\n                                        )\n                                    ]\n                                )\n                            ),\n                        ]\n                    )\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi/index/test_cases/","title":"Test Rjumpi - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py</code>:</p> <pre><code>test_rjumpi_condition_forwards[fork_CancunEIP7692-blockchain_test-False]\ntest_rjumpi_condition_forwards[fork_CancunEIP7692-blockchain_test-True]\ntest_rjumpi_condition_forwards[fork_CancunEIP7692-blockchain_test_hive-False]\ntest_rjumpi_condition_forwards[fork_CancunEIP7692-blockchain_test_hive-True]\ntest_rjumpi_condition_forwards[fork_CancunEIP7692-state_test-False]\ntest_rjumpi_condition_forwards[fork_CancunEIP7692-state_test-True]\ntest_rjumpi_condition_backwards[fork_CancunEIP7692-blockchain_test-False]\ntest_rjumpi_condition_backwards[fork_CancunEIP7692-blockchain_test-True]\ntest_rjumpi_condition_backwards[fork_CancunEIP7692-blockchain_test_hive-False]\ntest_rjumpi_condition_backwards[fork_CancunEIP7692-blockchain_test_hive-True]\ntest_rjumpi_condition_backwards[fork_CancunEIP7692-state_test-False]\ntest_rjumpi_condition_backwards[fork_CancunEIP7692-state_test-True]\ntest_rjumpi_condition_zero[fork_CancunEIP7692-blockchain_test-False]\ntest_rjumpi_condition_zero[fork_CancunEIP7692-blockchain_test-True]\ntest_rjumpi_condition_zero[fork_CancunEIP7692-blockchain_test_hive-False]\ntest_rjumpi_condition_zero[fork_CancunEIP7692-blockchain_test_hive-True]\ntest_rjumpi_condition_zero[fork_CancunEIP7692-state_test-False]\ntest_rjumpi_condition_zero[fork_CancunEIP7692-state_test-True]\ntest_rjumpi_forwards[fork_CancunEIP7692-eof_test]\ntest_rjumpi_forwards[fork_CancunEIP7692-state_test]\ntest_rjumpi_forwards[fork_CancunEIP7692-blockchain_test]\ntest_rjumpi_forwards[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpi_backwards[fork_CancunEIP7692-eof_test]\ntest_rjumpi_backwards[fork_CancunEIP7692-state_test]\ntest_rjumpi_backwards[fork_CancunEIP7692-blockchain_test]\ntest_rjumpi_backwards[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpi_zero[fork_CancunEIP7692-eof_test]\ntest_rjumpi_zero[fork_CancunEIP7692-state_test]\ntest_rjumpi_zero[fork_CancunEIP7692-blockchain_test]\ntest_rjumpi_zero[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpi_max_forward[fork_CancunEIP7692-eof_test]\ntest_rjumpi_max_forward[fork_CancunEIP7692-state_test]\ntest_rjumpi_max_forward[fork_CancunEIP7692-blockchain_test]\ntest_rjumpi_max_forward[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpi_max_backward[fork_CancunEIP7692-eof_test]\ntest_rjumpi_max_backward[fork_CancunEIP7692-state_test]\ntest_rjumpi_max_backward[fork_CancunEIP7692-blockchain_test]\ntest_rjumpi_max_backward[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjump_truncated[fork_CancunEIP7692-eof_test]\ntest_rjump_truncated_2[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_header[fork_CancunEIP7692-eof_test]\ntest_rjumpi_jump_before_header[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_data[fork_CancunEIP7692-eof_test]\ntest_rjumpi_after_container[fork_CancunEIP7692-eof_test]\ntest_rjumpi_to_code_end[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_self[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_rjump[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_rjumpi[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD]\ntest_rjumpi_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH2]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH3]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH4]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH5]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH6]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH7]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH8]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH9]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH10]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH11]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH12]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH13]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH14]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH15]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH16]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH17]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH18]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH19]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH20]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH21]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH22]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH23]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH24]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH25]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH26]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH27]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH28]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH29]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH30]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH31]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.FORWARD-opcode_PUSH32]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH2]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH3]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH4]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH5]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH6]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH7]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH8]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH9]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH10]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH11]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH12]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH13]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH14]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH15]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH16]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH17]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH18]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH19]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH20]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH21]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH22]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH23]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH24]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH25]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH26]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH27]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH28]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH29]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH30]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH31]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_end-jump_JumpDirection.BACKWARD-opcode_PUSH32]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH2]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH3]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH4]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH5]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH6]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH7]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH8]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH9]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH10]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH11]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH12]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH13]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH14]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH15]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH16]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH17]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH18]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH19]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH20]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH21]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH22]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH23]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH24]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH25]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH26]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH27]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH28]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH29]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH30]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH31]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.FORWARD-opcode_PUSH32]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH2]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH3]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH4]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH5]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH6]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH7]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH8]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH9]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH10]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH11]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH12]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH13]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH14]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH15]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH16]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH17]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH18]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH19]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH20]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH21]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH22]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH23]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH24]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH25]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH26]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH27]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH28]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH29]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH30]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH31]\ntest_rjumpi_into_push_n[fork_CancunEIP7692-eof_test-data_portion_start-jump_JumpDirection.BACKWARD-opcode_PUSH32]\ntest_rjumpi_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-target_rjumpv_table_size_1]\ntest_rjumpi_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-target_rjumpv_table_size_256]\ntest_rjumpi_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-target_rjumpv_table_size_1]\ntest_rjumpi_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-target_rjumpv_table_size_256]\ntest_rjumpi_into_callf[fork_CancunEIP7692-eof_test-data_portion_end]\ntest_rjumpi_into_callf[fork_CancunEIP7692-eof_test-data_portion_start]\ntest_rjumpi_into_dupn[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_swapn[fork_CancunEIP7692-eof_test]\ntest_rjump_into_exchange[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_eofcreate[fork_CancunEIP7692-eof_test]\ntest_rjumpi_into_returncontract[fork_CancunEIP7692-eof_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpi.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/","title":"Test Rjumpv","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF JUMPF tests covering stack and code validation rules.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_condition","title":"<code>test_rjumpv_condition(eof_state_test, calldata, table_size)</code>","text":"<p>Test RJUMPV contract switching based on external input</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"calldata\",\n    [\n        pytest.param(0, id=\"c0\"),\n        pytest.param(1, id=\"c1\"),\n        pytest.param(3, id=\"c3\"),\n        pytest.param(255, id=\"c255\"),\n        pytest.param(256, id=\"c256\"),\n        pytest.param(2**256 - 1, id=\"c2^256-1\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"table_size\",\n    [\n        pytest.param(1, id=\"t1\"),\n        pytest.param(3, id=\"t3\"),\n        pytest.param(256, id=\"t256\"),\n    ],\n)\ndef test_rjumpv_condition(\n    eof_state_test: EOFStateTestFiller,\n    calldata: int,\n    table_size: int,\n):\n    \"\"\"Test RJUMPV contract switching based on external input\"\"\"\n    value_fall_through = 0xFFFF\n    value_base = 0x1000  # Force a `PUSH2` instruction to be used on all targets\n    target_length = 7\n    jump_table = [(i + 1) * target_length for i in range(table_size)]\n\n    jump_targets = b\"\"\n    for i in range(table_size):\n        jump_targets += Op.SSTORE(slot_conditional_result, i + value_base) + Op.STOP\n\n    fall_through_case = Op.SSTORE(slot_conditional_result, value_fall_through) + Op.STOP\n\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH0\n                    + Op.CALLDATALOAD\n                    + Op.RJUMPV[jump_table]\n                    + fall_through_case\n                    + jump_targets,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ]\n        ),\n        tx_data=calldata.to_bytes(32, \"big\"),\n        container_post=Account(\n            storage={\n                slot_conditional_result: calldata + value_base\n                if calldata &lt; table_size\n                else value_fall_through,\n            }\n        ),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_forwards","title":"<code>test_rjumpv_forwards(eof_state_test)</code>","text":"<p>EOF1V4200_0008 (Valid) EOF with RJUMPV table size 1 (Positive)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_forwards(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0008 (Valid) EOF with RJUMPV table size 1 (Positive)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0)\n                    + Op.RJUMPV[3]\n                    + Op.NOOP\n                    + Op.NOOP\n                    + Op.STOP\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_backwards","title":"<code>test_rjumpv_backwards(eof_state_test)</code>","text":"<p>EOF1V4200_0009 (Valid) EOF with RJUMPV table size 1 (Negative)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_backwards(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0009 (Valid) EOF with RJUMPV table size 1 (Negative)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0)\n                    + Op.RJUMPI[7]\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP\n                    + Op.PUSH1(0)\n                    + Op.RJUMPV[-13]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_zero","title":"<code>test_rjumpv_zero(eof_state_test)</code>","text":"<p>EOF1V4200_0010 (Valid) EOF with RJUMPV table size 1 (Zero)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_zero(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0010 (Valid) EOF with RJUMPV table size 1 (Zero)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0)\n                    + Op.RJUMPV[0]\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_size_3","title":"<code>test_rjumpv_size_3(eof_state_test)</code>","text":"<p>EOF1V4200_0011 (Valid) EOF with RJUMPV table size 3</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_size_3(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0011 (Valid) EOF with RJUMPV table size 3\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0)\n                    + Op.RJUMPV[3, 0, -10]\n                    + Op.NOOP\n                    + Op.NOOP\n                    + Op.STOP\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_full_table","title":"<code>test_rjumpv_full_table(eof_state_test)</code>","text":"<p>EOF1V4200_0012 (Valid) EOF with RJUMPV table size 256 (Target 0)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_full_table(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0012 (Valid) EOF with RJUMPV table size 256 (Target 0)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0)\n                    + Op.RJUMPV[range(256)]\n                    + Op.NOOP * 256\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_full_table_mid","title":"<code>test_rjumpv_full_table_mid(eof_state_test)</code>","text":"<p>EOF1V4200_0013 (Valid) EOF with RJUMPV table size 256 (Target 100)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_full_table_mid(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0013 (Valid) EOF with RJUMPV table size 256 (Target 100)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(100)\n                    + Op.RJUMPV[range(256)]\n                    + Op.NOOP * 256\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_full_table_end","title":"<code>test_rjumpv_full_table_end(eof_state_test)</code>","text":"<p>EOF1V4200_0014 (Valid) EOF with RJUMPV table size 256 (Target 254)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_full_table_end(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0014 (Valid) EOF with RJUMPV table size 256 (Target 254)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(254)\n                    + Op.RJUMPV[range(256)]\n                    + Op.NOOP * 256\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_full_table_last","title":"<code>test_rjumpv_full_table_last(eof_state_test)</code>","text":"<p>EOF1V4200_0015 (Valid) EOF with RJUMPV table size 256 (Target 256)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_full_table_last(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0015 (Valid) EOF with RJUMPV table size 256 (Target 256)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH2(256)\n                    + Op.RJUMPV[range(256)]\n                    + Op.NOOP * 256\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_max_forwards","title":"<code>test_rjumpv_max_forwards(eof_state_test)</code>","text":"<p>EOF1V4200_0016 (Valid) EOF with RJUMPV containing the maximum offset (32767)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_max_forwards(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"EOF1V4200_0016 (Valid) EOF with RJUMPV containing the maximum offset (32767)\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPV[32767]\n                    + Op.NOOP * 32768\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_truncated","title":"<code>test_rjumpv_truncated(eof_test)</code>","text":"<p>EOF1I4200_0027 (Invalid) EOF code containing RJUMPV with max_index 0 but no immediates</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_truncated(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0027 (Invalid) EOF code containing RJUMPV with max_index 0 but no immediates\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV + b\"\\0\",\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_truncated_1","title":"<code>test_rjumpv_truncated_1(eof_test)</code>","text":"<p>EOF1I4200_0028 (Invalid) EOF code containing truncated RJUMPV</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_truncated_1(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0028 (Invalid) EOF code containing truncated RJUMPV\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_truncated_2","title":"<code>test_rjumpv_truncated_2(eof_test)</code>","text":"<p>EOF1I4200_0029 (Invalid) EOF code containing truncated RJUMPV</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_truncated_2(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0029 (Invalid) EOF code containing truncated RJUMPV\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV + b\"\\0\\0\",\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_truncated_3","title":"<code>test_rjumpv_truncated_3(eof_test)</code>","text":"<p>EOF1I4200_0030 (Invalid) EOF code containing truncated RJUMPV</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_truncated_3(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF1I4200_0030 (Invalid) EOF code containing truncated RJUMPV\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV + b\"\\0\\0\",\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_truncated_4","title":"<code>test_rjumpv_truncated_4(eof_test)</code>","text":"<p>EOF code containing truncated RJUMPV table</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>def test_rjumpv_truncated_4(\n    eof_test: EOFTestFiller,\n):\n    \"\"\"EOF code containing truncated RJUMPV table\"\"\"\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV + b\"\\2\\0\\0\\0\\0\",\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.TRUNCATED_INSTRUCTION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_header","title":"<code>test_rjumpv_into_header(eof_test, table_size, invalid_index)</code>","text":"<p>EOF1I4200_0031 (Invalid) EOF code containing RJUMPV with target outside code bounds (Jumping into header)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_into_header(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"\n    EOF1I4200_0031 (Invalid) EOF code containing RJUMPV with target outside code bounds\n    (Jumping into header)\n    \"\"\"\n    invalid_destination = -5 - (2 * table_size)\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_before_container","title":"<code>test_rjumpv_before_container(eof_test, table_size, invalid_index)</code>","text":"<p>EOF1I4200_0032 (Invalid) EOF code containing RJUMPV with target outside code bounds (Jumping to before code begin)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_before_container(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"\n    EOF1I4200_0032 (Invalid) EOF code containing RJUMPV with target outside code bounds\n    (Jumping to before code begin)\n    \"\"\"\n    invalid_destination = -13 - (2 * table_size)\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_data","title":"<code>test_rjumpv_into_data(eof_test, table_size, invalid_index)</code>","text":"<p>EOF1I4200_0033 (Invalid) EOF code containing RJUMPV with target outside code bounds (Jumping into data section)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_into_data(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"\n    EOF1I4200_0033 (Invalid) EOF code containing RJUMPV with target outside code bounds\n    (Jumping into data section)\n    \"\"\"\n    invalid_destination = 2\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n                Section.Data(data=b\"\\xaa\\xbb\\xcc\"),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_after_container","title":"<code>test_rjumpv_after_container(eof_test, table_size, invalid_index)</code>","text":"<p>EOF1I4200_0034 (Invalid) EOF code containing RJUMPV with target outside code bounds (Jumping to after code end)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_after_container(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"\n    EOF1I4200_0034 (Invalid) EOF code containing RJUMPV with target outside code bounds\n    (Jumping to after code end)\n    \"\"\"\n    invalid_destination = 2\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_at_end","title":"<code>test_rjumpv_at_end(eof_test, table_size, invalid_index)</code>","text":"<p>EOF1I4200_0035 (Invalid) EOF code containing RJUMPV with target outside code bounds (Jumping to code end)</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_at_end(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"\n    EOF1I4200_0035 (Invalid) EOF code containing RJUMPV with target outside code bounds\n    (Jumping to code end)\n    \"\"\"\n    invalid_destination = 1\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_self","title":"<code>test_rjumpv_into_self(eof_test, table_size, invalid_index, data_portion_end)</code>","text":"<p>EOF1I4200_0036 (Invalid) EOF code containing RJUMPV with target same RJUMPV immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpv_into_self(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0036 (Invalid) EOF code containing RJUMPV with target same RJUMPV immediate\"\"\"\n    invalid_destination = -1 if data_portion_end else -(2 * table_size) - 1\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_rjump","title":"<code>test_rjumpv_into_rjump(eof_test, table_size, invalid_index, data_portion_end)</code>","text":"<p>EOF1I4200_0037 (Invalid) EOF code containing RJUMPV with target RJUMP immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpv_into_rjump(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0037 (Invalid) EOF code containing RJUMPV with target RJUMP immediate\"\"\"\n    invalid_destination = 3 if data_portion_end else 2\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    if table_size &gt; 1:\n        valid_index = 0\n        if valid_index == invalid_index:\n            valid_index += 1\n        jump_table[valid_index] = 1\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP + Op.RJUMP[0] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_rjumpi","title":"<code>test_rjumpv_into_rjumpi(eof_test, table_size, invalid_index, data_portion_end)</code>","text":"<p>EOF1I4200_0038 (Invalid) EOF code containing RJUMPV with target RJUMPI immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpv_into_rjumpi(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0038 (Invalid) EOF code containing RJUMPV with target RJUMPI immediate\"\"\"\n    invalid_destination = 5 if data_portion_end else 4\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    if table_size &gt; 1:\n        valid_index = 0\n        if valid_index == invalid_index:\n            valid_index += 1\n        jump_table[valid_index] = 1\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPV[jump_table]\n                    + Op.STOP\n                    + Op.PUSH1(1)\n                    + Op.RJUMPI[0]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_push_1","title":"<code>test_rjumpv_into_push_1(eof_test, jump, table_size, invalid_index)</code>","text":"<p>EOF1I4200_0039 (Invalid) EOF code containing RJUMPV with target PUSH1 immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\"jump\", [JumpDirection.FORWARD, JumpDirection.BACKWARD])\ndef test_rjumpv_into_push_1(\n    eof_test: EOFTestFiller,\n    jump: JumpDirection,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"EOF1I4200_0039 (Invalid) EOF code containing RJUMPV with target PUSH1 immediate\"\"\"\n    if jump == JumpDirection.FORWARD:\n        invalid_destination = 2\n        jump_table = [0 for _ in range(table_size)]\n        jump_table[invalid_index] = invalid_destination\n        code = (\n            Op.PUSH1(1)\n            + Op.RJUMPV[jump_table]\n            + Op.STOP\n            + Op.PUSH1(1)\n            + Op.PUSH1(1)\n            + Op.SSTORE\n            + Op.STOP\n        )\n    else:\n        invalid_destination = -(2 * table_size) - 3\n        jump_table = [0 for _ in range(table_size)]\n        jump_table[invalid_index] = invalid_destination\n        code = Op.PUSH1(1) + Op.RJUMPV[jump_table] + Op.STOP\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=code,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_push_n","title":"<code>test_rjumpv_into_push_n(eof_test, opcode, jump, table_size, invalid_index, data_portion_end)</code>","text":"<p>EOF1I4200_0039 (Invalid) EOF code containing RJUMPV with target PUSH1 immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"opcode\",\n    [\n        Op.PUSH2,\n        Op.PUSH3,\n        Op.PUSH4,\n        Op.PUSH5,\n        Op.PUSH6,\n        Op.PUSH7,\n        Op.PUSH8,\n        Op.PUSH9,\n        Op.PUSH10,\n        Op.PUSH11,\n        Op.PUSH12,\n        Op.PUSH13,\n        Op.PUSH14,\n        Op.PUSH15,\n        Op.PUSH16,\n        Op.PUSH17,\n        Op.PUSH18,\n        Op.PUSH19,\n        Op.PUSH20,\n        Op.PUSH21,\n        Op.PUSH22,\n        Op.PUSH23,\n        Op.PUSH24,\n        Op.PUSH25,\n        Op.PUSH26,\n        Op.PUSH27,\n        Op.PUSH28,\n        Op.PUSH29,\n        Op.PUSH30,\n        Op.PUSH31,\n        Op.PUSH32,\n    ],\n)\n@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\n@pytest.mark.parametrize(\"jump\", [JumpDirection.FORWARD, JumpDirection.BACKWARD])\ndef test_rjumpv_into_push_n(\n    eof_test: EOFTestFiller,\n    opcode: Op,\n    jump: JumpDirection,\n    table_size: int,\n    invalid_index: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0039 (Invalid) EOF code containing RJUMPV with target PUSH1 immediate\"\"\"\n    data_portion_length = int.from_bytes(opcode, byteorder=\"big\") - 0x5F\n    if jump == JumpDirection.FORWARD:\n        invalid_destination = data_portion_length + 1 if data_portion_end else 2\n        jump_table = [0 for _ in range(table_size)]\n        jump_table[invalid_index] = invalid_destination\n        code = (\n            Op.PUSH1(1)\n            + Op.RJUMPV[jump_table]\n            + Op.STOP\n            + opcode[1]\n            + Op.PUSH1(1)\n            + Op.SSTORE\n            + Op.STOP\n        )\n    else:\n        invalid_destination = (\n            -(2 * table_size) - 3\n            if data_portion_end\n            else -(2 * table_size) - 2 - data_portion_length\n        )\n        jump_table = [0 for _ in range(table_size)]\n        jump_table[invalid_index] = invalid_destination\n        code = opcode[1] + Op.RJUMPV[jump_table] + Op.STOP\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=code,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_rjumpv","title":"<code>test_rjumpv_into_rjumpv(eof_test, source_table_size, target_table_size, invalid_index, data_portion_end)</code>","text":"<p>EOF1I4200_0040 (Invalid) EOF code containing RJUMPV with target other RJUMPV immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"source_table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"s1i0\"),\n        pytest.param(256, 0, id=\"s256i0\"),\n        pytest.param(256, 255, id=\"s256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\"target_table_size\", [1, 256], ids=[\"t1\", \"t256\"])\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpv_into_rjumpv(\n    eof_test: EOFTestFiller,\n    source_table_size: int,\n    target_table_size: int,\n    invalid_index: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0040 (Invalid) EOF code containing RJUMPV with target other RJUMPV immediate\"\"\"\n    invalid_destination = 4 + (2 * target_table_size) if data_portion_end else 4\n    source_jump_table = [0 for _ in range(source_table_size)]\n    source_jump_table[invalid_index] = invalid_destination\n    target_jump_table = [0 for _ in range(target_table_size)]\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.RJUMPV[source_jump_table]\n                    + Op.STOP\n                    + Op.PUSH1(1)\n                    + Op.RJUMPV[target_jump_table]\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                )\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_callf","title":"<code>test_rjumpv_into_callf(eof_test, table_size, invalid_index, data_portion_end)</code>","text":"<p>EOF1I4200_0041 (Invalid) EOF code containing RJUMPV with target CALLF immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"data_portion_end\",\n    [True, False],\n    ids=[\"data_portion_end\", \"data_portion_start\"],\n)\ndef test_rjumpv_into_callf(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n    data_portion_end: bool,\n):\n    \"\"\"EOF1I4200_0041 (Invalid) EOF code containing RJUMPV with target CALLF immediate\"\"\"\n    invalid_destination = 2 if data_portion_end else 1\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0) + Op.RJUMPV[jump_table] + Op.CALLF[1] + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=1,\n                ),\n                Section.Code(\n                    code=Op.SSTORE(1, 1) + Op.RETF,\n                    code_outputs=0,\n                    max_stack_height=2,\n                ),\n            ]\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_dupn","title":"<code>test_rjumpv_into_dupn(eof_test, table_size, invalid_index)</code>","text":"<p>EOF code containing RJUMP with target DUPN immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_into_dupn(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"EOF code containing RJUMP with target DUPN immediate\"\"\"\n    invalid_destination = 1\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.PUSH1(0)\n                    + Op.RJUMPV[jump_table]\n                    + Op.DUPN[1]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=3,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_swapn","title":"<code>test_rjumpv_into_swapn(eof_test, table_size, invalid_index)</code>","text":"<p>EOF code containing RJUMP with target SWAPN immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_into_swapn(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"EOF code containing RJUMP with target SWAPN immediate\"\"\"\n    invalid_destination = 1\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(1)\n                    + Op.PUSH1(0)\n                    + Op.RJUMPV[jump_table]\n                    + Op.SWAPN[1]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=3,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjump_into_exchange","title":"<code>test_rjump_into_exchange(eof_test, table_size, invalid_index)</code>","text":"<p>EOF code containing RJUMP with target EXCHANGE immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjump_into_exchange(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"EOF code containing RJUMP with target EXCHANGE immediate\"\"\"\n    invalid_destination = 1\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(1)\n                    + Op.PUSH1(2)\n                    + Op.PUSH1(3)\n                    + Op.PUSH1(0)\n                    + Op.RJUMPV[1]\n                    + Op.EXCHANGE[0x00]\n                    + Op.SSTORE\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_eofcreate","title":"<code>test_rjumpv_into_eofcreate(eof_test, table_size, invalid_index)</code>","text":"<p>EOF code containing RJUMP with target EOFCREATE immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_into_eofcreate(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"EOF code containing RJUMP with target EOFCREATE immediate\"\"\"\n    invalid_destination = 9\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.PUSH1(0)\n                    + Op.RJUMPV[jump_table]\n                    + Op.EOFCREATE[0](0, 0, 0, 0)\n                    + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n                Section.Container(\n                    container=Container(\n                        sections=[\n                            Section.Code(\n                                code=Op.RETURNCONTRACT[0](0, 0),\n                                code_outputs=NON_RETURNING_SECTION,\n                                max_stack_height=2,\n                            ),\n                            Section.Container(\n                                container=Container(\n                                    sections=[\n                                        Section.Code(\n                                            code=Op.STOP,\n                                            code_outputs=NON_RETURNING_SECTION,\n                                        )\n                                    ]\n                                )\n                            ),\n                        ]\n                    )\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/#tests.prague.eip7692_eof_v1.eip4200_relative_jumps.test_rjumpv.test_rjumpv_into_returncontract","title":"<code>test_rjumpv_into_returncontract(eof_test, table_size, invalid_index)</code>","text":"<p>EOF code containing RJUMP with target RETURNCONTRACT immediate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code> <pre><code>@pytest.mark.parametrize(\n    \"table_size,invalid_index\",\n    [\n        pytest.param(1, 0, id=\"t1i0\"),\n        pytest.param(256, 0, id=\"t256i0\"),\n        pytest.param(256, 255, id=\"t256i255\"),\n    ],\n)\ndef test_rjumpv_into_returncontract(\n    eof_test: EOFTestFiller,\n    table_size: int,\n    invalid_index: int,\n):\n    \"\"\"EOF code containing RJUMP with target RETURNCONTRACT immediate\"\"\"\n    invalid_destination = 5\n    jump_table = [0 for _ in range(table_size)]\n    jump_table[invalid_index] = invalid_destination\n    eof_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.EOFCREATE[0](0, 0, 0, 0) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=4,\n                ),\n                Section.Container(\n                    container=Container(\n                        sections=[\n                            Section.Code(\n                                code=Op.PUSH1(0)\n                                + Op.RJUMPV[jump_table]\n                                + Op.RETURNCONTRACT[0](0, 0),\n                                code_outputs=NON_RETURNING_SECTION,\n                                max_stack_height=2,\n                            ),\n                            Section.Container(\n                                container=Container(\n                                    sections=[\n                                        Section.Code(\n                                            code=Op.STOP,\n                                            code_outputs=NON_RETURNING_SECTION,\n                                        )\n                                    ]\n                                )\n                            ),\n                        ]\n                    )\n                ),\n            ],\n        ),\n        expect_exception=EOFException.INVALID_RJUMP_DESTINATION,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv/index/test_cases/","title":"Test Rjumpv - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py</code>:</p> <pre><code>test_rjumpv_condition[fork_CancunEIP7692-eof_test-t1-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t1-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t1-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t1-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t1-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t1-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t3-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t3-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t3-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t3-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t3-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t3-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t256-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t256-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t256-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t256-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t256-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-eof_test-t256-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t1-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t1-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t1-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t1-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t1-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t1-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t3-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t3-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t3-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t3-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t3-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t3-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t256-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t256-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t256-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t256-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t256-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-state_test-t256-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t1-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t1-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t1-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t1-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t1-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t1-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t3-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t3-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t3-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t3-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t3-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t3-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t256-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t256-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t256-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t256-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t256-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test-t256-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t1-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t1-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t1-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t1-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t1-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t1-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t3-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t3-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t3-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t3-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t3-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t3-c2^256-1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t256-c0]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t256-c1]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t256-c3]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t256-c255]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t256-c256]\ntest_rjumpv_condition[fork_CancunEIP7692-blockchain_test_hive-t256-c2^256-1]\ntest_rjumpv_forwards[fork_CancunEIP7692-eof_test]\ntest_rjumpv_forwards[fork_CancunEIP7692-state_test]\ntest_rjumpv_forwards[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_forwards[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_backwards[fork_CancunEIP7692-eof_test]\ntest_rjumpv_backwards[fork_CancunEIP7692-state_test]\ntest_rjumpv_backwards[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_backwards[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_zero[fork_CancunEIP7692-eof_test]\ntest_rjumpv_zero[fork_CancunEIP7692-state_test]\ntest_rjumpv_zero[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_zero[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_size_3[fork_CancunEIP7692-eof_test]\ntest_rjumpv_size_3[fork_CancunEIP7692-state_test]\ntest_rjumpv_size_3[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_size_3[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_full_table[fork_CancunEIP7692-eof_test]\ntest_rjumpv_full_table[fork_CancunEIP7692-state_test]\ntest_rjumpv_full_table[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_full_table[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_full_table_mid[fork_CancunEIP7692-eof_test]\ntest_rjumpv_full_table_mid[fork_CancunEIP7692-state_test]\ntest_rjumpv_full_table_mid[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_full_table_mid[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_full_table_end[fork_CancunEIP7692-eof_test]\ntest_rjumpv_full_table_end[fork_CancunEIP7692-state_test]\ntest_rjumpv_full_table_end[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_full_table_end[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_full_table_last[fork_CancunEIP7692-eof_test]\ntest_rjumpv_full_table_last[fork_CancunEIP7692-state_test]\ntest_rjumpv_full_table_last[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_full_table_last[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_max_forwards[fork_CancunEIP7692-eof_test]\ntest_rjumpv_max_forwards[fork_CancunEIP7692-state_test]\ntest_rjumpv_max_forwards[fork_CancunEIP7692-blockchain_test]\ntest_rjumpv_max_forwards[fork_CancunEIP7692-blockchain_test_hive]\ntest_rjumpv_truncated[fork_CancunEIP7692-eof_test]\ntest_rjumpv_truncated_1[fork_CancunEIP7692-eof_test]\ntest_rjumpv_truncated_2[fork_CancunEIP7692-eof_test]\ntest_rjumpv_truncated_3[fork_CancunEIP7692-eof_test]\ntest_rjumpv_truncated_4[fork_CancunEIP7692-eof_test]\ntest_rjumpv_into_header[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_into_header[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_into_header[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_before_container[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_before_container[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_before_container[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_into_data[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_into_data[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_into_data[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_after_container[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_after_container[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_after_container[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_at_end[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_at_end[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_at_end[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_into_self[fork_CancunEIP7692-eof_test-data_portion_end-t1i0]\ntest_rjumpv_into_self[fork_CancunEIP7692-eof_test-data_portion_end-t256i0]\ntest_rjumpv_into_self[fork_CancunEIP7692-eof_test-data_portion_end-t256i255]\ntest_rjumpv_into_self[fork_CancunEIP7692-eof_test-data_portion_start-t1i0]\ntest_rjumpv_into_self[fork_CancunEIP7692-eof_test-data_portion_start-t256i0]\ntest_rjumpv_into_self[fork_CancunEIP7692-eof_test-data_portion_start-t256i255]\ntest_rjumpv_into_rjump[fork_CancunEIP7692-eof_test-data_portion_end-t1i0]\ntest_rjumpv_into_rjump[fork_CancunEIP7692-eof_test-data_portion_end-t256i0]\ntest_rjumpv_into_rjump[fork_CancunEIP7692-eof_test-data_portion_end-t256i255]\ntest_rjumpv_into_rjump[fork_CancunEIP7692-eof_test-data_portion_start-t1i0]\ntest_rjumpv_into_rjump[fork_CancunEIP7692-eof_test-data_portion_start-t256i0]\ntest_rjumpv_into_rjump[fork_CancunEIP7692-eof_test-data_portion_start-t256i255]\ntest_rjumpv_into_rjumpi[fork_CancunEIP7692-eof_test-data_portion_end-t1i0]\ntest_rjumpv_into_rjumpi[fork_CancunEIP7692-eof_test-data_portion_end-t256i0]\ntest_rjumpv_into_rjumpi[fork_CancunEIP7692-eof_test-data_portion_end-t256i255]\ntest_rjumpv_into_rjumpi[fork_CancunEIP7692-eof_test-data_portion_start-t1i0]\ntest_rjumpv_into_rjumpi[fork_CancunEIP7692-eof_test-data_portion_start-t256i0]\ntest_rjumpv_into_rjumpi[fork_CancunEIP7692-eof_test-data_portion_start-t256i255]\ntest_rjumpv_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-t1i0]\ntest_rjumpv_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-t256i0]\ntest_rjumpv_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-t256i255]\ntest_rjumpv_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-t1i0]\ntest_rjumpv_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-t256i0]\ntest_rjumpv_into_push_1[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-t256i255]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t1i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_end-t256i255-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t1i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.FORWARD-data_portion_start-t256i255-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t1i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_end-t256i255-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t1i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i0-opcode_PUSH32]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH2]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH3]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH4]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH5]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH6]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH7]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH8]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH9]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH10]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH11]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH12]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH13]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH14]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH15]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH16]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH17]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH18]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH19]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH20]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH21]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH22]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH23]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH24]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH25]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH26]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH27]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH28]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH29]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH30]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH31]\ntest_rjumpv_into_push_n[fork_CancunEIP7692-eof_test-jump_JumpDirection.BACKWARD-data_portion_start-t256i255-opcode_PUSH32]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-t1-s1i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-t1-s256i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-t1-s256i255]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-t256-s1i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-t256-s256i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_end-t256-s256i255]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-t1-s1i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-t1-s256i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-t1-s256i255]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-t256-s1i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-t256-s256i0]\ntest_rjumpv_into_rjumpv[fork_CancunEIP7692-eof_test-data_portion_start-t256-s256i255]\ntest_rjumpv_into_callf[fork_CancunEIP7692-eof_test-data_portion_end-t1i0]\ntest_rjumpv_into_callf[fork_CancunEIP7692-eof_test-data_portion_end-t256i0]\ntest_rjumpv_into_callf[fork_CancunEIP7692-eof_test-data_portion_end-t256i255]\ntest_rjumpv_into_callf[fork_CancunEIP7692-eof_test-data_portion_start-t1i0]\ntest_rjumpv_into_callf[fork_CancunEIP7692-eof_test-data_portion_start-t256i0]\ntest_rjumpv_into_callf[fork_CancunEIP7692-eof_test-data_portion_start-t256i255]\ntest_rjumpv_into_dupn[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_into_dupn[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_into_dupn[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_into_swapn[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_into_swapn[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_into_swapn[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjump_into_exchange[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjump_into_exchange[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjump_into_exchange[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_into_eofcreate[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_into_eofcreate[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_into_eofcreate[fork_CancunEIP7692-eof_test-t256i255]\ntest_rjumpv_into_returncontract[fork_CancunEIP7692-eof_test-t1i0]\ntest_rjumpv_into_returncontract[fork_CancunEIP7692-eof_test-t256i0]\ntest_rjumpv_into_returncontract[fork_CancunEIP7692-eof_test-t256i255]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip4200_relative_jumps/test_rjumpv.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/","title":"EIP-6206 Jumpf","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip6206_jumpf</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF tests for EIP-6206 JUMPF</p>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/spec.py</code>.</p> <p>EOF V1 Constants used throughout all tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/","title":"Test Jumpf Execution","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF JUMPF tests covering simple cases.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_jumpf_forward","title":"<code>test_jumpf_forward(eof_state_test)</code>","text":"<p>Test JUMPF jumping forward</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_jumpf_forward(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Test JUMPF jumping forward\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.JUMPF[1],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Code(\n                    Op.SSTORE(slot_code_worked, value_code_worked) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                ),\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n        tx_data=b\"\\1\",\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_jumpf_backward","title":"<code>test_jumpf_backward(eof_state_test)</code>","text":"<p>Tests JUMPF jumping backward</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_jumpf_backward(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Tests JUMPF jumping backward\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.CALLF[2] + Op.SSTORE(slot_code_worked, value_code_worked) + Op.STOP,\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                ),\n                Section.Code(\n                    code=Op.RETF,\n                ),\n                Section.Code(\n                    code=Op.JUMPF[1],\n                ),\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n        tx_data=b\"\\1\",\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_jumpf_to_self","title":"<code>test_jumpf_to_self(eof_state_test)</code>","text":"<p>Tests JUMPF jumping to self</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_jumpf_to_self(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Tests JUMPF jumping to self\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.SLOAD(slot_code_worked)\n                    + Op.ISZERO\n                    + Op.RJUMPI[1]\n                    + Op.STOP\n                    + Op.SSTORE(slot_code_worked, value_code_worked)\n                    + Op.JUMPF[0],\n                    code_outputs=NON_RETURNING_SECTION,\n                    max_stack_height=2,\n                )\n            ],\n        ),\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n        tx_data=b\"\\1\",\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_jumpf_too_large","title":"<code>test_jumpf_too_large(eof_state_test)</code>","text":"<p>Tests JUMPF jumping to a section outside the max section range</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_jumpf_too_large(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Tests JUMPF jumping to a section outside the max section range\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.JUMPF[1025],\n                    code_outputs=NON_RETURNING_SECTION,\n                )\n            ],\n            validity_error=EOFException.UNDEFINED_EXCEPTION,\n        ),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_jumpf_way_too_large","title":"<code>test_jumpf_way_too_large(eof_state_test)</code>","text":"<p>Tests JUMPF jumping to uint64.MAX</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_jumpf_way_too_large(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Tests JUMPF jumping to uint64.MAX\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.JUMPF[0xFFFF],\n                    code_outputs=NON_RETURNING_SECTION,\n                )\n            ],\n            validity_error=EOFException.UNDEFINED_EXCEPTION,\n        ),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_jumpf_to_nonexistent_section","title":"<code>test_jumpf_to_nonexistent_section(eof_state_test)</code>","text":"<p>Tests JUMPF jumping to valid section number but where the section does not exist</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_jumpf_to_nonexistent_section(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Tests JUMPF jumping to valid section number but where the section does not exist\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.JUMPF[5],\n                    code_outputs=NON_RETURNING_SECTION,\n                )\n            ],\n            validity_error=EOFException.UNDEFINED_EXCEPTION,\n        ),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_execution.test_callf_to_non_returning_section","title":"<code>test_callf_to_non_returning_section(eof_state_test)</code>","text":"<p>Tests CALLF into a non-returning section</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code> <pre><code>def test_callf_to_non_returning_section(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"Tests CALLF into a non-returning section\"\"\"\n    eof_state_test(\n        data=Container(\n            sections=[\n                Section.Code(\n                    code=Op.CALLF[1],\n                    code_outputs=NON_RETURNING_SECTION,\n                ),\n                Section.Code(\n                    code=Op.STOP,\n                    outputs=NON_RETURNING_SECTION,\n                ),\n            ],\n            validity_error=EOFException.MISSING_STOP_OPCODE,\n        ),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution/index/test_cases/","title":"Test Jumpf Execution - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py</code>:</p> <pre><code>test_jumpf_forward[fork_CancunEIP7692-eof_test]\ntest_jumpf_forward[fork_CancunEIP7692-state_test]\ntest_jumpf_forward[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_forward[fork_CancunEIP7692-blockchain_test_hive]\ntest_jumpf_backward[fork_CancunEIP7692-eof_test]\ntest_jumpf_backward[fork_CancunEIP7692-state_test]\ntest_jumpf_backward[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_backward[fork_CancunEIP7692-blockchain_test_hive]\ntest_jumpf_to_self[fork_CancunEIP7692-eof_test]\ntest_jumpf_to_self[fork_CancunEIP7692-state_test]\ntest_jumpf_to_self[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_to_self[fork_CancunEIP7692-blockchain_test_hive]\ntest_jumpf_too_large[fork_CancunEIP7692-eof_test]\ntest_jumpf_too_large[fork_CancunEIP7692-state_test]\ntest_jumpf_too_large[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_too_large[fork_CancunEIP7692-blockchain_test_hive]\ntest_jumpf_way_too_large[fork_CancunEIP7692-eof_test]\ntest_jumpf_way_too_large[fork_CancunEIP7692-state_test]\ntest_jumpf_way_too_large[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_way_too_large[fork_CancunEIP7692-blockchain_test_hive]\ntest_jumpf_to_nonexistent_section[fork_CancunEIP7692-eof_test]\ntest_jumpf_to_nonexistent_section[fork_CancunEIP7692-state_test]\ntest_jumpf_to_nonexistent_section[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_to_nonexistent_section[fork_CancunEIP7692-blockchain_test_hive]\ntest_callf_to_non_returning_section[fork_CancunEIP7692-eof_test]\ntest_callf_to_non_returning_section[fork_CancunEIP7692-state_test]\ntest_callf_to_non_returning_section[fork_CancunEIP7692-blockchain_test]\ntest_callf_to_non_returning_section[fork_CancunEIP7692-blockchain_test_hive]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_execution.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack/","title":"Test Jumpf Stack","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF JUMPF tests covering stack validation rules.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_stack.test_jumpf_stack_non_returning_rules","title":"<code>test_jumpf_stack_non_returning_rules(eof_state_test, target_inputs, stack_height)</code>","text":"<p>Tests for JUMPF validation stack rules.  Non-returning section cases. Valid cases are executed.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py</code> <pre><code>@pytest.mark.parametrize(\n    \"target_inputs\",\n    [0, 2, 4],\n    ids=lambda x: \"ti-%d\" % x,\n)\n@pytest.mark.parametrize(\n    \"stack_height\",\n    [0, 2, 4],\n    ids=lambda x: \"h-%d\" % x,\n)\ndef test_jumpf_stack_non_returning_rules(\n    eof_state_test: EOFStateTestFiller,\n    target_inputs: int,\n    stack_height: int,\n):\n    \"\"\"\n    Tests for JUMPF validation stack rules.  Non-returning section cases.\n    Valid cases are executed.\n    \"\"\"\n    container = Container(\n        name=\"stack-non-retuning_h-%d_ti-%d\" % (stack_height, target_inputs),\n        sections=[\n            Section.Code(\n                code=Op.JUMPF[1],\n                code_outputs=NON_RETURNING_SECTION,\n            ),\n            Section.Code(\n                code=Op.PUSH0 * stack_height + Op.JUMPF[2],\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=stack_height,\n            ),\n            Section.Code(\n                code=Op.POP * target_inputs\n                + Op.SSTORE(slot_code_worked, value_code_worked)\n                + Op.STOP,\n                code_inputs=target_inputs,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=max(2, target_inputs),\n            ),\n        ],\n    )\n\n    if stack_height &lt; target_inputs:\n        container.validity_error = EOFException.STACK_UNDERFLOW\n\n    eof_state_test(\n        data=container,\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n        tx_data=b\"\\1\",\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_stack.test_jumpf_stack_returning_rules","title":"<code>test_jumpf_stack_returning_rules(eof_state_test, source_outputs, target_outputs, target_inputs, stack_diff)</code>","text":"<p>Tests for JUMPF validation stack rules.  Returning section cases. Valid cases are executed.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py</code> <pre><code>@pytest.mark.parametrize(\n    \"source_outputs\",\n    [0, 2, 4],\n    ids=lambda x: \"so-%d\" % x,\n)\n@pytest.mark.parametrize(\n    \"target_outputs\",\n    [0, 2, 4],\n    ids=lambda x: \"to-%d\" % x,\n)\n@pytest.mark.parametrize(\n    \"target_inputs\",\n    [0, 2, 4],\n    ids=lambda x: \"to-%d\" % x,\n)\n@pytest.mark.parametrize(\"stack_diff\", [-1, 0, 1], ids=[\"less-stack\", \"same-stack\", \"more-stack\"])\ndef test_jumpf_stack_returning_rules(\n    eof_state_test: EOFStateTestFiller,\n    source_outputs: int,\n    target_outputs: int,\n    target_inputs: int,\n    stack_diff: int,\n):\n    \"\"\"\n    Tests for JUMPF validation stack rules.  Returning section cases.\n    Valid cases are executed.\n    \"\"\"\n    if target_outputs &gt; source_outputs:\n        # These create invalid containers without JUMPF validation, Don't test.\n        return\n    if target_inputs == 0 and stack_diff &lt; 0:\n        # Code generation is impossible for this configuration.  Don't test.\n        return\n\n    target_delta = target_outputs - target_inputs\n    container = Container(\n        name=\"stack-retuning_co-%d_to-%d_ti-%d_diff-%d\"\n        % (source_outputs, target_outputs, target_inputs, stack_diff),\n        sections=[\n            Section.Code(\n                code=Op.CALLF[1] + Op.SSTORE(slot_code_worked, value_code_worked) + Op.STOP,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2 + source_outputs,\n            ),\n            Section.Code(\n                code=Op.PUSH0 * max(0, target_inputs + stack_diff) + Op.JUMPF[2],\n                code_outputs=source_outputs,\n                max_stack_height=target_inputs,\n            ),\n            Section.Code(\n                code=(Op.POP * -target_delta if target_delta &lt; 0 else Op.PUSH0 * target_delta)\n                + Op.RETF,\n                code_inputs=target_inputs,\n                code_outputs=target_outputs,\n                max_stack_height=max(target_inputs, target_outputs),\n            ),\n        ],\n    )\n\n    if stack_diff &lt; source_outputs - target_outputs:\n        container.validity_error = EOFException.STACK_UNDERFLOW\n    elif stack_diff &gt; source_outputs - target_outputs:\n        container.validity_error = EOFException.STACK_HIGHER_THAN_OUTPUTS\n\n    eof_state_test(\n        data=container,\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n        tx_data=b\"\\1\",\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack/index/test_cases/","title":"Test Jumpf Stack - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py</code>:</p> <pre><code>test_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-0-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-0-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-0-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-2-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-2-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-2-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-4-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-4-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-eof_test-h-4-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-0-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-0-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-0-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-2-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-2-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-2-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-4-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-4-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-state_test-h-4-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-0-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-0-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-0-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-2-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-2-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-2-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-4-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-4-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test-h-4-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-0-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-0-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-0-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-2-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-2-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-2-ti-4]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-4-ti-0]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-4-ti-2]\ntest_jumpf_stack_non_returning_rules[fork_CancunEIP7692-blockchain_test_hive-h-4-ti-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-less-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-same-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-eof_test-more-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-less-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-same-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-state_test-more-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-less-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-same-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test-more-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-less-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-same-stack-to-4-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-0-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-2-to-4-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-0-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-0-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-0-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-2-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-2-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-2-so-4]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-4-so-0]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-4-so-2]\ntest_jumpf_stack_returning_rules[fork_CancunEIP7692-blockchain_test_hive-more-stack-to-4-to-4-so-4]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_stack.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target/","title":"Test Jumpf Target","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF JUMPF tests covering JUMPF target rules.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_target.test_jumpf_target_rules","title":"<code>test_jumpf_target_rules(eof_state_test, source_outputs, target_outputs)</code>","text":"<p>Validate the target section rules of JUMPF, and execute valid cases. We are not testing stack so a lot of the logic is to get correct stack values.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py</code> <pre><code>@pytest.mark.parametrize(\n    \"target_outputs\",\n    [NON_RETURNING_SECTION, 0, 2, 4, 127],\n    ids=lambda x: \"to-%s\" % (\"N\" if x == NON_RETURNING_SECTION else x),\n)\n@pytest.mark.parametrize(\n    \"source_outputs\",\n    [NON_RETURNING_SECTION, 0, 2, 4, 127],\n    ids=lambda x: \"so-%s\" % (\"N\" if x == NON_RETURNING_SECTION else x),\n)\ndef test_jumpf_target_rules(\n    eof_state_test: EOFStateTestFiller,\n    source_outputs: int,\n    target_outputs: int,\n):\n    \"\"\"\n    Validate the target section rules of JUMPF, and execute valid cases.\n    We are not testing stack so a lot of the logic is to get correct stack values.\n    \"\"\"\n    source_non_returning = source_outputs == NON_RETURNING_SECTION\n    source_height = 0 if source_non_returning else source_outputs\n    source_section_index = 1\n\n    target_non_returning = target_outputs == NON_RETURNING_SECTION\n    target_height = 0 if target_non_returning else target_outputs\n    target_section_index = 2\n\n    # Because we are testing the target and not the stack height validation we need to do some work\n    # to make sure the stack passes validation.\n\n    # `source_extra_push` is how many more pushes we need to match our stack commitments\n    source_extra_push = max(0, source_height - target_height)\n    source_section = Section.Code(\n        code=Op.PUSH0 * (source_height)\n        + Op.CALLDATALOAD(0)\n        + Op.RJUMPI[1]\n        + (Op.STOP if source_non_returning else Op.RETF)\n        + Op.PUSH0 * source_extra_push\n        + Op.JUMPF[target_section_index],\n        code_inputs=0,\n        code_outputs=source_outputs,\n        max_stack_height=source_height + max(1, source_extra_push),\n    )\n\n    # `delta` is how many stack items the target output is from the input height, and tracks the\n    # number of pushes or (if negative) pops the target needs to do to match output commitments\n    delta = 0 if target_non_returning or source_non_returning else target_outputs - source_height\n    target_section = Section.Code(\n        code=((Op.PUSH0 * delta) if delta &gt;= 0 else (Op.POP * -delta))\n        + Op.CALLF[3]\n        + (Op.STOP if target_non_returning else Op.RETF),\n        code_inputs=source_height,\n        code_outputs=target_outputs,\n        max_stack_height=max(source_height, source_height + delta),\n    )\n\n    base_code = (\n        bytes(Op.JUMPF[source_section_index])\n        if source_non_returning\n        else (Op.CALLF[source_section_index](0, 0) + Op.STOP)\n    )\n    base_height = 0 if source_non_returning else 2 + source_outputs\n    container = Container(\n        name=\"so-%s_to-%s\"\n        % (\n            \"N\" if source_non_returning else source_outputs,\n            \"N\" if target_non_returning else target_outputs,\n        ),\n        sections=[\n            Section.Code(\n                code=base_code,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=base_height,\n            ),\n            source_section,\n            target_section,\n            Section.Code(\n                code=Op.SSTORE(slot_code_worked, value_code_worked) + Op.RETF,\n                code_inputs=0,\n                code_outputs=0,\n                max_stack_height=2,\n            ),\n        ],\n    )\n    if target_non_returning or source_non_returning:\n        if not target_non_returning and source_non_returning:\n            # both as non-returning handled above\n            container.validity_error = EOFException.INVALID_NON_RETURNING_FLAG\n    elif source_outputs &lt; target_outputs:\n        container.validity_error = EOFException.JUMPF_DESTINATION_INCOMPATIBLE_OUTPUTS\n\n    eof_state_test(\n        data=container,\n        container_post=Account(storage={slot_code_worked: value_code_worked}),\n        tx_data=b\"\\1\",\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target/#tests.prague.eip7692_eof_v1.eip6206_jumpf.test_jumpf_target.test_jumpf_multi_target_rules","title":"<code>test_jumpf_multi_target_rules(eof_state_test)</code>","text":"<p>NOT IMPLEMENTED: Test a section that contains multiple JUMPF to different targets with different outputs.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py</code> <pre><code>@pytest.mark.skip(\"Not implemented\")\ndef test_jumpf_multi_target_rules(\n    eof_state_test: EOFStateTestFiller,\n):\n    \"\"\"\n    NOT IMPLEMENTED:\n    Test a section that contains multiple JUMPF to different targets with different outputs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target/index/test_cases/","title":"Test Jumpf Target - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py</code>:</p> <pre><code>test_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-N-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-N-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-N-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-N-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-N-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-0-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-0-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-0-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-0-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-0-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-2-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-2-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-2-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-2-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-2-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-4-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-4-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-4-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-4-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-4-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-127-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-127-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-127-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-127-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-eof_test-so-127-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-N-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-N-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-N-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-N-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-N-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-0-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-0-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-0-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-0-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-0-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-2-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-2-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-2-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-2-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-2-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-4-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-4-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-4-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-4-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-4-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-127-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-127-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-127-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-127-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-state_test-so-127-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-N-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-N-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-N-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-N-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-N-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-0-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-0-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-0-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-0-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-0-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-2-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-2-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-2-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-2-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-2-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-4-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-4-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-4-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-4-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-4-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-127-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-127-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-127-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-127-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test-so-127-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-N-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-N-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-N-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-N-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-N-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-0-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-0-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-0-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-0-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-0-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-2-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-2-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-2-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-2-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-2-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-4-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-4-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-4-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-4-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-4-to-127]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-127-to-N]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-127-to-0]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-127-to-2]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-127-to-4]\ntest_jumpf_target_rules[fork_CancunEIP7692-blockchain_test_hive-so-127-to-127]\ntest_jumpf_multi_target_rules[fork_CancunEIP7692-eof_test]\ntest_jumpf_multi_target_rules[fork_CancunEIP7692-state_test]\ntest_jumpf_multi_target_rules[fork_CancunEIP7692-blockchain_test]\ntest_jumpf_multi_target_rules[fork_CancunEIP7692-blockchain_test_hive]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip6206_jumpf/test_jumpf_target.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/","title":"EIP-663 DUPn Swapn Exchange","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-663: SWAPN, DUPN and EXCHANGE instructions <p>Tests for EIP-663: SWAPN, DUPN and EXCHANGE instructions.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn/","title":"Test DUPn","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-663: SWAPN, DUPN and EXCHANGE instructions <p>Tests for the DUPN instruction.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_dupn.test_dupn_all_valid_immediates","title":"<code>test_dupn_all_valid_immediates(tx, state_test)</code>","text":"<p>Test case for all valid DUPN immediates.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py</code> <pre><code>@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_dupn_all_valid_immediates(\n    tx: Transaction,\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Test case for all valid DUPN immediates.\n    \"\"\"\n    n = 2**8\n    values = range(0xD00, 0xD00 + n)\n\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in values)\n                + b\"\".join(Op.SSTORE(x, Op.DUPN[x]) for x in range(0, n))\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=n + 2,\n            )\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=1_000_000_000),\n        tx.to: Account(code=eof_code),\n    }\n\n    post = {tx.to: Account(storage=dict(zip(range(0, n), reversed(values))))}\n\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_dupn.test_dupn_stack_underflow","title":"<code>test_dupn_stack_underflow(stack_height, max_stack_height, eof_test)</code>","text":"<p>Test case out of bounds DUPN immediate.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py</code> <pre><code>@pytest.mark.parametrize(\n    \"stack_height,max_stack_height\",\n    [\n        [0, 0],\n        [0, 1],\n        [1, 1],\n        [1, 2],\n        [2**8 - 1, 2**8 - 1],\n        [2**8 - 1, 2**8],\n    ],\n)\n@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_dupn_stack_underflow(\n    stack_height: int,\n    max_stack_height: int,\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    Test case out of bounds DUPN immediate.\n    \"\"\"\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in range(0, stack_height))\n                + Op.DUPN[stack_height]\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=max_stack_height,\n            )\n        ],\n    )\n    eof_test(\n        data=eof_code,\n        expect_exception=EOFException.STACK_UNDERFLOW,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_dupn.test_dupn_stack_overflow","title":"<code>test_dupn_stack_overflow(dupn_operand, max_stack_height, expect_exception, eof_test)</code>","text":"<p>Test case where DUPN produces an stack overflow.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py</code> <pre><code>@pytest.mark.parametrize(\n    \"dupn_operand,max_stack_height,expect_exception\",\n    [\n        [0, MAX_OPERAND_STACK_HEIGHT, EOFException.INVALID_MAX_STACK_HEIGHT],\n        [0, MAX_OPERAND_STACK_HEIGHT + 1, EOFException.MAX_STACK_HEIGHT_ABOVE_LIMIT],\n        [2**8 - 1, MAX_OPERAND_STACK_HEIGHT, EOFException.INVALID_MAX_STACK_HEIGHT],\n        [2**8 - 1, MAX_OPERAND_STACK_HEIGHT + 1, EOFException.MAX_STACK_HEIGHT_ABOVE_LIMIT],\n    ],\n)\n@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_dupn_stack_overflow(\n    dupn_operand: int,\n    max_stack_height: int,\n    expect_exception: EOFException,\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    Test case where DUPN produces an stack overflow.\n    \"\"\"\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in range(0, MAX_OPERAND_STACK_HEIGHT))\n                + Op.DUPN[dupn_operand]\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=max_stack_height,\n            )\n        ],\n    )\n    eof_test(\n        data=eof_code,\n        expect_exception=expect_exception,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn/index/test_cases/","title":"Test DUPn - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py</code>:</p> <pre><code>test_dupn_all_valid_immediates[fork_CancunEIP7692-blockchain_test]\ntest_dupn_all_valid_immediates[fork_CancunEIP7692-blockchain_test_hive]\ntest_dupn_all_valid_immediates[fork_CancunEIP7692-state_test]\ntest_dupn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_0-max_stack_height_0]\ntest_dupn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_0-max_stack_height_1]\ntest_dupn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_1-max_stack_height_1]\ntest_dupn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_1-max_stack_height_2]\ntest_dupn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_255-max_stack_height_255]\ntest_dupn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_255-max_stack_height_256]\ntest_dupn_stack_overflow[fork_CancunEIP7692-eof_test-dupn_operand_0-max_stack_height_1023-expect_exception_EOFException.INVALID_MAX_STACK_HEIGHT]\ntest_dupn_stack_overflow[fork_CancunEIP7692-eof_test-dupn_operand_0-max_stack_height_1024-expect_exception_EOFException.MAX_STACK_HEIGHT_ABOVE_LIMIT]\ntest_dupn_stack_overflow[fork_CancunEIP7692-eof_test-dupn_operand_255-max_stack_height_1023-expect_exception_EOFException.INVALID_MAX_STACK_HEIGHT]\ntest_dupn_stack_overflow[fork_CancunEIP7692-eof_test-dupn_operand_255-max_stack_height_1024-expect_exception_EOFException.MAX_STACK_HEIGHT_ABOVE_LIMIT]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_dupn.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange/","title":"Test Exchange","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-663: SWAPN, DUPN and EXCHANGE instructions <p>Tests for the EXCHANGE instruction.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_exchange.test_exchange_all_valid_immediates","title":"<code>test_exchange_all_valid_immediates(tx, state_test)</code>","text":"<p>Test case for all valid EXCHANGE immediates.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py</code> <pre><code>@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_exchange_all_valid_immediates(\n    tx: Transaction,\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Test case for all valid EXCHANGE immediates.\n    \"\"\"\n    n = 256\n    s = 34\n    values = range(0x3E8, 0x3E8 + s)\n\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in values)\n                + b\"\".join(Op.EXCHANGE(x) for x in range(0, n))\n                + b\"\".join((Op.PUSH1(x) + Op.SSTORE) for x in range(0, s))\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=s + 1,\n            )\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=1_000_000_000),\n        tx.to: Account(code=eof_code),\n    }\n\n    # this does the same full-loop exchange\n    values_rotated = list(range(0x3E8, 0x3E8 + s))\n    for e in range(0, n):\n        a = (e &gt;&gt; 4) + 1\n        b = (e &amp; 0x0F) + 1 + a\n        temp = values_rotated[a]\n        values_rotated[a] = values_rotated[b]\n        values_rotated[b] = temp\n\n    post = {tx.to: Account(storage=dict(zip(range(0, s), reversed(values_rotated))))}\n\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_exchange.test_exchange_all_invalid_immediates","title":"<code>test_exchange_all_invalid_immediates(eof_test, stack_height, x, y)</code>","text":"<p>Test case for all invalid EXCHANGE immediates.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py</code> <pre><code>@pytest.mark.parametrize(\n    \"stack_height,x,y\",\n    [\n        # 2 and 3 are the lowest valid values for x and y, which translates to a\n        # zero immediate value.\n        pytest.param(0, 2, 3, id=\"stack_height=0_n=1_m=1\"),\n        pytest.param(1, 2, 3, id=\"stack_height=1_n=1_m=1\"),\n        pytest.param(2, 2, 3, id=\"stack_height=2_n=1_m=1\"),\n        pytest.param(17, 2, 18, id=\"stack_height=17_n=1_m=16\"),\n        pytest.param(17, 17, 18, id=\"stack_height=17_n=16_m=1\"),\n        pytest.param(32, 17, 33, id=\"stack_height=32_n=16_m=16\"),\n    ],\n)\n@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_exchange_all_invalid_immediates(\n    eof_test: EOFTestFiller,\n    stack_height: int,\n    x: int,\n    y: int,\n):\n    \"\"\"\n    Test case for all invalid EXCHANGE immediates.\n    \"\"\"\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in range(stack_height))\n                + Op.EXCHANGE[x, y]\n                + Op.POP * stack_height\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=stack_height,\n            )\n        ],\n    )\n\n    eof_test(\n        data=eof_code,\n        expect_exception=EOFException.STACK_UNDERFLOW,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange/index/test_cases/","title":"Test Exchange - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py</code>:</p> <pre><code>test_exchange_all_valid_immediates[fork_CancunEIP7692-blockchain_test]\ntest_exchange_all_valid_immediates[fork_CancunEIP7692-blockchain_test_hive]\ntest_exchange_all_valid_immediates[fork_CancunEIP7692-state_test]\ntest_exchange_all_invalid_immediates[fork_CancunEIP7692-eof_test-stack_height=0_n=1_m=1]\ntest_exchange_all_invalid_immediates[fork_CancunEIP7692-eof_test-stack_height=1_n=1_m=1]\ntest_exchange_all_invalid_immediates[fork_CancunEIP7692-eof_test-stack_height=2_n=1_m=1]\ntest_exchange_all_invalid_immediates[fork_CancunEIP7692-eof_test-stack_height=17_n=1_m=16]\ntest_exchange_all_invalid_immediates[fork_CancunEIP7692-eof_test-stack_height=17_n=16_m=1]\ntest_exchange_all_invalid_immediates[fork_CancunEIP7692-eof_test-stack_height=32_n=16_m=16]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_exchange.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn/","title":"Test Swapn","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> Tests EIP-663: SWAPN, DUPN and EXCHANGE instructions <p>Tests for the SWAPN instruction.</p>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_swapn.test_swapn_all_valid_immediates","title":"<code>test_swapn_all_valid_immediates(tx, state_test)</code>","text":"<p>Test case for all valid SWAPN immediates.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py</code> <pre><code>@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_swapn_all_valid_immediates(\n    tx: Transaction,\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Test case for all valid SWAPN immediates.\n    \"\"\"\n    n = 256\n    values = range(0x500, 0x500 + 257)\n\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in values)\n                + b\"\".join(Op.SSTORE(x, Op.SWAPN[0xFF - x]) for x in range(0, n))\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=n + 2,\n            )\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=1_000_000_000),\n        tx.to: Account(code=eof_code),\n    }\n\n    values_rotated = list(values[1:]) + [values[0]]\n    post = {tx.to: Account(storage=dict(zip(range(0, n), reversed(values_rotated))))}\n\n    state_test(\n        env=Environment(),\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_swapn.test_swapn_on_max_stack","title":"<code>test_swapn_on_max_stack(swapn_operand, eof_test)</code>","text":"<p>Test case out of bounds DUPN immediate.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py</code> <pre><code>@pytest.mark.parametrize(\n    \"swapn_operand\",\n    [\n        0,\n        2**8 - 1,\n    ],\n)\n@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_swapn_on_max_stack(\n    swapn_operand: int,\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    Test case out of bounds DUPN immediate.\n    \"\"\"\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in range(0, MAX_OPERAND_STACK_HEIGHT))\n                + Op.SWAPN[swapn_operand]\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=MAX_OPERAND_STACK_HEIGHT,\n            )\n        ],\n    )\n    eof_test(\n        data=eof_code,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn/#tests.prague.eip7692_eof_v1.eip663_dupn_swapn_exchange.test_swapn.test_swapn_stack_underflow","title":"<code>test_swapn_stack_underflow(stack_height, eof_test)</code>","text":"<p>Test case out of bounds DUPN immediate.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py</code> <pre><code>@pytest.mark.parametrize(\n    \"stack_height\",\n    [\n        0,\n        1,\n        2**8 - 1,\n    ],\n)\n@pytest.mark.valid_from(EOF_FORK_NAME)\ndef test_swapn_stack_underflow(\n    stack_height: int,\n    eof_test: EOFTestFiller,\n):\n    \"\"\"\n    Test case out of bounds DUPN immediate.\n    \"\"\"\n    eof_code = Container(\n        sections=[\n            Section.Code(\n                code=b\"\".join(Op.PUSH2(v) for v in range(0, stack_height))\n                + Op.SWAPN[stack_height]\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=MAX_OPERAND_STACK_HEIGHT,\n            )\n        ],\n    )\n    eof_test(\n        data=eof_code,\n        expect_exception=EOFException.STACK_UNDERFLOW,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn/index/test_cases/","title":"Test Swapn - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py</code>:</p> <pre><code>test_swapn_all_valid_immediates[fork_CancunEIP7692-blockchain_test]\ntest_swapn_all_valid_immediates[fork_CancunEIP7692-blockchain_test_hive]\ntest_swapn_all_valid_immediates[fork_CancunEIP7692-state_test]\ntest_swapn_on_max_stack[fork_CancunEIP7692-eof_test-swapn_operand_0]\ntest_swapn_on_max_stack[fork_CancunEIP7692-eof_test-swapn_operand_255]\ntest_swapn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_0]\ntest_swapn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_1]\ntest_swapn_stack_underflow[fork_CancunEIP7692-eof_test-stack_height_255]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip663_dupn_swapn_exchange/test_swapn.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/","title":"EIP-7480 Data Section","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7480_data_section</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7480_data_section --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7480_data_section --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Cross-client EVM Object Format Tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7480_data_section/spec.py</code>.</p> <p>EOF V1 Constants used throughout all tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation/","title":"Test Code Validation","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOF V1 Code Validation tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation/#tests.prague.eip7692_eof_v1.eip7480_data_section.test_code_validation.test_legacy_initcode_valid_eof_v1_contract","title":"<code>test_legacy_initcode_valid_eof_v1_contract(eof_test, container)</code>","text":"<p>Test creating various types of valid EOF V1 contracts using legacy initcode and a contract creating transaction.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py</code> <pre><code>@pytest.mark.parametrize(\n    \"container\",\n    VALID,\n    ids=container_name,\n)\ndef test_legacy_initcode_valid_eof_v1_contract(\n    eof_test: EOFTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test creating various types of valid EOF V1 contracts using legacy\n    initcode and a contract creating transaction.\n    \"\"\"\n    assert (\n        container.validity_error is None\n    ), f\"Valid container with validity error: {container.validity_error}\"\n    eof_test(\n        data=container,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation/#tests.prague.eip7692_eof_v1.eip7480_data_section.test_code_validation.test_legacy_initcode_invalid_eof_v1_contract","title":"<code>test_legacy_initcode_invalid_eof_v1_contract(eof_test, container)</code>","text":"<p>Test creating various types of valid EOF V1 contracts using legacy initcode and a contract creating transaction.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py</code> <pre><code>@pytest.mark.parametrize(\n    \"container\",\n    INVALID,\n    ids=container_name,\n)\ndef test_legacy_initcode_invalid_eof_v1_contract(\n    eof_test: EOFTestFiller,\n    container: Container,\n):\n    \"\"\"\n    Test creating various types of valid EOF V1 contracts using legacy\n    initcode and a contract creating transaction.\n    \"\"\"\n    assert container.validity_error is not None, \"Invalid container without validity error\"\n    eof_test(\n        data=container,\n        expect_exception=container.validity_error,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation/index/test_cases/","title":"Test Code Validation - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py</code>:</p> <pre><code>test_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-empty_data_section]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-small_data_section]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-large_data_section]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-max_data_section]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_zero]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_middle]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_edge]\ntest_legacy_initcode_valid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_max]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_max_empty_data]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_max_small_data]\ntest_legacy_initcode_invalid_eof_v1_contract[fork_CancunEIP7692-eof_test-DATALOADN_max_half_data]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip7480_data_section/test_code_validation.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes/","title":"Test Data Opcodes","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Execution of CALLF, RETF opcodes within EOF V1 containers tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes/#tests.prague.eip7692_eof_v1.eip7480_data_section.test_data_opcodes.test_data_section_succeed","title":"<code>test_data_section_succeed(state_test, offset, datasize)</code>","text":"<p>Test simple contracts that are simply expected to succeed on call.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py</code> <pre><code>@pytest.mark.parametrize(\n    [\"offset\", \"datasize\"],\n    [\n        pytest.param(0, 0, id=\"empty_zero\"),\n        pytest.param(0, 2, id=\"short_zero\"),\n        pytest.param(0, 32, id=\"exact_zero\"),\n        pytest.param(0, 64, id=\"large_zero\"),\n        pytest.param(32, 0, id=\"empty_32\"),\n        pytest.param(32, 34, id=\"short_32\"),\n        pytest.param(32, 64, id=\"exact_32\"),\n        pytest.param(32, 96, id=\"large_32\"),\n        pytest.param(0x5BFE, 0, id=\"empty_23k\"),\n        pytest.param(0x5BFE, 0x5C00, id=\"short_23k\"),\n        pytest.param(0x5BE0, 0x5D00, id=\"exact_23k\"),\n        pytest.param(0x2345, 0x5C00, id=\"large_23k\"),\n    ],\n)\ndef test_data_section_succeed(\n    state_test: StateTestFiller,\n    offset: int,\n    datasize: int,\n):\n    \"\"\"\n    Test simple contracts that are simply expected to succeed on call.\n    \"\"\"\n    env = Environment()\n\n    caller_contract = Op.SSTORE(0, Op.DELEGATECALL(Op.GAS, 0x200, 0, 0, 0, 0)) + Op.STOP()\n    (container, expected_storage) = create_data_test(offset, datasize)\n\n    pre = {\n        TestAddress: Account(\n            balance=1000000000000000000000,\n            nonce=1,\n        ),\n        Address(0x100): Account(\n            code=caller_contract,\n            nonce=1,\n        ),\n        Address(0x200): Account(\n            code=container,\n            nonce=1,\n        ),\n    }\n\n    tx = Transaction(\n        nonce=1,\n        to=Address(0x100),\n        gas_limit=50000000,\n        gas_price=10,\n        protected=False,\n        data=\"\",\n    )\n\n    post = {Address(0x100): Account(storage=expected_storage)}\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes/index/test_cases/","title":"Test Data Opcodes - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py</code>:</p> <pre><code>test_data_section_succeed[fork_CancunEIP7692-blockchain_test-empty_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-short_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-exact_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-large_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-empty_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-short_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-exact_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-large_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-empty_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-short_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-exact_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test-large_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-empty_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-short_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-exact_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-large_zero]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-empty_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-short_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-exact_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-large_32]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-empty_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-short_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-exact_23k]\ntest_data_section_succeed[fork_CancunEIP7692-blockchain_test_hive-large_23k]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-empty_zero]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-short_zero]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-exact_zero]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-large_zero]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-empty_32]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-short_32]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-exact_32]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-large_32]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-empty_23k]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-short_23k]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-exact_23k]\ntest_data_section_succeed[fork_CancunEIP7692-state_test-large_23k]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip7480_data_section/test_data_opcodes.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/","title":"EIP-7620 Eof Create","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7620_eof_create</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>EOFCREATE, RETURNCONTRACT, and container tests</p> <p>evmone tests not ported</p> <p>create_tx_with_eof_initcode - This calls it invalid, it is now the way to add EOF contacts to state eofcreate_extcall_returncontract - per the new initcode mode tests you cannot have RETURNCONTRACT     in a deployed contract eofcreate_dataloadn_referring_to_auxdata - covered by     tests.prague.eip7480_data_section.test_data_opcodes.test_data_section_succeed eofcreate_initcontainer_return - RETURN is banned in initcode containers eofcreate_initcontainer_stop - STOP is banned in initcode containers All TXCREATE tests - TXCREATE has been removed from Prague</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/spec/","title":"Spec","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/spec.py</code>.</p> <p>EOF V1 Constants used throughout all tests</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/","title":"Test Eofcreate","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Test good and bad EOFCREATE cases</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_simple_eofcreate","title":"<code>test_simple_eofcreate(state_test)</code>","text":"<p>Verifies a simple EOFCREATE case</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_simple_eofcreate(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies a simple EOFCREATE case\n    \"\"\"\n    env = Environment()\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(0, Op.EOFCREATE[0](0, 0, 0, 0)) + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=smallest_initcode_subcontainer),\n                ],\n                data=b\"abcdef\",\n            ),\n            storage={0: 0xB17D},  # a canary to be overwritten\n        ),\n    }\n    # Storage in 0 should have the address,\n    post = {\n        default_address: Account(\n            storage={\n                0: compute_eofcreate_address(default_address, 0, smallest_initcode_subcontainer)\n            }\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_eofcreate_then_call","title":"<code>test_eofcreate_then_call(state_test)</code>","text":"<p>Verifies a simple EOFCREATE case, and then calls the deployed contract</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_eofcreate_then_call(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies a simple EOFCREATE case, and then calls the deployed contract\n    \"\"\"\n    env = Environment()\n    callable_contract = Container(\n        sections=[\n            Section.Code(\n                code=Op.SSTORE(slot_code_worked, value_code_worked) + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n        ]\n    )\n    callable_contract_initcode = Container(\n        sections=[\n            Section.Code(\n                code=Op.RETURNCONTRACT[0](0, 0),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n            Section.Container(container=callable_contract),\n        ]\n    )\n\n    callable_address = compute_eofcreate_address(default_address, 0, callable_contract_initcode)\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.EXTCALL(Op.SLOAD(slot_create_address), 0, 0, 0)\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=callable_contract_initcode),\n                ],\n            )\n        ),\n    }\n    # Storage in 0 should have the address,\n    #\n    post = {\n        default_address: Account(\n            storage={slot_create_address: callable_address, slot_code_worked: value_code_worked}\n        ),\n        callable_address: Account(storage={slot_code_worked: value_code_worked}),\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_auxdata_variations","title":"<code>test_auxdata_variations(state_test, auxdata_bytes)</code>","text":"<p>Verifies that auxdata bytes are correctly handled in RETURNCONTRACT</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>@pytest.mark.parametrize(\n    \"auxdata_bytes\",\n    [\n        pytest.param(b\"\", id=\"zero\"),\n        pytest.param(b\"aabbcc\", id=\"short\"),\n        pytest.param(b\"aabbccddeef\", id=\"one_byte_short\"),\n        pytest.param(b\"aabbccddeeff\", id=\"exact\"),\n        pytest.param(b\"aabbccddeeffg\", id=\"one_byte_long\"),\n        pytest.param(b\"aabbccddeeffgghhii\", id=\"extra\"),\n    ],\n)\ndef test_auxdata_variations(state_test: StateTestFiller, auxdata_bytes: bytes):\n    \"\"\"\n    Verifies that auxdata bytes are correctly handled in RETURNCONTRACT\n    \"\"\"\n    env = Environment()\n    auxdata_size = len(auxdata_bytes)\n    pre_deploy_header_data_size = 18\n    pre_deploy_data = b\"AABBCC\"\n    deploy_success = len(auxdata_bytes) + len(pre_deploy_data) &gt;= pre_deploy_header_data_size\n\n    runtime_subcontainer = Container(\n        name=\"Runtime Subcontainer with truncated data\",\n        sections=[\n            Section.Code(\n                code=Op.STOP, code_inputs=0, code_outputs=NON_RETURNING_SECTION, max_stack_height=0\n            ),\n            Section.Data(data=pre_deploy_data, custom_size=pre_deploy_header_data_size),\n        ],\n    )\n\n    initcode_subcontainer = Container(\n        name=\"Initcode Subcontainer\",\n        sections=[\n            Section.Code(\n                code=Op.MSTORE(0, Op.PUSH32(auxdata_bytes.ljust(32, b\"\\0\")))\n                + Op.RETURNCONTRACT[0](0, auxdata_size),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n            Section.Container(container=runtime_subcontainer),\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0)) + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=initcode_subcontainer),\n                ]\n            ),\n            storage={slot_create_address: value_canary_to_be_overwritten},\n        ),\n    }\n\n    # Storage in 0 should have the address,\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: compute_eofcreate_address(\n                    default_address, 0, initcode_subcontainer\n                )\n                if deploy_success\n                else b\"\\0\"\n            }\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_calldata","title":"<code>test_calldata(state_test)</code>","text":"<p>Verifies CALLDATA passing through EOFCREATE</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_calldata(state_test: StateTestFiller):\n    \"\"\"\n    Verifies CALLDATA passing through EOFCREATE\n    \"\"\"\n    env = Environment()\n\n    initcode_subcontainer = Container(\n        name=\"Initcode Subcontainer\",\n        sections=[\n            Section.Code(\n                code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n                + Op.SSTORE(slot_calldata, Op.MLOAD(0))\n                + Op.RETURNCONTRACT[0](0, Op.CALLDATASIZE),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=3,\n            ),\n            Section.Container(container=smallest_runtime_subcontainer),\n        ],\n    )\n\n    calldata_size = 32\n    calldata = b\"\\x45\" * calldata_size\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.MSTORE(0, Op.PUSH32(calldata))\n                        + Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, calldata_size))\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=initcode_subcontainer),\n                ]\n            )\n        ),\n    }\n\n    # deployed contract is smallest plus data\n    deployed_contract = Container(\n        name=\"deployed contract\",\n        sections=[\n            *smallest_runtime_subcontainer.sections,\n            Section.Data(data=calldata),\n        ],\n    )\n    # factory contract Storage in 0 should have the created address,\n    # created contract storage in 0 should have the calldata\n    created_address = compute_eofcreate_address(default_address, 0, initcode_subcontainer)\n    post = {\n        default_address: Account(storage={slot_create_address: created_address}),\n        created_address: Account(code=deployed_contract, storage={slot_calldata: calldata}),\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_eofcreate_in_initcode","title":"<code>test_eofcreate_in_initcode(state_test)</code>","text":"<p>Verifies an EOFCREATE occuring within initcode creates that contract</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_eofcreate_in_initcode(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies an EOFCREATE occuring within initcode creates that contract\n    \"\"\"\n    nested_initcode_subcontainer = Container(\n        sections=[\n            Section.Code(\n                code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                + Op.SSTORE(slot_code_worked, value_code_worked)\n                + Op.RETURNCONTRACT[1](0, 0),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=4,\n            ),\n            Section.Container(container=smallest_initcode_subcontainer),\n            Section.Container(container=smallest_runtime_subcontainer),\n        ]\n    )\n\n    env = Environment()\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=nested_initcode_subcontainer),\n                ]\n            )\n        ),\n    }\n\n    outer_address = compute_eofcreate_address(default_address, 0, nested_initcode_subcontainer)\n    inner_address = compute_eofcreate_address(outer_address, 0, smallest_initcode_subcontainer)\n    post = {\n        default_address: Account(\n            storage={slot_create_address: outer_address, slot_code_worked: value_code_worked}\n        ),\n        outer_address: Account(\n            storage={slot_create_address: inner_address, slot_code_worked: value_code_worked}\n        ),\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_eofcreate_in_initcode_reverts","title":"<code>test_eofcreate_in_initcode_reverts(state_test)</code>","text":"<p>Verifies an EOFCREATE occuring in an initcode is rolled back when the initcode reverts</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_eofcreate_in_initcode_reverts(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies an EOFCREATE occuring in an initcode is rolled back when the initcode reverts\n    \"\"\"\n    nested_initcode_subcontainer = Container(\n        sections=[\n            Section.Code(\n                code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                + Op.SSTORE(slot_code_worked, value_code_worked)\n                + Op.REVERT(0, 0),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=4,\n            ),\n            Section.Container(container=smallest_initcode_subcontainer),\n            Section.Container(container=smallest_runtime_subcontainer),\n        ]\n    )\n\n    env = Environment()\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=nested_initcode_subcontainer),\n                ]\n            ),\n            storage={slot_create_address: value_canary_to_be_overwritten},\n        ),\n    }\n\n    outer_address = compute_eofcreate_address(default_address, 0, nested_initcode_subcontainer)\n    inner_address = compute_eofcreate_address(outer_address, 0, smallest_initcode_subcontainer)\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: 0,\n                slot_code_worked: value_code_worked,\n            }\n        ),\n        outer_address: Account.NONEXISTENT,\n        inner_address: Account.NONEXISTENT,\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_return_data_cleared","title":"<code>test_return_data_cleared(state_test)</code>","text":"<p>Verifies the return data is not re-used from a extcall but is cleared upon eofcreate</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_return_data_cleared(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies the return data is not re-used from a extcall but is cleared upon eofcreate\n    \"\"\"\n    env = Environment()\n    callable_address = fixed_address(1)\n    value_return_canary = 0x4158675309\n    value_return_canary_size = 5\n    callable_contract = Container(\n        sections=[\n            Section.Code(\n                code=Op.MSTORE(0, value_return_canary) + Op.RETURN(0, value_return_canary_size),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            )\n        ]\n    )\n\n    slot_returndata_size_2 = slot_last_slot * 2 + slot_returndata_size\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_call_result, Op.EXTCALL(callable_address, 0, 0, 0))\n                        + Op.SSTORE(slot_returndata_size, Op.RETURNDATASIZE)\n                        + Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_returndata_size_2, Op.RETURNDATASIZE)\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=smallest_initcode_subcontainer),\n                ],\n            )\n        ),\n        callable_address: Account(code=callable_contract, nonce=1),\n    }\n\n    new_contract_address = compute_eofcreate_address(\n        default_address, 0, smallest_initcode_subcontainer\n    )\n    post = {\n        default_address: Account(\n            storage={\n                slot_call_result: value_call_result_success,\n                slot_returndata_size: value_return_canary_size,\n                slot_create_address: new_contract_address,\n                slot_returndata_size_2: 0,\n                slot_code_worked: value_code_worked,\n            },\n            nonce=1,\n        ),\n        callable_address: Account(nonce=1),\n        new_contract_address: Account(nonce=1),\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate.test_address_collision","title":"<code>test_address_collision(state_test)</code>","text":"<p>Verifies a simple EOFCREATE case</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code> <pre><code>def test_address_collision(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies a simple EOFCREATE case\n    \"\"\"\n    env = Environment()\n\n    salt_zero_address = compute_eofcreate_address(\n        default_address, 0, smallest_initcode_subcontainer\n    )\n    salt_one_address = compute_eofcreate_address(\n        default_address, 1, smallest_initcode_subcontainer\n    )\n\n    slot_create_address_2 = slot_last_slot * 2 + slot_create_address\n    slot_create_address_3 = slot_last_slot * 3 + slot_create_address\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_create_address_2, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_create_address_3, Op.EOFCREATE[0](0, 1, 0, 0))\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=smallest_initcode_subcontainer),\n                ],\n            )\n        ),\n        salt_one_address: Account(balance=1, nonce=1),\n    }\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: salt_zero_address,\n                slot_create_address_2: value_create_failed,  # had an in-transaction collision\n                slot_create_address_3: value_create_failed,  # had a pre-existing collision\n                slot_code_worked: value_code_worked,\n            }\n        )\n    }\n\n    # Multiple create fails is expensive, use an absurd amount of gas\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction(gas_limit=300_000_000_000))\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate/index/test_cases/","title":"Test Eofcreate - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py</code>:</p> <pre><code>test_simple_eofcreate[fork_CancunEIP7692-blockchain_test]\ntest_simple_eofcreate[fork_CancunEIP7692-blockchain_test_hive]\ntest_simple_eofcreate[fork_CancunEIP7692-state_test]\ntest_eofcreate_then_call[fork_CancunEIP7692-blockchain_test]\ntest_eofcreate_then_call[fork_CancunEIP7692-blockchain_test_hive]\ntest_eofcreate_then_call[fork_CancunEIP7692-state_test]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test-zero]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test-short]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test-one_byte_short]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test-exact]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test-one_byte_long]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test-extra]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test_hive-zero]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test_hive-short]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test_hive-one_byte_short]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test_hive-exact]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test_hive-one_byte_long]\ntest_auxdata_variations[fork_CancunEIP7692-blockchain_test_hive-extra]\ntest_auxdata_variations[fork_CancunEIP7692-state_test-zero]\ntest_auxdata_variations[fork_CancunEIP7692-state_test-short]\ntest_auxdata_variations[fork_CancunEIP7692-state_test-one_byte_short]\ntest_auxdata_variations[fork_CancunEIP7692-state_test-exact]\ntest_auxdata_variations[fork_CancunEIP7692-state_test-one_byte_long]\ntest_auxdata_variations[fork_CancunEIP7692-state_test-extra]\ntest_calldata[fork_CancunEIP7692-blockchain_test]\ntest_calldata[fork_CancunEIP7692-blockchain_test_hive]\ntest_calldata[fork_CancunEIP7692-state_test]\ntest_eofcreate_in_initcode[fork_CancunEIP7692-blockchain_test]\ntest_eofcreate_in_initcode[fork_CancunEIP7692-blockchain_test_hive]\ntest_eofcreate_in_initcode[fork_CancunEIP7692-state_test]\ntest_eofcreate_in_initcode_reverts[fork_CancunEIP7692-blockchain_test]\ntest_eofcreate_in_initcode_reverts[fork_CancunEIP7692-blockchain_test_hive]\ntest_eofcreate_in_initcode_reverts[fork_CancunEIP7692-state_test]\ntest_return_data_cleared[fork_CancunEIP7692-blockchain_test]\ntest_return_data_cleared[fork_CancunEIP7692-blockchain_test_hive]\ntest_return_data_cleared[fork_CancunEIP7692-state_test]\ntest_address_collision[fork_CancunEIP7692-blockchain_test]\ntest_address_collision[fork_CancunEIP7692-blockchain_test_hive]\ntest_address_collision[fork_CancunEIP7692-state_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/","title":"Test Eofcreate Failures","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Test good and bad EOFCREATE cases</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_initcode_revert","title":"<code>test_initcode_revert(state_test, revert)</code>","text":"<p>Verifies proper handling of REVERT in initcode</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>@pytest.mark.parametrize(\n    \"revert\",\n    [\n        pytest.param(b\"\", id=\"empty\"),\n        pytest.param(b\"\\x08\\xc3\\x79\\xa0\", id=\"Error(string)\"),\n    ],\n)\ndef test_initcode_revert(state_test: StateTestFiller, revert: bytes):\n    \"\"\"\n    Verifies proper handling of REVERT in initcode\n    \"\"\"\n    env = Environment()\n    revert_size = len(revert)\n\n    initcode_subcontainer = Container(\n        name=\"Initcode Subcontainer that reverts\",\n        sections=[\n            Section.Code(\n                code=Op.MSTORE(0, Op.PUSH32(revert)) + Op.REVERT(32 - revert_size, revert_size),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n        ],\n    )\n\n    factory_contract = Container(\n        name=\"factory contract\",\n        sections=[\n            Section.Code(\n                code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                + Op.SSTORE(slot_returndata_size, Op.RETURNDATASIZE)\n                + Op.RETURNDATACOPY(Op.SUB(32, Op.RETURNDATASIZE), 0, Op.RETURNDATASIZE)\n                + Op.SSTORE(slot_returndata, Op.MLOAD(0))\n                + Op.SSTORE(slot_code_worked, value_code_worked)\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=4,\n            ),\n            Section.Container(container=initcode_subcontainer),\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(code=factory_contract),\n    }\n\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_create_failed,\n                slot_returndata_size: revert_size,\n                slot_returndata: revert,\n                slot_code_worked: value_code_worked,\n            }\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_initcode_aborts","title":"<code>test_initcode_aborts(state_test)</code>","text":"<p>Verifies correct handling of a halt in EOF initcode</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>def test_initcode_aborts(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Verifies correct handling of a halt in EOF initcode\n    \"\"\"\n    env = Environment()\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(\n                        container=Container(\n                            sections=[\n                                Section.Code(\n                                    code=Op.INVALID,\n                                    code_inputs=0,\n                                    code_outputs=NON_RETURNING_SECTION,\n                                    max_stack_height=0,\n                                )\n                            ]\n                        )\n                    ),\n                ]\n            )\n        ),\n    }\n    # Storage in slot_create_address should not have the address,\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_create_failed,\n                slot_code_worked: value_code_worked,\n            }\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_eofcreate_deploy_sizes","title":"<code>test_eofcreate_deploy_sizes(state_test, target_deploy_size)</code>","text":"<p>Verifies a mix of runtime contract sizes mixing success and multiple size failure modes.</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>@pytest.mark.parametrize(\n    \"target_deploy_size\",\n    [\n        pytest.param(0x4000, id=\"large\"),\n        pytest.param(MAX_BYTECODE_SIZE, id=\"max\"),\n        pytest.param(MAX_BYTECODE_SIZE + 1, id=\"overmax\"),\n        pytest.param(MAX_INITCODE_SIZE - factory_size, id=\"initcodemax\"),\n        pytest.param(\n            MAX_INITCODE_SIZE - factory_size + 1,\n            id=\"initcodeovermax\",\n            marks=pytest.mark.skip(\"Oversized container in pre-alloc\"),\n        ),\n        pytest.param(\n            0xFFFF - factory_size,\n            id=\"64k-1\",\n            marks=pytest.mark.skip(\"Oversized container in pre-alloc\"),\n        ),\n    ],\n)\ndef test_eofcreate_deploy_sizes(\n    state_test: StateTestFiller,\n    target_deploy_size: int,\n):\n    \"\"\"\n    Verifies a mix of runtime contract sizes mixing success and multiple size failure modes.\n    \"\"\"\n    env = Environment()\n\n    runtime_container = Container(\n        sections=[\n            Section.Code(\n                code=Op.JUMPDEST * (target_deploy_size - len(smallest_runtime_subcontainer))\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=0,\n            ),\n        ]\n    )\n\n    initcode_subcontainer = Container(\n        name=\"Initcode Subcontainer\",\n        sections=[\n            Section.Code(\n                code=Op.RETURNCONTRACT[0](0, 0),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n            Section.Container(container=runtime_container),\n        ],\n    )\n\n    assert factory_size == (\n        len(initcode_subcontainer) - len(runtime_container)\n    ), \"factory_size is wrong, expected factory_size is %d, calculated is %d\" % (\n        factory_size,\n        len(initcode_subcontainer),\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=initcode_subcontainer),\n                ]\n            )\n        ),\n    }\n    # Storage in 0 should have the address,\n    # Storage 1 is a canary of 1 to make sure it tried to execute, which also covers cases of\n    #   data+code being greater than initcode_size_max, which is allowed.\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: compute_eofcreate_address(\n                    default_address, 0, initcode_subcontainer\n                )\n                if target_deploy_size &lt;= MAX_BYTECODE_SIZE\n                else value_create_failed,\n                slot_code_worked: value_code_worked,\n            }\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_eofcreate_deploy_sizes_tx","title":"<code>test_eofcreate_deploy_sizes_tx(state_test, target_deploy_size)</code>","text":"<p>Verifies a mix of runtime contract sizes mixing success and multiple size failure modes where the initcontainer is included in a transaction</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>@pytest.mark.parametrize(\n    \"target_deploy_size\",\n    [\n        pytest.param(0x4000, id=\"large\"),\n        pytest.param(MAX_BYTECODE_SIZE, id=\"max\"),\n        pytest.param(MAX_BYTECODE_SIZE + 1, id=\"overmax\"),\n        pytest.param(MAX_INITCODE_SIZE - factory_size, id=\"initcodemax\"),\n        pytest.param(MAX_INITCODE_SIZE - factory_size + 1, id=\"initcodeovermax\"),\n        pytest.param(0xFFFF - factory_size, id=\"64k-1\"),\n    ],\n)\n@pytest.mark.skip(\"Not implemented\")\ndef test_eofcreate_deploy_sizes_tx(\n    state_test: StateTestFiller,\n    target_deploy_size: int,\n):\n    \"\"\"\n    Verifies a mix of runtime contract sizes mixing success and multiple size failure modes\n    where the initcontainer is included in a transaction\n    \"\"\"\n    raise NotImplementedError(\"Not implemented\")\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_auxdata_size_failures","title":"<code>test_auxdata_size_failures(state_test, auxdata_size)</code>","text":"<p>Exercises a number of auxdata size violations, and one maxcode success</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>@pytest.mark.parametrize(\n    \"auxdata_size\",\n    [\n        pytest.param(MAX_BYTECODE_SIZE - len(smallest_runtime_subcontainer), id=\"maxcode\"),\n        pytest.param(MAX_BYTECODE_SIZE - len(smallest_runtime_subcontainer) + 1, id=\"overmaxcode\"),\n        pytest.param(0x10000 - 60, id=\"almost64k\"),\n        pytest.param(0x10000 - 1, id=\"64k-1\"),\n        pytest.param(0x10000, id=\"64k\"),\n        pytest.param(0x10000 + 1, id=\"over64k\"),\n    ],\n)\ndef test_auxdata_size_failures(state_test: StateTestFiller, auxdata_size: int):\n    \"\"\"\n    Exercises a number of auxdata size violations, and one maxcode success\n    \"\"\"\n    env = Environment()\n    auxdata_bytes = b\"a\" * auxdata_size\n\n    initcode_subcontainer = Container(\n        name=\"Initcode Subcontainer\",\n        sections=[\n            Section.Code(\n                code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n                + Op.RETURNCONTRACT[0](0, Op.CALLDATASIZE),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=3,\n            ),\n            Section.Container(container=smallest_runtime_subcontainer),\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n                        + Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, Op.CALLDATASIZE))\n                        + Op.SSTORE(slot_code_worked, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=initcode_subcontainer),\n                ]\n            )\n        ),\n    }\n\n    deployed_container_size = len(smallest_runtime_subcontainer) + auxdata_size\n\n    # Storage in 0 will have address in first test, 0 in all other cases indicating failure\n    # Storage 1 in 1 is a canary to see if EOFCREATE opcode halted\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: compute_eofcreate_address(\n                    default_address, 0, initcode_subcontainer\n                )\n                if deployed_container_size &lt;= MAX_BYTECODE_SIZE\n                else 0,\n                slot_code_worked: value_code_worked,\n            }\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction(payload=auxdata_bytes))\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_eofcreate_insufficient_stipend","title":"<code>test_eofcreate_insufficient_stipend(state_test, value)</code>","text":"<p>Exercises an EOFCREATE that fails because the calling account does not have enough ether to pay the stipend</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>@pytest.mark.parametrize(\n    \"value\",\n    [\n        pytest.param(1, id=\"1_wei\"),\n        pytest.param(10**9, id=\"1_gwei\"),\n    ],\n)\ndef test_eofcreate_insufficient_stipend(\n    state_test: StateTestFiller,\n    value: int,\n):\n    \"\"\"\n    Exercises an EOFCREATE that fails because the calling account does not have enough ether to\n    pay the stipend\n    \"\"\"\n    env = Environment()\n    initcode_container = Container(\n        sections=[\n            Section.Code(\n                code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](value, 0, 0, 0))\n                + Op.SSTORE(slot_code_worked, value_code_worked)\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=4,\n            ),\n            Section.Container(container=smallest_initcode_subcontainer),\n        ]\n    )\n    pre = {\n        TestAddress: Account(balance=10**11, nonce=1),\n        default_address: Account(balance=value - 1, code=initcode_container),\n    }\n    # create will fail but not trigger a halt, so canary at storage 1 should be set\n    # also validate target created contract fails\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_create_failed,\n                slot_code_worked: value_code_worked,\n            }\n        ),\n        compute_eofcreate_address(default_address, 0, initcode_container): Account.NONEXISTENT,\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction())\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_insufficient_initcode_gas","title":"<code>test_insufficient_initcode_gas(state_test)</code>","text":"<p>Excercises an EOFCREATE when there is not enough gas for the initcode charge</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>def test_insufficient_initcode_gas(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Excercises an EOFCREATE when there is not enough gas for the initcode charge\n    \"\"\"\n    env = Environment()\n\n    initcode_data = b\"a\" * 0x5000\n    initcode_container = Container(\n        name=\"Large Initcode Subcontainer\",\n        sections=[\n            Section.Code(\n                code=Op.RETURNCONTRACT[0](0, 0),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n            Section.Container(container=smallest_runtime_subcontainer),\n            Section.Data(data=initcode_data),\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_code_should_fail, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=initcode_container),\n                ],\n            ),\n            storage={\n                slot_create_address: value_canary_should_not_change,\n                slot_code_should_fail: value_canary_should_not_change,\n            },\n        ),\n    }\n    # enough gas for everything but EVM opcodes and EIP-150 reserves\n    gas_limit = 21_000 + 32_000 + (len(initcode_data) + 31) // 32 * 6\n    # out_of_gas is triggered, so canary won't set value\n    # also validate target created contract fails\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_canary_should_not_change,\n                slot_code_should_fail: value_canary_should_not_change,\n            },\n        ),\n        compute_eofcreate_address(default_address, 0, initcode_container): Account.NONEXISTENT,\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction(gas_limit=gas_limit))\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_insufficient_gas_memory_expansion","title":"<code>test_insufficient_gas_memory_expansion(state_test)</code>","text":"<p>Excercises an EOFCREATE when the memory for auxdata has not been expanded but is requested</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>def test_insufficient_gas_memory_expansion(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Excercises an EOFCREATE when the memory for auxdata has not been expanded but is requested\n    \"\"\"\n    env = Environment()\n\n    auxdata_size = 0x5000\n    initcode_container = Container(\n        sections=[\n            Section.Code(\n                code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, auxdata_size))\n                + Op.SSTORE(slot_code_should_fail, slot_code_worked)\n                + Op.STOP,\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=4,\n            ),\n            Section.Container(container=smallest_initcode_subcontainer),\n        ],\n    )\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=initcode_container,\n            storage={\n                slot_create_address: value_canary_should_not_change,\n                slot_code_should_fail: value_canary_should_not_change,\n            },\n        ),\n    }\n    # enough gas for everything but EVM opcodes and EIP-150 reserves\n    initcode_container_words = (len(initcode_container) + 31) // 32\n    auxdata_size_words = (auxdata_size + 31) // 32\n    gas_limit = (\n        21_000\n        + 32_000\n        + initcode_container_words * 6\n        + 3 * auxdata_size_words\n        + auxdata_size_words * auxdata_size_words // 512\n    )\n    # out_of_gas is triggered, so canary won't set value\n    # also validate target created contract fails\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_canary_should_not_change,\n                slot_code_should_fail: value_canary_should_not_change,\n            },\n        ),\n        compute_eofcreate_address(default_address, 0, initcode_container): Account.NONEXISTENT,\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction(gas_limit=gas_limit))\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_eofcreate_failures.test_insufficient_returncontract_auxdata_gas","title":"<code>test_insufficient_returncontract_auxdata_gas(state_test)</code>","text":"<p>Excercises an EOFCREATE when there is not enough gas for the initcode charge</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code> <pre><code>def test_insufficient_returncontract_auxdata_gas(\n    state_test: StateTestFiller,\n):\n    \"\"\"\n    Excercises an EOFCREATE when there is not enough gas for the initcode charge\n    \"\"\"\n    env = Environment()\n\n    auxdata_size = 0x5000\n    initcode_container = Container(\n        name=\"Large Initcode Subcontainer\",\n        sections=[\n            Section.Code(\n                code=Op.RETURNCONTRACT[0](0, auxdata_size),\n                code_inputs=0,\n                code_outputs=NON_RETURNING_SECTION,\n                max_stack_height=2,\n            ),\n            Section.Container(container=smallest_runtime_subcontainer),\n        ],\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Container(\n                sections=[\n                    Section.Code(\n                        code=Op.SSTORE(slot_create_address, Op.EOFCREATE[0](0, 0, 0, 0))\n                        + Op.SSTORE(slot_code_should_fail, value_code_worked)\n                        + Op.STOP,\n                        code_inputs=0,\n                        code_outputs=NON_RETURNING_SECTION,\n                        max_stack_height=4,\n                    ),\n                    Section.Container(container=initcode_container),\n                ],\n            ),\n            storage={\n                slot_create_address: value_canary_should_not_change,\n                slot_code_should_fail: value_canary_should_not_change,\n            },\n        ),\n    }\n    # enough gas for everything but EVM opcodes and EIP-150 reserves\n    initcode_container_words = (len(initcode_container) + 31) // 32\n    auxdata_size_words = (auxdata_size + 31) // 32\n    gas_limit = (\n        21_000\n        + 32_000\n        + initcode_container_words * 6\n        + 3 * auxdata_size_words\n        + auxdata_size_words * auxdata_size_words // 512\n    )\n    # out_of_gas is triggered, so canary won't set value\n    # also validate target created contract fails\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_canary_should_not_change,\n                slot_code_should_fail: value_canary_should_not_change,\n            },\n        ),\n        compute_eofcreate_address(default_address, 0, initcode_container): Account.NONEXISTENT,\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction(gas_limit=gas_limit))\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures/index/test_cases/","title":"Test Eofcreate Failures - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py</code>:</p> <pre><code>test_initcode_revert[fork_CancunEIP7692-blockchain_test-empty]\ntest_initcode_revert[fork_CancunEIP7692-blockchain_test-Error(string)]\ntest_initcode_revert[fork_CancunEIP7692-blockchain_test_hive-empty]\ntest_initcode_revert[fork_CancunEIP7692-blockchain_test_hive-Error(string)]\ntest_initcode_revert[fork_CancunEIP7692-state_test-empty]\ntest_initcode_revert[fork_CancunEIP7692-state_test-Error(string)]\ntest_initcode_aborts[fork_CancunEIP7692-blockchain_test]\ntest_initcode_aborts[fork_CancunEIP7692-blockchain_test_hive]\ntest_initcode_aborts[fork_CancunEIP7692-state_test]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test-large]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test-max]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test-overmax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test-initcodemax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test-initcodeovermax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test-64k-1]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test_hive-large]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test_hive-max]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test_hive-overmax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test_hive-initcodemax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test_hive-initcodeovermax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-blockchain_test_hive-64k-1]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-state_test-large]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-state_test-max]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-state_test-overmax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-state_test-initcodemax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-state_test-initcodeovermax]\ntest_eofcreate_deploy_sizes[fork_CancunEIP7692-state_test-64k-1]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test-large]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test-max]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test-overmax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test-initcodemax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test-initcodeovermax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test-64k-1]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test_hive-large]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test_hive-max]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test_hive-overmax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test_hive-initcodemax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test_hive-initcodeovermax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-blockchain_test_hive-64k-1]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-state_test-large]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-state_test-max]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-state_test-overmax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-state_test-initcodemax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-state_test-initcodeovermax]\ntest_eofcreate_deploy_sizes_tx[fork_CancunEIP7692-state_test-64k-1]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test-maxcode]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test-overmaxcode]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test-almost64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test-64k-1]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test-64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test-over64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test_hive-maxcode]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test_hive-overmaxcode]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test_hive-almost64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test_hive-64k-1]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test_hive-64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-blockchain_test_hive-over64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-state_test-maxcode]\ntest_auxdata_size_failures[fork_CancunEIP7692-state_test-overmaxcode]\ntest_auxdata_size_failures[fork_CancunEIP7692-state_test-almost64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-state_test-64k-1]\ntest_auxdata_size_failures[fork_CancunEIP7692-state_test-64k]\ntest_auxdata_size_failures[fork_CancunEIP7692-state_test-over64k]\ntest_eofcreate_insufficient_stipend[fork_CancunEIP7692-blockchain_test-1_wei]\ntest_eofcreate_insufficient_stipend[fork_CancunEIP7692-blockchain_test-1_gwei]\ntest_eofcreate_insufficient_stipend[fork_CancunEIP7692-blockchain_test_hive-1_wei]\ntest_eofcreate_insufficient_stipend[fork_CancunEIP7692-blockchain_test_hive-1_gwei]\ntest_eofcreate_insufficient_stipend[fork_CancunEIP7692-state_test-1_wei]\ntest_eofcreate_insufficient_stipend[fork_CancunEIP7692-state_test-1_gwei]\ntest_insufficient_initcode_gas[fork_CancunEIP7692-blockchain_test]\ntest_insufficient_initcode_gas[fork_CancunEIP7692-blockchain_test_hive]\ntest_insufficient_initcode_gas[fork_CancunEIP7692-state_test]\ntest_insufficient_gas_memory_expansion[fork_CancunEIP7692-blockchain_test]\ntest_insufficient_gas_memory_expansion[fork_CancunEIP7692-blockchain_test_hive]\ntest_insufficient_gas_memory_expansion[fork_CancunEIP7692-state_test]\ntest_insufficient_returncontract_auxdata_gas[fork_CancunEIP7692-blockchain_test]\ntest_insufficient_returncontract_auxdata_gas[fork_CancunEIP7692-blockchain_test_hive]\ntest_insufficient_returncontract_auxdata_gas[fork_CancunEIP7692-state_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip7620_eof_create/test_eofcreate_failures.py\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates/","title":"Test Legacy Eof Creates","text":"<p>Documentation for <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py</code>.</p> <p>Generate fixtures for these test cases for Prague with:</p> <p>Prague only: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py --fork=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre> For all forks up to and including Prague: <pre><code>fill -v tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py --until=Prague --evm-bin=/path/to/evm-tool-dev-version\n</code></pre></p> <p>Test interactions between CREATE, CREATE2, and EOFCREATE</p>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_legacy_eof_creates.test_cross_version_creates_fail","title":"<code>test_cross_version_creates_fail(state_test, legacy_create_opcode, deploy_code)</code>","text":"<p>Verifies that CREATE and CREATE2 cannot create EOF contracts</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py</code> <pre><code>@pytest.mark.parametrize(\n    \"legacy_create_opcode\",\n    [\n        pytest.param(Op.CREATE, id=\"CREATE\"),\n        pytest.param(Op.CREATE2, id=\"CREATE2\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"deploy_code\",\n    [\n        pytest.param(smallest_initcode_subcontainer, id=\"deploy_eof_initcontainer\"),\n        pytest.param(smallest_runtime_subcontainer, id=\"deploy_eof_container\"),\n    ],\n)\ndef test_cross_version_creates_fail(\n    state_test: StateTestFiller,\n    legacy_create_opcode: Opcodes,\n    deploy_code: SupportsBytes,\n):\n    \"\"\"\n    Verifies that CREATE and CREATE2 cannot create EOF contracts\n    \"\"\"\n    env = Environment()\n    salt_param = [0] if legacy_create_opcode == Op.CREATE2 else []\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(\n            code=Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n            + Op.SSTORE(\n                slot_create_address, legacy_create_opcode(0, 0, Op.CALLDATASIZE, *salt_param)\n            )\n            + Op.SSTORE(slot_code_worked, value_code_worked)\n            + Op.STOP\n        ),\n    }\n    # Storage in 0 should be empty as the create/create2 should fail,\n    # and 1 in 1 to show execution continued and did not halt\n    post = {\n        default_address: Account(\n            storage={\n                slot_create_address: value_create_failed,\n                slot_code_worked: value_code_worked,\n            }\n        )\n    }\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=simple_transaction(payload=bytes(deploy_code)),\n    )\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates/#tests.prague.eip7692_eof_v1.eip7620_eof_create.test_legacy_eof_creates.test_legacy_initcode_eof_contract_fails","title":"<code>test_legacy_initcode_eof_contract_fails(state_test, legacy_create_opcode, deploy_code)</code>","text":"<p>Verifies that legacy initcode cannot create EOF</p> Source code in <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py</code> <pre><code>@pytest.mark.parametrize(\n    \"legacy_create_opcode\",\n    [\n        pytest.param(Op.CREATE, id=\"CREATE\"),\n        pytest.param(Op.CREATE2, id=\"CREATE2\"),\n    ],\n)\n@pytest.mark.parametrize(\n    \"deploy_code\",\n    [\n        pytest.param(smallest_initcode_subcontainer, id=\"deploy_eof_initcontainer\"),\n        pytest.param(smallest_runtime_subcontainer, id=\"deploy_eof_container\"),\n    ],\n)\ndef test_legacy_initcode_eof_contract_fails(\n    state_test: StateTestFiller,\n    legacy_create_opcode: Opcodes,\n    deploy_code: SupportsBytes,\n):\n    \"\"\"\n    Verifies that legacy initcode cannot create EOF\n    \"\"\"\n    env = Environment()\n    init_code = LegacyInitcode(deploy_code=deploy_code)\n    salt_param = [0] if legacy_create_opcode == Op.CREATE2 else []\n    factory_code = (\n        Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n        + Op.SSTORE(slot_create_address, legacy_create_opcode(0, 0, Op.CALLDATASIZE, *salt_param))\n        + Op.SSTORE(slot_code_worked, value_code_worked)\n    )\n\n    pre = {\n        TestAddress: Account(balance=10**21, nonce=1),\n        default_address: Account(code=factory_code),\n    }\n    # Storage in 0 should be empty as the final CREATE filed\n    # and 1 in 1 to show execution continued and did not halt\n    post = {\n        default_address: Account(\n            storage={slot_create_address: value_create_failed, slot_code_worked: value_code_worked}\n        )\n    }\n\n    state_test(env=env, pre=pre, post=post, tx=simple_transaction(payload=bytes(init_code)))\n</code></pre>"},{"location":"tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates/index/test_cases/","title":"Test Legacy Eof Creates - Test Cases","text":"<p>Test cases generated from <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py</code>:</p> <pre><code>test_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test-deploy_eof_initcontainer-CREATE]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test-deploy_eof_initcontainer-CREATE2]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test-deploy_eof_container-CREATE]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test-deploy_eof_container-CREATE2]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_initcontainer-CREATE]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_initcontainer-CREATE2]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_container-CREATE]\ntest_cross_version_creates_fail[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_container-CREATE2]\ntest_cross_version_creates_fail[fork_CancunEIP7692-state_test-deploy_eof_initcontainer-CREATE]\ntest_cross_version_creates_fail[fork_CancunEIP7692-state_test-deploy_eof_initcontainer-CREATE2]\ntest_cross_version_creates_fail[fork_CancunEIP7692-state_test-deploy_eof_container-CREATE]\ntest_cross_version_creates_fail[fork_CancunEIP7692-state_test-deploy_eof_container-CREATE2]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test-deploy_eof_initcontainer-CREATE]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test-deploy_eof_initcontainer-CREATE2]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test-deploy_eof_container-CREATE]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test-deploy_eof_container-CREATE2]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_initcontainer-CREATE]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_initcontainer-CREATE2]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_container-CREATE]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-blockchain_test_hive-deploy_eof_container-CREATE2]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-state_test-deploy_eof_initcontainer-CREATE]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-state_test-deploy_eof_initcontainer-CREATE2]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-state_test-deploy_eof_container-CREATE]\ntest_legacy_initcode_eof_contract_fails[fork_CancunEIP7692-state_test-deploy_eof_container-CREATE2]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until CancunEIP7692 tests/prague/eip7692_eof_v1/eip7620_eof_create/test_legacy_eof_creates.py\n</code></pre>"},{"location":"tests/shanghai/","title":"Shanghai","text":"<p>Documentation for <code>tests/shanghai</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai\n</code></pre> <p>Test cases for EVM functionality introduced in Shanghai.</p>"},{"location":"tests/shanghai/eip3651_warm_coinbase/","title":"EIP-3651 Warm Coinbase","text":"<p>Documentation for <code>tests/shanghai/eip3651_warm_coinbase</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip3651_warm_coinbase\n</code></pre> Tests EIP-3651: Warm COINBASE <p>Tests for EIP-3651: Warm COINBASE.</p>"},{"location":"tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase/","title":"Test Warm Coinbase","text":"<p>Documentation for <code>tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py\n</code></pre> Tests EIP-3651: Warm COINBASE <p>Tests for EIP-3651: Warm COINBASE.</p> Tests ported from: <ul> <li>ethereum/tests/pull/1082.</li> </ul>"},{"location":"tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase/#tests.shanghai.eip3651_warm_coinbase.test_warm_coinbase.test_warm_coinbase_call_out_of_gas","title":"<code>test_warm_coinbase_call_out_of_gas(state_test, fork, opcode, contract_under_test_code, call_gas_exact, use_sufficient_gas)</code>","text":"<p>Test that the coinbase is warm by accessing the COINBASE with each of the following opcodes:</p> <ul> <li>CALL</li> <li>CALLCODE</li> <li>DELEGATECALL</li> <li>STATICCALL</li> </ul> Source code in <code>tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py</code> <pre><code>@pytest.mark.valid_from(\"Shanghai\")\n@pytest.mark.parametrize(\n    \"use_sufficient_gas\",\n    [True, False],\n    ids=[\"sufficient_gas\", \"insufficient_gas\"],\n)\n@pytest.mark.parametrize(\n    \"opcode,contract_under_test_code,call_gas_exact\",\n    [\n        (\n            \"call\",\n            Op.POP(Op.CALL(0, Op.COINBASE, 0, 0, 0, 0, 0)),\n            # Extra gas: COINBASE + 4*PUSH1 + 2*DUP1 + POP\n            GAS_REQUIRED_CALL_WARM_ACCOUNT + 22,\n        ),\n        (\n            \"callcode\",\n            Op.POP(Op.CALLCODE(0, Op.COINBASE, 0, 0, 0, 0, 0)),\n            # Extra gas: COINBASE + 4*PUSH1 + 2*DUP1 + POP\n            GAS_REQUIRED_CALL_WARM_ACCOUNT + 22,\n        ),\n        (\n            \"delegatecall\",\n            Op.POP(Op.DELEGATECALL(0, Op.COINBASE, 0, 0, 0, 0)),\n            # Extra: COINBASE + 3*PUSH1 + 2*DUP1 + POP\n            GAS_REQUIRED_CALL_WARM_ACCOUNT + 19,\n        ),\n        (\n            \"staticcall\",\n            Op.POP(Op.STATICCALL(0, Op.COINBASE, 0, 0, 0, 0)),\n            # Extra: COINBASE + 3*PUSH1 + 2*DUP1 + POP\n            GAS_REQUIRED_CALL_WARM_ACCOUNT + 19,\n        ),\n    ],\n    ids=[\"CALL\", \"CALLCODE\", \"DELEGATECALL\", \"STATICCALL\"],\n)\ndef test_warm_coinbase_call_out_of_gas(\n    state_test,\n    fork,\n    opcode,\n    contract_under_test_code,\n    call_gas_exact,\n    use_sufficient_gas,\n):\n    \"\"\"\n    Test that the coinbase is warm by accessing the COINBASE with each\n    of the following opcodes:\n\n    - CALL\n    - CALLCODE\n    - DELEGATECALL\n    - STATICCALL\n    \"\"\"\n    env = Environment(\n        fee_recipient=\"0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba\",\n        difficulty=0x20000,\n        gas_limit=10000000000,\n        number=1,\n        timestamp=1000,\n    )\n    caller_address = \"0xcccccccccccccccccccccccccccccccccccccccc\"\n    contract_under_test_address = 0x100\n\n    if not use_sufficient_gas:\n        call_gas_exact -= 1\n\n    caller_code = Op.SSTORE(\n        0,\n        Op.CALL(call_gas_exact, contract_under_test_address, 0, 0, 0, 0, 0),\n    )\n\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000),\n        caller_address: Account(code=caller_code),\n        Address(contract_under_test_address): Account(code=contract_under_test_code),\n    }\n\n    tx = Transaction(\n        ty=0x0,\n        chain_id=0x01,\n        nonce=0,\n        to=caller_address,\n        gas_limit=100000000,\n        gas_price=10,\n    )\n\n    post = {}\n\n    if use_sufficient_gas and fork &gt;= Shanghai:\n        post[caller_address] = Account(\n            storage={\n                # On shanghai and beyond, calls with only 100 gas to\n                # coinbase will succeed.\n                0: 1,\n            }\n        )\n    else:\n        post[caller_address] = Account(\n            storage={\n                # Before shanghai, calls with only 100 gas to\n                # coinbase will fail.\n                0: 0,\n            }\n        )\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n        tag=\"opcode_\" + opcode,\n    )\n</code></pre>"},{"location":"tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase/#tests.shanghai.eip3651_warm_coinbase.test_warm_coinbase.test_warm_coinbase_gas_usage","title":"<code>test_warm_coinbase_gas_usage(state_test, fork, opcode, code_gas_measure)</code>","text":"<p>Test the gas usage of opcodes affected by assuming a warm coinbase:</p> <ul> <li>EXTCODESIZE</li> <li>EXTCODECOPY</li> <li>EXTCODEHASH</li> <li>BALANCE</li> <li>CALL</li> <li>CALLCODE</li> <li>DELEGATECALL</li> <li>STATICCALL</li> </ul> Source code in <code>tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py</code> <pre><code>@pytest.mark.valid_from(\"Paris\")  # these tests fill for fork &gt;= Berlin\n@pytest.mark.parametrize(\n    \"opcode,code_gas_measure\",\n    gas_measured_opcodes,\n    ids=[i[0] for i in gas_measured_opcodes],\n)\ndef test_warm_coinbase_gas_usage(state_test, fork, opcode, code_gas_measure):\n    \"\"\"\n    Test the gas usage of opcodes affected by assuming a warm coinbase:\n\n    - EXTCODESIZE\n    - EXTCODECOPY\n    - EXTCODEHASH\n    - BALANCE\n    - CALL\n    - CALLCODE\n    - DELEGATECALL\n    - STATICCALL\n    \"\"\"\n    env = Environment(\n        fee_recipient=\"0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba\",\n        difficulty=0x20000,\n        gas_limit=10000000000,\n        number=1,\n        timestamp=1000,\n    )\n\n    measure_address = Address(0x100)\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000),\n        measure_address: Account(code=code_gas_measure, balance=1000000000000000000000),\n    }\n\n    if fork &gt;= Shanghai:\n        expected_gas = GAS_REQUIRED_CALL_WARM_ACCOUNT  # Warm account access cost after EIP-3651\n    else:\n        expected_gas = 2600  # Cold account access cost before EIP-3651\n\n    post = {\n        measure_address: Account(\n            storage={\n                0x00: expected_gas,\n            }\n        )\n    }\n    tx = Transaction(\n        ty=0x0,\n        chain_id=0x01,\n        nonce=0,\n        to=measure_address,\n        gas_limit=100000000,\n        gas_price=10,\n    )\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n        tag=\"opcode_\" + opcode.lower(),\n    )\n</code></pre>"},{"location":"tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase/index/test_cases/","title":"Test Warm Coinbase - Test Cases","text":"<p>Test cases generated from <code>tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py</code>:</p> <pre><code>test_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-blockchain_test_hive-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Shanghai-state_test-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-blockchain_test_hive-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Cancun-state_test-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-blockchain_test_hive-STATICCALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-CALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-CALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-CALLCODE-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-CALLCODE-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-DELEGATECALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-DELEGATECALL-insufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-STATICCALL-sufficient_gas]\ntest_warm_coinbase_call_out_of_gas[fork_Prague-state_test-STATICCALL-insufficient_gas]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-CALL]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Paris-blockchain_test_hive-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Paris-state_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-CALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-blockchain_test_hive-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Shanghai-state_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-CALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-blockchain_test_hive-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Cancun-state_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-CALL]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Prague-blockchain_test_hive-STATICCALL]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-EXTCODESIZE]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-EXTCODECOPY]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-EXTCODEHASH]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-BALANCE]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-CALL]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-CALLCODE]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-DELEGATECALL]\ntest_warm_coinbase_gas_usage[fork_Prague-state_test-STATICCALL]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/","title":"EIP-3855 Push0","text":"<p>Documentation for <code>tests/shanghai/eip3855_push0</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip3855_push0\n</code></pre> Tests EIP-3855: PUSH0 Instruction <p>Tests for EIP-3855: PUSH0 Instruction.</p>"},{"location":"tests/shanghai/eip3855_push0/test_push0/","title":"Test Push0","text":"<p>Documentation for <code>tests/shanghai/eip3855_push0/test_push0.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip3855_push0/test_push0.py\n</code></pre> Tests EIP-3855: PUSH0 Instruction <p>Tests for EIP-3855: PUSH0 Instruction.</p> Tests ported from: <ul> <li>ethereum/tests/pull/1033.</li> </ul>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_key_sstore","title":"<code>test_push0_key_sstore(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Use PUSH0 to set a key for SSTORE.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_key_sstore(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Use PUSH0 to set a key for SSTORE.\n    \"\"\"\n    code = Op.SSTORE(Op.PUSH0, 1)\n\n    pre[addr_1] = Account(code=code)\n    post[addr_1] = Account(storage={0x00: 0x01})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"key_sstore\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_fill_stack","title":"<code>test_push0_fill_stack(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Fill stack with PUSH0, then OR all values and save using SSTORE.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_fill_stack(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Fill stack with PUSH0, then OR all values and save using SSTORE.\n    \"\"\"\n    code = Op.PUSH0 * 1024\n    code += Op.OR * 1023\n    code += Op.SSTORE(Op.SWAP1, 1)\n\n    pre[addr_1] = Account(code=code)\n    post[addr_1] = Account(storage={0x00: 0x01})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"fill_stack\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_stack_overflow","title":"<code>test_push0_stack_overflow(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Stack overflow by using PUSH0 1025 times.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_stack_overflow(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Stack overflow by using PUSH0 1025 times.\n    \"\"\"\n    code = Op.SSTORE(Op.PUSH0, 1)\n    code += Op.PUSH0 * 1025\n\n    pre[addr_1] = Account(code=code)\n    post[addr_1] = Account(storage={0x00: 0x00})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"stack_overflow\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_storage_overwrite","title":"<code>test_push0_storage_overwrite(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Update an already existing storage value.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_storage_overwrite(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Update an already existing storage value.\n    \"\"\"\n    code = Op.SSTORE(Op.PUSH0, 2) + Op.SSTORE(1, Op.PUSH0)\n\n    pre[addr_1] = Account(code=code, storage={0x00: 0x0A, 0x01: 0x0A})\n    post[addr_1] = Account(storage={0x00: 0x02, 0x01: 0x00})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"storage_overwrite\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_during_staticcall","title":"<code>test_push0_during_staticcall(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Test PUSH0 during STATICCALL.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_during_staticcall(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Test PUSH0 during STATICCALL.\n    \"\"\"\n    addr_2 = Address(0x200)\n\n    code_1 = (\n        Op.SSTORE(0, Op.STATICCALL(100000, 0x200, 0, 0, 0, 0))\n        + Op.SSTORE(0, 1)\n        + Op.RETURNDATACOPY(0x1F, 0, 1)\n        + Op.SSTORE(1, Op.MLOAD(0))\n    )\n    code_2 = Op.MSTORE8(Op.PUSH0, 0xFF) + Op.RETURN(Op.PUSH0, 1)\n\n    pre[addr_1] = Account(code=code_1)\n    pre[addr_2] = Account(code=code_2)\n    post[addr_1] = Account(storage={0x00: 0x01, 0x01: 0xFF})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"during_staticcall\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_before_jumpdest","title":"<code>test_push0_before_jumpdest(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Jump to a JUMPDEST next to a PUSH0, must succeed.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_before_jumpdest(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Jump to a JUMPDEST next to a PUSH0, must succeed.\n    \"\"\"\n    code = Op.PUSH1(4) + Op.JUMP + Op.PUSH0 + Op.JUMPDEST + Op.SSTORE(Op.PUSH0, 1) + Op.STOP\n\n    pre[addr_1] = Account(code=code)\n    post[addr_1] = Account(storage={0x00: 0x01})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"before_jumpdest\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/#tests.shanghai.eip3855_push0.test_push0.test_push0_gas_cost","title":"<code>test_push0_gas_cost(state_test, env, pre, post, tx, addr_1)</code>","text":"<p>Test PUSH0 gas cost.</p> Source code in <code>tests/shanghai/eip3855_push0/test_push0.py</code> <pre><code>def test_push0_gas_cost(\n    state_test: StateTestFiller,\n    env: Environment,\n    pre: dict,\n    post: dict,\n    tx: Transaction,\n    addr_1: str,\n):\n    \"\"\"\n    Test PUSH0 gas cost.\n    \"\"\"\n    code = CodeGasMeasure(\n        code=Op.PUSH0,\n        extra_stack_items=1,\n    )\n\n    pre[addr_1] = Account(code=code)\n    post[addr_1] = Account(storage={0x00: 0x02})\n\n    state_test(env=env, pre=pre, post=post, tx=tx, tag=\"gas_cost\")\n</code></pre>"},{"location":"tests/shanghai/eip3855_push0/test_push0/index/test_cases/","title":"Test Push0 - Test Cases","text":"<p>Test cases generated from <code>tests/shanghai/eip3855_push0/test_push0.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/shanghai/eip3855_push0/test_push0.py</code>:</p> <pre><code>test_push0_key_sstore[fork_Shanghai-blockchain_test]\ntest_push0_key_sstore[fork_Shanghai-blockchain_test_hive]\ntest_push0_key_sstore[fork_Shanghai-state_test]\ntest_push0_key_sstore[fork_Cancun-blockchain_test]\ntest_push0_key_sstore[fork_Cancun-blockchain_test_hive]\ntest_push0_key_sstore[fork_Cancun-state_test]\ntest_push0_key_sstore[fork_Prague-blockchain_test]\ntest_push0_key_sstore[fork_Prague-blockchain_test_hive]\ntest_push0_key_sstore[fork_Prague-state_test]\ntest_push0_fill_stack[fork_Shanghai-blockchain_test]\ntest_push0_fill_stack[fork_Shanghai-blockchain_test_hive]\ntest_push0_fill_stack[fork_Shanghai-state_test]\ntest_push0_fill_stack[fork_Cancun-blockchain_test]\ntest_push0_fill_stack[fork_Cancun-blockchain_test_hive]\ntest_push0_fill_stack[fork_Cancun-state_test]\ntest_push0_fill_stack[fork_Prague-blockchain_test]\ntest_push0_fill_stack[fork_Prague-blockchain_test_hive]\ntest_push0_fill_stack[fork_Prague-state_test]\ntest_push0_stack_overflow[fork_Shanghai-blockchain_test]\ntest_push0_stack_overflow[fork_Shanghai-blockchain_test_hive]\ntest_push0_stack_overflow[fork_Shanghai-state_test]\ntest_push0_stack_overflow[fork_Cancun-blockchain_test]\ntest_push0_stack_overflow[fork_Cancun-blockchain_test_hive]\ntest_push0_stack_overflow[fork_Cancun-state_test]\ntest_push0_stack_overflow[fork_Prague-blockchain_test]\ntest_push0_stack_overflow[fork_Prague-blockchain_test_hive]\ntest_push0_stack_overflow[fork_Prague-state_test]\ntest_push0_storage_overwrite[fork_Shanghai-blockchain_test]\ntest_push0_storage_overwrite[fork_Shanghai-blockchain_test_hive]\ntest_push0_storage_overwrite[fork_Shanghai-state_test]\ntest_push0_storage_overwrite[fork_Cancun-blockchain_test]\ntest_push0_storage_overwrite[fork_Cancun-blockchain_test_hive]\ntest_push0_storage_overwrite[fork_Cancun-state_test]\ntest_push0_storage_overwrite[fork_Prague-blockchain_test]\ntest_push0_storage_overwrite[fork_Prague-blockchain_test_hive]\ntest_push0_storage_overwrite[fork_Prague-state_test]\ntest_push0_during_staticcall[fork_Shanghai-blockchain_test]\ntest_push0_during_staticcall[fork_Shanghai-blockchain_test_hive]\ntest_push0_during_staticcall[fork_Shanghai-state_test]\ntest_push0_during_staticcall[fork_Cancun-blockchain_test]\ntest_push0_during_staticcall[fork_Cancun-blockchain_test_hive]\ntest_push0_during_staticcall[fork_Cancun-state_test]\ntest_push0_during_staticcall[fork_Prague-blockchain_test]\ntest_push0_during_staticcall[fork_Prague-blockchain_test_hive]\ntest_push0_during_staticcall[fork_Prague-state_test]\ntest_push0_before_jumpdest[fork_Shanghai-blockchain_test]\ntest_push0_before_jumpdest[fork_Shanghai-blockchain_test_hive]\ntest_push0_before_jumpdest[fork_Shanghai-state_test]\ntest_push0_before_jumpdest[fork_Cancun-blockchain_test]\ntest_push0_before_jumpdest[fork_Cancun-blockchain_test_hive]\ntest_push0_before_jumpdest[fork_Cancun-state_test]\ntest_push0_before_jumpdest[fork_Prague-blockchain_test]\ntest_push0_before_jumpdest[fork_Prague-blockchain_test_hive]\ntest_push0_before_jumpdest[fork_Prague-state_test]\ntest_push0_gas_cost[fork_Shanghai-blockchain_test]\ntest_push0_gas_cost[fork_Shanghai-blockchain_test_hive]\ntest_push0_gas_cost[fork_Shanghai-state_test]\ntest_push0_gas_cost[fork_Cancun-blockchain_test]\ntest_push0_gas_cost[fork_Cancun-blockchain_test_hive]\ntest_push0_gas_cost[fork_Cancun-state_test]\ntest_push0_gas_cost[fork_Prague-blockchain_test]\ntest_push0_gas_cost[fork_Prague-blockchain_test_hive]\ntest_push0_gas_cost[fork_Prague-state_test]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/shanghai/eip3855_push0/test_push0.py\n</code></pre>"},{"location":"tests/shanghai/eip3860_initcode/","title":"EIP-3860 Initcode","text":"<p>Documentation for <code>tests/shanghai/eip3860_initcode</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip3860_initcode\n</code></pre> Test EIP-3860: Limit and meter initcode <p>Tests for  EIP-3860: Limit and meter initcode.</p>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/","title":"Test Initcode","text":"<p>Documentation for <code>tests/shanghai/eip3860_initcode/test_initcode.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip3860_initcode/test_initcode.py\n</code></pre> Test EIP-3860: Limit and meter initcode <p>Tests for  EIP-3860: Limit and meter initcode.</p> Tests ported from: <ul> <li>ethereum/tests/pull/990</li> <li>ethereum/tests/pull/1012</li> </ul>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/#tests.shanghai.eip3860_initcode.test_initcode.test_contract_creating_tx","title":"<code>test_contract_creating_tx(state_test, initcode)</code>","text":"<p>Test cases using a contract creating transaction</p> <p>Test creating a contract using a transaction using an initcode that is on/over the max allowed limit.</p> <p>Generates a BlockchainTest based on the provided <code>initcode</code> and its length.</p> Source code in <code>tests/shanghai/eip3860_initcode/test_initcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"initcode\",\n    [\n        INITCODE_ZEROS_MAX_LIMIT,\n        INITCODE_ONES_MAX_LIMIT,\n        INITCODE_ZEROS_OVER_LIMIT,\n        INITCODE_ONES_OVER_LIMIT,\n    ],\n    ids=get_initcode_name,\n)\ndef test_contract_creating_tx(state_test: StateTestFiller, initcode: Initcode):\n    \"\"\"\n    Test cases using a contract creating transaction\n\n    Test creating a contract using a transaction using an initcode that is\n    on/over the max allowed limit.\n\n    Generates a BlockchainTest based on the provided `initcode` and its\n    length.\n    \"\"\"\n    eip_3860_active = True\n    env = Environment()\n\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000),\n    }\n\n    post: Dict[Any, Any] = {}\n\n    created_contract_address = compute_create_address(\n        address=TestAddress,\n        nonce=0,\n    )\n\n    tx = Transaction(\n        nonce=0,\n        to=None,\n        data=initcode,\n        gas_limit=10000000,\n        gas_price=10,\n    )\n\n    if len(initcode) &gt; MAX_INITCODE_SIZE and eip_3860_active:\n        # Initcode is above the max size, tx inclusion in the block makes\n        # it invalid.\n        post[created_contract_address] = Account.NONEXISTENT\n        tx.error = TransactionException.INITCODE_SIZE_EXCEEDED\n    else:\n        # Initcode is at or below the max size, tx inclusion in the block\n        # is ok and the contract is successfully created.\n        post[created_contract_address] = Account(code=Op.STOP)\n\n    state_test(\n        pre=pre,\n        post=post,\n        tx=tx,\n        env=env,\n        tag=f\"{initcode.name}\",\n    )\n</code></pre>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/#tests.shanghai.eip3860_initcode.test_initcode.TestContractCreationGasUsage","title":"<code>TestContractCreationGasUsage</code>","text":"<p>Test EIP-3860 Limit Initcode Gas Usage for a contract creating transaction, using different initcode lengths.</p> <p>Generates 4 test cases that verify the gas cost behavior of a contract creating transaction:</p> <ol> <li>Test with exact intrinsic gas minus one, contract create fails     and tx is invalid.</li> <li>Test with exact intrinsic gas, contract create fails,     but tx is valid.</li> <li>Test with exact execution gas minus one, contract create fails,     but tx is valid.</li> <li>Test with exact execution gas, contract create succeeds.</li> </ol> <p>Initcode must be within valid EIP-3860 length.</p> Source code in <code>tests/shanghai/eip3860_initcode/test_initcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"initcode\",\n    [\n        INITCODE_ZEROS_MAX_LIMIT,\n        INITCODE_ONES_MAX_LIMIT,\n        EMPTY_INITCODE,\n        SINGLE_BYTE_INITCODE,\n        INITCODE_ZEROS_32_BYTES,\n        INITCODE_ZEROS_33_BYTES,\n        INITCODE_ZEROS_49120_BYTES,\n        INITCODE_ZEROS_49121_BYTES,\n    ],\n    ids=get_initcode_name,\n)\n@pytest.mark.parametrize(\n    \"gas_test_case\",\n    [\n        \"too_little_intrinsic_gas\",\n        \"exact_intrinsic_gas\",\n        \"too_little_execution_gas\",\n        \"exact_execution_gas\",\n    ],\n    ids=lambda x: x,\n)\nclass TestContractCreationGasUsage:\n    \"\"\"\n    Test EIP-3860 Limit Initcode Gas Usage for a contract\n    creating transaction, using different initcode lengths.\n\n    Generates 4 test cases that verify the gas cost behavior of a\n    contract creating transaction:\n\n    1. Test with exact intrinsic gas minus one, contract create fails\n        and tx is invalid.\n    2. Test with exact intrinsic gas, contract create fails,\n        but tx is valid.\n    3. Test with exact execution gas minus one, contract create fails,\n        but tx is valid.\n    4. Test with exact execution gas, contract create succeeds.\n\n    Initcode must be within valid EIP-3860 length.\n    \"\"\"\n\n    @pytest.fixture\n    def eip_3860_active(self):  # noqa: D102\n        return True\n\n    @pytest.fixture\n    def exact_intrinsic_gas(self, initcode, eip_3860_active):\n        \"\"\"\n        Calculates the intrinsic tx gas cost.\n        \"\"\"\n        return calculate_create_tx_intrinsic_cost(initcode, eip_3860_active)\n\n    @pytest.fixture\n    def exact_execution_gas(self, initcode, eip_3860_active):\n        \"\"\"\n        Calculates the total execution gas cost.\n        \"\"\"\n        return calculate_create_tx_execution_cost(\n            initcode,\n            eip_3860_active,\n        )\n\n    @pytest.fixture\n    def created_contract_address(self):\n        \"\"\"\n        Calculates the address of the contract deployed via CREATE.\n        \"\"\"\n        return compute_create_address(\n            address=TestAddress,\n            nonce=0,\n        )\n\n    @pytest.fixture\n    def env(self) -&gt; Environment:  # noqa: D102\n        return Environment()\n\n    @pytest.fixture\n    def pre(self) -&gt; Dict[Any, Any]:  # noqa: D102\n        return {\n            TestAddress: Account(balance=1000000000000000000000),\n        }\n\n    @pytest.fixture\n    def tx_error(self, gas_test_case) -&gt; TransactionException | None:\n        \"\"\"\n        Test that the transaction is invalid if too little intrinsic gas is\n        specified, otherwise the tx succeeds.\n        \"\"\"\n        if gas_test_case == \"too_little_intrinsic_gas\":\n            return TransactionException.INTRINSIC_GAS_TOO_LOW\n        return None\n\n    @pytest.fixture\n    def tx(\n        self,\n        gas_test_case,\n        initcode,\n        tx_error,\n        exact_intrinsic_gas,\n        exact_execution_gas,\n    ) -&gt; Transaction:\n        \"\"\"\n        Implement the gas_test_case by setting the gas_limit of the tx\n        appropriately and test whether the tx succeeds or fails with\n        appropriate error.\n        \"\"\"\n        if gas_test_case == \"too_little_intrinsic_gas\":\n            gas_limit = exact_intrinsic_gas - 1\n        elif gas_test_case == \"exact_intrinsic_gas\":\n            gas_limit = exact_intrinsic_gas\n        elif gas_test_case == \"too_little_execution_gas\":\n            gas_limit = exact_execution_gas - 1\n        elif gas_test_case == \"exact_execution_gas\":\n            gas_limit = exact_execution_gas\n        else:\n            pytest.fail(\"Invalid gas test case provided.\")\n\n        return Transaction(\n            nonce=0,\n            to=None,\n            data=initcode,\n            gas_limit=gas_limit,\n            gas_price=10,\n            error=tx_error,\n        )\n\n    @pytest.fixture\n    def post(\n        self,\n        gas_test_case,\n        initcode,\n        created_contract_address,\n        exact_intrinsic_gas,\n        exact_execution_gas,\n    ) -&gt; Dict[Any, Any]:\n        \"\"\"\n        Test that contract creation fails unless enough execution gas is\n        provided.\n        \"\"\"\n        if gas_test_case == \"exact_intrinsic_gas\" and exact_intrinsic_gas == exact_execution_gas:\n            # Special scenario where the execution of the initcode and\n            # gas cost to deploy are zero\n            return {created_contract_address: Account(code=initcode.deploy_code)}\n        elif gas_test_case == \"exact_execution_gas\":\n            return {created_contract_address: Account(code=initcode.deploy_code)}\n        return {created_contract_address: Account.NONEXISTENT}\n\n    def test_gas_usage(\n        self,\n        state_test: StateTestFiller,\n        gas_test_case: str,\n        initcode: Initcode,\n        exact_intrinsic_gas,\n        exact_execution_gas,\n        env,\n        pre,\n        tx,\n        post,\n    ):\n        \"\"\"\n        Test transaction and contract creation behavior for different gas\n        limits.\n        \"\"\"\n        if (gas_test_case == \"too_little_execution_gas\") and (\n            exact_execution_gas == exact_intrinsic_gas\n        ):\n            pytest.skip(\n                \"Special case, the execution of the initcode and gas \"\n                \"cost to deploy are zero: Then this test case is \"\n                \"equivalent to that of 'test_exact_intrinsic_gas'.\"\n            )\n\n        state_test(\n            pre=pre,\n            post=post,\n            tx=tx,\n            env=env,\n            tag=f\"{initcode.name}_{gas_test_case}\",\n        )\n</code></pre>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/#tests.shanghai.eip3860_initcode.test_initcode.TestContractCreationGasUsage.test_gas_usage","title":"<code>test_gas_usage(state_test, gas_test_case, initcode, exact_intrinsic_gas, exact_execution_gas, env, pre, tx, post)</code>","text":"<p>Test transaction and contract creation behavior for different gas limits.</p> Source code in <code>tests/shanghai/eip3860_initcode/test_initcode.py</code> <pre><code>def test_gas_usage(\n    self,\n    state_test: StateTestFiller,\n    gas_test_case: str,\n    initcode: Initcode,\n    exact_intrinsic_gas,\n    exact_execution_gas,\n    env,\n    pre,\n    tx,\n    post,\n):\n    \"\"\"\n    Test transaction and contract creation behavior for different gas\n    limits.\n    \"\"\"\n    if (gas_test_case == \"too_little_execution_gas\") and (\n        exact_execution_gas == exact_intrinsic_gas\n    ):\n        pytest.skip(\n            \"Special case, the execution of the initcode and gas \"\n            \"cost to deploy are zero: Then this test case is \"\n            \"equivalent to that of 'test_exact_intrinsic_gas'.\"\n        )\n\n    state_test(\n        pre=pre,\n        post=post,\n        tx=tx,\n        env=env,\n        tag=f\"{initcode.name}_{gas_test_case}\",\n    )\n</code></pre>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/#tests.shanghai.eip3860_initcode.test_initcode.TestCreateInitcode","title":"<code>TestCreateInitcode</code>","text":"<p>Test contract creation via the CREATE/CREATE2 opcodes that have an initcode that is on/over the max allowed limit.</p> Source code in <code>tests/shanghai/eip3860_initcode/test_initcode.py</code> <pre><code>@pytest.mark.parametrize(\n    \"initcode\",\n    [\n        INITCODE_ZEROS_MAX_LIMIT,\n        INITCODE_ONES_MAX_LIMIT,\n        INITCODE_ZEROS_OVER_LIMIT,\n        INITCODE_ONES_OVER_LIMIT,\n        EMPTY_INITCODE,\n        SINGLE_BYTE_INITCODE,\n        INITCODE_ZEROS_32_BYTES,\n        INITCODE_ZEROS_33_BYTES,\n        INITCODE_ZEROS_49120_BYTES,\n        INITCODE_ZEROS_49121_BYTES,\n    ],\n    ids=get_initcode_name,\n)\n@pytest.mark.parametrize(\"opcode\", [Op.CREATE, Op.CREATE2], ids=get_create_id)\nclass TestCreateInitcode:\n    \"\"\"\n    Test contract creation via the CREATE/CREATE2 opcodes that have an initcode\n    that is on/over the max allowed limit.\n    \"\"\"\n\n    @pytest.fixture\n    def create_code(self, opcode: Op, initcode: Initcode):  # noqa: D102\n        if opcode == Op.CREATE:\n            create_call = Op.CREATE(0, 0, Op.CALLDATASIZE)\n        elif opcode == Op.CREATE2:\n            create_call = Op.CREATE2(0, 0, Op.CALLDATASIZE, 0xDEADBEEF)\n        else:\n            raise Exception(\"Invalid opcode specified for test.\")\n        return (\n            Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n            + Op.GAS\n            + create_call\n            + Op.GAS\n            # stack: [Gas 2, Call Result, Gas 1]\n            + Op.SWAP1\n            # stack: [Call Result, Gas 2, Gas 1]\n            + Op.SSTORE(0, unchecked=True)\n            # stack: [Gas 2, Gas 1]\n            + Op.SWAP1\n            # stack: [Gas 1, Gas 2]\n            + Op.SUB\n            # stack: [Gas 1 - Gas 2]\n            + Op.SSTORE(1, unchecked=True)\n        )\n\n    @pytest.fixture\n    def created_contract_address(self, initcode: Initcode, opcode: Op):  # noqa: D102\n        if opcode == Op.CREATE:\n            return compute_create_address(\n                address=0x100,\n                nonce=1,\n            )\n        if opcode == Op.CREATE2:\n            return compute_create2_address(\n                address=0x100,\n                salt=0xDEADBEEF,\n                initcode=initcode,\n            )\n        raise Exception(\"invalid opcode for generator\")\n\n    def test_create_opcode_initcode(\n        self,\n        state_test: StateTestFiller,\n        opcode: Op,\n        initcode: Initcode,\n        create_code: Yul,\n        created_contract_address: str,\n    ):\n        \"\"\"\n        Test contract creation via the CREATE/CREATE2 opcodes that have an\n        initcode that is on/over the max allowed limit.\n        \"\"\"\n        eip_3860_active = True\n        env = Environment()\n\n        call_code = Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n        call_code += Op.SSTORE(\n            Op.CALL(5000000, 0x100, 0, 0, Op.CALLDATASIZE, 0, 0),\n            1,\n        )\n\n        pre = {\n            TestAddress: Account(balance=1000000000000000000000),\n            Address(0x100): Account(\n                code=create_code,\n                nonce=1,\n            ),\n            Address(0x200): Account(\n                code=call_code,\n                nonce=1,\n            ),\n        }\n\n        post: Dict[Any, Any] = {}\n\n        tx = Transaction(\n            nonce=0,\n            to=Address(0x200),\n            data=initcode,\n            gas_limit=10000000,\n            gas_price=10,\n        )\n\n        # Calculate the expected gas of the contract creation operation\n        expected_gas_usage = (\n            CREATE_CONTRACT_BASE_GAS\n            + GAS_OPCODE_GAS\n            + (2 * PUSH_DUP_OPCODE_GAS)\n            + CALLDATASIZE_OPCODE_GAS\n        )\n        if opcode == Op.CREATE2:\n            # Extra PUSH operation\n            expected_gas_usage += PUSH_DUP_OPCODE_GAS\n\n        if len(initcode) &gt; MAX_INITCODE_SIZE and eip_3860_active:\n            # Call returns 0 as out of gas s[0]==1\n            post[Address(0x200)] = Account(\n                nonce=1,\n                storage={\n                    0: 1,\n                    1: 0,\n                },\n            )\n\n            post[created_contract_address] = Account.NONEXISTENT\n            post[Address(0x100)] = Account(\n                nonce=1,\n                storage={\n                    0: 0,\n                    1: 0,\n                },\n            )\n\n        else:\n            # The initcode is only executed if the length check succeeds\n            expected_gas_usage += initcode.execution_gas\n            # The code is only deployed if the length check succeeds\n            expected_gas_usage += initcode.deployment_gas\n\n            if opcode == Op.CREATE2:\n                # CREATE2 hashing cost should only be deducted if the initcode\n                # does not exceed the max length\n                expected_gas_usage += calculate_create2_word_cost(len(initcode))\n\n            if eip_3860_active:\n                # Initcode word cost is only deducted if the length check\n                # succeeds\n                expected_gas_usage += calculate_initcode_word_cost(len(initcode))\n\n            # Call returns 1 as valid initcode length s[0]==1 &amp;&amp; s[1]==1\n            post[Address(0x200)] = Account(\n                nonce=1,\n                storage={\n                    0: 0,\n                    1: 1,\n                },\n            )\n\n            post[created_contract_address] = Account(code=initcode.deploy_code)\n            post[Address(0x100)] = Account(\n                nonce=2,\n                storage={\n                    0: created_contract_address,\n                    1: expected_gas_usage,\n                },\n            )\n\n        state_test(\n            env=env,\n            pre=pre,\n            post=post,\n            tx=tx,\n            tag=f\"{initcode.name}_{opcode}\",\n        )\n</code></pre>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/#tests.shanghai.eip3860_initcode.test_initcode.TestCreateInitcode.test_create_opcode_initcode","title":"<code>test_create_opcode_initcode(state_test, opcode, initcode, create_code, created_contract_address)</code>","text":"<p>Test contract creation via the CREATE/CREATE2 opcodes that have an initcode that is on/over the max allowed limit.</p> Source code in <code>tests/shanghai/eip3860_initcode/test_initcode.py</code> <pre><code>def test_create_opcode_initcode(\n    self,\n    state_test: StateTestFiller,\n    opcode: Op,\n    initcode: Initcode,\n    create_code: Yul,\n    created_contract_address: str,\n):\n    \"\"\"\n    Test contract creation via the CREATE/CREATE2 opcodes that have an\n    initcode that is on/over the max allowed limit.\n    \"\"\"\n    eip_3860_active = True\n    env = Environment()\n\n    call_code = Op.CALLDATACOPY(0, 0, Op.CALLDATASIZE)\n    call_code += Op.SSTORE(\n        Op.CALL(5000000, 0x100, 0, 0, Op.CALLDATASIZE, 0, 0),\n        1,\n    )\n\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000),\n        Address(0x100): Account(\n            code=create_code,\n            nonce=1,\n        ),\n        Address(0x200): Account(\n            code=call_code,\n            nonce=1,\n        ),\n    }\n\n    post: Dict[Any, Any] = {}\n\n    tx = Transaction(\n        nonce=0,\n        to=Address(0x200),\n        data=initcode,\n        gas_limit=10000000,\n        gas_price=10,\n    )\n\n    # Calculate the expected gas of the contract creation operation\n    expected_gas_usage = (\n        CREATE_CONTRACT_BASE_GAS\n        + GAS_OPCODE_GAS\n        + (2 * PUSH_DUP_OPCODE_GAS)\n        + CALLDATASIZE_OPCODE_GAS\n    )\n    if opcode == Op.CREATE2:\n        # Extra PUSH operation\n        expected_gas_usage += PUSH_DUP_OPCODE_GAS\n\n    if len(initcode) &gt; MAX_INITCODE_SIZE and eip_3860_active:\n        # Call returns 0 as out of gas s[0]==1\n        post[Address(0x200)] = Account(\n            nonce=1,\n            storage={\n                0: 1,\n                1: 0,\n            },\n        )\n\n        post[created_contract_address] = Account.NONEXISTENT\n        post[Address(0x100)] = Account(\n            nonce=1,\n            storage={\n                0: 0,\n                1: 0,\n            },\n        )\n\n    else:\n        # The initcode is only executed if the length check succeeds\n        expected_gas_usage += initcode.execution_gas\n        # The code is only deployed if the length check succeeds\n        expected_gas_usage += initcode.deployment_gas\n\n        if opcode == Op.CREATE2:\n            # CREATE2 hashing cost should only be deducted if the initcode\n            # does not exceed the max length\n            expected_gas_usage += calculate_create2_word_cost(len(initcode))\n\n        if eip_3860_active:\n            # Initcode word cost is only deducted if the length check\n            # succeeds\n            expected_gas_usage += calculate_initcode_word_cost(len(initcode))\n\n        # Call returns 1 as valid initcode length s[0]==1 &amp;&amp; s[1]==1\n        post[Address(0x200)] = Account(\n            nonce=1,\n            storage={\n                0: 0,\n                1: 1,\n            },\n        )\n\n        post[created_contract_address] = Account(code=initcode.deploy_code)\n        post[Address(0x100)] = Account(\n            nonce=2,\n            storage={\n                0: created_contract_address,\n                1: expected_gas_usage,\n            },\n        )\n\n    state_test(\n        env=env,\n        pre=pre,\n        post=post,\n        tx=tx,\n        tag=f\"{initcode.name}_{opcode}\",\n    )\n</code></pre>"},{"location":"tests/shanghai/eip3860_initcode/test_initcode/index/test_cases/","title":"Test Initcode - Test Cases","text":"<p>Test cases generated from <code>tests/shanghai/eip3860_initcode/test_initcode.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/shanghai/eip3860_initcode/test_initcode.py</code>:</p> <pre><code>test_contract_creating_tx[fork_Shanghai-blockchain_test-max_size_zeros]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test-max_size_ones]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test-over_limit_zeros]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test-over_limit_ones]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test_hive-max_size_zeros]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test_hive-max_size_ones]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test_hive-over_limit_zeros]\ntest_contract_creating_tx[fork_Shanghai-blockchain_test_hive-over_limit_ones]\ntest_contract_creating_tx[fork_Shanghai-state_test-max_size_zeros]\ntest_contract_creating_tx[fork_Shanghai-state_test-max_size_ones]\ntest_contract_creating_tx[fork_Shanghai-state_test-over_limit_zeros]\ntest_contract_creating_tx[fork_Shanghai-state_test-over_limit_ones]\ntest_contract_creating_tx[fork_Cancun-blockchain_test-max_size_zeros]\ntest_contract_creating_tx[fork_Cancun-blockchain_test-max_size_ones]\ntest_contract_creating_tx[fork_Cancun-blockchain_test-over_limit_zeros]\ntest_contract_creating_tx[fork_Cancun-blockchain_test-over_limit_ones]\ntest_contract_creating_tx[fork_Cancun-blockchain_test_hive-max_size_zeros]\ntest_contract_creating_tx[fork_Cancun-blockchain_test_hive-max_size_ones]\ntest_contract_creating_tx[fork_Cancun-blockchain_test_hive-over_limit_zeros]\ntest_contract_creating_tx[fork_Cancun-blockchain_test_hive-over_limit_ones]\ntest_contract_creating_tx[fork_Cancun-state_test-max_size_zeros]\ntest_contract_creating_tx[fork_Cancun-state_test-max_size_ones]\ntest_contract_creating_tx[fork_Cancun-state_test-over_limit_zeros]\ntest_contract_creating_tx[fork_Cancun-state_test-over_limit_ones]\ntest_contract_creating_tx[fork_Prague-blockchain_test-max_size_zeros]\ntest_contract_creating_tx[fork_Prague-blockchain_test-max_size_ones]\ntest_contract_creating_tx[fork_Prague-blockchain_test-over_limit_zeros]\ntest_contract_creating_tx[fork_Prague-blockchain_test-over_limit_ones]\ntest_contract_creating_tx[fork_Prague-blockchain_test_hive-max_size_zeros]\ntest_contract_creating_tx[fork_Prague-blockchain_test_hive-max_size_ones]\ntest_contract_creating_tx[fork_Prague-blockchain_test_hive-over_limit_zeros]\ntest_contract_creating_tx[fork_Prague-blockchain_test_hive-over_limit_ones]\ntest_contract_creating_tx[fork_Prague-state_test-max_size_zeros]\ntest_contract_creating_tx[fork_Prague-state_test-max_size_ones]\ntest_contract_creating_tx[fork_Prague-state_test-over_limit_zeros]\ntest_contract_creating_tx[fork_Prague-state_test-over_limit_ones]\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestContractCreationGasUsage\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\nTestCreateInitcode\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/shanghai/eip3860_initcode/test_initcode.py\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/","title":"EIP-4895 Withdrawals","text":"<p>Documentation for <code>tests/shanghai/eip4895_withdrawals</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip4895_withdrawals\n</code></pre> Tests EIP-4895: Beacon chain withdrawals <p>Test cases for EIP-4895: Beacon chain push withdrawals as operations.</p>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/","title":"Test Withdrawals","text":"<p>Documentation for <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code>.</p> <p>Generate fixtures for these test cases  with:</p> <pre><code>fill -v tests/shanghai/eip4895_withdrawals/test_withdrawals.py\n</code></pre> Tests EIP-4895: Beacon chain withdrawals <p>Test cases for EIP-4895: Beacon chain push withdrawals as operations.</p>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.TestUseValueInTx","title":"<code>TestUseValueInTx</code>","text":"<p>Test that the value from a withdrawal can be used in a transaction:</p> <ol> <li> <p><code>tx_in_withdrawals_block</code>: Test that the withdrawal value can not be used by a transaction     in the same block as the withdrawal.</p> </li> <li> <p><code>tx_after_withdrawals_block</code>: Test that the withdrawal value can be used by a transaction     in the subsequent block.</p> </li> </ol> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\n    \"test_case\",\n    [\"tx_in_withdrawals_block\", \"tx_after_withdrawals_block\"],\n    ids=lambda x: x,\n)\nclass TestUseValueInTx:\n    \"\"\"\n    Test that the value from a withdrawal can be used in a transaction:\n\n    1. `tx_in_withdrawals_block`: Test that the withdrawal value can not be used by a transaction\n        in the same block as the withdrawal.\n\n    2. `tx_after_withdrawals_block`: Test that the withdrawal value can be used by a transaction\n        in the subsequent block.\n    \"\"\"\n\n    @pytest.fixture\n    def tx(self):  # noqa: D102\n        # Transaction sent from the `TestAddress`, which has 0 balance at start\n        return Transaction(\n            nonce=0,\n            gas_price=ONE_GWEI,\n            gas_limit=21000,\n            to=Address(0x100),\n            data=\"0x\",\n        )\n\n    @pytest.fixture\n    def withdrawal(self, tx: Transaction):  # noqa: D102\n        return Withdrawal(\n            index=0,\n            validator_index=0,\n            address=TestAddress,\n            amount=tx.gas_limit + 1,\n        )\n\n    @pytest.fixture\n    def blocks(self, tx: Transaction, withdrawal: Withdrawal, test_case):  # noqa: D102\n        if test_case == \"tx_in_withdrawals_block\":\n            return [\n                Block(\n                    txs=[tx.with_error(TransactionException.INSUFFICIENT_ACCOUNT_FUNDS)],\n                    withdrawals=[\n                        withdrawal,\n                    ],\n                    exception=TransactionException.INSUFFICIENT_ACCOUNT_FUNDS,\n                )\n            ]\n        if test_case == \"tx_after_withdrawals_block\":\n            return [\n                Block(\n                    txs=[],\n                    withdrawals=[\n                        withdrawal,\n                    ],\n                ),\n                Block(\n                    txs=[tx],\n                    withdrawals=[],\n                ),\n            ]\n        raise Exception(\"Invalid test case.\")\n\n    @pytest.fixture\n    def post(self, test_case: str) -&gt; Dict:  # noqa: D102\n        if test_case == \"tx_in_withdrawals_block\":\n            return {}\n        if test_case == \"tx_after_withdrawals_block\":\n            return {TestAddress: Account(balance=ONE_GWEI + 1)}\n        raise Exception(\"Invalid test case.\")\n\n    def test_use_value_in_tx(\n        self,\n        blockchain_test: BlockchainTestFiller,\n        post: dict,\n        blocks: List[Block],\n    ):\n        \"\"\"\n        Test sending withdrawal value in a transaction.\n        \"\"\"\n        pre = {TestAddress: Account(balance=1)}\n        blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.TestUseValueInTx.test_use_value_in_tx","title":"<code>test_use_value_in_tx(blockchain_test, post, blocks)</code>","text":"<p>Test sending withdrawal value in a transaction.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_use_value_in_tx(\n    self,\n    blockchain_test: BlockchainTestFiller,\n    post: dict,\n    blocks: List[Block],\n):\n    \"\"\"\n    Test sending withdrawal value in a transaction.\n    \"\"\"\n    pre = {TestAddress: Account(balance=1)}\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_use_value_in_contract","title":"<code>test_use_value_in_contract(blockchain_test)</code>","text":"<p>Test sending value from contract that has not received a withdrawal</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_use_value_in_contract(blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Test sending value from contract that has not received a withdrawal\n    \"\"\"\n    SEND_ONE_GWEI = Op.SSTORE(\n        Op.NUMBER,\n        Op.CALL(Op.GAS, 0x200, 1000000000, 0, 0, 0, 0),\n    )\n\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n        Address(0x100): Account(balance=0, code=SEND_ONE_GWEI),\n        Address(0x200): Account(balance=1),\n    }\n    tx = Transaction(\n        # Transaction sent from the `TestAddress`, which has 0 balance at start\n        nonce=0,\n        value=0,\n        gas_price=10,\n        gas_limit=100000,\n        to=Address(0x100),\n        data=\"0x\",\n    )\n    withdrawal = Withdrawal(\n        index=0,\n        validator_index=0,\n        address=Address(0x100),\n        amount=1,\n    )\n\n    blocks = [\n        Block(\n            txs=[tx.with_nonce(0)],\n            withdrawals=[withdrawal],\n        ),\n        Block(\n            txs=[tx.with_nonce(1)],  # Same tx again, just increase nonce\n        ),\n    ]\n    post = {\n        Address(0x100): Account(\n            storage={\n                0x1: 0x0,  # Call fails on the first attempt\n                0x2: 0x1,  # Succeeds on the second attempt\n            }\n        ),\n        Address(0x200): Account(\n            balance=ONE_GWEI + 1,\n        ),\n    }\n\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_balance_within_block","title":"<code>test_balance_within_block(blockchain_test)</code>","text":"<p>Test Withdrawal balance increase within the same block, inside contract call.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_balance_within_block(blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Test Withdrawal balance increase within the same block,\n    inside contract call.\n    \"\"\"\n    SAVE_BALANCE_ON_BLOCK_NUMBER = Op.SSTORE(\n        Op.NUMBER,\n        Op.BALANCE(Op.CALLDATALOAD(0)),\n    )\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n        Address(0x100): Account(\n            code=SAVE_BALANCE_ON_BLOCK_NUMBER,\n        ),\n        Address(0x200): Account(\n            balance=ONE_GWEI,\n        ),\n    }\n    blocks = [\n        Block(\n            txs=[\n                Transaction(\n                    nonce=0,\n                    gas_limit=100000,\n                    to=Address(0x100),\n                    data=Hash(0x200),\n                )\n            ],\n            withdrawals=[\n                Withdrawal(\n                    index=0,\n                    validator_index=0,\n                    address=Address(0x200),\n                    amount=1,\n                )\n            ],\n        ),\n        Block(\n            txs=[\n                Transaction(\n                    nonce=1,\n                    gas_limit=100000,\n                    to=Address(0x100),\n                    data=Hash(0x200),\n                )\n            ]\n        ),\n    ]\n\n    post = {\n        Address(0x100): Account(\n            storage={\n                1: ONE_GWEI,\n                2: 2 * ONE_GWEI,\n            }\n        )\n    }\n\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.TestMultipleWithdrawalsSameAddress","title":"<code>TestMultipleWithdrawalsSameAddress</code>","text":"<p>Test that multiple withdrawals can be sent to the same address in:</p> <ol> <li> <p>A single block.</p> </li> <li> <p>Multiple blocks.</p> </li> </ol> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\"test_case\", [\"single_block\", \"multiple_blocks\"])\nclass TestMultipleWithdrawalsSameAddress:\n    \"\"\"\n    Test that multiple withdrawals can be sent to the same address in:\n\n    1. A single block.\n\n    2. Multiple blocks.\n    \"\"\"\n\n    ADDRESSES = [\n        Address(0x0),  # Zero address\n        Address(0x1),  # Pre-compiles\n        Address(0x2),\n        Address(0x3),\n        Address(0x4),\n        Address(0x5),\n        Address(0x6),\n        Address(0x7),\n        Address(0x8),\n        Address(0x9),\n        Address(2**160 - 1),\n    ]\n\n    @pytest.fixture\n    def blocks(self, test_case: str):  # noqa: D102\n        if test_case == \"single_block\":\n            # Many repeating withdrawals of the same accounts in the same\n            # block.\n            return [\n                Block(\n                    withdrawals=[\n                        Withdrawal(\n                            index=i,\n                            validator_index=i,\n                            address=self.ADDRESSES[i % len(self.ADDRESSES)],\n                            amount=1,\n                        )\n                        for i in range(len(self.ADDRESSES) * 16)\n                    ],\n                ),\n            ]\n        if test_case == \"multiple_blocks\":\n            # Similar test but now use multiple blocks each with multiple\n            # withdrawals to the same withdrawal address.\n            return [\n                Block(\n                    withdrawals=[\n                        Withdrawal(\n                            index=i * 16 + j,\n                            validator_index=i,\n                            address=self.ADDRESSES[i],\n                            amount=1,\n                        )\n                        for j in range(16)\n                    ],\n                )\n                for i in range(len(self.ADDRESSES))\n            ]\n        raise Exception(\"Invalid test case.\")\n\n    def test_multiple_withdrawals_same_address(\n        self,\n        blockchain_test: BlockchainTestFiller,\n        test_case: str,\n        blocks: List[Block],\n    ):\n        \"\"\"\n        Test Withdrawals can be done to the same address multiple times in\n        the same block.\n        \"\"\"\n        pre = {\n            TestAddress: Account(balance=1000000000000000000000, nonce=0),\n        }\n        for addr in self.ADDRESSES:\n            pre[addr] = Account(\n                # set a storage value unconditionally on call\n                code=Op.SSTORE(Op.NUMBER, 1),\n            )\n\n        # Expected post is the same for both test cases.\n        post = {}\n        for addr in self.ADDRESSES:\n            post[addr] = Account(\n                balance=16 * ONE_GWEI,\n                storage={},\n            )\n\n        blockchain_test(pre=pre, post=post, blocks=blocks, tag=test_case)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.TestMultipleWithdrawalsSameAddress.test_multiple_withdrawals_same_address","title":"<code>test_multiple_withdrawals_same_address(blockchain_test, test_case, blocks)</code>","text":"<p>Test Withdrawals can be done to the same address multiple times in the same block.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_multiple_withdrawals_same_address(\n    self,\n    blockchain_test: BlockchainTestFiller,\n    test_case: str,\n    blocks: List[Block],\n):\n    \"\"\"\n    Test Withdrawals can be done to the same address multiple times in\n    the same block.\n    \"\"\"\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n    }\n    for addr in self.ADDRESSES:\n        pre[addr] = Account(\n            # set a storage value unconditionally on call\n            code=Op.SSTORE(Op.NUMBER, 1),\n        )\n\n    # Expected post is the same for both test cases.\n    post = {}\n    for addr in self.ADDRESSES:\n        post[addr] = Account(\n            balance=16 * ONE_GWEI,\n            storage={},\n        )\n\n    blockchain_test(pre=pre, post=post, blocks=blocks, tag=test_case)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_many_withdrawals","title":"<code>test_many_withdrawals(blockchain_test)</code>","text":"<p>Test Withdrawals with a count of N withdrawals in a single block where N is a high number not expected to be seen in mainnet.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_many_withdrawals(blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Test Withdrawals with a count of N withdrawals in a single block where\n    N is a high number not expected to be seen in mainnet.\n    \"\"\"\n    N = 400\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n    }\n    withdrawals = []\n    post = {}\n    for i in range(N):\n        addr = Address(0x100 * i)\n        amount = i * 1\n        pre[addr] = Account(\n            code=Op.SSTORE(Op.NUMBER, 1),\n        )\n        withdrawals.append(\n            Withdrawal(\n                index=i,\n                validator_index=i,\n                address=addr,\n                amount=amount,\n            )\n        )\n        post[addr] = Account(\n            code=Op.SSTORE(Op.NUMBER, 1),\n            balance=amount * ONE_GWEI,\n            storage={},\n        )\n\n    blocks = [\n        Block(\n            withdrawals=withdrawals,\n        ),\n    ]\n\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_self_destructing_account","title":"<code>test_self_destructing_account(blockchain_test, fork)</code>","text":"<p>Test withdrawals can be done to self-destructed accounts. Account <code>0x100</code> self-destructs and sends all its balance to <code>0x200</code>. Then, a withdrawal is received at <code>0x100</code> with 99 wei.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_self_destructing_account(blockchain_test: BlockchainTestFiller, fork: Fork):\n    \"\"\"\n    Test withdrawals can be done to self-destructed accounts.\n    Account `0x100` self-destructs and sends all its balance to `0x200`.\n    Then, a withdrawal is received at `0x100` with 99 wei.\n    \"\"\"\n    self_destruct_code = Op.SELFDESTRUCT(Op.CALLDATALOAD(0))\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n        Address(0x100): Account(\n            code=self_destruct_code,\n            balance=(100 * ONE_GWEI),\n        ),\n        Address(0x200): Account(\n            balance=1,\n        ),\n    }\n\n    tx_1 = Transaction(\n        # Transaction sent from the `TestAddress`, that calls a\n        # self-destructing contract.\n        nonce=0,\n        gas_price=10,\n        gas_limit=100000,\n        to=Address(0x100),\n        data=Hash(0x200),\n    )\n\n    withdrawal = Withdrawal(\n        index=0,\n        validator_index=0,\n        address=Address(0x100),\n        amount=(99),\n    )\n\n    block = Block(\n        txs=[tx_1],\n        withdrawals=[withdrawal],\n    )\n\n    post = {\n        Address(0x100): Account(\n            code=self_destruct_code if fork &gt;= Cancun else b\"\",\n            balance=(99 * ONE_GWEI),\n        ),\n        Address(0x200): Account(\n            code=b\"\",\n            balance=(100 * ONE_GWEI) + 1,\n        ),\n    }\n\n    blockchain_test(pre=pre, post=post, blocks=[block])\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_newly_created_contract","title":"<code>test_newly_created_contract(blockchain_test, include_value_in_tx, request)</code>","text":"<p>Test Withdrawing to a newly created contract.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\n    \"include_value_in_tx\",\n    [False, True],\n    ids=[\"without_tx_value\", \"with_tx_value\"],\n)\ndef test_newly_created_contract(\n    blockchain_test: BlockchainTestFiller,\n    include_value_in_tx: bool,\n    request,\n):\n    \"\"\"\n    Test Withdrawing to a newly created contract.\n    \"\"\"\n    created_contract = compute_create_address(TestAddress, 0)\n\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n    }\n\n    initcode = Op.RETURN(0, 1)\n\n    tx = Transaction(\n        # Transaction sent from the `TestAddress`, that creates a\n        # new contract.\n        nonce=0,\n        gas_price=10,\n        gas_limit=1000000,\n        to=None,\n        data=initcode,\n    )\n\n    withdrawal = Withdrawal(\n        index=0,\n        validator_index=0,\n        address=created_contract,\n        amount=1,\n    )\n\n    created_contract_balance = ONE_GWEI\n    if include_value_in_tx:\n        tx = tx.copy(value=ONE_GWEI)\n        created_contract_balance = 2 * ONE_GWEI\n\n    post = {\n        created_contract: Account(\n            code=\"0x00\",\n            balance=created_contract_balance,\n        ),\n    }\n\n    block = Block(\n        txs=[tx],\n        withdrawals=[withdrawal],\n    )\n\n    tag = request.node.callspec.id.split(\"-\")[0]  # remove fork; brittle\n    blockchain_test(pre=pre, post=post, blocks=[block], tag=tag)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_no_evm_execution","title":"<code>test_no_evm_execution(blockchain_test)</code>","text":"<p>Test Withdrawals don't trigger EVM execution.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_no_evm_execution(blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Test Withdrawals don't trigger EVM execution.\n    \"\"\"\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n        Address(0x100): Account(\n            code=Op.SSTORE(Op.NUMBER, 1),\n        ),\n        Address(0x200): Account(\n            code=Op.SSTORE(Op.NUMBER, 1),\n        ),\n        Address(0x300): Account(\n            code=Op.SSTORE(Op.NUMBER, 1),\n        ),\n        Address(0x400): Account(\n            code=Op.SSTORE(Op.NUMBER, 1),\n        ),\n    }\n    blocks = [\n        Block(\n            txs=[\n                Transaction(\n                    nonce=0,\n                    gas_limit=100000,\n                    to=Address(0x300),\n                ),\n                Transaction(\n                    nonce=1,\n                    gas_limit=100000,\n                    to=Address(0x400),\n                ),\n            ],\n            withdrawals=[\n                Withdrawal(\n                    index=0,\n                    validator_index=0,\n                    address=Address(0x100),\n                    amount=1,\n                ),\n                Withdrawal(\n                    index=1,\n                    validator_index=1,\n                    address=Address(0x200),\n                    amount=1,\n                ),\n            ],\n        ),\n        Block(\n            txs=[\n                Transaction(\n                    nonce=2,\n                    gas_limit=100000,\n                    to=Address(0x100),\n                ),\n                Transaction(\n                    nonce=3,\n                    gas_limit=100000,\n                    to=Address(0x200),\n                ),\n            ],\n            withdrawals=[\n                Withdrawal(\n                    index=0,\n                    validator_index=0,\n                    address=Address(0x300),\n                    amount=1,\n                ),\n                Withdrawal(\n                    index=1,\n                    validator_index=1,\n                    address=Address(0x400),\n                    amount=1,\n                ),\n            ],\n        ),\n    ]\n\n    post = {\n        Address(0x100): Account(storage={2: 1}),\n        Address(0x200): Account(storage={2: 1}),\n        Address(0x300): Account(storage={1: 1}),\n        Address(0x400): Account(storage={1: 1}),\n    }\n\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_zero_amount","title":"<code>test_zero_amount(blockchain_test, test_case)</code>","text":"<p>Test withdrawals with zero amount for the following cases, all withdrawals are included in one block:</p> <ol> <li>Two withdrawals of zero amount to two different addresses; one to an    untouched account, one to an account with a balance.</li> <li>As 1., but with an additional withdrawal with positive value.</li> <li>As 2., but with an additional withdrawal containing the maximum value    possible.</li> <li>As 3., but with order of withdrawals in the block reversed.</li> </ol> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\n    \"test_case\",\n    [case for case in ZeroAmountTestCases],\n    ids=[case.value for case in ZeroAmountTestCases],\n)\ndef test_zero_amount(\n    blockchain_test: BlockchainTestFiller,\n    test_case: ZeroAmountTestCases,\n):\n    \"\"\"\n    Test withdrawals with zero amount for the following cases, all withdrawals\n    are included in one block:\n\n    1. Two withdrawals of zero amount to two different addresses; one to an\n       untouched account, one to an account with a balance.\n    2. As 1., but with an additional withdrawal with positive value.\n    3. As 2., but with an additional withdrawal containing the maximum value\n       possible.\n    4. As 3., but with order of withdrawals in the block reversed.\n\n    \"\"\"\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n        Address(0x200): Account(\n            code=\"0x00\",\n            balance=0,\n        ),\n    }\n\n    all_withdrawals = [\n        # No value, untouched account\n        Withdrawal(\n            index=0,\n            validator_index=0,\n            address=Address(0x100),\n            amount=0,\n        ),\n        # No value, touched account\n        Withdrawal(\n            index=0,\n            validator_index=0,\n            address=Address(0x200),\n            amount=0,\n        ),\n        # Withdrawal with value\n        Withdrawal(\n            index=1,\n            validator_index=0,\n            address=Address(0x300),\n            amount=1,\n        ),\n        # Withdrawal with maximum amount\n        Withdrawal(\n            index=2,\n            validator_index=0,\n            address=Address(0x400),\n            amount=2**64 - 1,\n        ),\n    ]\n    all_post = {\n        Address(0x100): Account.NONEXISTENT,\n        Address(0x200): Account(code=\"0x00\", balance=0),\n        Address(0x300): Account(balance=ONE_GWEI),\n        Address(0x400): Account(balance=(2**64 - 1) * ONE_GWEI),\n    }\n\n    withdrawals: List[Withdrawal] = []\n    post: Mapping[Address, Account | object] = {}\n    if test_case == ZeroAmountTestCases.TWO_ZERO:\n        withdrawals = all_withdrawals[0:2]\n        post = {\n            account: all_post[account]\n            for account in post\n            if account in [Address(0x100), Address(0x200)]\n        }\n    elif test_case == ZeroAmountTestCases.THREE_ONE_WITH_VALUE:\n        withdrawals = all_withdrawals[0:3]\n        post = {\n            account: all_post[account]\n            for account in post\n            if account\n            in [\n                Address(0x100),\n                Address(0x200),\n                Address(0x300),\n            ]\n        }\n    elif test_case == ZeroAmountTestCases.FOUR_ONE_WITH_MAX:\n        withdrawals = all_withdrawals\n        post = all_post\n    elif test_case == ZeroAmountTestCases.FOUR_ONE_WITH_MAX_REVERSED:\n        for i, w in enumerate(reversed(all_withdrawals)):\n            withdrawals.append(\n                Withdrawal(\n                    index=i,\n                    validator_index=w.validator_index,\n                    address=w.address,\n                    amount=w.amount,\n                )\n            )\n        post = all_post\n    else:\n        raise Exception(\"Unknown test case.\")\n\n    blockchain_test(\n        pre=pre,\n        # TODO: Fix in BlockchainTest? post: Mapping[str, Account | object]\n        # to allow for Account.NONEXISTENT\n        post=post,  # type: ignore\n        blocks=[Block(withdrawals=withdrawals)],\n        tag=test_case.value,\n    )\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_large_amount","title":"<code>test_large_amount(blockchain_test)</code>","text":"<p>Test Withdrawals that have a large gwei amount, so that (gwei * 1e9) could overflow uint64 but not uint256.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>def test_large_amount(blockchain_test: BlockchainTestFiller):\n    \"\"\"\n    Test Withdrawals that have a large gwei amount, so that (gwei * 1e9)\n    could overflow uint64 but not uint256.\n    \"\"\"\n    pre = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n    }\n\n    withdrawals: List[Withdrawal] = []\n    amounts: List[int] = [\n        (2**35),\n        (2**64) - 1,\n        (2**63) + 1,\n        (2**63),\n        (2**63) - 1,\n    ]\n\n    post = {}\n\n    for i, amount in enumerate(amounts):\n        addr = Address(0x100 * (i + 1))\n        withdrawals.append(\n            Withdrawal(\n                index=i,\n                validator_index=i,\n                address=addr,\n                amount=amount,\n            )\n        )\n        post[addr] = Account(balance=(amount * ONE_GWEI))\n\n    blocks = [\n        Block(\n            withdrawals=withdrawals,\n        )\n    ]\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/#tests.shanghai.eip4895_withdrawals.test_withdrawals.test_withdrawing_to_precompiles","title":"<code>test_withdrawing_to_precompiles(blockchain_test, precompile, amount, t8n)</code>","text":"<p>Test withdrawing to all precompiles for a given fork.</p> Source code in <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code> <pre><code>@pytest.mark.parametrize(\"amount\", [0, 1])\n@pytest.mark.with_all_precompiles\ndef test_withdrawing_to_precompiles(\n    blockchain_test: BlockchainTestFiller, precompile: int, amount: int, t8n: TransitionTool\n):\n    \"\"\"\n    Test withdrawing to all precompiles for a given fork.\n    \"\"\"\n    if precompile == 3 and str(t8n.default_binary) == \"ethereum-spec-evm\":\n        pytest.xfail(\"ethereum-spec-evm doesn't support hash type ripemd160\")\n    pre: Dict = {\n        TestAddress: Account(balance=1000000000000000000000, nonce=0),\n    }\n    post: Dict = {}\n\n    blocks = [\n        # First block performs the withdrawal\n        Block(\n            withdrawals=[\n                Withdrawal(\n                    index=0,\n                    validator_index=0,\n                    address=Address(precompile),\n                    amount=amount,\n                )\n            ]\n        ),\n        # Second block sends a transaction to the precompile\n        Block(\n            txs=[\n                Transaction(\n                    nonce=0,\n                    gas_limit=100000,\n                    to=Address(precompile),\n                ),\n            ],\n        ),\n    ]\n    blockchain_test(pre=pre, post=post, blocks=blocks)\n</code></pre>"},{"location":"tests/shanghai/eip4895_withdrawals/test_withdrawals/index/test_cases/","title":"Test Withdrawals - Test Cases","text":"<p>Test cases generated from <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code></p> <p>Parametrized test cases generated from the test module <code>tests/shanghai/eip4895_withdrawals/test_withdrawals.py</code>:</p> <pre><code>TestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\nTestUseValueInTx\ntest_use_value_in_contract[fork_Shanghai-blockchain_test]\ntest_use_value_in_contract[fork_Shanghai-blockchain_test_hive]\ntest_use_value_in_contract[fork_Cancun-blockchain_test]\ntest_use_value_in_contract[fork_Cancun-blockchain_test_hive]\ntest_use_value_in_contract[fork_Prague-blockchain_test]\ntest_use_value_in_contract[fork_Prague-blockchain_test_hive]\ntest_balance_within_block[fork_Shanghai-blockchain_test]\ntest_balance_within_block[fork_Shanghai-blockchain_test_hive]\ntest_balance_within_block[fork_Cancun-blockchain_test]\ntest_balance_within_block[fork_Cancun-blockchain_test_hive]\ntest_balance_within_block[fork_Prague-blockchain_test]\ntest_balance_within_block[fork_Prague-blockchain_test_hive]\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\nTestMultipleWithdrawalsSameAddress\ntest_many_withdrawals[fork_Shanghai-blockchain_test]\ntest_many_withdrawals[fork_Shanghai-blockchain_test_hive]\ntest_many_withdrawals[fork_Cancun-blockchain_test]\ntest_many_withdrawals[fork_Cancun-blockchain_test_hive]\ntest_many_withdrawals[fork_Prague-blockchain_test]\ntest_many_withdrawals[fork_Prague-blockchain_test_hive]\ntest_self_destructing_account[fork_Shanghai-blockchain_test]\ntest_self_destructing_account[fork_Shanghai-blockchain_test_hive]\ntest_self_destructing_account[fork_Cancun-blockchain_test]\ntest_self_destructing_account[fork_Cancun-blockchain_test_hive]\ntest_self_destructing_account[fork_Prague-blockchain_test]\ntest_self_destructing_account[fork_Prague-blockchain_test_hive]\ntest_newly_created_contract[fork_Shanghai-blockchain_test-without_tx_value]\ntest_newly_created_contract[fork_Shanghai-blockchain_test-with_tx_value]\ntest_newly_created_contract[fork_Shanghai-blockchain_test_hive-without_tx_value]\ntest_newly_created_contract[fork_Shanghai-blockchain_test_hive-with_tx_value]\ntest_newly_created_contract[fork_Cancun-blockchain_test-without_tx_value]\ntest_newly_created_contract[fork_Cancun-blockchain_test-with_tx_value]\ntest_newly_created_contract[fork_Cancun-blockchain_test_hive-without_tx_value]\ntest_newly_created_contract[fork_Cancun-blockchain_test_hive-with_tx_value]\ntest_newly_created_contract[fork_Prague-blockchain_test-without_tx_value]\ntest_newly_created_contract[fork_Prague-blockchain_test-with_tx_value]\ntest_newly_created_contract[fork_Prague-blockchain_test_hive-without_tx_value]\ntest_newly_created_contract[fork_Prague-blockchain_test_hive-with_tx_value]\ntest_no_evm_execution[fork_Shanghai-blockchain_test]\ntest_no_evm_execution[fork_Shanghai-blockchain_test_hive]\ntest_no_evm_execution[fork_Cancun-blockchain_test]\ntest_no_evm_execution[fork_Cancun-blockchain_test_hive]\ntest_no_evm_execution[fork_Prague-blockchain_test]\ntest_no_evm_execution[fork_Prague-blockchain_test_hive]\ntest_zero_amount[fork_Shanghai-blockchain_test-two_withdrawals_no_value]\ntest_zero_amount[fork_Shanghai-blockchain_test-three_withdrawals_one_with_value]\ntest_zero_amount[fork_Shanghai-blockchain_test-four_withdrawals_one_with_value_one_with_max]\ntest_zero_amount[fork_Shanghai-blockchain_test-four_withdrawals_one_with_value_one_with_max_reversed_order]\ntest_zero_amount[fork_Shanghai-blockchain_test_hive-two_withdrawals_no_value]\ntest_zero_amount[fork_Shanghai-blockchain_test_hive-three_withdrawals_one_with_value]\ntest_zero_amount[fork_Shanghai-blockchain_test_hive-four_withdrawals_one_with_value_one_with_max]\ntest_zero_amount[fork_Shanghai-blockchain_test_hive-four_withdrawals_one_with_value_one_with_max_reversed_order]\ntest_zero_amount[fork_Cancun-blockchain_test-two_withdrawals_no_value]\ntest_zero_amount[fork_Cancun-blockchain_test-three_withdrawals_one_with_value]\ntest_zero_amount[fork_Cancun-blockchain_test-four_withdrawals_one_with_value_one_with_max]\ntest_zero_amount[fork_Cancun-blockchain_test-four_withdrawals_one_with_value_one_with_max_reversed_order]\ntest_zero_amount[fork_Cancun-blockchain_test_hive-two_withdrawals_no_value]\ntest_zero_amount[fork_Cancun-blockchain_test_hive-three_withdrawals_one_with_value]\ntest_zero_amount[fork_Cancun-blockchain_test_hive-four_withdrawals_one_with_value_one_with_max]\ntest_zero_amount[fork_Cancun-blockchain_test_hive-four_withdrawals_one_with_value_one_with_max_reversed_order]\ntest_zero_amount[fork_Prague-blockchain_test-two_withdrawals_no_value]\ntest_zero_amount[fork_Prague-blockchain_test-three_withdrawals_one_with_value]\ntest_zero_amount[fork_Prague-blockchain_test-four_withdrawals_one_with_value_one_with_max]\ntest_zero_amount[fork_Prague-blockchain_test-four_withdrawals_one_with_value_one_with_max_reversed_order]\ntest_zero_amount[fork_Prague-blockchain_test_hive-two_withdrawals_no_value]\ntest_zero_amount[fork_Prague-blockchain_test_hive-three_withdrawals_one_with_value]\ntest_zero_amount[fork_Prague-blockchain_test_hive-four_withdrawals_one_with_value_one_with_max]\ntest_zero_amount[fork_Prague-blockchain_test_hive-four_withdrawals_one_with_value_one_with_max_reversed_order]\ntest_large_amount[fork_Shanghai-blockchain_test]\ntest_large_amount[fork_Shanghai-blockchain_test_hive]\ntest_large_amount[fork_Cancun-blockchain_test]\ntest_large_amount[fork_Cancun-blockchain_test_hive]\ntest_large_amount[fork_Prague-blockchain_test]\ntest_large_amount[fork_Prague-blockchain_test_hive]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_9-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_9-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_9-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_9-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_5-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_5-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_5-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_5-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_6-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_6-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_6-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_6-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_7-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_7-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_7-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_7-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_8-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_8-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_8-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_8-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_1-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_1-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_1-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_1-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_2-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_2-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_2-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_2-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_3-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_3-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_3-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_3-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_4-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_4-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_4-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Shanghai-precompile_4-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_10-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_10-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_10-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_10-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_9-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_9-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_9-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_9-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_5-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_5-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_5-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_5-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_6-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_6-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_6-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_6-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_7-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_7-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_7-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_7-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_8-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_8-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_8-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_8-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_1-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_1-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_1-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_1-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_2-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_2-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_2-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_2-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_3-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_3-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_3-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_3-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_4-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_4-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_4-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Cancun-precompile_4-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_11-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_11-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_11-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_11-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_12-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_12-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_12-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_12-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_13-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_13-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_13-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_13-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_14-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_14-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_14-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_14-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_15-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_15-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_15-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_15-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_16-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_16-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_16-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_16-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_17-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_17-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_17-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_17-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_18-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_18-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_18-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_18-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_19-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_19-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_19-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_19-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_10-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_10-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_10-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_10-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_9-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_9-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_9-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_9-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_5-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_5-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_5-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_5-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_6-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_6-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_6-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_6-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_7-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_7-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_7-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_7-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_8-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_8-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_8-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_8-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_1-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_1-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_1-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_1-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_2-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_2-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_2-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_2-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_3-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_3-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_3-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_3-blockchain_test_hive-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_4-blockchain_test-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_4-blockchain_test-amount_1]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_4-blockchain_test_hive-amount_0]\ntest_withdrawing_to_precompiles[fork_Prague-precompile_4-blockchain_test_hive-amount_1]\n</code></pre> <p>This output was extracted from the result of:</p> <pre><code>fill -p pytest_plugins.test_filler.test_filler -p pytest_plugins.forks.forks -p pytest_plugins.spec_version_checker.spec_version_checker -p pytest_plugins.test_help.test_help -m not eip_version_check --tb short --dist loadscope --ignore tests/cancun/eip4844_blobs/point_evaluation_vectors/ --collect-only -q --until Prague tests/shanghai/eip4895_withdrawals/test_withdrawals.py\n</code></pre>"},{"location":"tutorials/blockchain/","title":"Blockchain Tests","text":"<p>This tutorial teaches you to create a blockchain execution specification test. These tests verify that a blockchain, starting from a defined pre-state, will process given blocks and arrive at a defined post-state.</p>"},{"location":"tutorials/blockchain/#pre-requisites","title":"Pre-requisites","text":"<p>Before proceeding with this tutorial, it is assumed that you have prior knowledge and experience with the following:</p> <ul> <li>Set up and run an execution specification test as outlined in the quick start guide.</li> <li>Understand how to read a blockchain test.</li> <li>Know the basics of Yul, which is an EVM assembly language.</li> <li>Familiarity with Python.</li> <li>Understand how to write an execution spec state transition test.</li> </ul>"},{"location":"tutorials/blockchain/#example-tests","title":"Example Tests","text":"<p>In this tutorial we will go over [test_block_number] in <code>test_block_example.py</code>(https://github.com/ethereum/execution-spec-tests/tree/main/tests/example/test_block_example.py#L19).</p> <p>It is assumed you have already gone through the state transition test tutorial. Only new concepts will be discussed.</p>"},{"location":"tutorials/blockchain/#smart-contract","title":"Smart Contract","text":"<p>A smart contract is defined that is called by each transaction in the test. It stores a pointer to storage at <code>storage[0]</code>. When it is called storage cell <code>0</code> gets the current block number, and the pointer is incremented to the next value.</p> <pre><code>contract_addr: Account(\n    balance=1000000000000000000000,\n    code=Yul(\n        \"\"\"\n        {\n            let next_slot := sload(0)\n            sstore(next_slot, number())\n            sstore(0, add(next_slot, 1))\n        }\n        \"\"\"\n    ),\n    storage={\n        0x00: 0x01,\n    },\n),\n</code></pre>"},{"location":"tutorials/blockchain/#transaction-generator","title":"Transaction Generator","text":"<p>The transactions used in this test are nearly identical. Their only difference is the <code>nonce</code> value which needs to be incremented.</p> <pre><code>def tx_generator():\n    nonce = 0  # Initial value\n    while True:\n        tx = Transaction(\n            ty=0x0,\n            chain_id=0x0,\n            nonce=nonce,\n            to=contractAddr,\n            gas_limit=500000,\n            gas_price=10,\n        )\n        nonce = nonce + 1\n        yield tx\n\ntx_generator = tx_generator()\n</code></pre> <p>This looks like an infinite loop but it isn't because this is a generator function. When generator encounters the <code>yield</code> keyword it returns the value and stops execution, keeping a copy of all the local variables, until it is called again. Hence infinite loops inside a generator are not a problem as long as they include <code>yield</code>. This code section is responsible for creating the <code>Transaction</code> object and incrementing the <code>nonce</code>.</p> <p>Every time the function <code>tx_generator()</code> is called, it returns a new generator with a <code>nonce</code> of zero. To increment the <code>nonce</code> we need to use the same generator. We assign this generator to <code>tx_generator</code>.</p>"},{"location":"tutorials/blockchain/#blocks","title":"Blocks","text":"<p>Each integer in the <code>tx_per_block</code> array is the number of transactions in a block. The genesis block is block 0 (no transactions). It follows that we have 2 transactions in block 1, 0 in block two, 4 in block 3, ..., and 50 in block 9.</p> <pre><code>tx_per_block = [2, 0, 4, 8, 0, 0, 20, 1, 50]\n</code></pre> <p>The code section that creates the blocks is a bit complex in this test. For some simpler definitions of Block creation you can browse tests within <code>test_withdrawals.py</code>.</p> <pre><code>blocks = map(\n    lambda len: Block(\n        txs=list(map(lambda x: next(tx_generator), range(len)))\n    ),\n    tx_per_block,\n)\n</code></pre> <p>We use <code>lambda</code> notation to specify short functions. In this case, the function doesn't actually care about its input, it just returns the next transaction from the generator.</p> <pre><code>lambda x: next(tx_generator)\n</code></pre> <p>Python uses <code>range(n)</code> to create a list of numbers from <code>0</code> to <code>n-1</code>. Among other things, it's a simple way to create a list of <code>n</code> values.</p> <pre><code>range(len)\n</code></pre> <p>The <code>map</code> function runs the function (the first parameter) on every element of the list (the second parameter). Putting together what we know, it means that it runs <code>next(tx_generator)</code> <code>len</code> times, giving us <code>len</code> transactions. We then use <code>list</code> to turn the transactions into a list that we can provide as the <code>txs</code> parameter to the <code>Block</code> constructor.</p> <pre><code>list(map(lambda x: next(tx_generator), range(len)))\n</code></pre> <p>The outer <code>lambda</code> function takes an integer, <code>len</code>, and creates a <code>Block</code> object with <code>len</code> transactions. This function is then run on every value of <code>tx_per_block</code> to generate the blocks.</p> <pre><code>blocks = map(\n    lambda len: Block(\n        txs=list of len transactions\n    ),\n    tx_per_block,\n)\n</code></pre> <p>For example, if we had <code>tx_per_block = [0,2,4]</code>, we'd get this result:</p> <pre><code>blocks = [\n    Blocks(txs=[]),\n    Blocks(txs=[next(tx_generator), next(tx_generator)]),\n    Blocks(txs=[next(tx_generator), next(tx_generator), next(tx_generator), next(tx_generator)])        \n]\n</code></pre>"},{"location":"tutorials/blockchain/#post-state","title":"Post State","text":"<p>Recall that storage slot 0 retains the value of the next slot that the block number is written into. It starts at one and is incremented after each transaction. Hence it's the total number of transactions plus 1.</p> <pre><code>storage = {0: sum(tx_per_block) + 1}\n</code></pre> <p>For every block and transaction within the block, we write the block number and increment the next slot number in storage slot 0. As Python lists are 0 indexed, we must increment the block number by 1.</p> <pre><code>next_slot = 1\nfor blocknum in range(len(tx_per_block)):\n    for _ in range(tx_per_block[blocknum]):\n        storage[next_slot] = blocknum + 1\n        next_slot = next_slot + 1\n</code></pre> <p>Now that the expected storage values are calculated, the post state can be defined and yielded within the <code>BlockchainTest</code>, synonymous to the state test example.</p> <pre><code>post = {contract_addr: Account(storage=storage)}\n\nyield BlockchainTest(\n    genesis_environment=env,\n    pre=pre,\n    blocks=blocks,\n    post=post,\n)\n</code></pre> <p>Note that because of the <code>yield</code> we could have multiple tests under the same name.</p>"},{"location":"tutorials/blockchain/#conclusion","title":"Conclusion","text":"<p>At this point you should be able to write blockchain tests.</p>"},{"location":"tutorials/state_transition/","title":"State Transition Tests","text":"<p>This tutorial teaches you to create a state transition execution specification test. These tests verify that a starting pre-state will reach a specified post-state after executing a single transaction.</p>"},{"location":"tutorials/state_transition/#pre-requisites","title":"Pre-requisites","text":"<p>Before proceeding with this tutorial, it is assumed that you have prior knowledge and experience with the following:</p> <ul> <li>Set up and run an execution specification test as outlined in the quick start guide.</li> <li>Understand how to read a static state transition test.</li> <li>Know the basics of Yul, which is an EVM assembly language.</li> <li>Familiarity with Python.</li> </ul>"},{"location":"tutorials/state_transition/#example-tests","title":"Example Tests","text":"<p>The most effective method of learning how to write tests is to study a couple of straightforward examples. In this tutorial we will go over the Yul state test.</p>"},{"location":"tutorials/state_transition/#yul-test","title":"Yul Test","text":"<p>You can find the source code for the Yul test in tests/homestead/yul/test_yul_example.py. It is the spec test equivalent of this static test.</p> <p>Lets examine each section.</p> <pre><code>\"\"\"\nTest Yul Source Code Examples\n\"\"\"\n</code></pre> <p>In Python, multi-line strings are denoted using <code>\"\"\"</code>. As a convention, a file's purpose is often described in the opening string of the file.</p> <pre><code>from ethereum_test_forks import Fork\nfrom ethereum_test_tools import (\n    Account,\n    Environment,\n    StateTestFiller,\n    TestAddress,\n    Transaction,\n    Yul,\n)\n</code></pre> <p>In this snippet the required constants, types and helper functions are imported from <code>ethereum_test_tools</code> and <code>ethereum_test_forks</code>. We will go over these as we come across them.</p> <pre><code>@pytest.mark.valid_from(\"Berlin\")\n</code></pre> <p>In Python this kind of definition is called a decorator. It modifies the action of the function after it. In this case, the decorator is a custom pytest fixture defined by the execution-specs-test framework that specifies that the test is valid for the Berlin fork and all forks after it. The framework will then execute this test case for all forks in the fork range specified by the command-line arguments.</p> <p>Executing the test</p> <p>To execute this test for all the specified forks, we can specify pytest's <code>-k</code> flag that filters test cases by keyword expression:</p> <pre><code>fill -k test_yul\n</code></pre> <p>and to execute it for a specific fork range, we can provide the <code>--from</code> and <code>--until</code> command-line arguments:</p> <pre><code>fill -k test_yul --from London --until Paris\n</code></pre> <pre><code>def test_yul(state_test: StateTestFiller, fork: Fork):\n    \"\"\"\n    Test YUL compiled bytecode.\n    \"\"\"\n</code></pre> <p>This is the format of a Python function. It starts with <code>def &lt;function name&gt;(&lt;parameters&gt;):</code>, and then has indented code for the function. The function definition ends when there is a line that is no longer indented. As with files, by convention functions start with a string that explains what the function does.</p> <p>The <code>state_test</code> function argument</p> <p>This test defines a state test and, as such, must include the <code>state_test</code> in its function arguments. This is a callable object (actually a wrapper class to the <code>StateTest</code>); we will see how it is called later.</p> <pre><code>    env = Environment()\n</code></pre> <p>This line specifies that <code>env</code> is an <code>Environment</code> object, and that we just use the default parameters. If necessary we can modify the environment to have different block gas limits, block numbers, etc. In most tests the defaults are good enough.</p> <p>For more information, see the static test documentation.</p>"},{"location":"tutorials/state_transition/#pre-state","title":"Pre State","text":"<pre><code>    pre = {\n</code></pre> <p>Here we define the pre-state section, the one that tells us what is on the \"blockchain\" before the test. It is a dictionary, which is the Python term for an associative array.</p> <pre><code>        \"0x1000000000000000000000000000000000000000\": Account(\n</code></pre> <p>The keys of the dictionary are addresses (as strings), and the values are <code>Account</code> objects. You can read more about address fields in the static test documentation.</p> <pre><code>            balance=0x0BA1A9CE0BA1A9CE,\n</code></pre> <p>This field is the balance: the amount of Wei that the account has. It usually doesn't matter what its value is in the case of state test contracts.</p> <pre><code>            code=Yul(\n</code></pre> <p>Here we define the Yul code for the contract. It is defined as a multi-line string and starts and ends with curly braces (<code>{ &lt;yul&gt; }</code>).</p> <p>When running the test filler <code>fill</code>, the solidity compiler <code>solc</code> will automatically translate the Yul to EVM opcode at runtime.</p> <p>Note</p> <p>Currently Yul and direct EVM opcode are supported in execution spec tests. LLL and Solidity may be supported in the future.</p> <pre><code>                \"\"\"\n                {\n                    function f(a, b) -&gt; c {\n                        c := add(a, b)\n                    }\n                    sstore(0, f(1, 2))\n                    return(0, 32)\n                }\n                \"\"\"\n            ),\n        ),\n</code></pre> <p>Within this example test Yul code we have a function definition, and inside it we are using the Yul <code>add</code> instruction. When compiled with <code>solc</code> it translates the instruction directly to the <code>ADD</code> opcode. For further Yul instructions see here. Notice that function is utilized with the Yul <code>sstore</code> instruction, which stores the result of <code>add(1, 2)</code> to the storage address <code>0x00</code>.</p> <p>Generally for execution spec tests the <code>sstore</code> instruction acts as a high-level assertion method to check pre to post-state changes. The test filler achieves this by verifying that the correct value is held within post-state storage, hence we can validate that the Yul code has run successfully.</p> <pre><code>        TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE),\n    }\n</code></pre> <p><code>TestAddress</code> is an address for which the test filler has the private key. This means that the test runner can issue a transaction as that contract. Of course, this address also needs a balance to be able to issue transactions.</p>"},{"location":"tutorials/state_transition/#transactions","title":"Transactions","text":"<pre><code>    tx = Transaction(\n        ty=0x0,\n        chain_id=0x0,\n        nonce=0,\n        to=\"0x1000000000000000000000000000000000000000\",\n        gas_limit=500000,\n        gas_price=10,\n        protected=False,\n    )\n</code></pre> <p>With the pre-state specified, we can add a description for the <code>Transaction</code>. For more information, see the static test documentation</p>"},{"location":"tutorials/state_transition/#post-state","title":"Post State","text":"<pre><code>    post = {\n        \"0x1000000000000000000000000000000000000000\": Account(\n            storage={\n                0x00: 0x03,\n            },\n        ),\n    }\n</code></pre> <p>This is the post-state which is equivalent to <code>expect</code> in static tests, but without the indexes. It is similar to the pre-state, except that we do not need to specify everything, only those accounts and fields we wish to test.</p> <p>In this case, we look at the storage of the contract we called and add to it what we expect to see. In this example storage cell <code>0x00</code> should be <code>0x03</code> as in the pre-state we essentially stored the result of the Yul instruction <code>add(1, 2)</code>.</p>"},{"location":"tutorials/state_transition/#state-test","title":"State Test","text":"<pre><code>    state_test(env=env, pre=pre, post=post, tx=tx)\n</code></pre> <p>This line calls the wrapper to the <code>StateTest</code> object that provides all the objects required (for example, the fork parameter) in order to fill the test, generate the test fixtures and write them to file (by default, <code>./fixtures/&lt;blockchain,state&gt;_tests/example/yul_example/test_yul.json</code>).</p>"},{"location":"tutorials/state_transition/#conclusion","title":"Conclusion","text":"<p>At this point you should be able to state transition tests within a single block.</p>"},{"location":"tutorials/state_transition_bad_opcode/","title":"Bad Opcode Test","text":"<p>The source code for this test is here. We will only go over the parts that are new.</p> <p>We use Python string templates, so we need to import that library.</p> <pre><code>from string import Template\n</code></pre> <p>In this test we need a couple of addresses, so we create them here. Python lets us specify <code>&lt;string&gt;*&lt;number&gt;</code> when we need a string repeated multiple times, which makes for more readable code than <code>0x00...000C0DE</code>.</p> <pre><code>    code_addr = \"0x\" + \"0\"*(40-4) + \"C0DE\"\n    goat_addr = \"0x\" + \"0\"*(40-4) + \"60A7\"\n</code></pre> <p>We create <code>env</code> and <code>tx</code> first because they are constant. This function will <code>yield</code> multiple tests, but always with the same <code>env</code> and <code>tx</code> values.</p> <pre><code>    env = Environment()\n\n    tx = Transaction(\n           .\n           .\n           .\n        )\n</code></pre> <p>Here we create two post states. We will use whichever one is appropriate to the test we create.</p> <pre><code>    post_valid = {\n       code_addr: Account(\n         storage={0x00: 1},\n       ),\n    }\n\n    post_invalid = {\n       code_addr: Account(\n         storage={0x00: 0},\n       ),\n    }\n</code></pre> <p>Here we define a function (<code>opc_valid</code>) inside another function. Python supports this, and it has two advantages:</p> <ul> <li>Avoid namespace pollution by restricting the function to where it is needed.</li> <li>Functions defined inside other functions can use the parameters and local variables of those functions.   In this case, we need to use <code>fork</code>.</li> </ul> <pre><code>    # Check if an Opcode is valid\n    def opc_valid(opc):\n        \"\"\"\n        Return whether opc will be evaluated as valid by the test or not.\n        Note that some opcodes are evaluated as invalid because of the way they act\n        \"\"\"\n</code></pre> <p>This is the syntax for Python comments, <code># &lt;rest of the line&gt;</code>.</p> <pre><code>        # PUSH0 is only valid Shanghai and later\n</code></pre> <p>Opcode 0x5F (<code>PUSH0</code>) is only valid starting with the Shanghai fork. We don't know what will be the fork names after Shanghai, so it is easiest to specify that prior to Shanghai it is invalid. We don't need to worry about forks prior to London because the decorator for this test says it is only valid from London.</p> <pre><code>        if fork in {\"london\", \"paris\"} and opc==0x5F:\n</code></pre> <p>Python has a set data structure. We use this structure when the order of the values are irrelevant, and we just want to be able to check if something is a member or not.</p> <p>Note that <code>if</code> statements are also followed by a colon (<code>:</code>) and the code inside them indented. That is the general Python syntax.</p> <pre><code>            return False\n</code></pre> <p>Boolean values in Python are either <code>True</code> or <code>False</code>.</p> <p>This test works by running an opcode and then does a <code>SSTORE</code>. Opcodes that terminate execution, such as <code>STOP</code> and <code>RETURN</code> also cause the <code>SSTORE</code> not to happen, so they must be treated as invalid. The same is true for <code>JUMP</code>.</p> <pre><code>        # Valid opcodes, but they are terminal, and so cause\n        # the SSTORE not to happen\n        if opc in {0x00, 0xF3, 0xFD, 0xFF}:\n            return False\n\n\n        # Jumps. If you jump to a random location, you skip the SSTORE\n        if opc in {0x56}:\n            return False\n</code></pre> <p>Next we return <code>True</code> for supported opcodes.</p> <pre><code>        # Opcodes that aren't part of a range\n        # 0x20 - SHA3\n        # 0xFA - STATICCALL\n        if opc in {0x20, 0xFA}:\n            return True\n</code></pre> <p>In Python, as in math, you can use <code>a &lt; b &lt; c</code> for <code>a &lt; b and b &lt; c</code>.</p> <pre><code>        # Arithmetic opcodes\n        if 0x01 &lt;= opc &lt;= 0x0b:\n            return True\n\n        .\n        .\n        .\n</code></pre> <p>The last part the function returns <code>False</code>. If we got here, then this is not a valid opcode.</p> <pre><code>        return False\n        # End of opc_valid\n</code></pre> <p>As this is the end of the function, the next code line is no longer indented (compared to the function definition code).</p> <p>This is a <code>for</code> loop. For loops iterate over a sequence, and the <code>range</code> function, in this case, gives us the range 0..255. As with functions and <code>if</code> statements, the <code>for</code> loop has a colon and includes the indented code.</p> <pre><code>    # For every possible opcode\n    for opc in range(256):\n</code></pre> <p>We have two post states. One, <code>post_valid</code>, has the value of <code>1</code> in storage location <code>0</code>. The other, <code>post_invalid</code> has the value of <code>0</code> in storage location <code>0</code>. But <code>SELFDESTRUCT</code> destroys the contract so there is no longer an account at that address. Neither is valid, so we just skip that test case.</p> <pre><code>        # We can't check SELFDESTRUCT using this technique\n        if opc in {0xFF}:\n           continue\n</code></pre> <p>We need the opcode in hexadecimal. The function <code>hex</code> gives us the hexadecimal number in hex. However, it also gives us a <code>0x</code> prefix, which we don't want, so we use a slice to remove the first two characters.</p> <pre><code>        opc_hex = hex(opc)[2:]\n</code></pre> <p>We need <code>opc_hex</code> to be two characters. If the length is only one, prepend a zero.</p> <pre><code>        if len(opc_hex) == 1:\n          opc_hex = \"0\" + opc_hex\n</code></pre> <p>This is a <code>Template</code> string. This means we'll be able to substitute template variables (<code>${&lt;var name&gt;}</code>) with values to produce the actual code.</p> <pre><code>        yul_code = Template(\"\"\"\n        {\n</code></pre> <p>We start with a call <code>0x00...0060A7</code> (a.k.a. <code>goat_addr</code>) so we'll have some return data. Otherwise, <code>RETURNDATACOPY</code> will fail and appear like it is not an opcode.</p> <pre><code>           pop(call(gas(), 0x60A7, 0, 0, 0, 0, 0))\n\n           // fails on opcodes with &gt;20 inputs\n           // (currently dup16, at 17 inputs, is the\n           // one that goes deepest)\n           //\n           // Follow with 32 NOPs (0x5B) to handle PUSH, which has an immediate\n           // operand\n</code></pre> <p>Opcodes can have two types of operands:</p> <ul> <li>Immediate operands, which are part of the bytecode.   For example, <code>6001</code> is <code>PUSH1</code> with the value <code>0x01</code>.</li> <li>Implied operands (a.k.a. stack operands), which come from the stack.</li> </ul> <p>This <code>verbatim</code> code provides both operand types. The code, <code>${opcode}${nop32}</code> is the opcode we are testing, followed by 32 copies of 0x5B. When <code>0x5B</code> is not used as an operand, it is <code>JUMPDEST</code> and does nothing.</p> <pre><code>           verbatim_20i_0o(hex\"${opcode}${nop32}\",\n</code></pre> <p>The opcode string is followed by the input parameters (in this case, twenty of them). These can be Yul expressions, but for the sake of simplicity here we just use constant values.</p> <pre><code>              0x00, 0x00, 0x00, 0xFF, 0xFF,\n              0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n              0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n              0xFF, 0xFF, 0xFF, 0xFF, 0xFF)\n</code></pre> <p>If the opcode terminates the smart contract execution (as invalid opcodes do), we don't get here. If we do get here, write to storage cell <code>0x00</code> to record that fact.</p> <p>Note the syntax <code>let &lt;var&gt; := &lt;value&gt;</code>. This is how you specify variables in Yul.</p> <pre><code>           // We only get here is the opcode is legit (and it doesn't terminate\n           // execution like STOP and RETURN)\n           let zero := 0\n           let one := 1\n           sstore(zero, one)\n        }\n</code></pre> <p>Replace <code>${opcode}</code> with the one byte hex code, and <code>${nop32}</code> with 32 copies of <code>5b</code> (for NOP).</p> <pre><code>        \"\"\").substitute(opcode=opc_hex, nop32=\"5B\"*32)\n        pre = {\n           TestAddress: Account(balance=0x0BA1A9CE0BA1A9CE),\n           codeAddr: Account(\n  balance=0,\n  nonce=1,\n  code=Yul(yul_code)\n           ),\n</code></pre> <p>This is the account for <code>0x00..0060A7</code>. It just returns data (all zeros).</p> <pre><code>           goat_addr: Account(\n                balance=0,\n                nonce=1,\n                code=Yul(\"{ return(0, 0x100) }\"),\n           )\n        }\n</code></pre> <p>Every time the <code>for</code> loop gets here, it <code>yields</code> a separate test. Over the entire for loop, it yields 255 different tests.</p> <pre><code>    yield StateTest(\n        env=env, \n        pre=pre, \n        tx=tx,\n        post=(post_valid if opc_valid(opc) else post_invalid),\n    )\n</code></pre> <p>The Python format for the ternary operation is a bit different from C-like languages. In C like languages the syntax is <code>&lt;condition&gt; ? &lt;yes value&gt; : &lt;no value&gt;</code>. In Python it is <code>&lt;yes value&gt; if &lt;condition&gt; else &lt;no value&gt;</code>.</p>"},{"location":"writing_tests/","title":"Writing Tests","text":"<p>The best way to get started is to use one of the existing test modules for inspiration. A good simple example is tests.berlin.eip2930_access_list.test_acl.test_access_list.</p> <p>Please check that your code adheres to the repo's Coding Standards and read the other pages in this section for more background and an explanation of how to implement state transition and blockchain tests.</p>"},{"location":"writing_tests/adding_a_new_test/","title":"Adding a New Test","text":"<p>All test cases are located underneath the <code>tests</code> directory, which are then organized by fork. Each fork contains sub-directories containing test sub-categories.</p> <pre><code>\ud83d\udcc1 execution-test-specs/\n\u251c\u2500\u2574\ud83d\udcc1 tests/\n|   \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 cancun/\n|   |    \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n\u2502   |    \u2514\u2500\u2500 \ud83d\udcc1 eip4844_blobs/\n|   |        \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n|   |        \u251c\u2500\u2500 \ud83d\udcc4 test_blobhash_opcode.py\n|   |        \u251c\u2500\u2500 \ud83d\udcc4 test_excess_blob_gas.py\n|   |        \u2514\u2500\u2500 \ud83d\udcc4 ...\n|   \u251c\u2500\u2500 \ud83d\udcc1 shanghai\n|   |    \u251c\u2500\u2500 \ud83d\udcc1 eip3651_warm_coinbase\n|   |    |   \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n|   |    |   \u2514\u2500\u2500 \ud83d\udcc4 test_warm_coinbase.py\n|   |    \u251c\u2500\u2500 \ud83d\udcc1 eip3855_push0\n|   |    |   \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n|   |    |   \u2514\u2500\u2500 \ud83d\udcc4 test_push0.py\n|   |    \u251c\u2500\u2500 \ud83d\udcc1...\n|   |    ...\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 ...\n</code></pre> <p>Each category/sub-directory may have multiple Python test modules (<code>*.py</code>) which in turn may contain many test functions. The test functions themselves are always parametrized by fork (by the framework).</p> <p>A new test can be added by either:</p> <ul> <li>Adding a new <code>test_</code> python function to an existing file in any of the existing category subdirectories within <code>tests</code>.</li> <li>Creating a new source file in an existing category, and populating it with the new test function(s).</li> <li>Creating an entirely new category by adding a subdirectory in <code>tests</code> with the appropriate source files and test functions.</li> </ul>"},{"location":"writing_tests/code_standards/","title":"Code Standards","text":"<p>The Python code in the tests subdirectory <code>./tests</code> must fulfill the following checks:</p> Command Explanation 1 <code>fname8 tests</code> Spell check passes using the <code>./whitelist.txt</code> dictionary file. 2 <code>isort tests --check --diff</code> Python imports ordered and arranged according to isort's standards. 3 <code>black tests --check --diff</code> Python source must be black-formatted. 4 <code>flake8 tests</code> Python lint and spell-checked. 5 <code>mypy tests</code> Objects that provide typehints pass type-checking via mypy. 6 <code>fill</code> All tests must execute correctly. 7 <code>mkdocs build --strict</code> Documentation generated without warnings. 8 <code>pyspelling</code> Markdown spell-check. 9 <code>markdownlint-cli2</code> Markdown lint check. <p>While this seems like a long list, a correctly configured editor (see VS Code Setup) essentially assures:</p> <ol> <li>Points 2 and 3 are automatically covered.</li> <li>Points 1, 4, 5, 8 &amp; 9 are mostly covered. Additionally, if you skip type hints, they won't be checked; we can help you add these in the PR.</li> </ol> <p>These checks must pass in order for the execution-spec-tests Github Actions to pass upon pushing to remote.</p> <p>Running the checks with tox</p> <p>All these checks can be executed locally in a single command, <code>tox</code>, see Verifying Changes.</p> <p>If you need help, get in touch!</p>"},{"location":"writing_tests/exception_tests/","title":"Exception Tests","text":"<p>Exception tests are a special type of test which verify that an invalid transaction or an invalid block are correctly rejected with the expected error.</p>"},{"location":"writing_tests/exception_tests/#creating-an-exception-test","title":"Creating an Exception Test","text":"<p>To test for an exception, the test can use either of the following types from <code>ethereum_test_tools</code> library:</p> <ol> <li> <p><code>TransactionException</code>: To be added to the <code>error</code> field of the <code>Transaction</code> object, and to the <code>exception</code> field of the <code>Block</code> object that includes the transaction; this exception type is used when a transaction is invalid, and therefore when included in a block, the block is expected to be invalid too. This is different from valid transactions where an exception during EVM execution is expected (e.g. a revert, or out-of-gas), which can be included in valid blocks.</p> <p>For an example, see <code>eip3860_initcode.test_initcode.test_contract_creating_tx</code> which raises <code>TransactionException.INITCODE_SIZE_EXCEEDED</code> in the case that the initcode size exceeds the maximum allowed size.</p> </li> <li> <p><code>BlockException</code>: To be added to the <code>exception</code> field of the <code>Block</code> object; this exception type is used when a block is expected to be invalid, but the exception is related to a block property, e.g. an invalid value of the block header.</p> <p>For an example, see <code>eip4844_blobs.test_excess_blob_gas.test_invalid_static_excess_blob_gas</code> which raises <code>BlockException.INCORRECT_EXCESS_BLOB_GAS</code> in the case that the <code>excessBlobGas</code> remains unchanged but the parent blobs included are not <code>TARGET_BLOBS_PER_BLOCK</code>.</p> </li> </ol> <p>Although exceptions can be combined with the <code>|</code> operator to indicate that a test vector can throw either one of multiple exceptions, ideally the tester should aim to use only one exception per test vector, and only use multiple exceptions on the rare instance when it is not possible to know which exception will be thrown because it depends on client implementation.</p>"},{"location":"writing_tests/exception_tests/#adding-a-new-exception","title":"Adding a new exception","text":"<p>If a test requires a new exception, because none of the existing ones is suitable for the test, a new exception can be added to either <code>TransactionException</code> or <code>BlockException</code> classes.</p> <p>The new exception should be added as a new enum value, and the docstring of the attribute should be a string that describes the exception.</p> <p>The name of the exception should be unique, and should not be used by any other exception.</p>"},{"location":"writing_tests/exception_tests/#test-runner-behavior-on-exception-tests","title":"Test runner behavior on exception tests","text":"<p>When an exception is added to a test vector, the test runner must check that the transaction or block is rejected with the expected exception.</p> <p>The test runner must map the exception key to the corresponding error string that is expected to be returned by the client.</p> <p>Exception mapping are particularly important in blockchain tests because the block can be invalid for multiple reasons, and the client returning a different error can mean that a verification in the client is faulty.</p>"},{"location":"writing_tests/reference_specification/","title":"Referencing an EIP Spec Version","text":"<p>An Ethereum Improvement Proposal (ethereum/EIPs) and its SHA digest can be directly referenced within a python test module in order to check whether the test implementation could be out-dated. The test framework automatically generates tests for every module that defines a spec version. If the spec is out-of-date because the SHA of the specified file in the remote repo changes, the corresponding <code>test_eip_spec_version()</code> test fails.</p> <p> <code>&lt;-snip-&gt;</code> </p> <p>The SHA value is the output from git's <code>hash-object</code> command, for example:</p> <pre><code>git clone git@github.com:ethereum/EIPs\ngit hash-object EIPS/EIPS/eip-3651.md\n# output: d94c694c6f12291bb6626669c3e8587eef3adff1\n</code></pre> <p>and can be retrieved from the remote repo via the Github API on the command-line as following:</p> <pre><code>sudo apt install jq\ncurl -s -H \"Accept: application/vnd.github.v3+json\" \\\nhttps://api.github.com/repos/ethereum/EIPs/contents/EIPS/eip-3651.md |\\\njq -r '.sha'\n# output: d94c694c6f12291bb6626669c3e8587eef3adff1\n</code></pre>"},{"location":"writing_tests/reference_specification/#how-to-add-a-spec-version-check","title":"How to Add a Spec Version Check","text":"<p>This check accomplished by adding the following two global variables anywhere in the Python source file:</p> Variable Name Explanation <code>REFERENCE_SPEC_GIT_PATH</code> The relative path of the EIP markdown file in the ethereum/EIPs repository, e.g. \"<code>EIPS/eip-1234.md</code>\" <code>REFERENCE_SPEC_VERSION</code> The SHA hash of the latest version of the file retrieved from the Github API:<code>https://api.github.com/repos/ethereum/EIPs/contents/EIPS/eip-&lt;EIP Number&gt;.md</code>"},{"location":"writing_tests/reference_specification/#example","title":"Example","text":"<p>Here is an example from ./tests/shanghai/eip3651_warm_coinbase/test_warm_coinbase.py:</p> <pre><code>REFERENCE_SPEC_GIT_PATH = \"EIPS/eip-3651.md\"\nREFERENCE_SPEC_VERSION = \"d94c694c6f12291bb6626669c3e8587eef3adff1\"\n</code></pre> <p>The SHA digest was retrieved from here.</p>"},{"location":"writing_tests/types_of_tests/","title":"Types of tests","text":"<p>There are currently two types of tests that can be produced by a test spec:</p> <ol> <li>State Tests</li> <li>Blockchain Tests</li> </ol>"},{"location":"writing_tests/types_of_tests/#state-tests","title":"State Tests","text":"<p>State tests span a single block and, ideally, a single transaction. For example:</p> <ul> <li>Test a single opcode behavior.</li> <li>Verify opcode gas costs.</li> <li>Test interactions between multiple smart contracts.</li> <li>Test creation of smart contracts.</li> </ul>"},{"location":"writing_tests/types_of_tests/#blockchain-tests","title":"Blockchain Tests","text":"<p>Blockchain tests span multiple blocks which may or may not contain transactions and mainly focus on the block to block effects to the Ethereum state. For example:</p> <ul> <li>Verify system-level operations such as coinbase balance updates or withdrawals.</li> <li>Verify fork transitions.</li> <li>Verify blocks with invalid transactions/properties are rejected.</li> </ul>"},{"location":"writing_tests/types_of_tests/#fork-transition-tests","title":"Fork Transition Tests","text":"<p>There is a special type of blockchain test that is used to test a fork transition. It's not executed for all possible forks, rather it targets exactly the blocks at the point of transition from one evm implementation to the next. This type of test must be marked with the <code>valid_at_transition_to</code> marker, for example:</p> <pre><code>@pytest.mark.valid_at_transition_to(\"Cancun\")\ndef test_blob_type_tx_pre_fork(\n    blockchain_test: BlockchainTestFiller,\n    pre: Dict,\n    env: Environment,\n    blocks: List[Block],\n):\n    \"\"\"\n    Reject blocks with blobs before blobs fork\n    \"\"\"\n</code></pre>"},{"location":"writing_tests/verifying_changes/","title":"Verifying Changes","text":"<p>The <code>tox</code> tool can be executed locally to check that local changes won't cause Github Actions Checks to fail.</p> <p>Pre-commit</p> <p>Tox can be ran as a git pre-commit hook, see Enabling Pre-Commit Checks.</p>"},{"location":"writing_tests/verifying_changes/#executing-tox","title":"Executing <code>tox</code>","text":""},{"location":"writing_tests/verifying_changes/#prerequisites","title":"Prerequisites","text":"<pre><code>python -m venv ./venv/\nsource ./venv/bin/activate\npip install tox\n</code></pre>"},{"location":"writing_tests/verifying_changes/#execution","title":"Execution","text":"<p>Run tox, as executed in Github Actions, with:</p> <pre><code>tox run-parallel\n</code></pre> <p>or, with sequential test environment execution and verbose output as:</p> <pre><code>tox\n</code></pre> <p>This executes all the environments described in the next section.</p> <p>Tox Virtual Environment</p> <p>The checks performed by <code>tox</code> are sandboxed in their own virtual environments (which are created automatically in the <code>.tox/</code> subdirectory). These can be used to debug errors encountered during <code>tox</code> execution.</p> <p>Whilst we create a virtual environment in the code snippet above, it's only to install the tox tool itself.</p>"},{"location":"writing_tests/verifying_changes/#executing-tox-environments-individually","title":"Executing <code>tox</code> Environments Individually","text":"<p>There are three tox environments available:</p> <ol> <li><code>framework</code>: Lint and test framework and libraries related code in <code>src/</code>.</li> <li><code>tests</code>: Lint and test the test cases in <code>tests/</code> (runs <code>fill</code> on all forks deployed to mainnet).</li> <li><code>docs</code>: Lint and spell-check markdown in <code>docs/</code>; build docs.</li> </ol> <p>For targeted tox runs locally, each environment can be ran separately as described below.</p>"},{"location":"writing_tests/verifying_changes/#test-case-verification-tests","title":"Test Case Verification: <code>tests</code>","text":"<p>Verify:</p> <pre><code>tox -e tests\n</code></pre>"},{"location":"writing_tests/verifying_changes/#framework-verification-framework","title":"Framework Verification: <code>framework</code>","text":"<p>Verify:</p> <pre><code>tox -e framework\n</code></pre>"},{"location":"writing_tests/verifying_changes/#documentation-verification-docs","title":"Documentation Verification: <code>docs</code>","text":"<p>This environment runs <code>pyspelling</code> and <code>markdownlint-cli2</code> in a \"soft fail\" mode because they require external (non-python) packages. This allows developers who aren't working on documentation to execute tox locally without additional overhead. These commands are, however, ran as part of the checks in Github Actions.</p> <p>Additional, optional prerequisites:</p> <ol> <li> <p><code>pyspelling</code>:</p> <pre><code>sudo apt-get install aspell aspell-en\n</code></pre> </li> <li> <p><code>markdownlint-cli2</code>:</p> <pre><code>sudo apt install nodejs\nsudo npm install markdownlint-cli2 --global\n</code></pre> <p>Or use a specific node version using <code>nvm</code>, for example.</p> </li> </ol> <p>Verify:</p> <pre><code>tox -e docs\n</code></pre>"},{"location":"writing_tests/verifying_changes/#verifying-fixture-changes","title":"Verifying Fixture Changes","text":"<p>When writing a PR that modifies either the framework or test cases, it is important to verify that the changes do not cause any issues with the existing test cases.</p> <p>All filled fixtures contain a <code>hash</code> field in the <code>_info</code> object, which is the hash of the json string of the fixture. This hash can be used to verify that the fixture has not changed.</p> <p>The <code>hasher</code> command can be used to bulk-verify the hashes of all fixtures in a directory.</p> <p>It has the following options:</p> Flag Description <code>--files</code> / <code>-f</code> Prints a single combined hash per each JSON fixture file recursively contained in a directory. <code>--tests</code> / <code>-t</code> Prints the hash of every single test vector in every JSON fixture file recursively contained in a directory. <code>--root</code> / <code>-r</code> Prints a single combined hash for all JSON fixture files recursively contained in a directory. <p>For a quick comparison between two fixture directories, the <code>--root</code> option can be used and if the output matches, it means the fixtures in the directories are identical:</p> <pre><code>hasher --root fixtures/\nhasher --root fixtures_new/\n</code></pre> <p>If the output does not match, the <code>--files</code> option can be used to identify which files are different:</p> <pre><code>diff &lt;(hasher --files fixtures/) &lt;(hasher --files fixtures_new/)\n</code></pre> <p>And the <code>--tests</code> option can be used for an even more granular comparison:</p> <pre><code>diff &lt;(hasher --tests fixtures/) &lt;(hasher --tests fixtures_new/)\n</code></pre>"},{"location":"writing_tests/writing_a_new_test/","title":"Writing a New Test","text":""},{"location":"writing_tests/writing_a_new_test/#test-functions","title":"Test Functions","text":"<p>Every test case is defined as a python function that defines a single <code>StateTest</code> or <code>BlockchainTest</code> by using one of the <code>state_test</code> or <code>blockchain_test</code> objects made available by the framework. Test cases, respectively test modules, must fulfill the following requirements:</p> Requirement When Be decorated with validity markers If the test case is not valid for all forks Use one of <code>state_test</code> or <code>blockchain_test</code> in its function arguments Always Call the <code>state_test</code> or <code>blockchain_test</code> in its test body Always Add a reference version of the EIP spec under test Test path contains <code>eip</code>"},{"location":"writing_tests/writing_a_new_test/#specifying-which-forks-tests-are-valid-for","title":"Specifying which Forks Tests are Valid For","text":"<p>Test cases can (and it most cases should) be decorated with one or more \"validity markers\" that define which the forks the test is valid for. This is achieved by applying:</p> <ul> <li><code>pytest.mark.valid_from(FORK)</code> and/or <code>pytest.mark.valid_until(FORK)</code></li> </ul> <p>or</p> <ul> <li><code>pytest.mark.valid_at_transition_to(FORK)</code></li> </ul> <p>markers on either the test function, test class or test module level:</p> FunctionClassModule <pre><code>import pytest\n\n@pytest.mark.valid_from(\"Berlin\")\n@pytest.mark.valid_until(\"London\")\ndef test_access_list(state_test: StateTestFiller, fork: Fork):\n</code></pre> <pre><code>import pytest\n\n\n@pytest.mark.valid_from(\"Shanghai\")\nclass TestMultipleWithdrawalsSameAddress:\n</code></pre> <pre><code>import pytest\n\npytestmark = pytest.mark.valid_from(\"Shanghai\")\n</code></pre> <p>The <code>ethereum_test_forks</code> package defines the available forks and provides the following helpers that return all forks within the specified range:</p> <ul> <li>forks_from</li> <li>forks_from_until</li> </ul>"},{"location":"writing_tests/writing_a_new_test/#the-state_test-and-blockchain_test-test-function-arguments","title":"The <code>state_test</code> and <code>blockchain_test</code> Test Function Arguments","text":"<p>The test function's signature must contain exactly one of either a <code>state_test</code> or <code>blockchain_test</code> argument.</p> <p>For example, for state tests:</p> <pre><code>def test_access_list(state_test: StateTestFiller):\n</code></pre> <p>and for blockchain tests:</p> <pre><code>def test_contract_creating_tx(\n    blockchain_test: BlockchainTestFiller, fork: Fork, initcode: Initcode\n):\n</code></pre> <p>The <code>state_test</code> and <code>blockchain_test</code> objects are actually wrapper classes to the <code>StateTest</code>, respectively <code>BlockchainTest</code> objects, that once called actually instantiate a new instance of these objects and fill the test case using the <code>evm</code> tool according to the pre and post states and the transactions defined within the test.</p>"},{"location":"writing_tests/writing_a_new_test/#statetest-object","title":"<code>StateTest</code> Object","text":"<p>The <code>StateTest</code> object represents a single test vector, and contains the following attributes:</p> <ul> <li><code>env</code>: Environment object which describes the global state of the blockchain     before the test starts.</li> <li><code>pre</code>: Pre-State containing the information of all Ethereum accounts that exist     before any transaction is executed.</li> <li><code>post</code>: Post-State containing the information of all Ethereum accounts that are     created or modified after all transactions are executed.</li> <li><code>txs</code>: All transactions to be executed during test execution.</li> </ul>"},{"location":"writing_tests/writing_a_new_test/#blockchaintest-object","title":"<code>BlockchainTest</code> Object","text":"<p>The <code>BlockchainTest</code> object represents a single test vector that evaluates the Ethereum VM by attempting to append multiple blocks to the chain:</p> <ul> <li><code>pre</code>: Pre-State containing the information of all Ethereum accounts that exist     before any block is executed.</li> <li><code>post</code>: Post-State containing the information of all Ethereum accounts that are     created or modified after all blocks are executed.</li> <li><code>blocks</code>: All blocks to be appended to the blockchain during the test.</li> </ul>"},{"location":"writing_tests/writing_a_new_test/#prepost-state-of-the-test","title":"Pre/Post State of the Test","text":"<p>The <code>pre</code> and <code>post</code> states are elemental to setup and then verify the outcome of the state test.</p> <p>Both <code>pre</code> and <code>post</code> are mappings of account addresses to <code>account</code> structures (see more info).</p> <p>A single test vector can contain as many accounts in the <code>pre</code> and <code>post</code> states as required, and they can be also filled dynamically.</p> <p><code>storage</code> of an account is a key/value dictionary, and its values are integers within range of <code>[0, 2**256 - 1]</code>.</p> <p><code>txs</code> are the steps which transform the pre-state into the post-state and must perform specific actions within the accounts (smart contracts) that result in verifiable changes to the balance, nonce, and/or storage in each of them.</p> <p><code>post</code> is compared against the outcome of the client after the execution of each transaction, and any differences are considered a failure</p> <p>When designing a test, all the changes must be ideally saved into the contract's storage to be able to verify them in the post-state.</p>"},{"location":"writing_tests/writing_a_new_test/#test-transactions","title":"Test Transactions","text":"<p>Transactions can be crafted by sending them with specific <code>data</code> or to a specific account, which contains the code to be executed</p> <p>Transactions can also create more accounts, by setting the <code>to</code> field to an empty string.</p> <p>Transactions can be designed to fail, and a verification must be made that the transaction fails with the specific error that matches what is expected by the test.</p>"},{"location":"writing_tests/writing_a_new_test/#writing-code-for-the-accounts-in-the-test","title":"Writing code for the accounts in the test","text":"<p>Account bytecode can be embedded in the test accounts by adding it to the <code>code</code> field of the <code>account</code> object, or the <code>data</code> field of the <code>tx</code> object if the bytecode is meant to be treated as init code or call data.</p> <p>The code can be in either of the following formats:</p> <ul> <li><code>bytes</code> object, representing the raw opcodes in binary format.</li> <li><code>str</code>, representing an hexadecimal format of the opcodes.</li> <li><code>Code</code> compilable object.</li> </ul> <p>Currently supported built-in compilable objects are:</p> <ul> <li><code>Yul</code> object containing Yul source code.</li> </ul> <p><code>Code</code> objects can be concatenated together by using the <code>+</code> operator.</p>"},{"location":"writing_tests/writing_a_new_test/#verifying-the-accounts-post-states","title":"Verifying the Accounts' Post States","text":"<p>The state of the accounts after all blocks/transactions have been executed is the way of verifying that the execution client actually behaves like the test expects.</p> <p>During their filling process, all tests automatically verify that the accounts specified in their <code>post</code> property actually match what was returned by the transition tool.</p> <p>Within the <code>post</code> dictionary object, an account address can be:</p> <ul> <li><code>None</code>: The account will not be checked for absence or existence in the   result returned by the transition tool.</li> <li><code>Account</code> object: The test expects that this account exists and also has   properties equal to the properties specified by the <code>Account</code> object.</li> <li><code>Account.NONEXISTENT</code>: The test expects that this account does not exist in   the result returned by the transition tool, and if the account exists,   it results in error.   E.g. when the transaction creating a contract is expected to fail and the   test wants to verify that the address where the contract was supposed to be   created is indeed empty.</li> </ul>"},{"location":"writing_tests/writing_a_new_test/#the-account-object","title":"The <code>Account</code> object","text":"<p>The <code>Account</code> object is used to specify the properties of an account to be verified in the post state.</p> <p>The python representation can be found in src/ethereum_test_tools/common/types.py.</p> <p>It can verify the following properties of an account:</p> <ul> <li> <p><code>nonce</code>: the scalar value equal to a) the number of transactions sent by   an Externally Owned Account, b) the amount of contracts created by a contract.</p> </li> <li> <p><code>balance</code>: the amount of Wei (10<sup>-18</sup> Eth) the account has.  </p> </li> <li> <p><code>code</code>: Bytecode contained by the account. To verify that an account contains   no code, this property needs to be set to \"0x\" or \"\".</p> </li> </ul> <p>It is not recommended to verify Yul compiled code in the output account,   because the bytecode can change from version to version.</p> <ul> <li><code>storage</code>: Storage within the account represented as a <code>dict</code> object.   All storage keys that are expected to be set must be specified, and if a   key is skipped, it is implied that its expected value is zero.   Setting this property to <code>{}</code> (empty <code>dict</code>), means that all the keys in the   account must be unset (equal to zero).</li> </ul> <p>All account's properties are optional, and they can be skipped or set to <code>None</code>, which means that no check will be performed on that specific account property.</p>"},{"location":"writing_tests/writing_a_new_test/#verifying-correctness-of-the-new-test","title":"Verifying correctness of the new test","text":"<p>A well written test performs a single verification output at a time.</p> <p>A verification output can be a single storage slot, the balance of an account, or a newly created contract.</p> <p>It is not recommended to use balance changes to verify test correctness, as it can be easily affected by gas cost changes in future EIPs.</p> <p>The best way to verify a transaction/block execution outcome is to check its storage.</p> <p>A test can be written as a negative verification. E.g. a contract is not created, or a transaction fails to execute or runs out of gas.</p> <p>This kind of verification must be carefully crafted because it is possible to end up having a false positive result, which means that the test passed but the intended verification was never made.</p> <p>To avoid these scenarios, it is important to have a separate verification to check that test is effective. E.g. when a transaction is supposed to fail, it is necessary to check that the failure error is actually the one expected by the test.</p>"},{"location":"writing_tests/writing_a_new_test/#failing-or-invalid-transactions","title":"Failing or invalid transactions","text":"<p>Transactions included in a StateTest are expected to be intrinsically valid, i.e. the account sending the transaction must have enough funds to cover the gas costs, the max fee of the transaction must be equal or higher than the base fee of the block, etc.</p> <p>An intrinsically valid transaction can still revert during its execution.</p> <p>Blocks in a BlockchainTest can contain intrinsically invalid transactions but in this case the block is expected to be completely rejected, along with all transactions in it, including other valid transactions.</p>"}]}